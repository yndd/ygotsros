/*
Package ygotsros is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.20.0/genutil/names.go
using the following YANG input files:
	- nokia/YANG/nokia-combined/nokia-conf.yang
Imported modules were sourced from:
	- nokia/YANG/...
*/
package ygotsros

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NokiaConf_Configure_Groups_Group_Router_Bgp_ExtendedNhEncoding represents the /nokia-conf/configure/groups/group/router/bgp/extended-nh-encoding YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_ExtendedNhEncoding struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	VpnIpv4   *bool `path:"vpn-ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_ExtendedNhEncoding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_ExtendedNhEncoding) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_ExtendedNhEncoding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_ExtendedNhEncoding) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_ExtendedNhEncoding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_ExtendedNhEncoding) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_ExtendedNhEncoding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_ExtendedNhEncoding) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_ExtendedNhEncoding
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_ExtendedNhEncoding) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_ExtendedNhEncoding) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_ExtendedNhEncoding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_ExtendedNhEncoding) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_ExtendedNhEncoding) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_ExtendedNhEncoding.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_ExtendedNhEncoding) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Family represents the /nokia-conf/configure/groups/group/router/bgp/family YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Family struct {
	BgpLs        *bool `path:"bgp-ls" module:"nokia-conf"`
	Evpn         *bool `path:"evpn" module:"nokia-conf"`
	FlowIpv4     *bool `path:"flow-ipv4" module:"nokia-conf"`
	FlowIpv6     *bool `path:"flow-ipv6" module:"nokia-conf"`
	Ipv4         *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6         *bool `path:"ipv6" module:"nokia-conf"`
	L2Vpn        *bool `path:"l2-vpn" module:"nokia-conf"`
	LabelIpv4    *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6    *bool `path:"label-ipv6" module:"nokia-conf"`
	McastIpv4    *bool `path:"mcast-ipv4" module:"nokia-conf"`
	McastIpv6    *bool `path:"mcast-ipv6" module:"nokia-conf"`
	McastVpnIpv4 *bool `path:"mcast-vpn-ipv4" module:"nokia-conf"`
	McastVpnIpv6 *bool `path:"mcast-vpn-ipv6" module:"nokia-conf"`
	MdtSafi      *bool `path:"mdt-safi" module:"nokia-conf"`
	MsPw         *bool `path:"ms-pw" module:"nokia-conf"`
	MvpnIpv4     *bool `path:"mvpn-ipv4" module:"nokia-conf"`
	MvpnIpv6     *bool `path:"mvpn-ipv6" module:"nokia-conf"`
	RouteTarget  *bool `path:"route-target" module:"nokia-conf"`
	SrPolicyIpv4 *bool `path:"sr-policy-ipv4" module:"nokia-conf"`
	SrPolicyIpv6 *bool `path:"sr-policy-ipv6" module:"nokia-conf"`
	VpnIpv4      *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6      *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Family) IsYANGGoStruct() {}

// GetBgpLs retrieves the value of the leaf BgpLs from the NokiaConf_Configure_Groups_Group_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpLs is set, it can
// safely use t.GetBgpLs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpLs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Family) GetBgpLs() bool {
	if t == nil || t.BgpLs == nil {
		return false
	}
	return *t.BgpLs
}

// GetEvpn retrieves the value of the leaf Evpn from the NokiaConf_Configure_Groups_Group_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Evpn is set, it can
// safely use t.GetEvpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Evpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Family) GetEvpn() bool {
	if t == nil || t.Evpn == nil {
		return false
	}
	return *t.Evpn
}

// GetFlowIpv4 retrieves the value of the leaf FlowIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowIpv4 is set, it can
// safely use t.GetFlowIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Family) GetFlowIpv4() bool {
	if t == nil || t.FlowIpv4 == nil {
		return false
	}
	return *t.FlowIpv4
}

// GetFlowIpv6 retrieves the value of the leaf FlowIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowIpv6 is set, it can
// safely use t.GetFlowIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Family) GetFlowIpv6() bool {
	if t == nil || t.FlowIpv6 == nil {
		return false
	}
	return *t.FlowIpv6
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Family) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return true
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Family) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetL2Vpn retrieves the value of the leaf L2Vpn from the NokiaConf_Configure_Groups_Group_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2Vpn is set, it can
// safely use t.GetL2Vpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2Vpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Family) GetL2Vpn() bool {
	if t == nil || t.L2Vpn == nil {
		return false
	}
	return *t.L2Vpn
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Family) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Family) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetMcastIpv4 retrieves the value of the leaf McastIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastIpv4 is set, it can
// safely use t.GetMcastIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Family) GetMcastIpv4() bool {
	if t == nil || t.McastIpv4 == nil {
		return false
	}
	return *t.McastIpv4
}

// GetMcastIpv6 retrieves the value of the leaf McastIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastIpv6 is set, it can
// safely use t.GetMcastIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Family) GetMcastIpv6() bool {
	if t == nil || t.McastIpv6 == nil {
		return false
	}
	return *t.McastIpv6
}

// GetMcastVpnIpv4 retrieves the value of the leaf McastVpnIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastVpnIpv4 is set, it can
// safely use t.GetMcastVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastVpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Family) GetMcastVpnIpv4() bool {
	if t == nil || t.McastVpnIpv4 == nil {
		return false
	}
	return *t.McastVpnIpv4
}

// GetMcastVpnIpv6 retrieves the value of the leaf McastVpnIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastVpnIpv6 is set, it can
// safely use t.GetMcastVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastVpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Family) GetMcastVpnIpv6() bool {
	if t == nil || t.McastVpnIpv6 == nil {
		return false
	}
	return *t.McastVpnIpv6
}

// GetMdtSafi retrieves the value of the leaf MdtSafi from the NokiaConf_Configure_Groups_Group_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdtSafi is set, it can
// safely use t.GetMdtSafi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdtSafi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Family) GetMdtSafi() bool {
	if t == nil || t.MdtSafi == nil {
		return false
	}
	return *t.MdtSafi
}

// GetMsPw retrieves the value of the leaf MsPw from the NokiaConf_Configure_Groups_Group_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MsPw is set, it can
// safely use t.GetMsPw() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MsPw == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Family) GetMsPw() bool {
	if t == nil || t.MsPw == nil {
		return false
	}
	return *t.MsPw
}

// GetMvpnIpv4 retrieves the value of the leaf MvpnIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MvpnIpv4 is set, it can
// safely use t.GetMvpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MvpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Family) GetMvpnIpv4() bool {
	if t == nil || t.MvpnIpv4 == nil {
		return false
	}
	return *t.MvpnIpv4
}

// GetMvpnIpv6 retrieves the value of the leaf MvpnIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MvpnIpv6 is set, it can
// safely use t.GetMvpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MvpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Family) GetMvpnIpv6() bool {
	if t == nil || t.MvpnIpv6 == nil {
		return false
	}
	return *t.MvpnIpv6
}

// GetRouteTarget retrieves the value of the leaf RouteTarget from the NokiaConf_Configure_Groups_Group_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTarget is set, it can
// safely use t.GetRouteTarget() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTarget == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Family) GetRouteTarget() bool {
	if t == nil || t.RouteTarget == nil {
		return false
	}
	return *t.RouteTarget
}

// GetSrPolicyIpv4 retrieves the value of the leaf SrPolicyIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrPolicyIpv4 is set, it can
// safely use t.GetSrPolicyIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrPolicyIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Family) GetSrPolicyIpv4() bool {
	if t == nil || t.SrPolicyIpv4 == nil {
		return false
	}
	return *t.SrPolicyIpv4
}

// GetSrPolicyIpv6 retrieves the value of the leaf SrPolicyIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrPolicyIpv6 is set, it can
// safely use t.GetSrPolicyIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrPolicyIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Family) GetSrPolicyIpv6() bool {
	if t == nil || t.SrPolicyIpv6 == nil {
		return false
	}
	return *t.SrPolicyIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Family) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Family) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BgpLs == nil {
		var v bool = false
		t.BgpLs = &v
	}
	if t.Evpn == nil {
		var v bool = false
		t.Evpn = &v
	}
	if t.FlowIpv4 == nil {
		var v bool = false
		t.FlowIpv4 = &v
	}
	if t.FlowIpv6 == nil {
		var v bool = false
		t.FlowIpv6 = &v
	}
	if t.Ipv4 == nil {
		var v bool = true
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.L2Vpn == nil {
		var v bool = false
		t.L2Vpn = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.McastIpv4 == nil {
		var v bool = false
		t.McastIpv4 = &v
	}
	if t.McastIpv6 == nil {
		var v bool = false
		t.McastIpv6 = &v
	}
	if t.McastVpnIpv4 == nil {
		var v bool = false
		t.McastVpnIpv4 = &v
	}
	if t.McastVpnIpv6 == nil {
		var v bool = false
		t.McastVpnIpv6 = &v
	}
	if t.MdtSafi == nil {
		var v bool = false
		t.MdtSafi = &v
	}
	if t.MsPw == nil {
		var v bool = false
		t.MsPw = &v
	}
	if t.MvpnIpv4 == nil {
		var v bool = false
		t.MvpnIpv4 = &v
	}
	if t.MvpnIpv6 == nil {
		var v bool = false
		t.MvpnIpv6 = &v
	}
	if t.RouteTarget == nil {
		var v bool = false
		t.RouteTarget = &v
	}
	if t.SrPolicyIpv4 == nil {
		var v bool = false
		t.SrPolicyIpv4 = &v
	}
	if t.SrPolicyIpv6 == nil {
		var v bool = false
		t.SrPolicyIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Family.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Flowspec represents the /nokia-conf/configure/groups/group/router/bgp/flowspec YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Flowspec struct {
	ValidateDestPrefix *bool `path:"validate-dest-prefix" module:"nokia-conf"`
	ValidateRedirectIp *bool `path:"validate-redirect-ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Flowspec implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Flowspec) IsYANGGoStruct() {}

// GetValidateDestPrefix retrieves the value of the leaf ValidateDestPrefix from the NokiaConf_Configure_Groups_Group_Router_Bgp_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidateDestPrefix is set, it can
// safely use t.GetValidateDestPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidateDestPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Flowspec) GetValidateDestPrefix() bool {
	if t == nil || t.ValidateDestPrefix == nil {
		return false
	}
	return *t.ValidateDestPrefix
}

// GetValidateRedirectIp retrieves the value of the leaf ValidateRedirectIp from the NokiaConf_Configure_Groups_Group_Router_Bgp_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidateRedirectIp is set, it can
// safely use t.GetValidateRedirectIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidateRedirectIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Flowspec) GetValidateRedirectIp() bool {
	if t == nil || t.ValidateRedirectIp == nil {
		return false
	}
	return *t.ValidateRedirectIp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Flowspec
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Flowspec) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ValidateDestPrefix == nil {
		var v bool = false
		t.ValidateDestPrefix = &v
	}
	if t.ValidateRedirectIp == nil {
		var v bool = false
		t.ValidateRedirectIp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Flowspec) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Flowspec"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Flowspec) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Flowspec) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Flowspec.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Flowspec) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart represents the /nokia-conf/configure/groups/group/router/bgp/graceful-restart YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart struct {
	GrNotification  *bool                                                                  `path:"gr-notification" module:"nokia-conf"`
	LongLived       *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived `path:"long-lived" module:"nokia-conf" yangPresence:"true"`
	RestartTime     *uint32                                                                `path:"restart-time" module:"nokia-conf"`
	StaleRoutesTime *uint32                                                                `path:"stale-routes-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart) IsYANGGoStruct() {}

// GetOrCreateLongLived retrieves the value of the LongLived field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart) GetOrCreateLongLived() *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived {
	if t.LongLived != nil {
		return t.LongLived
	}
	t.LongLived = &NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived{}
	return t.LongLived
}

// GetLongLived returns the value of the LongLived struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart. If the receiver or the field LongLived is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart) GetLongLived() *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived {
	if t != nil && t.LongLived != nil {
		return t.LongLived
	}
	return nil
}

// GetGrNotification retrieves the value of the leaf GrNotification from the NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GrNotification is set, it can
// safely use t.GetGrNotification() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GrNotification == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart) GetGrNotification() bool {
	if t == nil || t.GrNotification == nil {
		return false
	}
	return *t.GrNotification
}

// GetRestartTime retrieves the value of the leaf RestartTime from the NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RestartTime is set, it can
// safely use t.GetRestartTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RestartTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart) GetRestartTime() uint32 {
	if t == nil || t.RestartTime == nil {
		return 120
	}
	return *t.RestartTime
}

// GetStaleRoutesTime retrieves the value of the leaf StaleRoutesTime from the NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaleRoutesTime is set, it can
// safely use t.GetStaleRoutesTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaleRoutesTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart) GetStaleRoutesTime() uint32 {
	if t == nil || t.StaleRoutesTime == nil {
		return 360
	}
	return *t.StaleRoutesTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.GrNotification == nil {
		var v bool = false
		t.GrNotification = &v
	}
	if t.RestartTime == nil {
		var v uint32 = 120
		t.RestartTime = &v
	}
	if t.StaleRoutesTime == nil {
		var v uint32 = 360
		t.StaleRoutesTime = &v
	}
	t.LongLived.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived represents the /nokia-conf/configure/groups/group/router/bgp/graceful-restart/long-lived YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived struct {
	AdvertiseStaleToAllNeighbors *bool                                                                                                                                                                           `path:"advertise-stale-to-all-neighbors" module:"nokia-conf"`
	AdvertisedStaleTime          *uint32                                                                                                                                                                         `path:"advertised-stale-time" module:"nokia-conf"`
	Family                       map[NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family `path:"family" module:"nokia-conf"`
	ForwardingBitsSet            E_NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_ForwardingBitsSet                                                                                       `path:"forwarding-bits-set" module:"nokia-conf"`
	HelperOverrideRestartTime    *uint32                                                                                                                                                                         `path:"helper-override-restart-time" module:"nokia-conf"`
	HelperOverrideStaleTime      *uint32                                                                                                                                                                         `path:"helper-override-stale-time" module:"nokia-conf"`
	WithoutNoExport              *bool                                                                                                                                                                           `path:"without-no-export" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived) IsYANGGoStruct() {}

// NewFamily creates a new entry in the Family list of the
// NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived) NewFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family_FamilyType_Union) (*NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family)
	}

	key := FamilyType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Family[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Family", key)
	}

	t.Family[key] = &NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family{
		FamilyType: FamilyType,
	}

	return t.Family[key], nil
}

// RenameFamily renames an entry in the list Family within
// the NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived) RenameFamily(oldK, newK NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family_FamilyType_Union) error {
	if _, ok := t.Family[newK]; ok {
		return fmt.Errorf("key %v already exists in Family", newK)
	}

	e, ok := t.Family[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Family", oldK)
	}
	e.FamilyType = newK

	t.Family[newK] = e
	delete(t.Family, oldK)
	return nil
}

// GetOrCreateFamily retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived) GetOrCreateFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family_FamilyType_Union) *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family {

	key := FamilyType

	if v, ok := t.Family[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFamily(FamilyType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFamily got unexpected error: %v", err))
	}
	return v
}

// GetFamily retrieves the value with the specified key from
// the Family map field of NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived) GetFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family_FamilyType_Union) *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family {

	if t == nil {
		return nil
	}

	key := FamilyType

	if lm, ok := t.Family[key]; ok {
		return lm
	}
	return nil
}

// DeleteFamily deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived) DeleteFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family_FamilyType_Union) {
	key := FamilyType

	delete(t.Family, key)
}

// AppendFamily appends the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family struct to the
// list Family of NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived) AppendFamily(v *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family) error {
	key := v.FamilyType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family)
	}

	if _, ok := t.Family[key]; ok {
		return fmt.Errorf("duplicate key for list Family %v", key)
	}

	t.Family[key] = v
	return nil
}

// GetAdvertiseStaleToAllNeighbors retrieves the value of the leaf AdvertiseStaleToAllNeighbors from the NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseStaleToAllNeighbors is set, it can
// safely use t.GetAdvertiseStaleToAllNeighbors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseStaleToAllNeighbors == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived) GetAdvertiseStaleToAllNeighbors() bool {
	if t == nil || t.AdvertiseStaleToAllNeighbors == nil {
		return false
	}
	return *t.AdvertiseStaleToAllNeighbors
}

// GetAdvertisedStaleTime retrieves the value of the leaf AdvertisedStaleTime from the NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisedStaleTime is set, it can
// safely use t.GetAdvertisedStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisedStaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived) GetAdvertisedStaleTime() uint32 {
	if t == nil || t.AdvertisedStaleTime == nil {
		return 86400
	}
	return *t.AdvertisedStaleTime
}

// GetForwardingBitsSet retrieves the value of the leaf ForwardingBitsSet from the NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingBitsSet is set, it can
// safely use t.GetForwardingBitsSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingBitsSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived) GetForwardingBitsSet() E_NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_ForwardingBitsSet {
	if t == nil || t.ForwardingBitsSet == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_ForwardingBitsSet_none
	}
	return t.ForwardingBitsSet
}

// GetHelperOverrideRestartTime retrieves the value of the leaf HelperOverrideRestartTime from the NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperOverrideRestartTime is set, it can
// safely use t.GetHelperOverrideRestartTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperOverrideRestartTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived) GetHelperOverrideRestartTime() uint32 {
	if t == nil || t.HelperOverrideRestartTime == nil {
		return 0
	}
	return *t.HelperOverrideRestartTime
}

// GetHelperOverrideStaleTime retrieves the value of the leaf HelperOverrideStaleTime from the NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperOverrideStaleTime is set, it can
// safely use t.GetHelperOverrideStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperOverrideStaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived) GetHelperOverrideStaleTime() uint32 {
	if t == nil || t.HelperOverrideStaleTime == nil {
		return 0
	}
	return *t.HelperOverrideStaleTime
}

// GetWithoutNoExport retrieves the value of the leaf WithoutNoExport from the NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WithoutNoExport is set, it can
// safely use t.GetWithoutNoExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WithoutNoExport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived) GetWithoutNoExport() bool {
	if t == nil || t.WithoutNoExport == nil {
		return false
	}
	return *t.WithoutNoExport
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertiseStaleToAllNeighbors == nil {
		var v bool = false
		t.AdvertiseStaleToAllNeighbors = &v
	}
	if t.AdvertisedStaleTime == nil {
		var v uint32 = 86400
		t.AdvertisedStaleTime = &v
	}
	if t.ForwardingBitsSet == 0 {
		t.ForwardingBitsSet = NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_ForwardingBitsSet_none
	}
	if t.WithoutNoExport == nil {
		var v bool = false
		t.WithoutNoExport = &v
	}
	for _, e := range t.Family {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family represents the /nokia-conf/configure/groups/group/router/bgp/graceful-restart/long-lived/family YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family struct {
	AdvertisedStaleTime     *uint32                                                                                       `path:"advertised-stale-time" module:"nokia-conf"`
	FamilyType              NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family_FamilyType_Union `path:"family-type" module:"nokia-conf"`
	HelperOverrideStaleTime *uint32                                                                                       `path:"helper-override-stale-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family) IsYANGGoStruct() {
}

// GetAdvertisedStaleTime retrieves the value of the leaf AdvertisedStaleTime from the NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisedStaleTime is set, it can
// safely use t.GetAdvertisedStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisedStaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family) GetAdvertisedStaleTime() uint32 {
	if t == nil || t.AdvertisedStaleTime == nil {
		return 86400
	}
	return *t.AdvertisedStaleTime
}

// GetFamilyType retrieves the value of the leaf FamilyType from the NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FamilyType is set, it can
// safely use t.GetFamilyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FamilyType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family) GetFamilyType() NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family_FamilyType_Union {
	if t == nil || t.FamilyType == nil {
		return nil
	}
	return t.FamilyType
}

// GetHelperOverrideStaleTime retrieves the value of the leaf HelperOverrideStaleTime from the NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperOverrideStaleTime is set, it can
// safely use t.GetHelperOverrideStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperOverrideStaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family) GetHelperOverrideStaleTime() uint32 {
	if t == nil || t.HelperOverrideStaleTime == nil {
		return 0
	}
	return *t.HelperOverrideStaleTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertisedStaleTime == nil {
		var v uint32 = 86400
		t.AdvertisedStaleTime = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"family-type": t.FamilyType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_GracefulRestart_LongLived_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group represents the /nokia-conf/configure/groups/group/router/bgp/group YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group struct {
	AddPaths                          *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths                                                                                   `path:"add-paths" module:"nokia-conf" yangPresence:"true"`
	AdminState                        E_NokiaTypesSros_AdminState                                                                                                                   `path:"admin-state" module:"nokia-conf"`
	AdvertiseInactive                 *bool                                                                                                                                         `path:"advertise-inactive" module:"nokia-conf"`
	AdvertiseIpv6NextHops             *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AdvertiseIpv6NextHops                                                                      `path:"advertise-ipv6-next-hops" module:"nokia-conf" yangPresence:"true"`
	AggregatorIdZero                  *bool                                                                                                                                         `path:"aggregator-id-zero" module:"nokia-conf"`
	Aigp                              *bool                                                                                                                                         `path:"aigp" module:"nokia-conf"`
	AsOverride                        *bool                                                                                                                                         `path:"as-override" module:"nokia-conf"`
	Asn_4Byte                         *bool                                                                                                                                         `path:"asn-4-byte" module:"nokia-conf"`
	AuthenticationKey                 *string                                                                                                                                       `path:"authentication-key" module:"nokia-conf"`
	AuthenticationKeychain            *string                                                                                                                                       `path:"authentication-keychain" module:"nokia-conf"`
	BfdLiveness                       *bool                                                                                                                                         `path:"bfd-liveness" module:"nokia-conf"`
	BlockPrefixSid                    *bool                                                                                                                                         `path:"block-prefix-sid" module:"nokia-conf"`
	CapabilityNegotiation             *bool                                                                                                                                         `path:"capability-negotiation" module:"nokia-conf"`
	ClientReflect                     *bool                                                                                                                                         `path:"client-reflect" module:"nokia-conf"`
	Cluster                           *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Cluster                                                                                    `path:"cluster" module:"nokia-conf"`
	ConnectRetry                      *int32                                                                                                                                        `path:"connect-retry" module:"nokia-conf"`
	DampPeerOscillations              *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations                                                                       `path:"damp-peer-oscillations" module:"nokia-conf" yangPresence:"true"`
	Damping                           *bool                                                                                                                                         `path:"damping" module:"nokia-conf"`
	DefRecvEvpnEncap                  E_NokiaTypesBgp_Encap                                                                                                                         `path:"def-recv-evpn-encap" module:"nokia-conf"`
	DefaultLabelPreference            *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultLabelPreference                                                                     `path:"default-label-preference" module:"nokia-conf"`
	DefaultPreference                 *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultPreference                                                                          `path:"default-preference" module:"nokia-conf"`
	DefaultRouteTarget                *bool                                                                                                                                         `path:"default-route-target" module:"nokia-conf"`
	Description                       *string                                                                                                                                       `path:"description" module:"nokia-conf"`
	DynamicNeighbor                   *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor                                                                            `path:"dynamic-neighbor" module:"nokia-conf"`
	DynamicNeighborLimit              *uint32                                                                                                                                       `path:"dynamic-neighbor-limit" module:"nokia-conf"`
	EbgpDefaultRejectPolicy           *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EbgpDefaultRejectPolicy                                                                    `path:"ebgp-default-reject-policy" module:"nokia-conf" yangPresence:"true"`
	EgressEngineering                 *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EgressEngineering                                                                          `path:"egress-engineering" module:"nokia-conf" yangPresence:"true"`
	EgressPeerEngineeringLabelUnicast *bool                                                                                                                                         `path:"egress-peer-engineering-label-unicast" module:"nokia-conf"`
	EnforceFirstAs                    *bool                                                                                                                                         `path:"enforce-first-as" module:"nokia-conf"`
	ErrorHandling                     *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ErrorHandling                                                                              `path:"error-handling" module:"nokia-conf"`
	Export                            *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Export                                                                                     `path:"export" module:"nokia-conf" yangPresence:"true"`
	ExtendedNhEncoding                *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ExtendedNhEncoding                                                                         `path:"extended-nh-encoding" module:"nokia-conf" yangPresence:"true"`
	Family                            *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family                                                                                     `path:"family" module:"nokia-conf" yangPresence:"true"`
	FastExternalFailover              *bool                                                                                                                                         `path:"fast-external-failover" module:"nokia-conf"`
	GracefulRestart                   *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart                                                                            `path:"graceful-restart" module:"nokia-conf" yangPresence:"true"`
	GroupName                         *string                                                                                                                                       `path:"group-name" module:"nokia-conf"`
	HoldTime                          *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_HoldTime                                                                                   `path:"hold-time" module:"nokia-conf"`
	Import                            *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Import                                                                                     `path:"import" module:"nokia-conf" yangPresence:"true"`
	InitialSendDelayZero              *bool                                                                                                                                         `path:"initial-send-delay-zero" module:"nokia-conf"`
	Keepalive                         *int32                                                                                                                                        `path:"keepalive" module:"nokia-conf"`
	LabelPreference                   *uint32                                                                                                                                       `path:"label-preference" module:"nokia-conf"`
	LinkBandwidth                     *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth                                                                              `path:"link-bandwidth" module:"nokia-conf"`
	LocalAddress                      *string                                                                                                                                       `path:"local-address" module:"nokia-conf"`
	LocalAs                           *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LocalAs                                                                                    `path:"local-as" module:"nokia-conf"`
	LocalPreference                   *int64                                                                                                                                        `path:"local-preference" module:"nokia-conf"`
	LoopDetect                        E_NokiaTypesBgp_LoopDetect                                                                                                                    `path:"loop-detect" module:"nokia-conf"`
	LoopDetectThreshold               *uint32                                                                                                                                       `path:"loop-detect-threshold" module:"nokia-conf"`
	MedOut                            NokiaConf_Configure_Groups_Group_Router_Bgp_Group_MedOut_Union                                                                                `path:"med-out" module:"nokia-conf"`
	MinRouteAdvertisement             *int16                                                                                                                                        `path:"min-route-advertisement" module:"nokia-conf"`
	Monitor                           *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor                                                                                    `path:"monitor" module:"nokia-conf" yangPresence:"true"`
	Multihop                          *int32                                                                                                                                        `path:"multihop" module:"nokia-conf"`
	MultipathEligible                 *bool                                                                                                                                         `path:"multipath-eligible" module:"nokia-conf"`
	NextHopSelf                       *bool                                                                                                                                         `path:"next-hop-self" module:"nokia-conf"`
	NextHopUnchanged                  *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_NextHopUnchanged                                                                           `path:"next-hop-unchanged" module:"nokia-conf"`
	OriginValidation                  *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OriginValidation                                                                           `path:"origin-validation" module:"nokia-conf"`
	OutboundRouteFiltering            *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering                                                                     `path:"outbound-route-filtering" module:"nokia-conf" yangPresence:"true"`
	Passive                           *bool                                                                                                                                         `path:"passive" module:"nokia-conf"`
	PathMtuDiscovery                  *bool                                                                                                                                         `path:"path-mtu-discovery" module:"nokia-conf"`
	PeerAs                            *uint32                                                                                                                                       `path:"peer-as" module:"nokia-conf"`
	PeerIpTracking                    *bool                                                                                                                                         `path:"peer-ip-tracking" module:"nokia-conf"`
	Preference                        *uint32                                                                                                                                       `path:"preference" module:"nokia-conf"`
	PrefixLimit                       map[NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit_Family_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit `path:"prefix-limit" module:"nokia-conf"`
	RemovePrivate                     *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_RemovePrivate                                                                              `path:"remove-private" module:"nokia-conf" yangPresence:"true"`
	SegmentRoutingV6                  *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6                                                                           `path:"segment-routing-v6" module:"nokia-conf" yangPresence:"true"`
	SelectiveLabelIpv4Install         *bool                                                                                                                                         `path:"selective-label-ipv4-install" module:"nokia-conf"`
	SendCommunities                   *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendCommunities                                                                            `path:"send-communities" module:"nokia-conf"`
	SendDefault                       *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendDefault                                                                                `path:"send-default" module:"nokia-conf" yangPresence:"true"`
	SplitHorizon                      *bool                                                                                                                                         `path:"split-horizon" module:"nokia-conf"`
	StaticGroup                       *bool                                                                                                                                         `path:"static-group" module:"nokia-conf"`
	TcpMss                            NokiaConf_Configure_Groups_Group_Router_Bgp_Group_TcpMss_Union                                                                                `path:"tcp-mss" module:"nokia-conf"`
	ThirdPartyNexthop                 *bool                                                                                                                                         `path:"third-party-nexthop" module:"nokia-conf"`
	TtlSecurity                       *uint32                                                                                                                                       `path:"ttl-security" module:"nokia-conf"`
	Type                              E_NokiaTypesBgp_PeerType                                                                                                                      `path:"type" module:"nokia-conf"`
	VpnApplyExport                    *bool                                                                                                                                         `path:"vpn-apply-export" module:"nokia-conf"`
	VpnApplyImport                    *bool                                                                                                                                         `path:"vpn-apply-import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group) IsYANGGoStruct() {}

// NewPrefixLimit creates a new entry in the PrefixLimit list of the
// NokiaConf_Configure_Groups_Group_Router_Bgp_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) NewPrefixLimit(Family NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit_Family_Union) (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixLimit == nil {
		t.PrefixLimit = make(map[NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit_Family_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit)
	}

	key := Family

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrefixLimit[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrefixLimit", key)
	}

	t.PrefixLimit[key] = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit{
		Family: Family,
	}

	return t.PrefixLimit[key], nil
}

// RenamePrefixLimit renames an entry in the list PrefixLimit within
// the NokiaConf_Configure_Groups_Group_Router_Bgp_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) RenamePrefixLimit(oldK, newK NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit_Family_Union) error {
	if _, ok := t.PrefixLimit[newK]; ok {
		return fmt.Errorf("key %v already exists in PrefixLimit", newK)
	}

	e, ok := t.PrefixLimit[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrefixLimit", oldK)
	}
	e.Family = newK

	t.PrefixLimit[newK] = e
	delete(t.PrefixLimit, oldK)
	return nil
}

// GetOrCreatePrefixLimit retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetOrCreatePrefixLimit(Family NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit_Family_Union) *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit {

	key := Family

	if v, ok := t.PrefixLimit[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefixLimit(Family)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefixLimit got unexpected error: %v", err))
	}
	return v
}

// GetPrefixLimit retrieves the value with the specified key from
// the PrefixLimit map field of NokiaConf_Configure_Groups_Group_Router_Bgp_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetPrefixLimit(Family NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit_Family_Union) *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit {

	if t == nil {
		return nil
	}

	key := Family

	if lm, ok := t.PrefixLimit[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefixLimit deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) DeletePrefixLimit(Family NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit_Family_Union) {
	key := Family

	delete(t.PrefixLimit, key)
}

// AppendPrefixLimit appends the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit struct to the
// list PrefixLimit of NokiaConf_Configure_Groups_Group_Router_Bgp_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) AppendPrefixLimit(v *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit) error {
	key := v.Family

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixLimit == nil {
		t.PrefixLimit = make(map[NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit_Family_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit)
	}

	if _, ok := t.PrefixLimit[key]; ok {
		return fmt.Errorf("duplicate key for list PrefixLimit %v", key)
	}

	t.PrefixLimit[key] = v
	return nil
}

// GetOrCreateAddPaths retrieves the value of the AddPaths field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetOrCreateAddPaths() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths {
	if t.AddPaths != nil {
		return t.AddPaths
	}
	t.AddPaths = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths{}
	return t.AddPaths
}

// GetOrCreateAdvertiseIpv6NextHops retrieves the value of the AdvertiseIpv6NextHops field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetOrCreateAdvertiseIpv6NextHops() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AdvertiseIpv6NextHops {
	if t.AdvertiseIpv6NextHops != nil {
		return t.AdvertiseIpv6NextHops
	}
	t.AdvertiseIpv6NextHops = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AdvertiseIpv6NextHops{}
	return t.AdvertiseIpv6NextHops
}

// GetOrCreateCluster retrieves the value of the Cluster field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetOrCreateCluster() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Cluster {
	if t.Cluster != nil {
		return t.Cluster
	}
	t.Cluster = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Cluster{}
	return t.Cluster
}

// GetOrCreateDampPeerOscillations retrieves the value of the DampPeerOscillations field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetOrCreateDampPeerOscillations() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations {
	if t.DampPeerOscillations != nil {
		return t.DampPeerOscillations
	}
	t.DampPeerOscillations = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations{}
	return t.DampPeerOscillations
}

// GetOrCreateDefaultLabelPreference retrieves the value of the DefaultLabelPreference field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetOrCreateDefaultLabelPreference() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultLabelPreference {
	if t.DefaultLabelPreference != nil {
		return t.DefaultLabelPreference
	}
	t.DefaultLabelPreference = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultLabelPreference{}
	return t.DefaultLabelPreference
}

// GetOrCreateDefaultPreference retrieves the value of the DefaultPreference field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetOrCreateDefaultPreference() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultPreference {
	if t.DefaultPreference != nil {
		return t.DefaultPreference
	}
	t.DefaultPreference = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultPreference{}
	return t.DefaultPreference
}

// GetOrCreateDynamicNeighbor retrieves the value of the DynamicNeighbor field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetOrCreateDynamicNeighbor() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor {
	if t.DynamicNeighbor != nil {
		return t.DynamicNeighbor
	}
	t.DynamicNeighbor = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor{}
	return t.DynamicNeighbor
}

// GetOrCreateEbgpDefaultRejectPolicy retrieves the value of the EbgpDefaultRejectPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetOrCreateEbgpDefaultRejectPolicy() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EbgpDefaultRejectPolicy {
	if t.EbgpDefaultRejectPolicy != nil {
		return t.EbgpDefaultRejectPolicy
	}
	t.EbgpDefaultRejectPolicy = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EbgpDefaultRejectPolicy{}
	return t.EbgpDefaultRejectPolicy
}

// GetOrCreateEgressEngineering retrieves the value of the EgressEngineering field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetOrCreateEgressEngineering() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EgressEngineering {
	if t.EgressEngineering != nil {
		return t.EgressEngineering
	}
	t.EgressEngineering = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EgressEngineering{}
	return t.EgressEngineering
}

// GetOrCreateErrorHandling retrieves the value of the ErrorHandling field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetOrCreateErrorHandling() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ErrorHandling {
	if t.ErrorHandling != nil {
		return t.ErrorHandling
	}
	t.ErrorHandling = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ErrorHandling{}
	return t.ErrorHandling
}

// GetOrCreateExport retrieves the value of the Export field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetOrCreateExport() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Export {
	if t.Export != nil {
		return t.Export
	}
	t.Export = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Export{}
	return t.Export
}

// GetOrCreateExtendedNhEncoding retrieves the value of the ExtendedNhEncoding field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetOrCreateExtendedNhEncoding() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ExtendedNhEncoding {
	if t.ExtendedNhEncoding != nil {
		return t.ExtendedNhEncoding
	}
	t.ExtendedNhEncoding = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ExtendedNhEncoding{}
	return t.ExtendedNhEncoding
}

// GetOrCreateFamily retrieves the value of the Family field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetOrCreateFamily() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family {
	if t.Family != nil {
		return t.Family
	}
	t.Family = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family{}
	return t.Family
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetOrCreateGracefulRestart() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetOrCreateHoldTime() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_HoldTime{}
	return t.HoldTime
}

// GetOrCreateImport retrieves the value of the Import field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetOrCreateImport() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Import {
	if t.Import != nil {
		return t.Import
	}
	t.Import = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Import{}
	return t.Import
}

// GetOrCreateLinkBandwidth retrieves the value of the LinkBandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetOrCreateLinkBandwidth() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth {
	if t.LinkBandwidth != nil {
		return t.LinkBandwidth
	}
	t.LinkBandwidth = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth{}
	return t.LinkBandwidth
}

// GetOrCreateLocalAs retrieves the value of the LocalAs field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetOrCreateLocalAs() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LocalAs {
	if t.LocalAs != nil {
		return t.LocalAs
	}
	t.LocalAs = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LocalAs{}
	return t.LocalAs
}

// GetOrCreateMonitor retrieves the value of the Monitor field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetOrCreateMonitor() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor {
	if t.Monitor != nil {
		return t.Monitor
	}
	t.Monitor = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor{}
	return t.Monitor
}

// GetOrCreateNextHopUnchanged retrieves the value of the NextHopUnchanged field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetOrCreateNextHopUnchanged() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_NextHopUnchanged {
	if t.NextHopUnchanged != nil {
		return t.NextHopUnchanged
	}
	t.NextHopUnchanged = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_NextHopUnchanged{}
	return t.NextHopUnchanged
}

// GetOrCreateOriginValidation retrieves the value of the OriginValidation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetOrCreateOriginValidation() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OriginValidation {
	if t.OriginValidation != nil {
		return t.OriginValidation
	}
	t.OriginValidation = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OriginValidation{}
	return t.OriginValidation
}

// GetOrCreateOutboundRouteFiltering retrieves the value of the OutboundRouteFiltering field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetOrCreateOutboundRouteFiltering() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering {
	if t.OutboundRouteFiltering != nil {
		return t.OutboundRouteFiltering
	}
	t.OutboundRouteFiltering = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering{}
	return t.OutboundRouteFiltering
}

// GetOrCreateRemovePrivate retrieves the value of the RemovePrivate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetOrCreateRemovePrivate() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_RemovePrivate {
	if t.RemovePrivate != nil {
		return t.RemovePrivate
	}
	t.RemovePrivate = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_RemovePrivate{}
	return t.RemovePrivate
}

// GetOrCreateSegmentRoutingV6 retrieves the value of the SegmentRoutingV6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetOrCreateSegmentRoutingV6() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6 {
	if t.SegmentRoutingV6 != nil {
		return t.SegmentRoutingV6
	}
	t.SegmentRoutingV6 = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6{}
	return t.SegmentRoutingV6
}

// GetOrCreateSendCommunities retrieves the value of the SendCommunities field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetOrCreateSendCommunities() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendCommunities {
	if t.SendCommunities != nil {
		return t.SendCommunities
	}
	t.SendCommunities = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendCommunities{}
	return t.SendCommunities
}

// GetOrCreateSendDefault retrieves the value of the SendDefault field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetOrCreateSendDefault() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendDefault {
	if t.SendDefault != nil {
		return t.SendDefault
	}
	t.SendDefault = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendDefault{}
	return t.SendDefault
}

// GetAddPaths returns the value of the AddPaths struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group. If the receiver or the field AddPaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetAddPaths() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths {
	if t != nil && t.AddPaths != nil {
		return t.AddPaths
	}
	return nil
}

// GetAdvertiseIpv6NextHops returns the value of the AdvertiseIpv6NextHops struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group. If the receiver or the field AdvertiseIpv6NextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetAdvertiseIpv6NextHops() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AdvertiseIpv6NextHops {
	if t != nil && t.AdvertiseIpv6NextHops != nil {
		return t.AdvertiseIpv6NextHops
	}
	return nil
}

// GetCluster returns the value of the Cluster struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group. If the receiver or the field Cluster is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetCluster() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Cluster {
	if t != nil && t.Cluster != nil {
		return t.Cluster
	}
	return nil
}

// GetDampPeerOscillations returns the value of the DampPeerOscillations struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group. If the receiver or the field DampPeerOscillations is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetDampPeerOscillations() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations {
	if t != nil && t.DampPeerOscillations != nil {
		return t.DampPeerOscillations
	}
	return nil
}

// GetDefaultLabelPreference returns the value of the DefaultLabelPreference struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group. If the receiver or the field DefaultLabelPreference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetDefaultLabelPreference() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultLabelPreference {
	if t != nil && t.DefaultLabelPreference != nil {
		return t.DefaultLabelPreference
	}
	return nil
}

// GetDefaultPreference returns the value of the DefaultPreference struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group. If the receiver or the field DefaultPreference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetDefaultPreference() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultPreference {
	if t != nil && t.DefaultPreference != nil {
		return t.DefaultPreference
	}
	return nil
}

// GetDynamicNeighbor returns the value of the DynamicNeighbor struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group. If the receiver or the field DynamicNeighbor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetDynamicNeighbor() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor {
	if t != nil && t.DynamicNeighbor != nil {
		return t.DynamicNeighbor
	}
	return nil
}

// GetEbgpDefaultRejectPolicy returns the value of the EbgpDefaultRejectPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group. If the receiver or the field EbgpDefaultRejectPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetEbgpDefaultRejectPolicy() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EbgpDefaultRejectPolicy {
	if t != nil && t.EbgpDefaultRejectPolicy != nil {
		return t.EbgpDefaultRejectPolicy
	}
	return nil
}

// GetEgressEngineering returns the value of the EgressEngineering struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group. If the receiver or the field EgressEngineering is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetEgressEngineering() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EgressEngineering {
	if t != nil && t.EgressEngineering != nil {
		return t.EgressEngineering
	}
	return nil
}

// GetErrorHandling returns the value of the ErrorHandling struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group. If the receiver or the field ErrorHandling is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetErrorHandling() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ErrorHandling {
	if t != nil && t.ErrorHandling != nil {
		return t.ErrorHandling
	}
	return nil
}

// GetExport returns the value of the Export struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group. If the receiver or the field Export is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetExport() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Export {
	if t != nil && t.Export != nil {
		return t.Export
	}
	return nil
}

// GetExtendedNhEncoding returns the value of the ExtendedNhEncoding struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group. If the receiver or the field ExtendedNhEncoding is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetExtendedNhEncoding() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ExtendedNhEncoding {
	if t != nil && t.ExtendedNhEncoding != nil {
		return t.ExtendedNhEncoding
	}
	return nil
}

// GetFamily returns the value of the Family struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group. If the receiver or the field Family is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetFamily() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family {
	if t != nil && t.Family != nil {
		return t.Family
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetGracefulRestart() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetHoldTime() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetImport returns the value of the Import struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group. If the receiver or the field Import is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetImport() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Import {
	if t != nil && t.Import != nil {
		return t.Import
	}
	return nil
}

// GetLinkBandwidth returns the value of the LinkBandwidth struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group. If the receiver or the field LinkBandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetLinkBandwidth() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth {
	if t != nil && t.LinkBandwidth != nil {
		return t.LinkBandwidth
	}
	return nil
}

// GetLocalAs returns the value of the LocalAs struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group. If the receiver or the field LocalAs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetLocalAs() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LocalAs {
	if t != nil && t.LocalAs != nil {
		return t.LocalAs
	}
	return nil
}

// GetMonitor returns the value of the Monitor struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group. If the receiver or the field Monitor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetMonitor() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor {
	if t != nil && t.Monitor != nil {
		return t.Monitor
	}
	return nil
}

// GetNextHopUnchanged returns the value of the NextHopUnchanged struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group. If the receiver or the field NextHopUnchanged is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetNextHopUnchanged() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_NextHopUnchanged {
	if t != nil && t.NextHopUnchanged != nil {
		return t.NextHopUnchanged
	}
	return nil
}

// GetOriginValidation returns the value of the OriginValidation struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group. If the receiver or the field OriginValidation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetOriginValidation() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OriginValidation {
	if t != nil && t.OriginValidation != nil {
		return t.OriginValidation
	}
	return nil
}

// GetOutboundRouteFiltering returns the value of the OutboundRouteFiltering struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group. If the receiver or the field OutboundRouteFiltering is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetOutboundRouteFiltering() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering {
	if t != nil && t.OutboundRouteFiltering != nil {
		return t.OutboundRouteFiltering
	}
	return nil
}

// GetRemovePrivate returns the value of the RemovePrivate struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group. If the receiver or the field RemovePrivate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetRemovePrivate() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_RemovePrivate {
	if t != nil && t.RemovePrivate != nil {
		return t.RemovePrivate
	}
	return nil
}

// GetSegmentRoutingV6 returns the value of the SegmentRoutingV6 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group. If the receiver or the field SegmentRoutingV6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetSegmentRoutingV6() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6 {
	if t != nil && t.SegmentRoutingV6 != nil {
		return t.SegmentRoutingV6
	}
	return nil
}

// GetSendCommunities returns the value of the SendCommunities struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group. If the receiver or the field SendCommunities is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetSendCommunities() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendCommunities {
	if t != nil && t.SendCommunities != nil {
		return t.SendCommunities
	}
	return nil
}

// GetSendDefault returns the value of the SendDefault struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group. If the receiver or the field SendDefault is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetSendDefault() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendDefault {
	if t != nil && t.SendDefault != nil {
		return t.SendDefault
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAdvertiseInactive retrieves the value of the leaf AdvertiseInactive from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseInactive is set, it can
// safely use t.GetAdvertiseInactive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseInactive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetAdvertiseInactive() bool {
	if t == nil || t.AdvertiseInactive == nil {
		return false
	}
	return *t.AdvertiseInactive
}

// GetAggregatorIdZero retrieves the value of the leaf AggregatorIdZero from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AggregatorIdZero is set, it can
// safely use t.GetAggregatorIdZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AggregatorIdZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetAggregatorIdZero() bool {
	if t == nil || t.AggregatorIdZero == nil {
		return false
	}
	return *t.AggregatorIdZero
}

// GetAigp retrieves the value of the leaf Aigp from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aigp is set, it can
// safely use t.GetAigp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aigp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetAigp() bool {
	if t == nil || t.Aigp == nil {
		return false
	}
	return *t.Aigp
}

// GetAsOverride retrieves the value of the leaf AsOverride from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsOverride is set, it can
// safely use t.GetAsOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetAsOverride() bool {
	if t == nil || t.AsOverride == nil {
		return false
	}
	return *t.AsOverride
}

// GetAsn_4Byte retrieves the value of the leaf Asn_4Byte from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Asn_4Byte is set, it can
// safely use t.GetAsn_4Byte() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Asn_4Byte == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetAsn_4Byte() bool {
	if t == nil || t.Asn_4Byte == nil {
		return false
	}
	return *t.Asn_4Byte
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationKeychain retrieves the value of the leaf AuthenticationKeychain from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKeychain is set, it can
// safely use t.GetAuthenticationKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKeychain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetAuthenticationKeychain() string {
	if t == nil || t.AuthenticationKeychain == nil {
		return ""
	}
	return *t.AuthenticationKeychain
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetBlockPrefixSid retrieves the value of the leaf BlockPrefixSid from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockPrefixSid is set, it can
// safely use t.GetBlockPrefixSid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockPrefixSid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetBlockPrefixSid() bool {
	if t == nil || t.BlockPrefixSid == nil {
		return false
	}
	return *t.BlockPrefixSid
}

// GetCapabilityNegotiation retrieves the value of the leaf CapabilityNegotiation from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CapabilityNegotiation is set, it can
// safely use t.GetCapabilityNegotiation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CapabilityNegotiation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetCapabilityNegotiation() bool {
	if t == nil || t.CapabilityNegotiation == nil {
		return true
	}
	return *t.CapabilityNegotiation
}

// GetClientReflect retrieves the value of the leaf ClientReflect from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientReflect is set, it can
// safely use t.GetClientReflect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientReflect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetClientReflect() bool {
	if t == nil || t.ClientReflect == nil {
		return false
	}
	return *t.ClientReflect
}

// GetConnectRetry retrieves the value of the leaf ConnectRetry from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectRetry is set, it can
// safely use t.GetConnectRetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectRetry == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetConnectRetry() int32 {
	if t == nil || t.ConnectRetry == nil {
		return 0
	}
	return *t.ConnectRetry
}

// GetDamping retrieves the value of the leaf Damping from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Damping is set, it can
// safely use t.GetDamping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Damping == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetDamping() bool {
	if t == nil || t.Damping == nil {
		return false
	}
	return *t.Damping
}

// GetDefRecvEvpnEncap retrieves the value of the leaf DefRecvEvpnEncap from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefRecvEvpnEncap is set, it can
// safely use t.GetDefRecvEvpnEncap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefRecvEvpnEncap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetDefRecvEvpnEncap() E_NokiaTypesBgp_Encap {
	if t == nil || t.DefRecvEvpnEncap == 0 {
		return 0
	}
	return t.DefRecvEvpnEncap
}

// GetDefaultRouteTarget retrieves the value of the leaf DefaultRouteTarget from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultRouteTarget is set, it can
// safely use t.GetDefaultRouteTarget() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultRouteTarget == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetDefaultRouteTarget() bool {
	if t == nil || t.DefaultRouteTarget == nil {
		return false
	}
	return *t.DefaultRouteTarget
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDynamicNeighborLimit retrieves the value of the leaf DynamicNeighborLimit from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicNeighborLimit is set, it can
// safely use t.GetDynamicNeighborLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicNeighborLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetDynamicNeighborLimit() uint32 {
	if t == nil || t.DynamicNeighborLimit == nil {
		return 0
	}
	return *t.DynamicNeighborLimit
}

// GetEgressPeerEngineeringLabelUnicast retrieves the value of the leaf EgressPeerEngineeringLabelUnicast from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EgressPeerEngineeringLabelUnicast is set, it can
// safely use t.GetEgressPeerEngineeringLabelUnicast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EgressPeerEngineeringLabelUnicast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetEgressPeerEngineeringLabelUnicast() bool {
	if t == nil || t.EgressPeerEngineeringLabelUnicast == nil {
		return false
	}
	return *t.EgressPeerEngineeringLabelUnicast
}

// GetEnforceFirstAs retrieves the value of the leaf EnforceFirstAs from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnforceFirstAs is set, it can
// safely use t.GetEnforceFirstAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnforceFirstAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetEnforceFirstAs() bool {
	if t == nil || t.EnforceFirstAs == nil {
		return false
	}
	return *t.EnforceFirstAs
}

// GetFastExternalFailover retrieves the value of the leaf FastExternalFailover from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastExternalFailover is set, it can
// safely use t.GetFastExternalFailover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastExternalFailover == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetFastExternalFailover() bool {
	if t == nil || t.FastExternalFailover == nil {
		return false
	}
	return *t.FastExternalFailover
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInitialSendDelayZero retrieves the value of the leaf InitialSendDelayZero from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialSendDelayZero is set, it can
// safely use t.GetInitialSendDelayZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialSendDelayZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetInitialSendDelayZero() bool {
	if t == nil || t.InitialSendDelayZero == nil {
		return false
	}
	return *t.InitialSendDelayZero
}

// GetKeepalive retrieves the value of the leaf Keepalive from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keepalive is set, it can
// safely use t.GetKeepalive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keepalive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetKeepalive() int32 {
	if t == nil || t.Keepalive == nil {
		return 0
	}
	return *t.Keepalive
}

// GetLabelPreference retrieves the value of the leaf LabelPreference from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelPreference is set, it can
// safely use t.GetLabelPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetLabelPreference() uint32 {
	if t == nil || t.LabelPreference == nil {
		return 0
	}
	return *t.LabelPreference
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetLocalPreference retrieves the value of the leaf LocalPreference from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPreference is set, it can
// safely use t.GetLocalPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetLocalPreference() int64 {
	if t == nil || t.LocalPreference == nil {
		return 0
	}
	return *t.LocalPreference
}

// GetLoopDetect retrieves the value of the leaf LoopDetect from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopDetect is set, it can
// safely use t.GetLoopDetect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopDetect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetLoopDetect() E_NokiaTypesBgp_LoopDetect {
	if t == nil || t.LoopDetect == 0 {
		return 0
	}
	return t.LoopDetect
}

// GetLoopDetectThreshold retrieves the value of the leaf LoopDetectThreshold from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopDetectThreshold is set, it can
// safely use t.GetLoopDetectThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopDetectThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetLoopDetectThreshold() uint32 {
	if t == nil || t.LoopDetectThreshold == nil {
		return 0
	}
	return *t.LoopDetectThreshold
}

// GetMedOut retrieves the value of the leaf MedOut from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MedOut is set, it can
// safely use t.GetMedOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MedOut == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetMedOut() NokiaConf_Configure_Groups_Group_Router_Bgp_Group_MedOut_Union {
	if t == nil || t.MedOut == nil {
		return nil
	}
	return t.MedOut
}

// GetMinRouteAdvertisement retrieves the value of the leaf MinRouteAdvertisement from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinRouteAdvertisement is set, it can
// safely use t.GetMinRouteAdvertisement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinRouteAdvertisement == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetMinRouteAdvertisement() int16 {
	if t == nil || t.MinRouteAdvertisement == nil {
		return 0
	}
	return *t.MinRouteAdvertisement
}

// GetMultihop retrieves the value of the leaf Multihop from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multihop is set, it can
// safely use t.GetMultihop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multihop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetMultihop() int32 {
	if t == nil || t.Multihop == nil {
		return 0
	}
	return *t.Multihop
}

// GetMultipathEligible retrieves the value of the leaf MultipathEligible from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultipathEligible is set, it can
// safely use t.GetMultipathEligible() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultipathEligible == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetMultipathEligible() bool {
	if t == nil || t.MultipathEligible == nil {
		return false
	}
	return *t.MultipathEligible
}

// GetNextHopSelf retrieves the value of the leaf NextHopSelf from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopSelf is set, it can
// safely use t.GetNextHopSelf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopSelf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetNextHopSelf() bool {
	if t == nil || t.NextHopSelf == nil {
		return false
	}
	return *t.NextHopSelf
}

// GetPassive retrieves the value of the leaf Passive from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Passive is set, it can
// safely use t.GetPassive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Passive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetPassive() bool {
	if t == nil || t.Passive == nil {
		return false
	}
	return *t.Passive
}

// GetPathMtuDiscovery retrieves the value of the leaf PathMtuDiscovery from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathMtuDiscovery is set, it can
// safely use t.GetPathMtuDiscovery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathMtuDiscovery == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetPathMtuDiscovery() bool {
	if t == nil || t.PathMtuDiscovery == nil {
		return false
	}
	return *t.PathMtuDiscovery
}

// GetPeerAs retrieves the value of the leaf PeerAs from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerAs is set, it can
// safely use t.GetPeerAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetPeerAs() uint32 {
	if t == nil || t.PeerAs == nil {
		return 0
	}
	return *t.PeerAs
}

// GetPeerIpTracking retrieves the value of the leaf PeerIpTracking from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerIpTracking is set, it can
// safely use t.GetPeerIpTracking() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerIpTracking == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetPeerIpTracking() bool {
	if t == nil || t.PeerIpTracking == nil {
		return false
	}
	return *t.PeerIpTracking
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetSelectiveLabelIpv4Install retrieves the value of the leaf SelectiveLabelIpv4Install from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SelectiveLabelIpv4Install is set, it can
// safely use t.GetSelectiveLabelIpv4Install() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SelectiveLabelIpv4Install == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetSelectiveLabelIpv4Install() bool {
	if t == nil || t.SelectiveLabelIpv4Install == nil {
		return false
	}
	return *t.SelectiveLabelIpv4Install
}

// GetSplitHorizon retrieves the value of the leaf SplitHorizon from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SplitHorizon is set, it can
// safely use t.GetSplitHorizon() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SplitHorizon == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetSplitHorizon() bool {
	if t == nil || t.SplitHorizon == nil {
		return false
	}
	return *t.SplitHorizon
}

// GetStaticGroup retrieves the value of the leaf StaticGroup from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticGroup is set, it can
// safely use t.GetStaticGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetStaticGroup() bool {
	if t == nil || t.StaticGroup == nil {
		return true
	}
	return *t.StaticGroup
}

// GetTcpMss retrieves the value of the leaf TcpMss from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpMss is set, it can
// safely use t.GetTcpMss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpMss == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetTcpMss() NokiaConf_Configure_Groups_Group_Router_Bgp_Group_TcpMss_Union {
	if t == nil || t.TcpMss == nil {
		return nil
	}
	return t.TcpMss
}

// GetThirdPartyNexthop retrieves the value of the leaf ThirdPartyNexthop from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ThirdPartyNexthop is set, it can
// safely use t.GetThirdPartyNexthop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ThirdPartyNexthop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetThirdPartyNexthop() bool {
	if t == nil || t.ThirdPartyNexthop == nil {
		return false
	}
	return *t.ThirdPartyNexthop
}

// GetTtlSecurity retrieves the value of the leaf TtlSecurity from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TtlSecurity is set, it can
// safely use t.GetTtlSecurity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TtlSecurity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetTtlSecurity() uint32 {
	if t == nil || t.TtlSecurity == nil {
		return 0
	}
	return *t.TtlSecurity
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetType() E_NokiaTypesBgp_PeerType {
	if t == nil || t.Type == 0 {
		return NokiaTypesBgp_PeerType_no_type
	}
	return t.Type
}

// GetVpnApplyExport retrieves the value of the leaf VpnApplyExport from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnApplyExport is set, it can
// safely use t.GetVpnApplyExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnApplyExport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetVpnApplyExport() bool {
	if t == nil || t.VpnApplyExport == nil {
		return false
	}
	return *t.VpnApplyExport
}

// GetVpnApplyImport retrieves the value of the leaf VpnApplyImport from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnApplyImport is set, it can
// safely use t.GetVpnApplyImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnApplyImport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) GetVpnApplyImport() bool {
	if t == nil || t.VpnApplyImport == nil {
		return false
	}
	return *t.VpnApplyImport
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Aigp == nil {
		var v bool = false
		t.Aigp = &v
	}
	if t.AsOverride == nil {
		var v bool = false
		t.AsOverride = &v
	}
	if t.BlockPrefixSid == nil {
		var v bool = false
		t.BlockPrefixSid = &v
	}
	if t.CapabilityNegotiation == nil {
		var v bool = true
		t.CapabilityNegotiation = &v
	}
	if t.DefaultRouteTarget == nil {
		var v bool = false
		t.DefaultRouteTarget = &v
	}
	if t.EgressPeerEngineeringLabelUnicast == nil {
		var v bool = false
		t.EgressPeerEngineeringLabelUnicast = &v
	}
	if t.MultipathEligible == nil {
		var v bool = false
		t.MultipathEligible = &v
	}
	if t.NextHopSelf == nil {
		var v bool = false
		t.NextHopSelf = &v
	}
	if t.Passive == nil {
		var v bool = false
		t.Passive = &v
	}
	if t.StaticGroup == nil {
		var v bool = true
		t.StaticGroup = &v
	}
	if t.Type == 0 {
		t.Type = NokiaTypesBgp_PeerType_no_type
	}
	t.AddPaths.PopulateDefaults()
	t.AdvertiseIpv6NextHops.PopulateDefaults()
	t.Cluster.PopulateDefaults()
	t.DampPeerOscillations.PopulateDefaults()
	t.DefaultLabelPreference.PopulateDefaults()
	t.DefaultPreference.PopulateDefaults()
	t.DynamicNeighbor.PopulateDefaults()
	t.EbgpDefaultRejectPolicy.PopulateDefaults()
	t.EgressEngineering.PopulateDefaults()
	t.ErrorHandling.PopulateDefaults()
	t.Export.PopulateDefaults()
	t.ExtendedNhEncoding.PopulateDefaults()
	t.Family.PopulateDefaults()
	t.GracefulRestart.PopulateDefaults()
	t.HoldTime.PopulateDefaults()
	t.Import.PopulateDefaults()
	t.LinkBandwidth.PopulateDefaults()
	t.LocalAs.PopulateDefaults()
	t.Monitor.PopulateDefaults()
	t.NextHopUnchanged.PopulateDefaults()
	t.OriginValidation.PopulateDefaults()
	t.OutboundRouteFiltering.PopulateDefaults()
	t.RemovePrivate.PopulateDefaults()
	t.SegmentRoutingV6.PopulateDefaults()
	t.SendCommunities.PopulateDefaults()
	t.SendDefault.PopulateDefaults()
	for _, e := range t.PrefixLimit {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Bgp_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths represents the /nokia-conf/configure/groups/group/router/bgp/group/add-paths YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths struct {
	Evpn         *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Evpn         `path:"evpn" module:"nokia-conf"`
	Ipv4         *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv4         `path:"ipv4" module:"nokia-conf"`
	Ipv6         *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv6         `path:"ipv6" module:"nokia-conf"`
	LabelIpv4    *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv4    `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6    *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv6    `path:"label-ipv6" module:"nokia-conf"`
	McastVpnIpv4 *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv4 `path:"mcast-vpn-ipv4" module:"nokia-conf"`
	McastVpnIpv6 *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv6 `path:"mcast-vpn-ipv6" module:"nokia-conf"`
	MvpnIpv4     *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv4     `path:"mvpn-ipv4" module:"nokia-conf"`
	MvpnIpv6     *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv6     `path:"mvpn-ipv6" module:"nokia-conf"`
	VpnIpv4      *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv4      `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6      *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv6      `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths) IsYANGGoStruct() {}

// GetOrCreateEvpn retrieves the value of the Evpn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths) GetOrCreateEvpn() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Evpn {
	if t.Evpn != nil {
		return t.Evpn
	}
	t.Evpn = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Evpn{}
	return t.Evpn
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths) GetOrCreateIpv6() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv6{}
	return t.Ipv6
}

// GetOrCreateLabelIpv4 retrieves the value of the LabelIpv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths) GetOrCreateLabelIpv4() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv4 {
	if t.LabelIpv4 != nil {
		return t.LabelIpv4
	}
	t.LabelIpv4 = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv4{}
	return t.LabelIpv4
}

// GetOrCreateLabelIpv6 retrieves the value of the LabelIpv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths) GetOrCreateLabelIpv6() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv6 {
	if t.LabelIpv6 != nil {
		return t.LabelIpv6
	}
	t.LabelIpv6 = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv6{}
	return t.LabelIpv6
}

// GetOrCreateMcastVpnIpv4 retrieves the value of the McastVpnIpv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths) GetOrCreateMcastVpnIpv4() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv4 {
	if t.McastVpnIpv4 != nil {
		return t.McastVpnIpv4
	}
	t.McastVpnIpv4 = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv4{}
	return t.McastVpnIpv4
}

// GetOrCreateMcastVpnIpv6 retrieves the value of the McastVpnIpv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths) GetOrCreateMcastVpnIpv6() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv6 {
	if t.McastVpnIpv6 != nil {
		return t.McastVpnIpv6
	}
	t.McastVpnIpv6 = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv6{}
	return t.McastVpnIpv6
}

// GetOrCreateMvpnIpv4 retrieves the value of the MvpnIpv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths) GetOrCreateMvpnIpv4() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv4 {
	if t.MvpnIpv4 != nil {
		return t.MvpnIpv4
	}
	t.MvpnIpv4 = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv4{}
	return t.MvpnIpv4
}

// GetOrCreateMvpnIpv6 retrieves the value of the MvpnIpv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths) GetOrCreateMvpnIpv6() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv6 {
	if t.MvpnIpv6 != nil {
		return t.MvpnIpv6
	}
	t.MvpnIpv6 = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv6{}
	return t.MvpnIpv6
}

// GetOrCreateVpnIpv4 retrieves the value of the VpnIpv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths) GetOrCreateVpnIpv4() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv4 {
	if t.VpnIpv4 != nil {
		return t.VpnIpv4
	}
	t.VpnIpv4 = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv4{}
	return t.VpnIpv4
}

// GetOrCreateVpnIpv6 retrieves the value of the VpnIpv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths) GetOrCreateVpnIpv6() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv6 {
	if t.VpnIpv6 != nil {
		return t.VpnIpv6
	}
	t.VpnIpv6 = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv6{}
	return t.VpnIpv6
}

// GetEvpn returns the value of the Evpn struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths. If the receiver or the field Evpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths) GetEvpn() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Evpn {
	if t != nil && t.Evpn != nil {
		return t.Evpn
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths) GetIpv4() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths) GetIpv6() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetLabelIpv4 returns the value of the LabelIpv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths. If the receiver or the field LabelIpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths) GetLabelIpv4() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv4 {
	if t != nil && t.LabelIpv4 != nil {
		return t.LabelIpv4
	}
	return nil
}

// GetLabelIpv6 returns the value of the LabelIpv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths. If the receiver or the field LabelIpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths) GetLabelIpv6() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv6 {
	if t != nil && t.LabelIpv6 != nil {
		return t.LabelIpv6
	}
	return nil
}

// GetMcastVpnIpv4 returns the value of the McastVpnIpv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths. If the receiver or the field McastVpnIpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths) GetMcastVpnIpv4() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv4 {
	if t != nil && t.McastVpnIpv4 != nil {
		return t.McastVpnIpv4
	}
	return nil
}

// GetMcastVpnIpv6 returns the value of the McastVpnIpv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths. If the receiver or the field McastVpnIpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths) GetMcastVpnIpv6() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv6 {
	if t != nil && t.McastVpnIpv6 != nil {
		return t.McastVpnIpv6
	}
	return nil
}

// GetMvpnIpv4 returns the value of the MvpnIpv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths. If the receiver or the field MvpnIpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths) GetMvpnIpv4() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv4 {
	if t != nil && t.MvpnIpv4 != nil {
		return t.MvpnIpv4
	}
	return nil
}

// GetMvpnIpv6 returns the value of the MvpnIpv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths. If the receiver or the field MvpnIpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths) GetMvpnIpv6() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv6 {
	if t != nil && t.MvpnIpv6 != nil {
		return t.MvpnIpv6
	}
	return nil
}

// GetVpnIpv4 returns the value of the VpnIpv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths. If the receiver or the field VpnIpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths) GetVpnIpv4() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv4 {
	if t != nil && t.VpnIpv4 != nil {
		return t.VpnIpv4
	}
	return nil
}

// GetVpnIpv6 returns the value of the VpnIpv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths. If the receiver or the field VpnIpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths) GetVpnIpv6() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv6 {
	if t != nil && t.VpnIpv6 != nil {
		return t.VpnIpv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Evpn.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	t.LabelIpv4.PopulateDefaults()
	t.LabelIpv6.PopulateDefaults()
	t.McastVpnIpv4.PopulateDefaults()
	t.McastVpnIpv6.PopulateDefaults()
	t.MvpnIpv4.PopulateDefaults()
	t.MvpnIpv6.PopulateDefaults()
	t.VpnIpv4.PopulateDefaults()
	t.VpnIpv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Evpn represents the /nokia-conf/configure/groups/group/router/bgp/group/add-paths/evpn YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Evpn struct {
	Receive *bool                                                                      `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Evpn_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Evpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Evpn) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Evpn) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Evpn) GetSend() NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Evpn_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Evpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Evpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Evpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Evpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Evpn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Evpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Evpn.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Evpn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv4 represents the /nokia-conf/configure/groups/group/router/bgp/group/add-paths/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv4 struct {
	Receive *bool                                                                      `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv4_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv4) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv4) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv4) GetSend() NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv4_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv4.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv6 represents the /nokia-conf/configure/groups/group/router/bgp/group/add-paths/ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv6 struct {
	Receive *bool                                                                      `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv6_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv6) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv6) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv6) GetSend() NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv6_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv6.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv4 represents the /nokia-conf/configure/groups/group/router/bgp/group/add-paths/label-ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv4 struct {
	Receive *bool                                                                           `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv4_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv4) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv4) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv4) GetSend() NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv4_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv4.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv6 represents the /nokia-conf/configure/groups/group/router/bgp/group/add-paths/label-ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv6 struct {
	Receive *bool                                                                           `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv6_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv6) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv6) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv6) GetSend() NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv6_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv6.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_LabelIpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv4 represents the /nokia-conf/configure/groups/group/router/bgp/group/add-paths/mcast-vpn-ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv4 struct {
	Receive *bool  `path:"receive" module:"nokia-conf"`
	Send    *int32 `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv4) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv4) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv4) GetSend() int32 {
	if t == nil || t.Send == nil {
		return 0
	}
	return *t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv4.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv6 represents the /nokia-conf/configure/groups/group/router/bgp/group/add-paths/mcast-vpn-ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv6 struct {
	Receive *bool  `path:"receive" module:"nokia-conf"`
	Send    *int32 `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv6) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv6) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv6) GetSend() int32 {
	if t == nil || t.Send == nil {
		return 0
	}
	return *t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv6.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_McastVpnIpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv4 represents the /nokia-conf/configure/groups/group/router/bgp/group/add-paths/mvpn-ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv4 struct {
	Receive *bool  `path:"receive" module:"nokia-conf"`
	Send    *int32 `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv4) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv4) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv4) GetSend() int32 {
	if t == nil || t.Send == nil {
		return 0
	}
	return *t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv4.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv6 represents the /nokia-conf/configure/groups/group/router/bgp/group/add-paths/mvpn-ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv6 struct {
	Receive *bool  `path:"receive" module:"nokia-conf"`
	Send    *int32 `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv6) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv6) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv6) GetSend() int32 {
	if t == nil || t.Send == nil {
		return 0
	}
	return *t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv6.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_MvpnIpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv4 represents the /nokia-conf/configure/groups/group/router/bgp/group/add-paths/vpn-ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv4 struct {
	Receive *bool                                                                         `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv4_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv4) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv4) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv4) GetSend() NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv4_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv4.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv6 represents the /nokia-conf/configure/groups/group/router/bgp/group/add-paths/vpn-ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv6 struct {
	Receive *bool                                                                         `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv6_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv6) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv6) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv6) GetSend() NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv6_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv6.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AddPaths_VpnIpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AdvertiseIpv6NextHops represents the /nokia-conf/configure/groups/group/router/bgp/group/advertise-ipv6-next-hops YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AdvertiseIpv6NextHops struct {
	Evpn      *bool `path:"evpn" module:"nokia-conf"`
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
	VpnIpv4   *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6   *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AdvertiseIpv6NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AdvertiseIpv6NextHops) IsYANGGoStruct() {}

// GetEvpn retrieves the value of the leaf Evpn from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Evpn is set, it can
// safely use t.GetEvpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Evpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AdvertiseIpv6NextHops) GetEvpn() bool {
	if t == nil || t.Evpn == nil {
		return false
	}
	return *t.Evpn
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AdvertiseIpv6NextHops) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AdvertiseIpv6NextHops) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AdvertiseIpv6NextHops) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AdvertiseIpv6NextHops) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AdvertiseIpv6NextHops) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AdvertiseIpv6NextHops
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AdvertiseIpv6NextHops) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Evpn == nil {
		var v bool = false
		t.Evpn = &v
	}
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AdvertiseIpv6NextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AdvertiseIpv6NextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AdvertiseIpv6NextHops) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AdvertiseIpv6NextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AdvertiseIpv6NextHops.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_AdvertiseIpv6NextHops) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Cluster represents the /nokia-conf/configure/groups/group/router/bgp/group/cluster YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Cluster struct {
	AllowLocalFallback *bool   `path:"allow-local-fallback" module:"nokia-conf"`
	ClusterId          *string `path:"cluster-id" module:"nokia-conf"`
	OrrLocation        *uint32 `path:"orr-location" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Cluster implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Cluster) IsYANGGoStruct() {}

// GetAllowLocalFallback retrieves the value of the leaf AllowLocalFallback from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Cluster
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowLocalFallback is set, it can
// safely use t.GetAllowLocalFallback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowLocalFallback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Cluster) GetAllowLocalFallback() bool {
	if t == nil || t.AllowLocalFallback == nil {
		return false
	}
	return *t.AllowLocalFallback
}

// GetClusterId retrieves the value of the leaf ClusterId from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Cluster
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClusterId is set, it can
// safely use t.GetClusterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClusterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Cluster) GetClusterId() string {
	if t == nil || t.ClusterId == nil {
		return ""
	}
	return *t.ClusterId
}

// GetOrrLocation retrieves the value of the leaf OrrLocation from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Cluster
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OrrLocation is set, it can
// safely use t.GetOrrLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OrrLocation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Cluster) GetOrrLocation() uint32 {
	if t == nil || t.OrrLocation == nil {
		return 0
	}
	return *t.OrrLocation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Cluster
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Cluster) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowLocalFallback == nil {
		var v bool = false
		t.AllowLocalFallback = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Cluster) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Cluster"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Cluster) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Cluster) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Cluster.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Cluster) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations represents the /nokia-conf/configure/groups/group/router/bgp/group/damp-peer-oscillations YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations struct {
	ErrorInterval *uint32                                                                              `path:"error-interval" module:"nokia-conf"`
	IdleHoldTime  *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime `path:"idle-hold-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations) IsYANGGoStruct() {}

// GetOrCreateIdleHoldTime retrieves the value of the IdleHoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations) GetOrCreateIdleHoldTime() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime {
	if t.IdleHoldTime != nil {
		return t.IdleHoldTime
	}
	t.IdleHoldTime = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime{}
	return t.IdleHoldTime
}

// GetIdleHoldTime returns the value of the IdleHoldTime struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations. If the receiver or the field IdleHoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations) GetIdleHoldTime() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime {
	if t != nil && t.IdleHoldTime != nil {
		return t.IdleHoldTime
	}
	return nil
}

// GetErrorInterval retrieves the value of the leaf ErrorInterval from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ErrorInterval is set, it can
// safely use t.GetErrorInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ErrorInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations) GetErrorInterval() uint32 {
	if t == nil || t.ErrorInterval == nil {
		return 30
	}
	return *t.ErrorInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ErrorInterval == nil {
		var v uint32 = 30
		t.ErrorInterval = &v
	}
	t.IdleHoldTime.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime represents the /nokia-conf/configure/groups/group/router/bgp/group/damp-peer-oscillations/idle-hold-time YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime struct {
	InitialWait *uint32 `path:"initial-wait" module:"nokia-conf"`
	MaxWait     *uint32 `path:"max-wait" module:"nokia-conf"`
	SecondWait  *uint32 `path:"second-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime) IsYANGGoStruct() {
}

// GetInitialWait retrieves the value of the leaf InitialWait from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialWait is set, it can
// safely use t.GetInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime) GetInitialWait() uint32 {
	if t == nil || t.InitialWait == nil {
		return 0
	}
	return *t.InitialWait
}

// GetMaxWait retrieves the value of the leaf MaxWait from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxWait is set, it can
// safely use t.GetMaxWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime) GetMaxWait() uint32 {
	if t == nil || t.MaxWait == nil {
		return 60
	}
	return *t.MaxWait
}

// GetSecondWait retrieves the value of the leaf SecondWait from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondWait is set, it can
// safely use t.GetSecondWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime) GetSecondWait() uint32 {
	if t == nil || t.SecondWait == nil {
		return 5
	}
	return *t.SecondWait
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitialWait == nil {
		var v uint32 = 0
		t.InitialWait = &v
	}
	if t.MaxWait == nil {
		var v uint32 = 60
		t.MaxWait = &v
	}
	if t.SecondWait == nil {
		var v uint32 = 5
		t.SecondWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DampPeerOscillations_IdleHoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultLabelPreference represents the /nokia-conf/configure/groups/group/router/bgp/group/default-label-preference YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultLabelPreference struct {
	Ebgp *uint32 `path:"ebgp" module:"nokia-conf"`
	Ibgp *uint32 `path:"ibgp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultLabelPreference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultLabelPreference) IsYANGGoStruct() {}

// GetEbgp retrieves the value of the leaf Ebgp from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultLabelPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ebgp is set, it can
// safely use t.GetEbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ebgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultLabelPreference) GetEbgp() uint32 {
	if t == nil || t.Ebgp == nil {
		return 0
	}
	return *t.Ebgp
}

// GetIbgp retrieves the value of the leaf Ibgp from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultLabelPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ibgp is set, it can
// safely use t.GetIbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ibgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultLabelPreference) GetIbgp() uint32 {
	if t == nil || t.Ibgp == nil {
		return 0
	}
	return *t.Ibgp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultLabelPreference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultLabelPreference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultLabelPreference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultLabelPreference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultLabelPreference) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultLabelPreference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultLabelPreference.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultLabelPreference) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultPreference represents the /nokia-conf/configure/groups/group/router/bgp/group/default-preference YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultPreference struct {
	Ebgp *uint32 `path:"ebgp" module:"nokia-conf"`
	Ibgp *uint32 `path:"ibgp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultPreference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultPreference) IsYANGGoStruct() {}

// GetEbgp retrieves the value of the leaf Ebgp from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ebgp is set, it can
// safely use t.GetEbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ebgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultPreference) GetEbgp() uint32 {
	if t == nil || t.Ebgp == nil {
		return 0
	}
	return *t.Ebgp
}

// GetIbgp retrieves the value of the leaf Ibgp from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ibgp is set, it can
// safely use t.GetIbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ibgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultPreference) GetIbgp() uint32 {
	if t == nil || t.Ibgp == nil {
		return 0
	}
	return *t.Ibgp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultPreference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultPreference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultPreference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultPreference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultPreference) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultPreference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultPreference.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DefaultPreference) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor represents the /nokia-conf/configure/groups/group/router/bgp/group/dynamic-neighbor YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor struct {
	Match *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor) IsYANGGoStruct() {}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor) GetOrCreateMatch() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match{}
	return t.Match
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor) GetMatch() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Match.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match represents the /nokia-conf/configure/groups/group/router/bgp/group/dynamic-neighbor/match YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match struct {
	Prefix map[string]*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match_Prefix `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match) NewPrefix(IpPrefix string) (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match_Prefix)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match_Prefix{
		IpPrefix: &IpPrefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.IpPrefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match) GetOrCreatePrefix(IpPrefix string) *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match_Prefix {

	key := IpPrefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match) GetPrefix(IpPrefix string) *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match_Prefix {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match) DeletePrefix(IpPrefix string) {
	key := IpPrefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match_Prefix struct to the
// list Prefix of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match) AppendPrefix(v *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match_Prefix) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match_Prefix represents the /nokia-conf/configure/groups/group/router/bgp/group/dynamic-neighbor/match/prefix YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match_Prefix struct {
	AllowedPeerAs []string `path:"allowed-peer-as" module:"nokia-conf"`
	IpPrefix      *string  `path:"ip-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match_Prefix) IsYANGGoStruct() {
}

// GetAllowedPeerAs retrieves the value of the leaf AllowedPeerAs from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowedPeerAs is set, it can
// safely use t.GetAllowedPeerAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowedPeerAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match_Prefix) GetAllowedPeerAs() []string {
	if t == nil || t.AllowedPeerAs == nil {
		return nil
	}
	return t.AllowedPeerAs
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match_Prefix) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match_Prefix.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_DynamicNeighbor_Match_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EbgpDefaultRejectPolicy represents the /nokia-conf/configure/groups/group/router/bgp/group/ebgp-default-reject-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EbgpDefaultRejectPolicy struct {
	Export *bool `path:"export" module:"nokia-conf"`
	Import *bool `path:"import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EbgpDefaultRejectPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EbgpDefaultRejectPolicy) IsYANGGoStruct() {}

// GetExport retrieves the value of the leaf Export from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EbgpDefaultRejectPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Export is set, it can
// safely use t.GetExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Export == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EbgpDefaultRejectPolicy) GetExport() bool {
	if t == nil || t.Export == nil {
		return true
	}
	return *t.Export
}

// GetImport retrieves the value of the leaf Import from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EbgpDefaultRejectPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Import is set, it can
// safely use t.GetImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Import == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EbgpDefaultRejectPolicy) GetImport() bool {
	if t == nil || t.Import == nil {
		return true
	}
	return *t.Import
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EbgpDefaultRejectPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EbgpDefaultRejectPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Export == nil {
		var v bool = true
		t.Export = &v
	}
	if t.Import == nil {
		var v bool = true
		t.Import = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EbgpDefaultRejectPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EbgpDefaultRejectPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EbgpDefaultRejectPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EbgpDefaultRejectPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EbgpDefaultRejectPolicy.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EbgpDefaultRejectPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EgressEngineering represents the /nokia-conf/configure/groups/group/router/bgp/group/egress-engineering YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EgressEngineering struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EgressEngineering implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EgressEngineering) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EgressEngineering
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EgressEngineering) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EgressEngineering
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EgressEngineering) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EgressEngineering) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EgressEngineering"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EgressEngineering) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EgressEngineering) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EgressEngineering.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_EgressEngineering) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ErrorHandling represents the /nokia-conf/configure/groups/group/router/bgp/group/error-handling YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ErrorHandling struct {
	UpdateFaultTolerance *bool `path:"update-fault-tolerance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ErrorHandling implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ErrorHandling) IsYANGGoStruct() {}

// GetUpdateFaultTolerance retrieves the value of the leaf UpdateFaultTolerance from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ErrorHandling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UpdateFaultTolerance is set, it can
// safely use t.GetUpdateFaultTolerance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UpdateFaultTolerance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ErrorHandling) GetUpdateFaultTolerance() bool {
	if t == nil || t.UpdateFaultTolerance == nil {
		return false
	}
	return *t.UpdateFaultTolerance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ErrorHandling
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ErrorHandling) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ErrorHandling) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ErrorHandling"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ErrorHandling) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ErrorHandling) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ErrorHandling.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ErrorHandling) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Export represents the /nokia-conf/configure/groups/group/router/bgp/group/export YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Export struct {
	Policy []string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Export implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Export) IsYANGGoStruct() {}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Export
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Export) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Export
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Export) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Export) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Export"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Export) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Export) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Export.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Export) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ExtendedNhEncoding represents the /nokia-conf/configure/groups/group/router/bgp/group/extended-nh-encoding YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ExtendedNhEncoding struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	VpnIpv4   *bool `path:"vpn-ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ExtendedNhEncoding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ExtendedNhEncoding) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ExtendedNhEncoding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ExtendedNhEncoding) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ExtendedNhEncoding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ExtendedNhEncoding) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ExtendedNhEncoding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ExtendedNhEncoding) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ExtendedNhEncoding
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ExtendedNhEncoding) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ExtendedNhEncoding) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ExtendedNhEncoding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ExtendedNhEncoding) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ExtendedNhEncoding) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ExtendedNhEncoding.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_ExtendedNhEncoding) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family represents the /nokia-conf/configure/groups/group/router/bgp/group/family YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family struct {
	BgpLs        *bool `path:"bgp-ls" module:"nokia-conf"`
	Evpn         *bool `path:"evpn" module:"nokia-conf"`
	FlowIpv4     *bool `path:"flow-ipv4" module:"nokia-conf"`
	FlowIpv6     *bool `path:"flow-ipv6" module:"nokia-conf"`
	Ipv4         *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6         *bool `path:"ipv6" module:"nokia-conf"`
	L2Vpn        *bool `path:"l2-vpn" module:"nokia-conf"`
	LabelIpv4    *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6    *bool `path:"label-ipv6" module:"nokia-conf"`
	McastIpv4    *bool `path:"mcast-ipv4" module:"nokia-conf"`
	McastIpv6    *bool `path:"mcast-ipv6" module:"nokia-conf"`
	McastVpnIpv4 *bool `path:"mcast-vpn-ipv4" module:"nokia-conf"`
	McastVpnIpv6 *bool `path:"mcast-vpn-ipv6" module:"nokia-conf"`
	MdtSafi      *bool `path:"mdt-safi" module:"nokia-conf"`
	MsPw         *bool `path:"ms-pw" module:"nokia-conf"`
	MvpnIpv4     *bool `path:"mvpn-ipv4" module:"nokia-conf"`
	MvpnIpv6     *bool `path:"mvpn-ipv6" module:"nokia-conf"`
	RouteTarget  *bool `path:"route-target" module:"nokia-conf"`
	SrPolicyIpv4 *bool `path:"sr-policy-ipv4" module:"nokia-conf"`
	SrPolicyIpv6 *bool `path:"sr-policy-ipv6" module:"nokia-conf"`
	VpnIpv4      *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6      *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family) IsYANGGoStruct() {}

// GetBgpLs retrieves the value of the leaf BgpLs from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpLs is set, it can
// safely use t.GetBgpLs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpLs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family) GetBgpLs() bool {
	if t == nil || t.BgpLs == nil {
		return false
	}
	return *t.BgpLs
}

// GetEvpn retrieves the value of the leaf Evpn from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Evpn is set, it can
// safely use t.GetEvpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Evpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family) GetEvpn() bool {
	if t == nil || t.Evpn == nil {
		return false
	}
	return *t.Evpn
}

// GetFlowIpv4 retrieves the value of the leaf FlowIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowIpv4 is set, it can
// safely use t.GetFlowIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family) GetFlowIpv4() bool {
	if t == nil || t.FlowIpv4 == nil {
		return false
	}
	return *t.FlowIpv4
}

// GetFlowIpv6 retrieves the value of the leaf FlowIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowIpv6 is set, it can
// safely use t.GetFlowIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family) GetFlowIpv6() bool {
	if t == nil || t.FlowIpv6 == nil {
		return false
	}
	return *t.FlowIpv6
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetL2Vpn retrieves the value of the leaf L2Vpn from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2Vpn is set, it can
// safely use t.GetL2Vpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2Vpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family) GetL2Vpn() bool {
	if t == nil || t.L2Vpn == nil {
		return false
	}
	return *t.L2Vpn
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetMcastIpv4 retrieves the value of the leaf McastIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastIpv4 is set, it can
// safely use t.GetMcastIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family) GetMcastIpv4() bool {
	if t == nil || t.McastIpv4 == nil {
		return false
	}
	return *t.McastIpv4
}

// GetMcastIpv6 retrieves the value of the leaf McastIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastIpv6 is set, it can
// safely use t.GetMcastIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family) GetMcastIpv6() bool {
	if t == nil || t.McastIpv6 == nil {
		return false
	}
	return *t.McastIpv6
}

// GetMcastVpnIpv4 retrieves the value of the leaf McastVpnIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastVpnIpv4 is set, it can
// safely use t.GetMcastVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastVpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family) GetMcastVpnIpv4() bool {
	if t == nil || t.McastVpnIpv4 == nil {
		return false
	}
	return *t.McastVpnIpv4
}

// GetMcastVpnIpv6 retrieves the value of the leaf McastVpnIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastVpnIpv6 is set, it can
// safely use t.GetMcastVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastVpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family) GetMcastVpnIpv6() bool {
	if t == nil || t.McastVpnIpv6 == nil {
		return false
	}
	return *t.McastVpnIpv6
}

// GetMdtSafi retrieves the value of the leaf MdtSafi from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdtSafi is set, it can
// safely use t.GetMdtSafi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdtSafi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family) GetMdtSafi() bool {
	if t == nil || t.MdtSafi == nil {
		return false
	}
	return *t.MdtSafi
}

// GetMsPw retrieves the value of the leaf MsPw from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MsPw is set, it can
// safely use t.GetMsPw() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MsPw == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family) GetMsPw() bool {
	if t == nil || t.MsPw == nil {
		return false
	}
	return *t.MsPw
}

// GetMvpnIpv4 retrieves the value of the leaf MvpnIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MvpnIpv4 is set, it can
// safely use t.GetMvpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MvpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family) GetMvpnIpv4() bool {
	if t == nil || t.MvpnIpv4 == nil {
		return false
	}
	return *t.MvpnIpv4
}

// GetMvpnIpv6 retrieves the value of the leaf MvpnIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MvpnIpv6 is set, it can
// safely use t.GetMvpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MvpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family) GetMvpnIpv6() bool {
	if t == nil || t.MvpnIpv6 == nil {
		return false
	}
	return *t.MvpnIpv6
}

// GetRouteTarget retrieves the value of the leaf RouteTarget from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTarget is set, it can
// safely use t.GetRouteTarget() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTarget == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family) GetRouteTarget() bool {
	if t == nil || t.RouteTarget == nil {
		return false
	}
	return *t.RouteTarget
}

// GetSrPolicyIpv4 retrieves the value of the leaf SrPolicyIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrPolicyIpv4 is set, it can
// safely use t.GetSrPolicyIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrPolicyIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family) GetSrPolicyIpv4() bool {
	if t == nil || t.SrPolicyIpv4 == nil {
		return false
	}
	return *t.SrPolicyIpv4
}

// GetSrPolicyIpv6 retrieves the value of the leaf SrPolicyIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrPolicyIpv6 is set, it can
// safely use t.GetSrPolicyIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrPolicyIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family) GetSrPolicyIpv6() bool {
	if t == nil || t.SrPolicyIpv6 == nil {
		return false
	}
	return *t.SrPolicyIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BgpLs == nil {
		var v bool = false
		t.BgpLs = &v
	}
	if t.Evpn == nil {
		var v bool = false
		t.Evpn = &v
	}
	if t.FlowIpv4 == nil {
		var v bool = false
		t.FlowIpv4 = &v
	}
	if t.FlowIpv6 == nil {
		var v bool = false
		t.FlowIpv6 = &v
	}
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.L2Vpn == nil {
		var v bool = false
		t.L2Vpn = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.McastIpv4 == nil {
		var v bool = false
		t.McastIpv4 = &v
	}
	if t.McastIpv6 == nil {
		var v bool = false
		t.McastIpv6 = &v
	}
	if t.McastVpnIpv4 == nil {
		var v bool = false
		t.McastVpnIpv4 = &v
	}
	if t.McastVpnIpv6 == nil {
		var v bool = false
		t.McastVpnIpv6 = &v
	}
	if t.MdtSafi == nil {
		var v bool = false
		t.MdtSafi = &v
	}
	if t.MsPw == nil {
		var v bool = false
		t.MsPw = &v
	}
	if t.MvpnIpv4 == nil {
		var v bool = false
		t.MvpnIpv4 = &v
	}
	if t.MvpnIpv6 == nil {
		var v bool = false
		t.MvpnIpv6 = &v
	}
	if t.RouteTarget == nil {
		var v bool = false
		t.RouteTarget = &v
	}
	if t.SrPolicyIpv4 == nil {
		var v bool = false
		t.SrPolicyIpv4 = &v
	}
	if t.SrPolicyIpv6 == nil {
		var v bool = false
		t.SrPolicyIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart represents the /nokia-conf/configure/groups/group/router/bgp/group/graceful-restart YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart struct {
	GrNotification  *bool                                                                        `path:"gr-notification" module:"nokia-conf"`
	LongLived       *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived `path:"long-lived" module:"nokia-conf" yangPresence:"true"`
	RestartTime     *uint32                                                                      `path:"restart-time" module:"nokia-conf"`
	StaleRoutesTime *uint32                                                                      `path:"stale-routes-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart) IsYANGGoStruct() {}

// GetOrCreateLongLived retrieves the value of the LongLived field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart) GetOrCreateLongLived() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived {
	if t.LongLived != nil {
		return t.LongLived
	}
	t.LongLived = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived{}
	return t.LongLived
}

// GetLongLived returns the value of the LongLived struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart. If the receiver or the field LongLived is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart) GetLongLived() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived {
	if t != nil && t.LongLived != nil {
		return t.LongLived
	}
	return nil
}

// GetGrNotification retrieves the value of the leaf GrNotification from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GrNotification is set, it can
// safely use t.GetGrNotification() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GrNotification == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart) GetGrNotification() bool {
	if t == nil || t.GrNotification == nil {
		return false
	}
	return *t.GrNotification
}

// GetRestartTime retrieves the value of the leaf RestartTime from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RestartTime is set, it can
// safely use t.GetRestartTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RestartTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart) GetRestartTime() uint32 {
	if t == nil || t.RestartTime == nil {
		return 300
	}
	return *t.RestartTime
}

// GetStaleRoutesTime retrieves the value of the leaf StaleRoutesTime from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaleRoutesTime is set, it can
// safely use t.GetStaleRoutesTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaleRoutesTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart) GetStaleRoutesTime() uint32 {
	if t == nil || t.StaleRoutesTime == nil {
		return 360
	}
	return *t.StaleRoutesTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.GrNotification == nil {
		var v bool = false
		t.GrNotification = &v
	}
	if t.RestartTime == nil {
		var v uint32 = 300
		t.RestartTime = &v
	}
	if t.StaleRoutesTime == nil {
		var v uint32 = 360
		t.StaleRoutesTime = &v
	}
	t.LongLived.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived represents the /nokia-conf/configure/groups/group/router/bgp/group/graceful-restart/long-lived YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived struct {
	AdvertiseStaleToAllNeighbors *bool                                                                                                                                                                                       `path:"advertise-stale-to-all-neighbors" module:"nokia-conf"`
	AdvertisedStaleTime          *uint32                                                                                                                                                                                     `path:"advertised-stale-time" module:"nokia-conf"`
	Family                       map[NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family `path:"family" module:"nokia-conf"`
	ForwardingBitsSet            E_NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_ForwardingBitsSet                                                                                             `path:"forwarding-bits-set" module:"nokia-conf"`
	HelperOverrideRestartTime    *uint32                                                                                                                                                                                     `path:"helper-override-restart-time" module:"nokia-conf"`
	HelperOverrideStaleTime      *uint32                                                                                                                                                                                     `path:"helper-override-stale-time" module:"nokia-conf"`
	WithoutNoExport              *bool                                                                                                                                                                                       `path:"without-no-export" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived) IsYANGGoStruct() {
}

// NewFamily creates a new entry in the Family list of the
// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived) NewFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family_FamilyType_Union) (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family)
	}

	key := FamilyType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Family[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Family", key)
	}

	t.Family[key] = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family{
		FamilyType: FamilyType,
	}

	return t.Family[key], nil
}

// RenameFamily renames an entry in the list Family within
// the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived) RenameFamily(oldK, newK NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family_FamilyType_Union) error {
	if _, ok := t.Family[newK]; ok {
		return fmt.Errorf("key %v already exists in Family", newK)
	}

	e, ok := t.Family[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Family", oldK)
	}
	e.FamilyType = newK

	t.Family[newK] = e
	delete(t.Family, oldK)
	return nil
}

// GetOrCreateFamily retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived) GetOrCreateFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family_FamilyType_Union) *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family {

	key := FamilyType

	if v, ok := t.Family[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFamily(FamilyType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFamily got unexpected error: %v", err))
	}
	return v
}

// GetFamily retrieves the value with the specified key from
// the Family map field of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived) GetFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family_FamilyType_Union) *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family {

	if t == nil {
		return nil
	}

	key := FamilyType

	if lm, ok := t.Family[key]; ok {
		return lm
	}
	return nil
}

// DeleteFamily deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived) DeleteFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family_FamilyType_Union) {
	key := FamilyType

	delete(t.Family, key)
}

// AppendFamily appends the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family struct to the
// list Family of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived) AppendFamily(v *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family) error {
	key := v.FamilyType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family)
	}

	if _, ok := t.Family[key]; ok {
		return fmt.Errorf("duplicate key for list Family %v", key)
	}

	t.Family[key] = v
	return nil
}

// GetAdvertiseStaleToAllNeighbors retrieves the value of the leaf AdvertiseStaleToAllNeighbors from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseStaleToAllNeighbors is set, it can
// safely use t.GetAdvertiseStaleToAllNeighbors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseStaleToAllNeighbors == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived) GetAdvertiseStaleToAllNeighbors() bool {
	if t == nil || t.AdvertiseStaleToAllNeighbors == nil {
		return false
	}
	return *t.AdvertiseStaleToAllNeighbors
}

// GetAdvertisedStaleTime retrieves the value of the leaf AdvertisedStaleTime from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisedStaleTime is set, it can
// safely use t.GetAdvertisedStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisedStaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived) GetAdvertisedStaleTime() uint32 {
	if t == nil || t.AdvertisedStaleTime == nil {
		return 86400
	}
	return *t.AdvertisedStaleTime
}

// GetForwardingBitsSet retrieves the value of the leaf ForwardingBitsSet from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingBitsSet is set, it can
// safely use t.GetForwardingBitsSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingBitsSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived) GetForwardingBitsSet() E_NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_ForwardingBitsSet {
	if t == nil || t.ForwardingBitsSet == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_ForwardingBitsSet_none
	}
	return t.ForwardingBitsSet
}

// GetHelperOverrideRestartTime retrieves the value of the leaf HelperOverrideRestartTime from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperOverrideRestartTime is set, it can
// safely use t.GetHelperOverrideRestartTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperOverrideRestartTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived) GetHelperOverrideRestartTime() uint32 {
	if t == nil || t.HelperOverrideRestartTime == nil {
		return 0
	}
	return *t.HelperOverrideRestartTime
}

// GetHelperOverrideStaleTime retrieves the value of the leaf HelperOverrideStaleTime from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperOverrideStaleTime is set, it can
// safely use t.GetHelperOverrideStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperOverrideStaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived) GetHelperOverrideStaleTime() uint32 {
	if t == nil || t.HelperOverrideStaleTime == nil {
		return 0
	}
	return *t.HelperOverrideStaleTime
}

// GetWithoutNoExport retrieves the value of the leaf WithoutNoExport from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WithoutNoExport is set, it can
// safely use t.GetWithoutNoExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WithoutNoExport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived) GetWithoutNoExport() bool {
	if t == nil || t.WithoutNoExport == nil {
		return false
	}
	return *t.WithoutNoExport
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertiseStaleToAllNeighbors == nil {
		var v bool = false
		t.AdvertiseStaleToAllNeighbors = &v
	}
	if t.AdvertisedStaleTime == nil {
		var v uint32 = 86400
		t.AdvertisedStaleTime = &v
	}
	if t.ForwardingBitsSet == 0 {
		t.ForwardingBitsSet = NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_ForwardingBitsSet_none
	}
	if t.WithoutNoExport == nil {
		var v bool = false
		t.WithoutNoExport = &v
	}
	for _, e := range t.Family {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family represents the /nokia-conf/configure/groups/group/router/bgp/group/graceful-restart/long-lived/family YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family struct {
	AdvertisedStaleTime     *uint32                                                                                             `path:"advertised-stale-time" module:"nokia-conf"`
	FamilyType              NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family_FamilyType_Union `path:"family-type" module:"nokia-conf"`
	HelperOverrideStaleTime *uint32                                                                                             `path:"helper-override-stale-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family) IsYANGGoStruct() {
}

// GetAdvertisedStaleTime retrieves the value of the leaf AdvertisedStaleTime from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisedStaleTime is set, it can
// safely use t.GetAdvertisedStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisedStaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family) GetAdvertisedStaleTime() uint32 {
	if t == nil || t.AdvertisedStaleTime == nil {
		return 86400
	}
	return *t.AdvertisedStaleTime
}

// GetFamilyType retrieves the value of the leaf FamilyType from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FamilyType is set, it can
// safely use t.GetFamilyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FamilyType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family) GetFamilyType() NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family_FamilyType_Union {
	if t == nil || t.FamilyType == nil {
		return nil
	}
	return t.FamilyType
}

// GetHelperOverrideStaleTime retrieves the value of the leaf HelperOverrideStaleTime from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperOverrideStaleTime is set, it can
// safely use t.GetHelperOverrideStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperOverrideStaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family) GetHelperOverrideStaleTime() uint32 {
	if t == nil || t.HelperOverrideStaleTime == nil {
		return 16777216
	}
	return *t.HelperOverrideStaleTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertisedStaleTime == nil {
		var v uint32 = 86400
		t.AdvertisedStaleTime = &v
	}
	if t.HelperOverrideStaleTime == nil {
		var v uint32 = 16777216
		t.HelperOverrideStaleTime = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"family-type": t.FamilyType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_GracefulRestart_LongLived_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_HoldTime represents the /nokia-conf/configure/groups/group/router/bgp/group/hold-time YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_HoldTime struct {
	MinimumHoldTime *int32 `path:"minimum-hold-time" module:"nokia-conf"`
	Seconds         *int32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_HoldTime) IsYANGGoStruct() {}

// GetMinimumHoldTime retrieves the value of the leaf MinimumHoldTime from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinimumHoldTime is set, it can
// safely use t.GetMinimumHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinimumHoldTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_HoldTime) GetMinimumHoldTime() int32 {
	if t == nil || t.MinimumHoldTime == nil {
		return 0
	}
	return *t.MinimumHoldTime
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_HoldTime) GetSeconds() int32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MinimumHoldTime == nil {
		var v int32 = 0
		t.MinimumHoldTime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_HoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_HoldTime.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_HoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Import represents the /nokia-conf/configure/groups/group/router/bgp/group/import YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Import struct {
	Policy []string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Import implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Import) IsYANGGoStruct() {}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Import
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Import) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Import
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Import) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Import) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Import"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Import) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Import) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Import.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Import) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth represents the /nokia-conf/configure/groups/group/router/bgp/group/link-bandwidth YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth struct {
	AcceptFromEbgp     *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp     `path:"accept-from-ebgp" module:"nokia-conf"`
	AddToReceivedEbgp  *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp  `path:"add-to-received-ebgp" module:"nokia-conf"`
	AggregateUsedPaths *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths `path:"aggregate-used-paths" module:"nokia-conf"`
	SendToEbgp         *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_SendToEbgp         `path:"send-to-ebgp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth) IsYANGGoStruct() {}

// GetOrCreateAcceptFromEbgp retrieves the value of the AcceptFromEbgp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth) GetOrCreateAcceptFromEbgp() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp {
	if t.AcceptFromEbgp != nil {
		return t.AcceptFromEbgp
	}
	t.AcceptFromEbgp = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp{}
	return t.AcceptFromEbgp
}

// GetOrCreateAddToReceivedEbgp retrieves the value of the AddToReceivedEbgp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth) GetOrCreateAddToReceivedEbgp() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp {
	if t.AddToReceivedEbgp != nil {
		return t.AddToReceivedEbgp
	}
	t.AddToReceivedEbgp = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp{}
	return t.AddToReceivedEbgp
}

// GetOrCreateAggregateUsedPaths retrieves the value of the AggregateUsedPaths field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth) GetOrCreateAggregateUsedPaths() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths {
	if t.AggregateUsedPaths != nil {
		return t.AggregateUsedPaths
	}
	t.AggregateUsedPaths = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths{}
	return t.AggregateUsedPaths
}

// GetOrCreateSendToEbgp retrieves the value of the SendToEbgp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth) GetOrCreateSendToEbgp() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_SendToEbgp {
	if t.SendToEbgp != nil {
		return t.SendToEbgp
	}
	t.SendToEbgp = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_SendToEbgp{}
	return t.SendToEbgp
}

// GetAcceptFromEbgp returns the value of the AcceptFromEbgp struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth. If the receiver or the field AcceptFromEbgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth) GetAcceptFromEbgp() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp {
	if t != nil && t.AcceptFromEbgp != nil {
		return t.AcceptFromEbgp
	}
	return nil
}

// GetAddToReceivedEbgp returns the value of the AddToReceivedEbgp struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth. If the receiver or the field AddToReceivedEbgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth) GetAddToReceivedEbgp() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp {
	if t != nil && t.AddToReceivedEbgp != nil {
		return t.AddToReceivedEbgp
	}
	return nil
}

// GetAggregateUsedPaths returns the value of the AggregateUsedPaths struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth. If the receiver or the field AggregateUsedPaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth) GetAggregateUsedPaths() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths {
	if t != nil && t.AggregateUsedPaths != nil {
		return t.AggregateUsedPaths
	}
	return nil
}

// GetSendToEbgp returns the value of the SendToEbgp struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth. If the receiver or the field SendToEbgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth) GetSendToEbgp() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_SendToEbgp {
	if t != nil && t.SendToEbgp != nil {
		return t.SendToEbgp
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AcceptFromEbgp.PopulateDefaults()
	t.AddToReceivedEbgp.PopulateDefaults()
	t.AggregateUsedPaths.PopulateDefaults()
	t.SendToEbgp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp represents the /nokia-conf/configure/groups/group/router/bgp/group/link-bandwidth/accept-from-ebgp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
	VpnIpv4   *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6   *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp) IsYANGGoStruct() {
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AcceptFromEbgp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp represents the /nokia-conf/configure/groups/group/router/bgp/group/link-bandwidth/add-to-received-ebgp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
	VpnIpv4   *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6   *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp) IsYANGGoStruct() {
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AddToReceivedEbgp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths represents the /nokia-conf/configure/groups/group/router/bgp/group/link-bandwidth/aggregate-used-paths YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
	VpnIpv4   *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6   *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths) IsYANGGoStruct() {
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_AggregateUsedPaths) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_SendToEbgp represents the /nokia-conf/configure/groups/group/router/bgp/group/link-bandwidth/send-to-ebgp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_SendToEbgp struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
	VpnIpv4   *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6   *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_SendToEbgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_SendToEbgp) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_SendToEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_SendToEbgp) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_SendToEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_SendToEbgp) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_SendToEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_SendToEbgp) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_SendToEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_SendToEbgp) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_SendToEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_SendToEbgp) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_SendToEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_SendToEbgp) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_SendToEbgp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_SendToEbgp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_SendToEbgp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_SendToEbgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_SendToEbgp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_SendToEbgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_SendToEbgp.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LinkBandwidth_SendToEbgp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LocalAs represents the /nokia-conf/configure/groups/group/router/bgp/group/local-as YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LocalAs struct {
	AsNumber        *uint32 `path:"as-number" module:"nokia-conf"`
	PrependGlobalAs *bool   `path:"prepend-global-as" module:"nokia-conf"`
	Private         *bool   `path:"private" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LocalAs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LocalAs) IsYANGGoStruct() {}

// GetAsNumber retrieves the value of the leaf AsNumber from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsNumber is set, it can
// safely use t.GetAsNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LocalAs) GetAsNumber() uint32 {
	if t == nil || t.AsNumber == nil {
		return 0
	}
	return *t.AsNumber
}

// GetPrependGlobalAs retrieves the value of the leaf PrependGlobalAs from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrependGlobalAs is set, it can
// safely use t.GetPrependGlobalAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrependGlobalAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LocalAs) GetPrependGlobalAs() bool {
	if t == nil || t.PrependGlobalAs == nil {
		return true
	}
	return *t.PrependGlobalAs
}

// GetPrivate retrieves the value of the leaf Private from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Private is set, it can
// safely use t.GetPrivate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Private == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LocalAs) GetPrivate() bool {
	if t == nil || t.Private == nil {
		return false
	}
	return *t.Private
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LocalAs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LocalAs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PrependGlobalAs == nil {
		var v bool = true
		t.PrependGlobalAs = &v
	}
	if t.Private == nil {
		var v bool = false
		t.Private = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LocalAs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LocalAs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LocalAs) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LocalAs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LocalAs.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_LocalAs) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor represents the /nokia-conf/configure/groups/group/router/bgp/group/monitor YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor struct {
	AdminState      E_NokiaTypesSros_AdminState                                                   `path:"admin-state" module:"nokia-conf"`
	AllStations     *bool                                                                         `path:"all-stations" module:"nokia-conf"`
	RouteMonitoring *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_RouteMonitoring    `path:"route-monitoring" module:"nokia-conf"`
	Station         map[string]*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_Station `path:"station" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor) IsYANGGoStruct() {}

// NewStation creates a new entry in the Station list of the
// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor) NewStation(StationName string) (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_Station, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Station == nil {
		t.Station = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_Station)
	}

	key := StationName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Station[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Station", key)
	}

	t.Station[key] = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_Station{
		StationName: &StationName,
	}

	return t.Station[key], nil
}

// RenameStation renames an entry in the list Station within
// the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor) RenameStation(oldK, newK string) error {
	if _, ok := t.Station[newK]; ok {
		return fmt.Errorf("key %v already exists in Station", newK)
	}

	e, ok := t.Station[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Station", oldK)
	}
	e.StationName = &newK

	t.Station[newK] = e
	delete(t.Station, oldK)
	return nil
}

// GetOrCreateStation retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor) GetOrCreateStation(StationName string) *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_Station {

	key := StationName

	if v, ok := t.Station[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStation(StationName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStation got unexpected error: %v", err))
	}
	return v
}

// GetStation retrieves the value with the specified key from
// the Station map field of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor) GetStation(StationName string) *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_Station {

	if t == nil {
		return nil
	}

	key := StationName

	if lm, ok := t.Station[key]; ok {
		return lm
	}
	return nil
}

// DeleteStation deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor) DeleteStation(StationName string) {
	key := StationName

	delete(t.Station, key)
}

// AppendStation appends the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_Station struct to the
// list Station of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_Station already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor) AppendStation(v *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_Station) error {
	if v.StationName == nil {
		return fmt.Errorf("invalid nil key received for StationName")
	}

	key := *v.StationName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Station == nil {
		t.Station = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_Station)
	}

	if _, ok := t.Station[key]; ok {
		return fmt.Errorf("duplicate key for list Station %v", key)
	}

	t.Station[key] = v
	return nil
}

// GetOrCreateRouteMonitoring retrieves the value of the RouteMonitoring field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor) GetOrCreateRouteMonitoring() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_RouteMonitoring {
	if t.RouteMonitoring != nil {
		return t.RouteMonitoring
	}
	t.RouteMonitoring = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_RouteMonitoring{}
	return t.RouteMonitoring
}

// GetRouteMonitoring returns the value of the RouteMonitoring struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor. If the receiver or the field RouteMonitoring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor) GetRouteMonitoring() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_RouteMonitoring {
	if t != nil && t.RouteMonitoring != nil {
		return t.RouteMonitoring
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAllStations retrieves the value of the leaf AllStations from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllStations is set, it can
// safely use t.GetAllStations() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllStations == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor) GetAllStations() bool {
	if t == nil || t.AllStations == nil {
		return false
	}
	return *t.AllStations
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AllStations == nil {
		var v bool = false
		t.AllStations = &v
	}
	t.RouteMonitoring.PopulateDefaults()
	for _, e := range t.Station {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_RouteMonitoring represents the /nokia-conf/configure/groups/group/router/bgp/group/monitor/route-monitoring YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_RouteMonitoring struct {
	PostPolicy *bool `path:"post-policy" module:"nokia-conf"`
	PrePolicy  *bool `path:"pre-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_RouteMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_RouteMonitoring) IsYANGGoStruct() {}

// GetPostPolicy retrieves the value of the leaf PostPolicy from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_RouteMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PostPolicy is set, it can
// safely use t.GetPostPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PostPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_RouteMonitoring) GetPostPolicy() bool {
	if t == nil || t.PostPolicy == nil {
		return false
	}
	return *t.PostPolicy
}

// GetPrePolicy retrieves the value of the leaf PrePolicy from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_RouteMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrePolicy is set, it can
// safely use t.GetPrePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_RouteMonitoring) GetPrePolicy() bool {
	if t == nil || t.PrePolicy == nil {
		return false
	}
	return *t.PrePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_RouteMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_RouteMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PostPolicy == nil {
		var v bool = false
		t.PostPolicy = &v
	}
	if t.PrePolicy == nil {
		var v bool = false
		t.PrePolicy = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_RouteMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_RouteMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_RouteMonitoring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_RouteMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_RouteMonitoring.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_RouteMonitoring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_Station represents the /nokia-conf/configure/groups/group/router/bgp/group/monitor/station YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_Station struct {
	StationName *string `path:"station-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_Station implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_Station) IsYANGGoStruct() {}

// GetStationName retrieves the value of the leaf StationName from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_Station
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StationName is set, it can
// safely use t.GetStationName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StationName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_Station) GetStationName() string {
	if t == nil || t.StationName == nil {
		return ""
	}
	return *t.StationName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_Station
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_Station) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_Station struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_Station) ΛListKeyMap() (map[string]interface{}, error) {
	if t.StationName == nil {
		return nil, fmt.Errorf("nil value for key StationName")
	}

	return map[string]interface{}{
		"station-name": *t.StationName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_Station) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_Station"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_Station) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_Station) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_Station.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_Monitor_Station) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_NextHopUnchanged represents the /nokia-conf/configure/groups/group/router/bgp/group/next-hop-unchanged YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_NextHopUnchanged struct {
	Evpn      *bool `path:"evpn" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
	VpnIpv4   *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6   *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_NextHopUnchanged implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_NextHopUnchanged) IsYANGGoStruct() {}

// GetEvpn retrieves the value of the leaf Evpn from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_NextHopUnchanged
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Evpn is set, it can
// safely use t.GetEvpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Evpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_NextHopUnchanged) GetEvpn() bool {
	if t == nil || t.Evpn == nil {
		return false
	}
	return *t.Evpn
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_NextHopUnchanged
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_NextHopUnchanged) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_NextHopUnchanged
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_NextHopUnchanged) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_NextHopUnchanged
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_NextHopUnchanged) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_NextHopUnchanged
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_NextHopUnchanged) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_NextHopUnchanged
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_NextHopUnchanged) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Evpn == nil {
		var v bool = false
		t.Evpn = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_NextHopUnchanged) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_NextHopUnchanged"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_NextHopUnchanged) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_NextHopUnchanged) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_NextHopUnchanged.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_NextHopUnchanged) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OriginValidation represents the /nokia-conf/configure/groups/group/router/bgp/group/origin-validation YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OriginValidation struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OriginValidation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OriginValidation) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OriginValidation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OriginValidation) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OriginValidation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OriginValidation) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OriginValidation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OriginValidation) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OriginValidation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OriginValidation) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OriginValidation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OriginValidation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OriginValidation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OriginValidation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OriginValidation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OriginValidation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OriginValidation.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OriginValidation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering represents the /nokia-conf/configure/groups/group/router/bgp/group/outbound-route-filtering YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering struct {
	ExtendedCommunity *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity `path:"extended-community" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering) IsYANGGoStruct() {}

// GetOrCreateExtendedCommunity retrieves the value of the ExtendedCommunity field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering) GetOrCreateExtendedCommunity() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity {
	if t.ExtendedCommunity != nil {
		return t.ExtendedCommunity
	}
	t.ExtendedCommunity = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity{}
	return t.ExtendedCommunity
}

// GetExtendedCommunity returns the value of the ExtendedCommunity struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering. If the receiver or the field ExtendedCommunity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering) GetExtendedCommunity() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity {
	if t != nil && t.ExtendedCommunity != nil {
		return t.ExtendedCommunity
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ExtendedCommunity.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity represents the /nokia-conf/configure/groups/group/router/bgp/group/outbound-route-filtering/extended-community YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity struct {
	AcceptOrf *bool                                                                                               `path:"accept-orf" module:"nokia-conf"`
	SendOrf   *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf `path:"send-orf" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity) IsYANGGoStruct() {
}

// GetOrCreateSendOrf retrieves the value of the SendOrf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity) GetOrCreateSendOrf() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf {
	if t.SendOrf != nil {
		return t.SendOrf
	}
	t.SendOrf = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf{}
	return t.SendOrf
}

// GetSendOrf returns the value of the SendOrf struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity. If the receiver or the field SendOrf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity) GetSendOrf() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf {
	if t != nil && t.SendOrf != nil {
		return t.SendOrf
	}
	return nil
}

// GetAcceptOrf retrieves the value of the leaf AcceptOrf from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcceptOrf is set, it can
// safely use t.GetAcceptOrf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcceptOrf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity) GetAcceptOrf() bool {
	if t == nil || t.AcceptOrf == nil {
		return false
	}
	return *t.AcceptOrf
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SendOrf.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf represents the /nokia-conf/configure/groups/group/router/bgp/group/outbound-route-filtering/extended-community/send-orf YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf struct {
	RouteTarget map[string]*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget `path:"route-target" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf) IsYANGGoStruct() {
}

// NewRouteTarget creates a new entry in the RouteTarget list of the
// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf) NewRouteTarget(CommunityName string) (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouteTarget == nil {
		t.RouteTarget = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget)
	}

	key := CommunityName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RouteTarget[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RouteTarget", key)
	}

	t.RouteTarget[key] = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget{
		CommunityName: &CommunityName,
	}

	return t.RouteTarget[key], nil
}

// RenameRouteTarget renames an entry in the list RouteTarget within
// the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf) RenameRouteTarget(oldK, newK string) error {
	if _, ok := t.RouteTarget[newK]; ok {
		return fmt.Errorf("key %v already exists in RouteTarget", newK)
	}

	e, ok := t.RouteTarget[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RouteTarget", oldK)
	}
	e.CommunityName = &newK

	t.RouteTarget[newK] = e
	delete(t.RouteTarget, oldK)
	return nil
}

// GetOrCreateRouteTarget retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf) GetOrCreateRouteTarget(CommunityName string) *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget {

	key := CommunityName

	if v, ok := t.RouteTarget[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRouteTarget(CommunityName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRouteTarget got unexpected error: %v", err))
	}
	return v
}

// GetRouteTarget retrieves the value with the specified key from
// the RouteTarget map field of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf) GetRouteTarget(CommunityName string) *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget {

	if t == nil {
		return nil
	}

	key := CommunityName

	if lm, ok := t.RouteTarget[key]; ok {
		return lm
	}
	return nil
}

// DeleteRouteTarget deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf) DeleteRouteTarget(CommunityName string) {
	key := CommunityName

	delete(t.RouteTarget, key)
}

// AppendRouteTarget appends the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget struct to the
// list RouteTarget of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf) AppendRouteTarget(v *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) error {
	if v.CommunityName == nil {
		return fmt.Errorf("invalid nil key received for CommunityName")
	}

	key := *v.CommunityName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouteTarget == nil {
		t.RouteTarget = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget)
	}

	if _, ok := t.RouteTarget[key]; ok {
		return fmt.Errorf("duplicate key for list RouteTarget %v", key)
	}

	t.RouteTarget[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.RouteTarget {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget represents the /nokia-conf/configure/groups/group/router/bgp/group/outbound-route-filtering/extended-community/send-orf/route-target YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget struct {
	CommunityName *string `path:"community-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) IsYANGGoStruct() {
}

// GetCommunityName retrieves the value of the leaf CommunityName from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityName is set, it can
// safely use t.GetCommunityName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) GetCommunityName() string {
	if t == nil || t.CommunityName == nil {
		return ""
	}
	return *t.CommunityName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CommunityName == nil {
		return nil, fmt.Errorf("nil value for key CommunityName")
	}

	return map[string]interface{}{
		"community-name": *t.CommunityName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit represents the /nokia-conf/configure/groups/group/router/bgp/group/prefix-limit YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit struct {
	Family      NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit_Family_Union `path:"family" module:"nokia-conf"`
	IdleTimeout *int32                                                                     `path:"idle-timeout" module:"nokia-conf"`
	LogOnly     *bool                                                                      `path:"log-only" module:"nokia-conf"`
	Maximum     *uint32                                                                    `path:"maximum" module:"nokia-conf"`
	PostImport  *bool                                                                      `path:"post-import" module:"nokia-conf"`
	Threshold   *uint32                                                                    `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit) IsYANGGoStruct() {}

// GetFamily retrieves the value of the leaf Family from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Family is set, it can
// safely use t.GetFamily() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Family == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit) GetFamily() NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit_Family_Union {
	if t == nil || t.Family == nil {
		return nil
	}
	return t.Family
}

// GetIdleTimeout retrieves the value of the leaf IdleTimeout from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleTimeout is set, it can
// safely use t.GetIdleTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit) GetIdleTimeout() int32 {
	if t == nil || t.IdleTimeout == nil {
		return 0
	}
	return *t.IdleTimeout
}

// GetLogOnly retrieves the value of the leaf LogOnly from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogOnly is set, it can
// safely use t.GetLogOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit) GetLogOnly() bool {
	if t == nil || t.LogOnly == nil {
		return false
	}
	return *t.LogOnly
}

// GetMaximum retrieves the value of the leaf Maximum from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Maximum is set, it can
// safely use t.GetMaximum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Maximum == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit) GetMaximum() uint32 {
	if t == nil || t.Maximum == nil {
		return 0
	}
	return *t.Maximum
}

// GetPostImport retrieves the value of the leaf PostImport from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PostImport is set, it can
// safely use t.GetPostImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PostImport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit) GetPostImport() bool {
	if t == nil || t.PostImport == nil {
		return false
	}
	return *t.PostImport
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 90
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LogOnly == nil {
		var v bool = false
		t.LogOnly = &v
	}
	if t.PostImport == nil {
		var v bool = false
		t.PostImport = &v
	}
	if t.Threshold == nil {
		var v uint32 = 90
		t.Threshold = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"family": t.Family,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_PrefixLimit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_RemovePrivate represents the /nokia-conf/configure/groups/group/router/bgp/group/remove-private YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_RemovePrivate struct {
	Limited    *bool `path:"limited" module:"nokia-conf"`
	Replace    *bool `path:"replace" module:"nokia-conf"`
	SkipPeerAs *bool `path:"skip-peer-as" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_RemovePrivate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_RemovePrivate) IsYANGGoStruct() {}

// GetLimited retrieves the value of the leaf Limited from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_RemovePrivate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Limited is set, it can
// safely use t.GetLimited() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Limited == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_RemovePrivate) GetLimited() bool {
	if t == nil || t.Limited == nil {
		return false
	}
	return *t.Limited
}

// GetReplace retrieves the value of the leaf Replace from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_RemovePrivate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Replace is set, it can
// safely use t.GetReplace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Replace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_RemovePrivate) GetReplace() bool {
	if t == nil || t.Replace == nil {
		return false
	}
	return *t.Replace
}

// GetSkipPeerAs retrieves the value of the leaf SkipPeerAs from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_RemovePrivate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SkipPeerAs is set, it can
// safely use t.GetSkipPeerAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SkipPeerAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_RemovePrivate) GetSkipPeerAs() bool {
	if t == nil || t.SkipPeerAs == nil {
		return false
	}
	return *t.SkipPeerAs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_RemovePrivate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_RemovePrivate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Limited == nil {
		var v bool = false
		t.Limited = &v
	}
	if t.Replace == nil {
		var v bool = false
		t.Replace = &v
	}
	if t.SkipPeerAs == nil {
		var v bool = false
		t.SkipPeerAs = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_RemovePrivate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_RemovePrivate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_RemovePrivate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_RemovePrivate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_RemovePrivate.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_RemovePrivate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6 represents the /nokia-conf/configure/groups/group/router/bgp/group/segment-routing-v6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6 struct {
	RouteAdvertisement *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement `path:"route-advertisement" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6) IsYANGGoStruct() {}

// GetOrCreateRouteAdvertisement retrieves the value of the RouteAdvertisement field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6) GetOrCreateRouteAdvertisement() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement {
	if t.RouteAdvertisement != nil {
		return t.RouteAdvertisement
	}
	t.RouteAdvertisement = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement{}
	return t.RouteAdvertisement
}

// GetRouteAdvertisement returns the value of the RouteAdvertisement struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6. If the receiver or the field RouteAdvertisement is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6) GetRouteAdvertisement() *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement {
	if t != nil && t.RouteAdvertisement != nil {
		return t.RouteAdvertisement
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RouteAdvertisement.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement represents the /nokia-conf/configure/groups/group/router/bgp/group/segment-routing-v6/route-advertisement YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement struct {
	DropRoutesWithSrv6Tlvs *bool                                                                                                                                                                                                           `path:"drop-routes-with-srv6-tlvs" module:"nokia-conf"`
	Family                 map[NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family `path:"family" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement) IsYANGGoStruct() {
}

// NewFamily creates a new entry in the Family list of the
// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement) NewFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType_Union) (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family)
	}

	key := FamilyType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Family[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Family", key)
	}

	t.Family[key] = &NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family{
		FamilyType: FamilyType,
	}

	return t.Family[key], nil
}

// RenameFamily renames an entry in the list Family within
// the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement) RenameFamily(oldK, newK NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType_Union) error {
	if _, ok := t.Family[newK]; ok {
		return fmt.Errorf("key %v already exists in Family", newK)
	}

	e, ok := t.Family[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Family", oldK)
	}
	e.FamilyType = newK

	t.Family[newK] = e
	delete(t.Family, oldK)
	return nil
}

// GetOrCreateFamily retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement) GetOrCreateFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType_Union) *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family {

	key := FamilyType

	if v, ok := t.Family[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFamily(FamilyType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFamily got unexpected error: %v", err))
	}
	return v
}

// GetFamily retrieves the value with the specified key from
// the Family map field of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement) GetFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType_Union) *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family {

	if t == nil {
		return nil
	}

	key := FamilyType

	if lm, ok := t.Family[key]; ok {
		return lm
	}
	return nil
}

// DeleteFamily deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement) DeleteFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType_Union) {
	key := FamilyType

	delete(t.Family, key)
}

// AppendFamily appends the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family struct to the
// list Family of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement) AppendFamily(v *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family) error {
	key := v.FamilyType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family)
	}

	if _, ok := t.Family[key]; ok {
		return fmt.Errorf("duplicate key for list Family %v", key)
	}

	t.Family[key] = v
	return nil
}

// GetDropRoutesWithSrv6Tlvs retrieves the value of the leaf DropRoutesWithSrv6Tlvs from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropRoutesWithSrv6Tlvs is set, it can
// safely use t.GetDropRoutesWithSrv6Tlvs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropRoutesWithSrv6Tlvs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement) GetDropRoutesWithSrv6Tlvs() bool {
	if t == nil || t.DropRoutesWithSrv6Tlvs == nil {
		return false
	}
	return *t.DropRoutesWithSrv6Tlvs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DropRoutesWithSrv6Tlvs == nil {
		var v bool = false
		t.DropRoutesWithSrv6Tlvs = &v
	}
	for _, e := range t.Family {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family represents the /nokia-conf/configure/groups/group/router/bgp/group/segment-routing-v6/route-advertisement/family YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family struct {
	FamilyType    NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType_Union `path:"family-type" module:"nokia-conf"`
	StripSrv6Tlvs *bool                                                                                                         `path:"strip-srv6-tlvs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family) IsYANGGoStruct() {
}

// GetFamilyType retrieves the value of the leaf FamilyType from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FamilyType is set, it can
// safely use t.GetFamilyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FamilyType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family) GetFamilyType() NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType_Union {
	if t == nil || t.FamilyType == nil {
		return nil
	}
	return t.FamilyType
}

// GetStripSrv6Tlvs retrieves the value of the leaf StripSrv6Tlvs from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StripSrv6Tlvs is set, it can
// safely use t.GetStripSrv6Tlvs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StripSrv6Tlvs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family) GetStripSrv6Tlvs() bool {
	if t == nil || t.StripSrv6Tlvs == nil {
		return false
	}
	return *t.StripSrv6Tlvs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.StripSrv6Tlvs == nil {
		var v bool = false
		t.StripSrv6Tlvs = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"family-type": t.FamilyType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SegmentRoutingV6_RouteAdvertisement_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendCommunities represents the /nokia-conf/configure/groups/group/router/bgp/group/send-communities YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendCommunities struct {
	Extended *bool `path:"extended" module:"nokia-conf"`
	Large    *bool `path:"large" module:"nokia-conf"`
	Standard *bool `path:"standard" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendCommunities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendCommunities) IsYANGGoStruct() {}

// GetExtended retrieves the value of the leaf Extended from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendCommunities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendCommunities) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetLarge retrieves the value of the leaf Large from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendCommunities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Large is set, it can
// safely use t.GetLarge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Large == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendCommunities) GetLarge() bool {
	if t == nil || t.Large == nil {
		return false
	}
	return *t.Large
}

// GetStandard retrieves the value of the leaf Standard from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendCommunities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Standard is set, it can
// safely use t.GetStandard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Standard == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendCommunities) GetStandard() bool {
	if t == nil || t.Standard == nil {
		return false
	}
	return *t.Standard
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendCommunities
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendCommunities) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendCommunities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendCommunities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendCommunities) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendCommunities) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendCommunities.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendCommunities) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendDefault represents the /nokia-conf/configure/groups/group/router/bgp/group/send-default YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendDefault struct {
	ExportPolicy *string `path:"export-policy" module:"nokia-conf"`
	Ipv4         *bool   `path:"ipv4" module:"nokia-conf"`
	Ipv6         *bool   `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendDefault implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendDefault) IsYANGGoStruct() {}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendDefault
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendDefault) GetExportPolicy() string {
	if t == nil || t.ExportPolicy == nil {
		return ""
	}
	return *t.ExportPolicy
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendDefault
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendDefault) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendDefault
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendDefault) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendDefault
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendDefault) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendDefault) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendDefault"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendDefault) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendDefault) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendDefault.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Group_SendDefault) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_HoldTime represents the /nokia-conf/configure/groups/group/router/bgp/hold-time YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_HoldTime struct {
	MinimumHoldTime *int32 `path:"minimum-hold-time" module:"nokia-conf"`
	Seconds         *int32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_HoldTime) IsYANGGoStruct() {}

// GetMinimumHoldTime retrieves the value of the leaf MinimumHoldTime from the NokiaConf_Configure_Groups_Group_Router_Bgp_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinimumHoldTime is set, it can
// safely use t.GetMinimumHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinimumHoldTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_HoldTime) GetMinimumHoldTime() int32 {
	if t == nil || t.MinimumHoldTime == nil {
		return 0
	}
	return *t.MinimumHoldTime
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Router_Bgp_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_HoldTime) GetSeconds() int32 {
	if t == nil || t.Seconds == nil {
		return 90
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MinimumHoldTime == nil {
		var v int32 = 0
		t.MinimumHoldTime = &v
	}
	if t.Seconds == nil {
		var v int32 = 90
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_HoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_HoldTime.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_HoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Import represents the /nokia-conf/configure/groups/group/router/bgp/import YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Import struct {
	Policy []string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Import implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Import) IsYANGGoStruct() {}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Router_Bgp_Import
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Import) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Import
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Import) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Import) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Import"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Import) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Import) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Import.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Import) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_LabelAllocation represents the /nokia-conf/configure/groups/group/router/bgp/label-allocation YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_LabelAllocation struct {
	LabelIpv6 *NokiaConf_Configure_Groups_Group_Router_Bgp_LabelAllocation_LabelIpv6 `path:"label-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_LabelAllocation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_LabelAllocation) IsYANGGoStruct() {}

// GetOrCreateLabelIpv6 retrieves the value of the LabelIpv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_LabelAllocation) GetOrCreateLabelIpv6() *NokiaConf_Configure_Groups_Group_Router_Bgp_LabelAllocation_LabelIpv6 {
	if t.LabelIpv6 != nil {
		return t.LabelIpv6
	}
	t.LabelIpv6 = &NokiaConf_Configure_Groups_Group_Router_Bgp_LabelAllocation_LabelIpv6{}
	return t.LabelIpv6
}

// GetLabelIpv6 returns the value of the LabelIpv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_LabelAllocation. If the receiver or the field LabelIpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_LabelAllocation) GetLabelIpv6() *NokiaConf_Configure_Groups_Group_Router_Bgp_LabelAllocation_LabelIpv6 {
	if t != nil && t.LabelIpv6 != nil {
		return t.LabelIpv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_LabelAllocation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_LabelAllocation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LabelIpv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_LabelAllocation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_LabelAllocation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_LabelAllocation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_LabelAllocation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_LabelAllocation.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_LabelAllocation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_LabelAllocation_LabelIpv6 represents the /nokia-conf/configure/groups/group/router/bgp/label-allocation/label-ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_LabelAllocation_LabelIpv6 struct {
	ExplicitNull *bool `path:"explicit-null" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_LabelAllocation_LabelIpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_LabelAllocation_LabelIpv6) IsYANGGoStruct() {}

// GetExplicitNull retrieves the value of the leaf ExplicitNull from the NokiaConf_Configure_Groups_Group_Router_Bgp_LabelAllocation_LabelIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExplicitNull is set, it can
// safely use t.GetExplicitNull() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExplicitNull == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_LabelAllocation_LabelIpv6) GetExplicitNull() bool {
	if t == nil || t.ExplicitNull == nil {
		return true
	}
	return *t.ExplicitNull
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_LabelAllocation_LabelIpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_LabelAllocation_LabelIpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ExplicitNull == nil {
		var v bool = true
		t.ExplicitNull = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_LabelAllocation_LabelIpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_LabelAllocation_LabelIpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_LabelAllocation_LabelIpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_LabelAllocation_LabelIpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_LabelAllocation_LabelIpv6.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_LabelAllocation_LabelIpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_LocalAs represents the /nokia-conf/configure/groups/group/router/bgp/local-as YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_LocalAs struct {
	AsNumber        *uint32 `path:"as-number" module:"nokia-conf"`
	PrependGlobalAs *bool   `path:"prepend-global-as" module:"nokia-conf"`
	Private         *bool   `path:"private" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_LocalAs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_LocalAs) IsYANGGoStruct() {}

// GetAsNumber retrieves the value of the leaf AsNumber from the NokiaConf_Configure_Groups_Group_Router_Bgp_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsNumber is set, it can
// safely use t.GetAsNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_LocalAs) GetAsNumber() uint32 {
	if t == nil || t.AsNumber == nil {
		return 0
	}
	return *t.AsNumber
}

// GetPrependGlobalAs retrieves the value of the leaf PrependGlobalAs from the NokiaConf_Configure_Groups_Group_Router_Bgp_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrependGlobalAs is set, it can
// safely use t.GetPrependGlobalAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrependGlobalAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_LocalAs) GetPrependGlobalAs() bool {
	if t == nil || t.PrependGlobalAs == nil {
		return true
	}
	return *t.PrependGlobalAs
}

// GetPrivate retrieves the value of the leaf Private from the NokiaConf_Configure_Groups_Group_Router_Bgp_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Private is set, it can
// safely use t.GetPrivate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Private == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_LocalAs) GetPrivate() bool {
	if t == nil || t.Private == nil {
		return false
	}
	return *t.Private
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_LocalAs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_LocalAs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PrependGlobalAs == nil {
		var v bool = true
		t.PrependGlobalAs = &v
	}
	if t.Private == nil {
		var v bool = false
		t.Private = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_LocalAs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_LocalAs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_LocalAs) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_LocalAs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_LocalAs.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_LocalAs) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor represents the /nokia-conf/configure/groups/group/router/bgp/monitor YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor struct {
	AdminState      E_NokiaTypesSros_AdminState                                             `path:"admin-state" module:"nokia-conf"`
	AllStations     *bool                                                                   `path:"all-stations" module:"nokia-conf"`
	RouteMonitoring *NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_RouteMonitoring    `path:"route-monitoring" module:"nokia-conf"`
	Station         map[string]*NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_Station `path:"station" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor) IsYANGGoStruct() {}

// NewStation creates a new entry in the Station list of the
// NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor) NewStation(StationName string) (*NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_Station, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Station == nil {
		t.Station = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_Station)
	}

	key := StationName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Station[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Station", key)
	}

	t.Station[key] = &NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_Station{
		StationName: &StationName,
	}

	return t.Station[key], nil
}

// RenameStation renames an entry in the list Station within
// the NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor) RenameStation(oldK, newK string) error {
	if _, ok := t.Station[newK]; ok {
		return fmt.Errorf("key %v already exists in Station", newK)
	}

	e, ok := t.Station[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Station", oldK)
	}
	e.StationName = &newK

	t.Station[newK] = e
	delete(t.Station, oldK)
	return nil
}

// GetOrCreateStation retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor) GetOrCreateStation(StationName string) *NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_Station {

	key := StationName

	if v, ok := t.Station[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStation(StationName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStation got unexpected error: %v", err))
	}
	return v
}

// GetStation retrieves the value with the specified key from
// the Station map field of NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor) GetStation(StationName string) *NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_Station {

	if t == nil {
		return nil
	}

	key := StationName

	if lm, ok := t.Station[key]; ok {
		return lm
	}
	return nil
}

// DeleteStation deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor) DeleteStation(StationName string) {
	key := StationName

	delete(t.Station, key)
}

// AppendStation appends the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_Station struct to the
// list Station of NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_Station already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor) AppendStation(v *NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_Station) error {
	if v.StationName == nil {
		return fmt.Errorf("invalid nil key received for StationName")
	}

	key := *v.StationName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Station == nil {
		t.Station = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_Station)
	}

	if _, ok := t.Station[key]; ok {
		return fmt.Errorf("duplicate key for list Station %v", key)
	}

	t.Station[key] = v
	return nil
}

// GetOrCreateRouteMonitoring retrieves the value of the RouteMonitoring field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor) GetOrCreateRouteMonitoring() *NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_RouteMonitoring {
	if t.RouteMonitoring != nil {
		return t.RouteMonitoring
	}
	t.RouteMonitoring = &NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_RouteMonitoring{}
	return t.RouteMonitoring
}

// GetRouteMonitoring returns the value of the RouteMonitoring struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor. If the receiver or the field RouteMonitoring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor) GetRouteMonitoring() *NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_RouteMonitoring {
	if t != nil && t.RouteMonitoring != nil {
		return t.RouteMonitoring
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAllStations retrieves the value of the leaf AllStations from the NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllStations is set, it can
// safely use t.GetAllStations() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllStations == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor) GetAllStations() bool {
	if t == nil || t.AllStations == nil {
		return false
	}
	return *t.AllStations
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AllStations == nil {
		var v bool = false
		t.AllStations = &v
	}
	t.RouteMonitoring.PopulateDefaults()
	for _, e := range t.Station {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_RouteMonitoring represents the /nokia-conf/configure/groups/group/router/bgp/monitor/route-monitoring YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_RouteMonitoring struct {
	PostPolicy *bool `path:"post-policy" module:"nokia-conf"`
	PrePolicy  *bool `path:"pre-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_RouteMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_RouteMonitoring) IsYANGGoStruct() {}

// GetPostPolicy retrieves the value of the leaf PostPolicy from the NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_RouteMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PostPolicy is set, it can
// safely use t.GetPostPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PostPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_RouteMonitoring) GetPostPolicy() bool {
	if t == nil || t.PostPolicy == nil {
		return false
	}
	return *t.PostPolicy
}

// GetPrePolicy retrieves the value of the leaf PrePolicy from the NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_RouteMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrePolicy is set, it can
// safely use t.GetPrePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_RouteMonitoring) GetPrePolicy() bool {
	if t == nil || t.PrePolicy == nil {
		return false
	}
	return *t.PrePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_RouteMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_RouteMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PostPolicy == nil {
		var v bool = false
		t.PostPolicy = &v
	}
	if t.PrePolicy == nil {
		var v bool = false
		t.PrePolicy = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_RouteMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_RouteMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_RouteMonitoring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_RouteMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_RouteMonitoring.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_RouteMonitoring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_Station represents the /nokia-conf/configure/groups/group/router/bgp/monitor/station YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_Station struct {
	StationName *string `path:"station-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_Station implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_Station) IsYANGGoStruct() {}

// GetStationName retrieves the value of the leaf StationName from the NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_Station
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StationName is set, it can
// safely use t.GetStationName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StationName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_Station) GetStationName() string {
	if t == nil || t.StationName == nil {
		return ""
	}
	return *t.StationName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_Station
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_Station) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_Station struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_Station) ΛListKeyMap() (map[string]interface{}, error) {
	if t.StationName == nil {
		return nil, fmt.Errorf("nil value for key StationName")
	}

	return map[string]interface{}{
		"station-name": *t.StationName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_Station) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_Station"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_Station) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_Station) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_Station.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Monitor_Station) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath represents the /nokia-conf/configure/groups/group/router/bgp/multipath YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath struct {
	Ebgp        *uint32                                                                                                                                         `path:"ebgp" module:"nokia-conf"`
	Family      map[NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family `path:"family" module:"nokia-conf"`
	Ibgp        *uint32                                                                                                                                         `path:"ibgp" module:"nokia-conf"`
	MaxPaths    *uint32                                                                                                                                         `path:"max-paths" module:"nokia-conf"`
	Restrict    E_NokiaTypesBgp_Restrict                                                                                                                        `path:"restrict" module:"nokia-conf"`
	UnequalCost *bool                                                                                                                                           `path:"unequal-cost" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath) IsYANGGoStruct() {}

// NewFamily creates a new entry in the Family list of the
// NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath) NewFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family_FamilyType_Union) (*NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family)
	}

	key := FamilyType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Family[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Family", key)
	}

	t.Family[key] = &NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family{
		FamilyType: FamilyType,
	}

	return t.Family[key], nil
}

// RenameFamily renames an entry in the list Family within
// the NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath) RenameFamily(oldK, newK NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family_FamilyType_Union) error {
	if _, ok := t.Family[newK]; ok {
		return fmt.Errorf("key %v already exists in Family", newK)
	}

	e, ok := t.Family[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Family", oldK)
	}
	e.FamilyType = newK

	t.Family[newK] = e
	delete(t.Family, oldK)
	return nil
}

// GetOrCreateFamily retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath) GetOrCreateFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family_FamilyType_Union) *NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family {

	key := FamilyType

	if v, ok := t.Family[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFamily(FamilyType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFamily got unexpected error: %v", err))
	}
	return v
}

// GetFamily retrieves the value with the specified key from
// the Family map field of NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath) GetFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family_FamilyType_Union) *NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family {

	if t == nil {
		return nil
	}

	key := FamilyType

	if lm, ok := t.Family[key]; ok {
		return lm
	}
	return nil
}

// DeleteFamily deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath) DeleteFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family_FamilyType_Union) {
	key := FamilyType

	delete(t.Family, key)
}

// AppendFamily appends the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family struct to the
// list Family of NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath) AppendFamily(v *NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family) error {
	key := v.FamilyType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family)
	}

	if _, ok := t.Family[key]; ok {
		return fmt.Errorf("duplicate key for list Family %v", key)
	}

	t.Family[key] = v
	return nil
}

// GetEbgp retrieves the value of the leaf Ebgp from the NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ebgp is set, it can
// safely use t.GetEbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ebgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath) GetEbgp() uint32 {
	if t == nil || t.Ebgp == nil {
		return 0
	}
	return *t.Ebgp
}

// GetIbgp retrieves the value of the leaf Ibgp from the NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ibgp is set, it can
// safely use t.GetIbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ibgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath) GetIbgp() uint32 {
	if t == nil || t.Ibgp == nil {
		return 0
	}
	return *t.Ibgp
}

// GetMaxPaths retrieves the value of the leaf MaxPaths from the NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPaths is set, it can
// safely use t.GetMaxPaths() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPaths == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath) GetMaxPaths() uint32 {
	if t == nil || t.MaxPaths == nil {
		return 1
	}
	return *t.MaxPaths
}

// GetRestrict retrieves the value of the leaf Restrict from the NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Restrict is set, it can
// safely use t.GetRestrict() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Restrict == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath) GetRestrict() E_NokiaTypesBgp_Restrict {
	if t == nil || t.Restrict == 0 {
		return NokiaTypesBgp_Restrict_same_as_path_length
	}
	return t.Restrict
}

// GetUnequalCost retrieves the value of the leaf UnequalCost from the NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnequalCost is set, it can
// safely use t.GetUnequalCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnequalCost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath) GetUnequalCost() bool {
	if t == nil || t.UnequalCost == nil {
		return false
	}
	return *t.UnequalCost
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxPaths == nil {
		var v uint32 = 1
		t.MaxPaths = &v
	}
	if t.Restrict == 0 {
		t.Restrict = NokiaTypesBgp_Restrict_same_as_path_length
	}
	if t.UnequalCost == nil {
		var v bool = false
		t.UnequalCost = &v
	}
	for _, e := range t.Family {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family represents the /nokia-conf/configure/groups/group/router/bgp/multipath/family YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family struct {
	Ebgp        *uint32                                                                       `path:"ebgp" module:"nokia-conf"`
	FamilyType  NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family_FamilyType_Union `path:"family-type" module:"nokia-conf"`
	Ibgp        *uint32                                                                       `path:"ibgp" module:"nokia-conf"`
	MaxPaths    *uint32                                                                       `path:"max-paths" module:"nokia-conf"`
	Restrict    E_NokiaTypesBgp_Restrict                                                      `path:"restrict" module:"nokia-conf"`
	UnequalCost *bool                                                                         `path:"unequal-cost" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family) IsYANGGoStruct() {}

// GetEbgp retrieves the value of the leaf Ebgp from the NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ebgp is set, it can
// safely use t.GetEbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ebgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family) GetEbgp() uint32 {
	if t == nil || t.Ebgp == nil {
		return 0
	}
	return *t.Ebgp
}

// GetFamilyType retrieves the value of the leaf FamilyType from the NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FamilyType is set, it can
// safely use t.GetFamilyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FamilyType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family) GetFamilyType() NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family_FamilyType_Union {
	if t == nil || t.FamilyType == nil {
		return nil
	}
	return t.FamilyType
}

// GetIbgp retrieves the value of the leaf Ibgp from the NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ibgp is set, it can
// safely use t.GetIbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ibgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family) GetIbgp() uint32 {
	if t == nil || t.Ibgp == nil {
		return 0
	}
	return *t.Ibgp
}

// GetMaxPaths retrieves the value of the leaf MaxPaths from the NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPaths is set, it can
// safely use t.GetMaxPaths() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPaths == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family) GetMaxPaths() uint32 {
	if t == nil || t.MaxPaths == nil {
		return 0
	}
	return *t.MaxPaths
}

// GetRestrict retrieves the value of the leaf Restrict from the NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Restrict is set, it can
// safely use t.GetRestrict() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Restrict == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family) GetRestrict() E_NokiaTypesBgp_Restrict {
	if t == nil || t.Restrict == 0 {
		return NokiaTypesBgp_Restrict_same_as_path_length
	}
	return t.Restrict
}

// GetUnequalCost retrieves the value of the leaf UnequalCost from the NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnequalCost is set, it can
// safely use t.GetUnequalCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnequalCost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family) GetUnequalCost() bool {
	if t == nil || t.UnequalCost == nil {
		return false
	}
	return *t.UnequalCost
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Restrict == 0 {
		t.Restrict = NokiaTypesBgp_Restrict_same_as_path_length
	}
	if t.UnequalCost == nil {
		var v bool = false
		t.UnequalCost = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"family-type": t.FamilyType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Multipath_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor represents the /nokia-conf/configure/groups/group/router/bgp/neighbor YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor struct {
	AddPaths                          *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths                                                                                      `path:"add-paths" module:"nokia-conf" yangPresence:"true"`
	AdminState                        E_NokiaTypesSros_AdminState                                                                                                                         `path:"admin-state" module:"nokia-conf"`
	AdvertiseInactive                 *bool                                                                                                                                               `path:"advertise-inactive" module:"nokia-conf"`
	AdvertiseIpv6NextHops             *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AdvertiseIpv6NextHops                                                                         `path:"advertise-ipv6-next-hops" module:"nokia-conf" yangPresence:"true"`
	AdvertiseLdpPrefix                *bool                                                                                                                                               `path:"advertise-ldp-prefix" module:"nokia-conf"`
	AggregatorIdZero                  *bool                                                                                                                                               `path:"aggregator-id-zero" module:"nokia-conf"`
	Aigp                              *bool                                                                                                                                               `path:"aigp" module:"nokia-conf"`
	AsOverride                        *bool                                                                                                                                               `path:"as-override" module:"nokia-conf"`
	Asn_4Byte                         *bool                                                                                                                                               `path:"asn-4-byte" module:"nokia-conf"`
	AuthenticationKey                 *string                                                                                                                                             `path:"authentication-key" module:"nokia-conf"`
	AuthenticationKeychain            *string                                                                                                                                             `path:"authentication-keychain" module:"nokia-conf"`
	BfdLiveness                       *bool                                                                                                                                               `path:"bfd-liveness" module:"nokia-conf"`
	BlockPrefixSid                    *bool                                                                                                                                               `path:"block-prefix-sid" module:"nokia-conf"`
	CapabilityNegotiation             *bool                                                                                                                                               `path:"capability-negotiation" module:"nokia-conf"`
	ClientReflect                     *bool                                                                                                                                               `path:"client-reflect" module:"nokia-conf"`
	Cluster                           *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Cluster                                                                                       `path:"cluster" module:"nokia-conf"`
	ConnectRetry                      *int32                                                                                                                                              `path:"connect-retry" module:"nokia-conf"`
	DampPeerOscillations              *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations                                                                          `path:"damp-peer-oscillations" module:"nokia-conf" yangPresence:"true"`
	Damping                           *bool                                                                                                                                               `path:"damping" module:"nokia-conf"`
	DefRecvEvpnEncap                  E_NokiaTypesBgp_Encap                                                                                                                               `path:"def-recv-evpn-encap" module:"nokia-conf"`
	DefaultLabelPreference            *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultLabelPreference                                                                        `path:"default-label-preference" module:"nokia-conf"`
	DefaultPreference                 *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultPreference                                                                             `path:"default-preference" module:"nokia-conf"`
	DefaultRouteTarget                *bool                                                                                                                                               `path:"default-route-target" module:"nokia-conf"`
	Description                       *string                                                                                                                                             `path:"description" module:"nokia-conf"`
	EbgpDefaultRejectPolicy           *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy                                                                       `path:"ebgp-default-reject-policy" module:"nokia-conf" yangPresence:"true"`
	EgressEngineering                 *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EgressEngineering                                                                             `path:"egress-engineering" module:"nokia-conf" yangPresence:"true"`
	EgressPeerEngineeringLabelUnicast *bool                                                                                                                                               `path:"egress-peer-engineering-label-unicast" module:"nokia-conf"`
	EnforceFirstAs                    *bool                                                                                                                                               `path:"enforce-first-as" module:"nokia-conf"`
	ErrorHandling                     *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ErrorHandling                                                                                 `path:"error-handling" module:"nokia-conf"`
	Export                            *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Export                                                                                        `path:"export" module:"nokia-conf" yangPresence:"true"`
	ExtendedNhEncoding                *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ExtendedNhEncoding                                                                            `path:"extended-nh-encoding" module:"nokia-conf" yangPresence:"true"`
	Family                            *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family                                                                                        `path:"family" module:"nokia-conf" yangPresence:"true"`
	FastExternalFailover              *bool                                                                                                                                               `path:"fast-external-failover" module:"nokia-conf"`
	GracefulRestart                   *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart                                                                               `path:"graceful-restart" module:"nokia-conf" yangPresence:"true"`
	Group                             *string                                                                                                                                             `path:"group" module:"nokia-conf"`
	HoldTime                          *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_HoldTime                                                                                      `path:"hold-time" module:"nokia-conf"`
	Import                            *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Import                                                                                        `path:"import" module:"nokia-conf" yangPresence:"true"`
	InitialSendDelayZero              *bool                                                                                                                                               `path:"initial-send-delay-zero" module:"nokia-conf"`
	IpAddress                         *string                                                                                                                                             `path:"ip-address" module:"nokia-conf"`
	Keepalive                         *int32                                                                                                                                              `path:"keepalive" module:"nokia-conf"`
	L2VpnCiscoInterop                 *bool                                                                                                                                               `path:"l2vpn-cisco-interop" module:"nokia-conf"`
	LabelPreference                   *uint32                                                                                                                                             `path:"label-preference" module:"nokia-conf"`
	LinkBandwidth                     *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth                                                                                 `path:"link-bandwidth" module:"nokia-conf"`
	LocalAddress                      *string                                                                                                                                             `path:"local-address" module:"nokia-conf"`
	LocalAs                           *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LocalAs                                                                                       `path:"local-as" module:"nokia-conf"`
	LocalPreference                   *int64                                                                                                                                              `path:"local-preference" module:"nokia-conf"`
	LoopDetect                        E_NokiaTypesBgp_LoopDetect                                                                                                                          `path:"loop-detect" module:"nokia-conf"`
	LoopDetectThreshold               *uint32                                                                                                                                             `path:"loop-detect-threshold" module:"nokia-conf"`
	MedOut                            NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_MedOut_Union                                                                                   `path:"med-out" module:"nokia-conf"`
	MinRouteAdvertisement             *int16                                                                                                                                              `path:"min-route-advertisement" module:"nokia-conf"`
	Monitor                           *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor                                                                                       `path:"monitor" module:"nokia-conf" yangPresence:"true"`
	Multihop                          *int32                                                                                                                                              `path:"multihop" module:"nokia-conf"`
	MultipathEligible                 *bool                                                                                                                                               `path:"multipath-eligible" module:"nokia-conf"`
	NextHopSelf                       *bool                                                                                                                                               `path:"next-hop-self" module:"nokia-conf"`
	NextHopUnchanged                  *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_NextHopUnchanged                                                                              `path:"next-hop-unchanged" module:"nokia-conf" yangPresence:"true"`
	OriginValidation                  *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OriginValidation                                                                              `path:"origin-validation" module:"nokia-conf" yangPresence:"true"`
	OutboundRouteFiltering            *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering                                                                        `path:"outbound-route-filtering" module:"nokia-conf" yangPresence:"true"`
	Passive                           *bool                                                                                                                                               `path:"passive" module:"nokia-conf"`
	PathMtuDiscovery                  *bool                                                                                                                                               `path:"path-mtu-discovery" module:"nokia-conf"`
	PeerAs                            *uint32                                                                                                                                             `path:"peer-as" module:"nokia-conf"`
	PeerCreationType                  E_NokiaTypesBgp_PeerCreationType                                                                                                                    `path:"peer-creation-type" module:"nokia-conf"`
	PeerIpTracking                    *bool                                                                                                                                               `path:"peer-ip-tracking" module:"nokia-conf"`
	Preference                        *uint32                                                                                                                                             `path:"preference" module:"nokia-conf"`
	PrefixLimit                       map[NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit_Family_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit `path:"prefix-limit" module:"nokia-conf"`
	RemovePrivate                     *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_RemovePrivate                                                                                 `path:"remove-private" module:"nokia-conf" yangPresence:"true"`
	SegmentRoutingV6                  *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6                                                                              `path:"segment-routing-v6" module:"nokia-conf" yangPresence:"true"`
	SelectiveLabelIpv4Install         *bool                                                                                                                                               `path:"selective-label-ipv4-install" module:"nokia-conf"`
	SendCommunities                   *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendCommunities                                                                               `path:"send-communities" module:"nokia-conf"`
	SendDefault                       *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendDefault                                                                                   `path:"send-default" module:"nokia-conf" yangPresence:"true"`
	SplitHorizon                      *bool                                                                                                                                               `path:"split-horizon" module:"nokia-conf"`
	TcpMss                            NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_TcpMss_Union                                                                                   `path:"tcp-mss" module:"nokia-conf"`
	ThirdPartyNexthop                 *bool                                                                                                                                               `path:"third-party-nexthop" module:"nokia-conf"`
	TtlSecurity                       *uint32                                                                                                                                             `path:"ttl-security" module:"nokia-conf"`
	Type                              E_NokiaTypesBgp_PeerType                                                                                                                            `path:"type" module:"nokia-conf"`
	VpnApplyExport                    *bool                                                                                                                                               `path:"vpn-apply-export" module:"nokia-conf"`
	VpnApplyImport                    *bool                                                                                                                                               `path:"vpn-apply-import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) IsYANGGoStruct() {}

// NewPrefixLimit creates a new entry in the PrefixLimit list of the
// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) NewPrefixLimit(Family NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit_Family_Union) (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixLimit == nil {
		t.PrefixLimit = make(map[NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit_Family_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit)
	}

	key := Family

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrefixLimit[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrefixLimit", key)
	}

	t.PrefixLimit[key] = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit{
		Family: Family,
	}

	return t.PrefixLimit[key], nil
}

// RenamePrefixLimit renames an entry in the list PrefixLimit within
// the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) RenamePrefixLimit(oldK, newK NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit_Family_Union) error {
	if _, ok := t.PrefixLimit[newK]; ok {
		return fmt.Errorf("key %v already exists in PrefixLimit", newK)
	}

	e, ok := t.PrefixLimit[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrefixLimit", oldK)
	}
	e.Family = newK

	t.PrefixLimit[newK] = e
	delete(t.PrefixLimit, oldK)
	return nil
}

// GetOrCreatePrefixLimit retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetOrCreatePrefixLimit(Family NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit_Family_Union) *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit {

	key := Family

	if v, ok := t.PrefixLimit[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefixLimit(Family)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefixLimit got unexpected error: %v", err))
	}
	return v
}

// GetPrefixLimit retrieves the value with the specified key from
// the PrefixLimit map field of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetPrefixLimit(Family NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit_Family_Union) *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit {

	if t == nil {
		return nil
	}

	key := Family

	if lm, ok := t.PrefixLimit[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefixLimit deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) DeletePrefixLimit(Family NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit_Family_Union) {
	key := Family

	delete(t.PrefixLimit, key)
}

// AppendPrefixLimit appends the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit struct to the
// list PrefixLimit of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) AppendPrefixLimit(v *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit) error {
	key := v.Family

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixLimit == nil {
		t.PrefixLimit = make(map[NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit_Family_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit)
	}

	if _, ok := t.PrefixLimit[key]; ok {
		return fmt.Errorf("duplicate key for list PrefixLimit %v", key)
	}

	t.PrefixLimit[key] = v
	return nil
}

// GetOrCreateAddPaths retrieves the value of the AddPaths field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetOrCreateAddPaths() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths {
	if t.AddPaths != nil {
		return t.AddPaths
	}
	t.AddPaths = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths{}
	return t.AddPaths
}

// GetOrCreateAdvertiseIpv6NextHops retrieves the value of the AdvertiseIpv6NextHops field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetOrCreateAdvertiseIpv6NextHops() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AdvertiseIpv6NextHops {
	if t.AdvertiseIpv6NextHops != nil {
		return t.AdvertiseIpv6NextHops
	}
	t.AdvertiseIpv6NextHops = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AdvertiseIpv6NextHops{}
	return t.AdvertiseIpv6NextHops
}

// GetOrCreateCluster retrieves the value of the Cluster field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetOrCreateCluster() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Cluster {
	if t.Cluster != nil {
		return t.Cluster
	}
	t.Cluster = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Cluster{}
	return t.Cluster
}

// GetOrCreateDampPeerOscillations retrieves the value of the DampPeerOscillations field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetOrCreateDampPeerOscillations() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations {
	if t.DampPeerOscillations != nil {
		return t.DampPeerOscillations
	}
	t.DampPeerOscillations = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations{}
	return t.DampPeerOscillations
}

// GetOrCreateDefaultLabelPreference retrieves the value of the DefaultLabelPreference field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetOrCreateDefaultLabelPreference() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultLabelPreference {
	if t.DefaultLabelPreference != nil {
		return t.DefaultLabelPreference
	}
	t.DefaultLabelPreference = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultLabelPreference{}
	return t.DefaultLabelPreference
}

// GetOrCreateDefaultPreference retrieves the value of the DefaultPreference field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetOrCreateDefaultPreference() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultPreference {
	if t.DefaultPreference != nil {
		return t.DefaultPreference
	}
	t.DefaultPreference = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultPreference{}
	return t.DefaultPreference
}

// GetOrCreateEbgpDefaultRejectPolicy retrieves the value of the EbgpDefaultRejectPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetOrCreateEbgpDefaultRejectPolicy() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy {
	if t.EbgpDefaultRejectPolicy != nil {
		return t.EbgpDefaultRejectPolicy
	}
	t.EbgpDefaultRejectPolicy = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy{}
	return t.EbgpDefaultRejectPolicy
}

// GetOrCreateEgressEngineering retrieves the value of the EgressEngineering field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetOrCreateEgressEngineering() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EgressEngineering {
	if t.EgressEngineering != nil {
		return t.EgressEngineering
	}
	t.EgressEngineering = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EgressEngineering{}
	return t.EgressEngineering
}

// GetOrCreateErrorHandling retrieves the value of the ErrorHandling field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetOrCreateErrorHandling() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ErrorHandling {
	if t.ErrorHandling != nil {
		return t.ErrorHandling
	}
	t.ErrorHandling = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ErrorHandling{}
	return t.ErrorHandling
}

// GetOrCreateExport retrieves the value of the Export field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetOrCreateExport() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Export {
	if t.Export != nil {
		return t.Export
	}
	t.Export = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Export{}
	return t.Export
}

// GetOrCreateExtendedNhEncoding retrieves the value of the ExtendedNhEncoding field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetOrCreateExtendedNhEncoding() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ExtendedNhEncoding {
	if t.ExtendedNhEncoding != nil {
		return t.ExtendedNhEncoding
	}
	t.ExtendedNhEncoding = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ExtendedNhEncoding{}
	return t.ExtendedNhEncoding
}

// GetOrCreateFamily retrieves the value of the Family field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetOrCreateFamily() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family {
	if t.Family != nil {
		return t.Family
	}
	t.Family = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family{}
	return t.Family
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetOrCreateGracefulRestart() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetOrCreateHoldTime() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_HoldTime{}
	return t.HoldTime
}

// GetOrCreateImport retrieves the value of the Import field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetOrCreateImport() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Import {
	if t.Import != nil {
		return t.Import
	}
	t.Import = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Import{}
	return t.Import
}

// GetOrCreateLinkBandwidth retrieves the value of the LinkBandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetOrCreateLinkBandwidth() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth {
	if t.LinkBandwidth != nil {
		return t.LinkBandwidth
	}
	t.LinkBandwidth = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth{}
	return t.LinkBandwidth
}

// GetOrCreateLocalAs retrieves the value of the LocalAs field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetOrCreateLocalAs() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LocalAs {
	if t.LocalAs != nil {
		return t.LocalAs
	}
	t.LocalAs = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LocalAs{}
	return t.LocalAs
}

// GetOrCreateMonitor retrieves the value of the Monitor field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetOrCreateMonitor() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor {
	if t.Monitor != nil {
		return t.Monitor
	}
	t.Monitor = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor{}
	return t.Monitor
}

// GetOrCreateNextHopUnchanged retrieves the value of the NextHopUnchanged field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetOrCreateNextHopUnchanged() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_NextHopUnchanged {
	if t.NextHopUnchanged != nil {
		return t.NextHopUnchanged
	}
	t.NextHopUnchanged = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_NextHopUnchanged{}
	return t.NextHopUnchanged
}

// GetOrCreateOriginValidation retrieves the value of the OriginValidation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetOrCreateOriginValidation() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OriginValidation {
	if t.OriginValidation != nil {
		return t.OriginValidation
	}
	t.OriginValidation = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OriginValidation{}
	return t.OriginValidation
}

// GetOrCreateOutboundRouteFiltering retrieves the value of the OutboundRouteFiltering field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetOrCreateOutboundRouteFiltering() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering {
	if t.OutboundRouteFiltering != nil {
		return t.OutboundRouteFiltering
	}
	t.OutboundRouteFiltering = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering{}
	return t.OutboundRouteFiltering
}

// GetOrCreateRemovePrivate retrieves the value of the RemovePrivate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetOrCreateRemovePrivate() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_RemovePrivate {
	if t.RemovePrivate != nil {
		return t.RemovePrivate
	}
	t.RemovePrivate = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_RemovePrivate{}
	return t.RemovePrivate
}

// GetOrCreateSegmentRoutingV6 retrieves the value of the SegmentRoutingV6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetOrCreateSegmentRoutingV6() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6 {
	if t.SegmentRoutingV6 != nil {
		return t.SegmentRoutingV6
	}
	t.SegmentRoutingV6 = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6{}
	return t.SegmentRoutingV6
}

// GetOrCreateSendCommunities retrieves the value of the SendCommunities field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetOrCreateSendCommunities() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendCommunities {
	if t.SendCommunities != nil {
		return t.SendCommunities
	}
	t.SendCommunities = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendCommunities{}
	return t.SendCommunities
}

// GetOrCreateSendDefault retrieves the value of the SendDefault field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetOrCreateSendDefault() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendDefault {
	if t.SendDefault != nil {
		return t.SendDefault
	}
	t.SendDefault = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendDefault{}
	return t.SendDefault
}

// GetAddPaths returns the value of the AddPaths struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor. If the receiver or the field AddPaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetAddPaths() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths {
	if t != nil && t.AddPaths != nil {
		return t.AddPaths
	}
	return nil
}

// GetAdvertiseIpv6NextHops returns the value of the AdvertiseIpv6NextHops struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor. If the receiver or the field AdvertiseIpv6NextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetAdvertiseIpv6NextHops() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AdvertiseIpv6NextHops {
	if t != nil && t.AdvertiseIpv6NextHops != nil {
		return t.AdvertiseIpv6NextHops
	}
	return nil
}

// GetCluster returns the value of the Cluster struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor. If the receiver or the field Cluster is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetCluster() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Cluster {
	if t != nil && t.Cluster != nil {
		return t.Cluster
	}
	return nil
}

// GetDampPeerOscillations returns the value of the DampPeerOscillations struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor. If the receiver or the field DampPeerOscillations is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetDampPeerOscillations() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations {
	if t != nil && t.DampPeerOscillations != nil {
		return t.DampPeerOscillations
	}
	return nil
}

// GetDefaultLabelPreference returns the value of the DefaultLabelPreference struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor. If the receiver or the field DefaultLabelPreference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetDefaultLabelPreference() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultLabelPreference {
	if t != nil && t.DefaultLabelPreference != nil {
		return t.DefaultLabelPreference
	}
	return nil
}

// GetDefaultPreference returns the value of the DefaultPreference struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor. If the receiver or the field DefaultPreference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetDefaultPreference() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultPreference {
	if t != nil && t.DefaultPreference != nil {
		return t.DefaultPreference
	}
	return nil
}

// GetEbgpDefaultRejectPolicy returns the value of the EbgpDefaultRejectPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor. If the receiver or the field EbgpDefaultRejectPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetEbgpDefaultRejectPolicy() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy {
	if t != nil && t.EbgpDefaultRejectPolicy != nil {
		return t.EbgpDefaultRejectPolicy
	}
	return nil
}

// GetEgressEngineering returns the value of the EgressEngineering struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor. If the receiver or the field EgressEngineering is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetEgressEngineering() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EgressEngineering {
	if t != nil && t.EgressEngineering != nil {
		return t.EgressEngineering
	}
	return nil
}

// GetErrorHandling returns the value of the ErrorHandling struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor. If the receiver or the field ErrorHandling is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetErrorHandling() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ErrorHandling {
	if t != nil && t.ErrorHandling != nil {
		return t.ErrorHandling
	}
	return nil
}

// GetExport returns the value of the Export struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor. If the receiver or the field Export is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetExport() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Export {
	if t != nil && t.Export != nil {
		return t.Export
	}
	return nil
}

// GetExtendedNhEncoding returns the value of the ExtendedNhEncoding struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor. If the receiver or the field ExtendedNhEncoding is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetExtendedNhEncoding() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ExtendedNhEncoding {
	if t != nil && t.ExtendedNhEncoding != nil {
		return t.ExtendedNhEncoding
	}
	return nil
}

// GetFamily returns the value of the Family struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor. If the receiver or the field Family is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetFamily() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family {
	if t != nil && t.Family != nil {
		return t.Family
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetGracefulRestart() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetHoldTime() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetImport returns the value of the Import struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor. If the receiver or the field Import is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetImport() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Import {
	if t != nil && t.Import != nil {
		return t.Import
	}
	return nil
}

// GetLinkBandwidth returns the value of the LinkBandwidth struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor. If the receiver or the field LinkBandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetLinkBandwidth() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth {
	if t != nil && t.LinkBandwidth != nil {
		return t.LinkBandwidth
	}
	return nil
}

// GetLocalAs returns the value of the LocalAs struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor. If the receiver or the field LocalAs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetLocalAs() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LocalAs {
	if t != nil && t.LocalAs != nil {
		return t.LocalAs
	}
	return nil
}

// GetMonitor returns the value of the Monitor struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor. If the receiver or the field Monitor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetMonitor() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor {
	if t != nil && t.Monitor != nil {
		return t.Monitor
	}
	return nil
}

// GetNextHopUnchanged returns the value of the NextHopUnchanged struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor. If the receiver or the field NextHopUnchanged is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetNextHopUnchanged() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_NextHopUnchanged {
	if t != nil && t.NextHopUnchanged != nil {
		return t.NextHopUnchanged
	}
	return nil
}

// GetOriginValidation returns the value of the OriginValidation struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor. If the receiver or the field OriginValidation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetOriginValidation() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OriginValidation {
	if t != nil && t.OriginValidation != nil {
		return t.OriginValidation
	}
	return nil
}

// GetOutboundRouteFiltering returns the value of the OutboundRouteFiltering struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor. If the receiver or the field OutboundRouteFiltering is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetOutboundRouteFiltering() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering {
	if t != nil && t.OutboundRouteFiltering != nil {
		return t.OutboundRouteFiltering
	}
	return nil
}

// GetRemovePrivate returns the value of the RemovePrivate struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor. If the receiver or the field RemovePrivate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetRemovePrivate() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_RemovePrivate {
	if t != nil && t.RemovePrivate != nil {
		return t.RemovePrivate
	}
	return nil
}

// GetSegmentRoutingV6 returns the value of the SegmentRoutingV6 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor. If the receiver or the field SegmentRoutingV6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetSegmentRoutingV6() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6 {
	if t != nil && t.SegmentRoutingV6 != nil {
		return t.SegmentRoutingV6
	}
	return nil
}

// GetSendCommunities returns the value of the SendCommunities struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor. If the receiver or the field SendCommunities is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetSendCommunities() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendCommunities {
	if t != nil && t.SendCommunities != nil {
		return t.SendCommunities
	}
	return nil
}

// GetSendDefault returns the value of the SendDefault struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor. If the receiver or the field SendDefault is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetSendDefault() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendDefault {
	if t != nil && t.SendDefault != nil {
		return t.SendDefault
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAdvertiseInactive retrieves the value of the leaf AdvertiseInactive from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseInactive is set, it can
// safely use t.GetAdvertiseInactive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseInactive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetAdvertiseInactive() bool {
	if t == nil || t.AdvertiseInactive == nil {
		return false
	}
	return *t.AdvertiseInactive
}

// GetAdvertiseLdpPrefix retrieves the value of the leaf AdvertiseLdpPrefix from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseLdpPrefix is set, it can
// safely use t.GetAdvertiseLdpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseLdpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetAdvertiseLdpPrefix() bool {
	if t == nil || t.AdvertiseLdpPrefix == nil {
		return false
	}
	return *t.AdvertiseLdpPrefix
}

// GetAggregatorIdZero retrieves the value of the leaf AggregatorIdZero from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AggregatorIdZero is set, it can
// safely use t.GetAggregatorIdZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AggregatorIdZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetAggregatorIdZero() bool {
	if t == nil || t.AggregatorIdZero == nil {
		return false
	}
	return *t.AggregatorIdZero
}

// GetAigp retrieves the value of the leaf Aigp from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aigp is set, it can
// safely use t.GetAigp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aigp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetAigp() bool {
	if t == nil || t.Aigp == nil {
		return false
	}
	return *t.Aigp
}

// GetAsOverride retrieves the value of the leaf AsOverride from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsOverride is set, it can
// safely use t.GetAsOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetAsOverride() bool {
	if t == nil || t.AsOverride == nil {
		return false
	}
	return *t.AsOverride
}

// GetAsn_4Byte retrieves the value of the leaf Asn_4Byte from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Asn_4Byte is set, it can
// safely use t.GetAsn_4Byte() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Asn_4Byte == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetAsn_4Byte() bool {
	if t == nil || t.Asn_4Byte == nil {
		return false
	}
	return *t.Asn_4Byte
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationKeychain retrieves the value of the leaf AuthenticationKeychain from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKeychain is set, it can
// safely use t.GetAuthenticationKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKeychain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetAuthenticationKeychain() string {
	if t == nil || t.AuthenticationKeychain == nil {
		return ""
	}
	return *t.AuthenticationKeychain
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetBlockPrefixSid retrieves the value of the leaf BlockPrefixSid from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockPrefixSid is set, it can
// safely use t.GetBlockPrefixSid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockPrefixSid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetBlockPrefixSid() bool {
	if t == nil || t.BlockPrefixSid == nil {
		return false
	}
	return *t.BlockPrefixSid
}

// GetCapabilityNegotiation retrieves the value of the leaf CapabilityNegotiation from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CapabilityNegotiation is set, it can
// safely use t.GetCapabilityNegotiation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CapabilityNegotiation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetCapabilityNegotiation() bool {
	if t == nil || t.CapabilityNegotiation == nil {
		return false
	}
	return *t.CapabilityNegotiation
}

// GetClientReflect retrieves the value of the leaf ClientReflect from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientReflect is set, it can
// safely use t.GetClientReflect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientReflect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetClientReflect() bool {
	if t == nil || t.ClientReflect == nil {
		return false
	}
	return *t.ClientReflect
}

// GetConnectRetry retrieves the value of the leaf ConnectRetry from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectRetry is set, it can
// safely use t.GetConnectRetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectRetry == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetConnectRetry() int32 {
	if t == nil || t.ConnectRetry == nil {
		return 0
	}
	return *t.ConnectRetry
}

// GetDamping retrieves the value of the leaf Damping from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Damping is set, it can
// safely use t.GetDamping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Damping == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetDamping() bool {
	if t == nil || t.Damping == nil {
		return false
	}
	return *t.Damping
}

// GetDefRecvEvpnEncap retrieves the value of the leaf DefRecvEvpnEncap from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefRecvEvpnEncap is set, it can
// safely use t.GetDefRecvEvpnEncap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefRecvEvpnEncap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetDefRecvEvpnEncap() E_NokiaTypesBgp_Encap {
	if t == nil || t.DefRecvEvpnEncap == 0 {
		return 0
	}
	return t.DefRecvEvpnEncap
}

// GetDefaultRouteTarget retrieves the value of the leaf DefaultRouteTarget from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultRouteTarget is set, it can
// safely use t.GetDefaultRouteTarget() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultRouteTarget == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetDefaultRouteTarget() bool {
	if t == nil || t.DefaultRouteTarget == nil {
		return false
	}
	return *t.DefaultRouteTarget
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEgressPeerEngineeringLabelUnicast retrieves the value of the leaf EgressPeerEngineeringLabelUnicast from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EgressPeerEngineeringLabelUnicast is set, it can
// safely use t.GetEgressPeerEngineeringLabelUnicast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EgressPeerEngineeringLabelUnicast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetEgressPeerEngineeringLabelUnicast() bool {
	if t == nil || t.EgressPeerEngineeringLabelUnicast == nil {
		return false
	}
	return *t.EgressPeerEngineeringLabelUnicast
}

// GetEnforceFirstAs retrieves the value of the leaf EnforceFirstAs from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnforceFirstAs is set, it can
// safely use t.GetEnforceFirstAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnforceFirstAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetEnforceFirstAs() bool {
	if t == nil || t.EnforceFirstAs == nil {
		return false
	}
	return *t.EnforceFirstAs
}

// GetFastExternalFailover retrieves the value of the leaf FastExternalFailover from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastExternalFailover is set, it can
// safely use t.GetFastExternalFailover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastExternalFailover == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetFastExternalFailover() bool {
	if t == nil || t.FastExternalFailover == nil {
		return false
	}
	return *t.FastExternalFailover
}

// GetGroup retrieves the value of the leaf Group from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetGroup() string {
	if t == nil || t.Group == nil {
		return ""
	}
	return *t.Group
}

// GetInitialSendDelayZero retrieves the value of the leaf InitialSendDelayZero from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialSendDelayZero is set, it can
// safely use t.GetInitialSendDelayZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialSendDelayZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetInitialSendDelayZero() bool {
	if t == nil || t.InitialSendDelayZero == nil {
		return false
	}
	return *t.InitialSendDelayZero
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetKeepalive retrieves the value of the leaf Keepalive from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keepalive is set, it can
// safely use t.GetKeepalive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keepalive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetKeepalive() int32 {
	if t == nil || t.Keepalive == nil {
		return 0
	}
	return *t.Keepalive
}

// GetL2VpnCiscoInterop retrieves the value of the leaf L2VpnCiscoInterop from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2VpnCiscoInterop is set, it can
// safely use t.GetL2VpnCiscoInterop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2VpnCiscoInterop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetL2VpnCiscoInterop() bool {
	if t == nil || t.L2VpnCiscoInterop == nil {
		return false
	}
	return *t.L2VpnCiscoInterop
}

// GetLabelPreference retrieves the value of the leaf LabelPreference from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelPreference is set, it can
// safely use t.GetLabelPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetLabelPreference() uint32 {
	if t == nil || t.LabelPreference == nil {
		return 0
	}
	return *t.LabelPreference
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetLocalPreference retrieves the value of the leaf LocalPreference from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPreference is set, it can
// safely use t.GetLocalPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetLocalPreference() int64 {
	if t == nil || t.LocalPreference == nil {
		return 0
	}
	return *t.LocalPreference
}

// GetLoopDetect retrieves the value of the leaf LoopDetect from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopDetect is set, it can
// safely use t.GetLoopDetect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopDetect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetLoopDetect() E_NokiaTypesBgp_LoopDetect {
	if t == nil || t.LoopDetect == 0 {
		return 0
	}
	return t.LoopDetect
}

// GetLoopDetectThreshold retrieves the value of the leaf LoopDetectThreshold from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopDetectThreshold is set, it can
// safely use t.GetLoopDetectThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopDetectThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetLoopDetectThreshold() uint32 {
	if t == nil || t.LoopDetectThreshold == nil {
		return 0
	}
	return *t.LoopDetectThreshold
}

// GetMedOut retrieves the value of the leaf MedOut from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MedOut is set, it can
// safely use t.GetMedOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MedOut == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetMedOut() NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_MedOut_Union {
	if t == nil || t.MedOut == nil {
		return nil
	}
	return t.MedOut
}

// GetMinRouteAdvertisement retrieves the value of the leaf MinRouteAdvertisement from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinRouteAdvertisement is set, it can
// safely use t.GetMinRouteAdvertisement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinRouteAdvertisement == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetMinRouteAdvertisement() int16 {
	if t == nil || t.MinRouteAdvertisement == nil {
		return 0
	}
	return *t.MinRouteAdvertisement
}

// GetMultihop retrieves the value of the leaf Multihop from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multihop is set, it can
// safely use t.GetMultihop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multihop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetMultihop() int32 {
	if t == nil || t.Multihop == nil {
		return 0
	}
	return *t.Multihop
}

// GetMultipathEligible retrieves the value of the leaf MultipathEligible from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultipathEligible is set, it can
// safely use t.GetMultipathEligible() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultipathEligible == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetMultipathEligible() bool {
	if t == nil || t.MultipathEligible == nil {
		return false
	}
	return *t.MultipathEligible
}

// GetNextHopSelf retrieves the value of the leaf NextHopSelf from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopSelf is set, it can
// safely use t.GetNextHopSelf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopSelf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetNextHopSelf() bool {
	if t == nil || t.NextHopSelf == nil {
		return false
	}
	return *t.NextHopSelf
}

// GetPassive retrieves the value of the leaf Passive from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Passive is set, it can
// safely use t.GetPassive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Passive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetPassive() bool {
	if t == nil || t.Passive == nil {
		return false
	}
	return *t.Passive
}

// GetPathMtuDiscovery retrieves the value of the leaf PathMtuDiscovery from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathMtuDiscovery is set, it can
// safely use t.GetPathMtuDiscovery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathMtuDiscovery == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetPathMtuDiscovery() bool {
	if t == nil || t.PathMtuDiscovery == nil {
		return false
	}
	return *t.PathMtuDiscovery
}

// GetPeerAs retrieves the value of the leaf PeerAs from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerAs is set, it can
// safely use t.GetPeerAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetPeerAs() uint32 {
	if t == nil || t.PeerAs == nil {
		return 0
	}
	return *t.PeerAs
}

// GetPeerCreationType retrieves the value of the leaf PeerCreationType from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerCreationType is set, it can
// safely use t.GetPeerCreationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerCreationType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetPeerCreationType() E_NokiaTypesBgp_PeerCreationType {
	if t == nil || t.PeerCreationType == 0 {
		return NokiaTypesBgp_PeerCreationType_static
	}
	return t.PeerCreationType
}

// GetPeerIpTracking retrieves the value of the leaf PeerIpTracking from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerIpTracking is set, it can
// safely use t.GetPeerIpTracking() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerIpTracking == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetPeerIpTracking() bool {
	if t == nil || t.PeerIpTracking == nil {
		return false
	}
	return *t.PeerIpTracking
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetSelectiveLabelIpv4Install retrieves the value of the leaf SelectiveLabelIpv4Install from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SelectiveLabelIpv4Install is set, it can
// safely use t.GetSelectiveLabelIpv4Install() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SelectiveLabelIpv4Install == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetSelectiveLabelIpv4Install() bool {
	if t == nil || t.SelectiveLabelIpv4Install == nil {
		return false
	}
	return *t.SelectiveLabelIpv4Install
}

// GetSplitHorizon retrieves the value of the leaf SplitHorizon from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SplitHorizon is set, it can
// safely use t.GetSplitHorizon() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SplitHorizon == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetSplitHorizon() bool {
	if t == nil || t.SplitHorizon == nil {
		return false
	}
	return *t.SplitHorizon
}

// GetTcpMss retrieves the value of the leaf TcpMss from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpMss is set, it can
// safely use t.GetTcpMss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpMss == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetTcpMss() NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_TcpMss_Union {
	if t == nil || t.TcpMss == nil {
		return nil
	}
	return t.TcpMss
}

// GetThirdPartyNexthop retrieves the value of the leaf ThirdPartyNexthop from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ThirdPartyNexthop is set, it can
// safely use t.GetThirdPartyNexthop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ThirdPartyNexthop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetThirdPartyNexthop() bool {
	if t == nil || t.ThirdPartyNexthop == nil {
		return false
	}
	return *t.ThirdPartyNexthop
}

// GetTtlSecurity retrieves the value of the leaf TtlSecurity from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TtlSecurity is set, it can
// safely use t.GetTtlSecurity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TtlSecurity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetTtlSecurity() uint32 {
	if t == nil || t.TtlSecurity == nil {
		return 0
	}
	return *t.TtlSecurity
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetType() E_NokiaTypesBgp_PeerType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// GetVpnApplyExport retrieves the value of the leaf VpnApplyExport from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnApplyExport is set, it can
// safely use t.GetVpnApplyExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnApplyExport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetVpnApplyExport() bool {
	if t == nil || t.VpnApplyExport == nil {
		return false
	}
	return *t.VpnApplyExport
}

// GetVpnApplyImport retrieves the value of the leaf VpnApplyImport from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnApplyImport is set, it can
// safely use t.GetVpnApplyImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnApplyImport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) GetVpnApplyImport() bool {
	if t == nil || t.VpnApplyImport == nil {
		return false
	}
	return *t.VpnApplyImport
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.AdvertiseLdpPrefix == nil {
		var v bool = false
		t.AdvertiseLdpPrefix = &v
	}
	if t.BlockPrefixSid == nil {
		var v bool = false
		t.BlockPrefixSid = &v
	}
	if t.EgressPeerEngineeringLabelUnicast == nil {
		var v bool = false
		t.EgressPeerEngineeringLabelUnicast = &v
	}
	if t.L2VpnCiscoInterop == nil {
		var v bool = false
		t.L2VpnCiscoInterop = &v
	}
	if t.PeerCreationType == 0 {
		t.PeerCreationType = NokiaTypesBgp_PeerCreationType_static
	}
	t.AddPaths.PopulateDefaults()
	t.AdvertiseIpv6NextHops.PopulateDefaults()
	t.Cluster.PopulateDefaults()
	t.DampPeerOscillations.PopulateDefaults()
	t.DefaultLabelPreference.PopulateDefaults()
	t.DefaultPreference.PopulateDefaults()
	t.EbgpDefaultRejectPolicy.PopulateDefaults()
	t.EgressEngineering.PopulateDefaults()
	t.ErrorHandling.PopulateDefaults()
	t.Export.PopulateDefaults()
	t.ExtendedNhEncoding.PopulateDefaults()
	t.Family.PopulateDefaults()
	t.GracefulRestart.PopulateDefaults()
	t.HoldTime.PopulateDefaults()
	t.Import.PopulateDefaults()
	t.LinkBandwidth.PopulateDefaults()
	t.LocalAs.PopulateDefaults()
	t.Monitor.PopulateDefaults()
	t.NextHopUnchanged.PopulateDefaults()
	t.OriginValidation.PopulateDefaults()
	t.OutboundRouteFiltering.PopulateDefaults()
	t.RemovePrivate.PopulateDefaults()
	t.SegmentRoutingV6.PopulateDefaults()
	t.SendCommunities.PopulateDefaults()
	t.SendDefault.PopulateDefaults()
	for _, e := range t.PrefixLimit {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_NeighborTrust represents the /nokia-conf/configure/groups/group/router/bgp/neighbor-trust YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_NeighborTrust struct {
	VpnIpv4 *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6 *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_NeighborTrust implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_NeighborTrust) IsYANGGoStruct() {}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_NeighborTrust
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NeighborTrust) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_NeighborTrust
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NeighborTrust) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_NeighborTrust
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NeighborTrust) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NeighborTrust) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_NeighborTrust"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NeighborTrust) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NeighborTrust) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_NeighborTrust.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_NeighborTrust) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/add-paths YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths struct {
	Evpn         *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Evpn         `path:"evpn" module:"nokia-conf"`
	Ipv4         *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv4         `path:"ipv4" module:"nokia-conf"`
	Ipv6         *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv6         `path:"ipv6" module:"nokia-conf"`
	LabelIpv4    *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv4    `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6    *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv6    `path:"label-ipv6" module:"nokia-conf"`
	McastVpnIpv4 *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4 `path:"mcast-vpn-ipv4" module:"nokia-conf"`
	McastVpnIpv6 *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6 `path:"mcast-vpn-ipv6" module:"nokia-conf"`
	MvpnIpv4     *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv4     `path:"mvpn-ipv4" module:"nokia-conf"`
	MvpnIpv6     *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv6     `path:"mvpn-ipv6" module:"nokia-conf"`
	VpnIpv4      *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv4      `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6      *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv6      `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths) IsYANGGoStruct() {}

// GetOrCreateEvpn retrieves the value of the Evpn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths) GetOrCreateEvpn() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Evpn {
	if t.Evpn != nil {
		return t.Evpn
	}
	t.Evpn = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Evpn{}
	return t.Evpn
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths) GetOrCreateIpv6() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv6{}
	return t.Ipv6
}

// GetOrCreateLabelIpv4 retrieves the value of the LabelIpv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths) GetOrCreateLabelIpv4() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv4 {
	if t.LabelIpv4 != nil {
		return t.LabelIpv4
	}
	t.LabelIpv4 = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv4{}
	return t.LabelIpv4
}

// GetOrCreateLabelIpv6 retrieves the value of the LabelIpv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths) GetOrCreateLabelIpv6() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv6 {
	if t.LabelIpv6 != nil {
		return t.LabelIpv6
	}
	t.LabelIpv6 = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv6{}
	return t.LabelIpv6
}

// GetOrCreateMcastVpnIpv4 retrieves the value of the McastVpnIpv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths) GetOrCreateMcastVpnIpv4() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4 {
	if t.McastVpnIpv4 != nil {
		return t.McastVpnIpv4
	}
	t.McastVpnIpv4 = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4{}
	return t.McastVpnIpv4
}

// GetOrCreateMcastVpnIpv6 retrieves the value of the McastVpnIpv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths) GetOrCreateMcastVpnIpv6() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6 {
	if t.McastVpnIpv6 != nil {
		return t.McastVpnIpv6
	}
	t.McastVpnIpv6 = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6{}
	return t.McastVpnIpv6
}

// GetOrCreateMvpnIpv4 retrieves the value of the MvpnIpv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths) GetOrCreateMvpnIpv4() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv4 {
	if t.MvpnIpv4 != nil {
		return t.MvpnIpv4
	}
	t.MvpnIpv4 = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv4{}
	return t.MvpnIpv4
}

// GetOrCreateMvpnIpv6 retrieves the value of the MvpnIpv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths) GetOrCreateMvpnIpv6() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv6 {
	if t.MvpnIpv6 != nil {
		return t.MvpnIpv6
	}
	t.MvpnIpv6 = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv6{}
	return t.MvpnIpv6
}

// GetOrCreateVpnIpv4 retrieves the value of the VpnIpv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths) GetOrCreateVpnIpv4() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv4 {
	if t.VpnIpv4 != nil {
		return t.VpnIpv4
	}
	t.VpnIpv4 = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv4{}
	return t.VpnIpv4
}

// GetOrCreateVpnIpv6 retrieves the value of the VpnIpv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths) GetOrCreateVpnIpv6() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv6 {
	if t.VpnIpv6 != nil {
		return t.VpnIpv6
	}
	t.VpnIpv6 = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv6{}
	return t.VpnIpv6
}

// GetEvpn returns the value of the Evpn struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths. If the receiver or the field Evpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths) GetEvpn() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Evpn {
	if t != nil && t.Evpn != nil {
		return t.Evpn
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths) GetIpv4() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths) GetIpv6() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetLabelIpv4 returns the value of the LabelIpv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths. If the receiver or the field LabelIpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths) GetLabelIpv4() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv4 {
	if t != nil && t.LabelIpv4 != nil {
		return t.LabelIpv4
	}
	return nil
}

// GetLabelIpv6 returns the value of the LabelIpv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths. If the receiver or the field LabelIpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths) GetLabelIpv6() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv6 {
	if t != nil && t.LabelIpv6 != nil {
		return t.LabelIpv6
	}
	return nil
}

// GetMcastVpnIpv4 returns the value of the McastVpnIpv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths. If the receiver or the field McastVpnIpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths) GetMcastVpnIpv4() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4 {
	if t != nil && t.McastVpnIpv4 != nil {
		return t.McastVpnIpv4
	}
	return nil
}

// GetMcastVpnIpv6 returns the value of the McastVpnIpv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths. If the receiver or the field McastVpnIpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths) GetMcastVpnIpv6() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6 {
	if t != nil && t.McastVpnIpv6 != nil {
		return t.McastVpnIpv6
	}
	return nil
}

// GetMvpnIpv4 returns the value of the MvpnIpv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths. If the receiver or the field MvpnIpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths) GetMvpnIpv4() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv4 {
	if t != nil && t.MvpnIpv4 != nil {
		return t.MvpnIpv4
	}
	return nil
}

// GetMvpnIpv6 returns the value of the MvpnIpv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths. If the receiver or the field MvpnIpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths) GetMvpnIpv6() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv6 {
	if t != nil && t.MvpnIpv6 != nil {
		return t.MvpnIpv6
	}
	return nil
}

// GetVpnIpv4 returns the value of the VpnIpv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths. If the receiver or the field VpnIpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths) GetVpnIpv4() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv4 {
	if t != nil && t.VpnIpv4 != nil {
		return t.VpnIpv4
	}
	return nil
}

// GetVpnIpv6 returns the value of the VpnIpv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths. If the receiver or the field VpnIpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths) GetVpnIpv6() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv6 {
	if t != nil && t.VpnIpv6 != nil {
		return t.VpnIpv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Evpn.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	t.LabelIpv4.PopulateDefaults()
	t.LabelIpv6.PopulateDefaults()
	t.McastVpnIpv4.PopulateDefaults()
	t.McastVpnIpv6.PopulateDefaults()
	t.MvpnIpv4.PopulateDefaults()
	t.MvpnIpv6.PopulateDefaults()
	t.VpnIpv4.PopulateDefaults()
	t.VpnIpv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Evpn represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/add-paths/evpn YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Evpn struct {
	Receive *bool                                                                         `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Evpn_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Evpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Evpn) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Evpn) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Evpn) GetSend() NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Evpn_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Evpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Evpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Evpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Evpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Evpn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Evpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Evpn.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Evpn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv4 represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/add-paths/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv4 struct {
	Receive *bool                                                                         `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv4_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv4) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv4) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv4) GetSend() NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv4_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv4.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv6 represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/add-paths/ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv6 struct {
	Receive *bool                                                                         `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv6_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv6) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv6) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv6) GetSend() NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv6_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv6.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv4 represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/add-paths/label-ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv4 struct {
	Receive *bool                                                                              `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv4_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv4) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv4) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv4) GetSend() NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv4_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv4.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv6 represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/add-paths/label-ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv6 struct {
	Receive *bool                                                                              `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv6_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv6) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv6) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv6) GetSend() NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv6_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv6.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_LabelIpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4 represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/add-paths/mcast-vpn-ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4 struct {
	Receive *bool  `path:"receive" module:"nokia-conf"`
	Send    *int32 `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4) GetSend() int32 {
	if t == nil || t.Send == nil {
		return 0
	}
	return *t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6 represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/add-paths/mcast-vpn-ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6 struct {
	Receive *bool  `path:"receive" module:"nokia-conf"`
	Send    *int32 `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6) GetSend() int32 {
	if t == nil || t.Send == nil {
		return 0
	}
	return *t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_McastVpnIpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv4 represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/add-paths/mvpn-ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv4 struct {
	Receive *bool  `path:"receive" module:"nokia-conf"`
	Send    *int32 `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv4) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv4) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv4) GetSend() int32 {
	if t == nil || t.Send == nil {
		return 0
	}
	return *t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv4.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv6 represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/add-paths/mvpn-ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv6 struct {
	Receive *bool  `path:"receive" module:"nokia-conf"`
	Send    *int32 `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv6) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv6) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv6) GetSend() int32 {
	if t == nil || t.Send == nil {
		return 0
	}
	return *t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv6.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_MvpnIpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv4 represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/add-paths/vpn-ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv4 struct {
	Receive *bool                                                                            `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv4_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv4) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv4) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv4) GetSend() NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv4_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv4.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv6 represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/add-paths/vpn-ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv6 struct {
	Receive *bool                                                                            `path:"receive" module:"nokia-conf"`
	Send    NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv6_Send_Union `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv6) IsYANGGoStruct() {}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv6) GetReceive() bool {
	if t == nil || t.Receive == nil {
		return false
	}
	return *t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv6) GetSend() NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv6_Send_Union {
	if t == nil || t.Send == nil {
		return nil
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == nil {
		var v bool = false
		t.Receive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv6.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AddPaths_VpnIpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AdvertiseIpv6NextHops represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/advertise-ipv6-next-hops YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AdvertiseIpv6NextHops struct {
	Evpn      *bool `path:"evpn" module:"nokia-conf"`
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
	VpnIpv4   *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6   *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AdvertiseIpv6NextHops implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AdvertiseIpv6NextHops) IsYANGGoStruct() {}

// GetEvpn retrieves the value of the leaf Evpn from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Evpn is set, it can
// safely use t.GetEvpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Evpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AdvertiseIpv6NextHops) GetEvpn() bool {
	if t == nil || t.Evpn == nil {
		return false
	}
	return *t.Evpn
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AdvertiseIpv6NextHops) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AdvertiseIpv6NextHops) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AdvertiseIpv6NextHops) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AdvertiseIpv6NextHops) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AdvertiseIpv6NextHops
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AdvertiseIpv6NextHops) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AdvertiseIpv6NextHops
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AdvertiseIpv6NextHops) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Evpn == nil {
		var v bool = false
		t.Evpn = &v
	}
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AdvertiseIpv6NextHops) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AdvertiseIpv6NextHops"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AdvertiseIpv6NextHops) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AdvertiseIpv6NextHops) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AdvertiseIpv6NextHops.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_AdvertiseIpv6NextHops) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Cluster represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/cluster YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Cluster struct {
	AllowLocalFallback *bool   `path:"allow-local-fallback" module:"nokia-conf"`
	ClusterId          *string `path:"cluster-id" module:"nokia-conf"`
	OrrLocation        *uint32 `path:"orr-location" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Cluster implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Cluster) IsYANGGoStruct() {}

// GetAllowLocalFallback retrieves the value of the leaf AllowLocalFallback from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Cluster
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowLocalFallback is set, it can
// safely use t.GetAllowLocalFallback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowLocalFallback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Cluster) GetAllowLocalFallback() bool {
	if t == nil || t.AllowLocalFallback == nil {
		return false
	}
	return *t.AllowLocalFallback
}

// GetClusterId retrieves the value of the leaf ClusterId from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Cluster
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClusterId is set, it can
// safely use t.GetClusterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClusterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Cluster) GetClusterId() string {
	if t == nil || t.ClusterId == nil {
		return ""
	}
	return *t.ClusterId
}

// GetOrrLocation retrieves the value of the leaf OrrLocation from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Cluster
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OrrLocation is set, it can
// safely use t.GetOrrLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OrrLocation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Cluster) GetOrrLocation() uint32 {
	if t == nil || t.OrrLocation == nil {
		return 0
	}
	return *t.OrrLocation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Cluster
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Cluster) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowLocalFallback == nil {
		var v bool = false
		t.AllowLocalFallback = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Cluster) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Cluster"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Cluster) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Cluster) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Cluster.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Cluster) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/damp-peer-oscillations YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations struct {
	ErrorInterval *uint32                                                                                 `path:"error-interval" module:"nokia-conf"`
	IdleHoldTime  *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime `path:"idle-hold-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations) IsYANGGoStruct() {}

// GetOrCreateIdleHoldTime retrieves the value of the IdleHoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations) GetOrCreateIdleHoldTime() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime {
	if t.IdleHoldTime != nil {
		return t.IdleHoldTime
	}
	t.IdleHoldTime = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime{}
	return t.IdleHoldTime
}

// GetIdleHoldTime returns the value of the IdleHoldTime struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations. If the receiver or the field IdleHoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations) GetIdleHoldTime() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime {
	if t != nil && t.IdleHoldTime != nil {
		return t.IdleHoldTime
	}
	return nil
}

// GetErrorInterval retrieves the value of the leaf ErrorInterval from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ErrorInterval is set, it can
// safely use t.GetErrorInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ErrorInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations) GetErrorInterval() uint32 {
	if t == nil || t.ErrorInterval == nil {
		return 30
	}
	return *t.ErrorInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ErrorInterval == nil {
		var v uint32 = 30
		t.ErrorInterval = &v
	}
	t.IdleHoldTime.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/damp-peer-oscillations/idle-hold-time YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime struct {
	InitialWait *uint32 `path:"initial-wait" module:"nokia-conf"`
	MaxWait     *uint32 `path:"max-wait" module:"nokia-conf"`
	SecondWait  *uint32 `path:"second-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime) IsYANGGoStruct() {
}

// GetInitialWait retrieves the value of the leaf InitialWait from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialWait is set, it can
// safely use t.GetInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime) GetInitialWait() uint32 {
	if t == nil || t.InitialWait == nil {
		return 0
	}
	return *t.InitialWait
}

// GetMaxWait retrieves the value of the leaf MaxWait from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxWait is set, it can
// safely use t.GetMaxWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime) GetMaxWait() uint32 {
	if t == nil || t.MaxWait == nil {
		return 60
	}
	return *t.MaxWait
}

// GetSecondWait retrieves the value of the leaf SecondWait from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondWait is set, it can
// safely use t.GetSecondWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime) GetSecondWait() uint32 {
	if t == nil || t.SecondWait == nil {
		return 5
	}
	return *t.SecondWait
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitialWait == nil {
		var v uint32 = 0
		t.InitialWait = &v
	}
	if t.MaxWait == nil {
		var v uint32 = 60
		t.MaxWait = &v
	}
	if t.SecondWait == nil {
		var v uint32 = 5
		t.SecondWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DampPeerOscillations_IdleHoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultLabelPreference represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/default-label-preference YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultLabelPreference struct {
	Ebgp *uint32 `path:"ebgp" module:"nokia-conf"`
	Ibgp *uint32 `path:"ibgp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultLabelPreference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultLabelPreference) IsYANGGoStruct() {
}

// GetEbgp retrieves the value of the leaf Ebgp from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultLabelPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ebgp is set, it can
// safely use t.GetEbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ebgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultLabelPreference) GetEbgp() uint32 {
	if t == nil || t.Ebgp == nil {
		return 0
	}
	return *t.Ebgp
}

// GetIbgp retrieves the value of the leaf Ibgp from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultLabelPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ibgp is set, it can
// safely use t.GetIbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ibgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultLabelPreference) GetIbgp() uint32 {
	if t == nil || t.Ibgp == nil {
		return 0
	}
	return *t.Ibgp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultLabelPreference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultLabelPreference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultLabelPreference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultLabelPreference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultLabelPreference) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultLabelPreference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultLabelPreference.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultLabelPreference) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultPreference represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/default-preference YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultPreference struct {
	Ebgp *uint32 `path:"ebgp" module:"nokia-conf"`
	Ibgp *uint32 `path:"ibgp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultPreference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultPreference) IsYANGGoStruct() {}

// GetEbgp retrieves the value of the leaf Ebgp from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ebgp is set, it can
// safely use t.GetEbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ebgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultPreference) GetEbgp() uint32 {
	if t == nil || t.Ebgp == nil {
		return 0
	}
	return *t.Ebgp
}

// GetIbgp retrieves the value of the leaf Ibgp from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultPreference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ibgp is set, it can
// safely use t.GetIbgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ibgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultPreference) GetIbgp() uint32 {
	if t == nil || t.Ibgp == nil {
		return 0
	}
	return *t.Ibgp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultPreference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultPreference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultPreference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultPreference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultPreference) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultPreference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultPreference.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_DefaultPreference) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/ebgp-default-reject-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy struct {
	Export *bool `path:"export" module:"nokia-conf"`
	Import *bool `path:"import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy) IsYANGGoStruct() {
}

// GetExport retrieves the value of the leaf Export from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Export is set, it can
// safely use t.GetExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Export == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy) GetExport() bool {
	if t == nil || t.Export == nil {
		return true
	}
	return *t.Export
}

// GetImport retrieves the value of the leaf Import from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Import is set, it can
// safely use t.GetImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Import == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy) GetImport() bool {
	if t == nil || t.Import == nil {
		return true
	}
	return *t.Import
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Export == nil {
		var v bool = true
		t.Export = &v
	}
	if t.Import == nil {
		var v bool = true
		t.Import = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EbgpDefaultRejectPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EgressEngineering represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/egress-engineering YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EgressEngineering struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EgressEngineering implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EgressEngineering) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EgressEngineering
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EgressEngineering) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EgressEngineering
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EgressEngineering) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EgressEngineering) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EgressEngineering"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EgressEngineering) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EgressEngineering) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EgressEngineering.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_EgressEngineering) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ErrorHandling represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/error-handling YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ErrorHandling struct {
	UpdateFaultTolerance *bool `path:"update-fault-tolerance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ErrorHandling implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ErrorHandling) IsYANGGoStruct() {}

// GetUpdateFaultTolerance retrieves the value of the leaf UpdateFaultTolerance from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ErrorHandling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UpdateFaultTolerance is set, it can
// safely use t.GetUpdateFaultTolerance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UpdateFaultTolerance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ErrorHandling) GetUpdateFaultTolerance() bool {
	if t == nil || t.UpdateFaultTolerance == nil {
		return false
	}
	return *t.UpdateFaultTolerance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ErrorHandling
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ErrorHandling) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ErrorHandling) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ErrorHandling"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ErrorHandling) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ErrorHandling) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ErrorHandling.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ErrorHandling) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Export represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/export YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Export struct {
	Policy []string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Export implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Export) IsYANGGoStruct() {}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Export
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Export) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Export
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Export) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Export) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Export"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Export) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Export) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Export.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Export) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ExtendedNhEncoding represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/extended-nh-encoding YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ExtendedNhEncoding struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	VpnIpv4   *bool `path:"vpn-ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ExtendedNhEncoding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ExtendedNhEncoding) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ExtendedNhEncoding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ExtendedNhEncoding) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ExtendedNhEncoding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ExtendedNhEncoding) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ExtendedNhEncoding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ExtendedNhEncoding) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ExtendedNhEncoding
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ExtendedNhEncoding) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ExtendedNhEncoding) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ExtendedNhEncoding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ExtendedNhEncoding) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ExtendedNhEncoding) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ExtendedNhEncoding.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_ExtendedNhEncoding) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/family YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family struct {
	BgpLs        *bool `path:"bgp-ls" module:"nokia-conf"`
	Evpn         *bool `path:"evpn" module:"nokia-conf"`
	FlowIpv4     *bool `path:"flow-ipv4" module:"nokia-conf"`
	FlowIpv6     *bool `path:"flow-ipv6" module:"nokia-conf"`
	Ipv4         *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6         *bool `path:"ipv6" module:"nokia-conf"`
	L2Vpn        *bool `path:"l2-vpn" module:"nokia-conf"`
	LabelIpv4    *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6    *bool `path:"label-ipv6" module:"nokia-conf"`
	McastIpv4    *bool `path:"mcast-ipv4" module:"nokia-conf"`
	McastIpv6    *bool `path:"mcast-ipv6" module:"nokia-conf"`
	McastVpnIpv4 *bool `path:"mcast-vpn-ipv4" module:"nokia-conf"`
	McastVpnIpv6 *bool `path:"mcast-vpn-ipv6" module:"nokia-conf"`
	MdtSafi      *bool `path:"mdt-safi" module:"nokia-conf"`
	MsPw         *bool `path:"ms-pw" module:"nokia-conf"`
	MvpnIpv4     *bool `path:"mvpn-ipv4" module:"nokia-conf"`
	MvpnIpv6     *bool `path:"mvpn-ipv6" module:"nokia-conf"`
	RouteTarget  *bool `path:"route-target" module:"nokia-conf"`
	SrPolicyIpv4 *bool `path:"sr-policy-ipv4" module:"nokia-conf"`
	SrPolicyIpv6 *bool `path:"sr-policy-ipv6" module:"nokia-conf"`
	VpnIpv4      *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6      *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family) IsYANGGoStruct() {}

// GetBgpLs retrieves the value of the leaf BgpLs from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpLs is set, it can
// safely use t.GetBgpLs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpLs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family) GetBgpLs() bool {
	if t == nil || t.BgpLs == nil {
		return false
	}
	return *t.BgpLs
}

// GetEvpn retrieves the value of the leaf Evpn from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Evpn is set, it can
// safely use t.GetEvpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Evpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family) GetEvpn() bool {
	if t == nil || t.Evpn == nil {
		return false
	}
	return *t.Evpn
}

// GetFlowIpv4 retrieves the value of the leaf FlowIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowIpv4 is set, it can
// safely use t.GetFlowIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family) GetFlowIpv4() bool {
	if t == nil || t.FlowIpv4 == nil {
		return false
	}
	return *t.FlowIpv4
}

// GetFlowIpv6 retrieves the value of the leaf FlowIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowIpv6 is set, it can
// safely use t.GetFlowIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family) GetFlowIpv6() bool {
	if t == nil || t.FlowIpv6 == nil {
		return false
	}
	return *t.FlowIpv6
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetL2Vpn retrieves the value of the leaf L2Vpn from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2Vpn is set, it can
// safely use t.GetL2Vpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2Vpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family) GetL2Vpn() bool {
	if t == nil || t.L2Vpn == nil {
		return false
	}
	return *t.L2Vpn
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetMcastIpv4 retrieves the value of the leaf McastIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastIpv4 is set, it can
// safely use t.GetMcastIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family) GetMcastIpv4() bool {
	if t == nil || t.McastIpv4 == nil {
		return false
	}
	return *t.McastIpv4
}

// GetMcastIpv6 retrieves the value of the leaf McastIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastIpv6 is set, it can
// safely use t.GetMcastIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family) GetMcastIpv6() bool {
	if t == nil || t.McastIpv6 == nil {
		return false
	}
	return *t.McastIpv6
}

// GetMcastVpnIpv4 retrieves the value of the leaf McastVpnIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastVpnIpv4 is set, it can
// safely use t.GetMcastVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastVpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family) GetMcastVpnIpv4() bool {
	if t == nil || t.McastVpnIpv4 == nil {
		return false
	}
	return *t.McastVpnIpv4
}

// GetMcastVpnIpv6 retrieves the value of the leaf McastVpnIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastVpnIpv6 is set, it can
// safely use t.GetMcastVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastVpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family) GetMcastVpnIpv6() bool {
	if t == nil || t.McastVpnIpv6 == nil {
		return false
	}
	return *t.McastVpnIpv6
}

// GetMdtSafi retrieves the value of the leaf MdtSafi from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdtSafi is set, it can
// safely use t.GetMdtSafi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdtSafi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family) GetMdtSafi() bool {
	if t == nil || t.MdtSafi == nil {
		return false
	}
	return *t.MdtSafi
}

// GetMsPw retrieves the value of the leaf MsPw from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MsPw is set, it can
// safely use t.GetMsPw() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MsPw == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family) GetMsPw() bool {
	if t == nil || t.MsPw == nil {
		return false
	}
	return *t.MsPw
}

// GetMvpnIpv4 retrieves the value of the leaf MvpnIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MvpnIpv4 is set, it can
// safely use t.GetMvpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MvpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family) GetMvpnIpv4() bool {
	if t == nil || t.MvpnIpv4 == nil {
		return false
	}
	return *t.MvpnIpv4
}

// GetMvpnIpv6 retrieves the value of the leaf MvpnIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MvpnIpv6 is set, it can
// safely use t.GetMvpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MvpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family) GetMvpnIpv6() bool {
	if t == nil || t.MvpnIpv6 == nil {
		return false
	}
	return *t.MvpnIpv6
}

// GetRouteTarget retrieves the value of the leaf RouteTarget from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTarget is set, it can
// safely use t.GetRouteTarget() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTarget == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family) GetRouteTarget() bool {
	if t == nil || t.RouteTarget == nil {
		return false
	}
	return *t.RouteTarget
}

// GetSrPolicyIpv4 retrieves the value of the leaf SrPolicyIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrPolicyIpv4 is set, it can
// safely use t.GetSrPolicyIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrPolicyIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family) GetSrPolicyIpv4() bool {
	if t == nil || t.SrPolicyIpv4 == nil {
		return false
	}
	return *t.SrPolicyIpv4
}

// GetSrPolicyIpv6 retrieves the value of the leaf SrPolicyIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrPolicyIpv6 is set, it can
// safely use t.GetSrPolicyIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrPolicyIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family) GetSrPolicyIpv6() bool {
	if t == nil || t.SrPolicyIpv6 == nil {
		return false
	}
	return *t.SrPolicyIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BgpLs == nil {
		var v bool = false
		t.BgpLs = &v
	}
	if t.Evpn == nil {
		var v bool = false
		t.Evpn = &v
	}
	if t.FlowIpv4 == nil {
		var v bool = false
		t.FlowIpv4 = &v
	}
	if t.FlowIpv6 == nil {
		var v bool = false
		t.FlowIpv6 = &v
	}
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.L2Vpn == nil {
		var v bool = false
		t.L2Vpn = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.McastIpv4 == nil {
		var v bool = false
		t.McastIpv4 = &v
	}
	if t.McastIpv6 == nil {
		var v bool = false
		t.McastIpv6 = &v
	}
	if t.McastVpnIpv4 == nil {
		var v bool = false
		t.McastVpnIpv4 = &v
	}
	if t.McastVpnIpv6 == nil {
		var v bool = false
		t.McastVpnIpv6 = &v
	}
	if t.MdtSafi == nil {
		var v bool = false
		t.MdtSafi = &v
	}
	if t.MsPw == nil {
		var v bool = false
		t.MsPw = &v
	}
	if t.MvpnIpv4 == nil {
		var v bool = false
		t.MvpnIpv4 = &v
	}
	if t.MvpnIpv6 == nil {
		var v bool = false
		t.MvpnIpv6 = &v
	}
	if t.RouteTarget == nil {
		var v bool = false
		t.RouteTarget = &v
	}
	if t.SrPolicyIpv4 == nil {
		var v bool = false
		t.SrPolicyIpv4 = &v
	}
	if t.SrPolicyIpv6 == nil {
		var v bool = false
		t.SrPolicyIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/graceful-restart YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart struct {
	GrNotification  *bool                                                                           `path:"gr-notification" module:"nokia-conf"`
	LongLived       *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived `path:"long-lived" module:"nokia-conf" yangPresence:"true"`
	RestartTime     *uint32                                                                         `path:"restart-time" module:"nokia-conf"`
	StaleRoutesTime *uint32                                                                         `path:"stale-routes-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart) IsYANGGoStruct() {}

// GetOrCreateLongLived retrieves the value of the LongLived field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart) GetOrCreateLongLived() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived {
	if t.LongLived != nil {
		return t.LongLived
	}
	t.LongLived = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived{}
	return t.LongLived
}

// GetLongLived returns the value of the LongLived struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart. If the receiver or the field LongLived is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart) GetLongLived() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived {
	if t != nil && t.LongLived != nil {
		return t.LongLived
	}
	return nil
}

// GetGrNotification retrieves the value of the leaf GrNotification from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GrNotification is set, it can
// safely use t.GetGrNotification() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GrNotification == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart) GetGrNotification() bool {
	if t == nil || t.GrNotification == nil {
		return false
	}
	return *t.GrNotification
}

// GetRestartTime retrieves the value of the leaf RestartTime from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RestartTime is set, it can
// safely use t.GetRestartTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RestartTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart) GetRestartTime() uint32 {
	if t == nil || t.RestartTime == nil {
		return 300
	}
	return *t.RestartTime
}

// GetStaleRoutesTime retrieves the value of the leaf StaleRoutesTime from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaleRoutesTime is set, it can
// safely use t.GetStaleRoutesTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaleRoutesTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart) GetStaleRoutesTime() uint32 {
	if t == nil || t.StaleRoutesTime == nil {
		return 360
	}
	return *t.StaleRoutesTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.GrNotification == nil {
		var v bool = false
		t.GrNotification = &v
	}
	if t.RestartTime == nil {
		var v uint32 = 300
		t.RestartTime = &v
	}
	if t.StaleRoutesTime == nil {
		var v uint32 = 360
		t.StaleRoutesTime = &v
	}
	t.LongLived.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/graceful-restart/long-lived YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived struct {
	AdvertiseStaleToAllNeighbors *bool                                                                                                                                                                                             `path:"advertise-stale-to-all-neighbors" module:"nokia-conf"`
	AdvertisedStaleTime          *uint32                                                                                                                                                                                           `path:"advertised-stale-time" module:"nokia-conf"`
	Family                       map[NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family `path:"family" module:"nokia-conf"`
	ForwardingBitsSet            E_NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_ForwardingBitsSet                                                                                                `path:"forwarding-bits-set" module:"nokia-conf"`
	HelperOverrideRestartTime    *uint32                                                                                                                                                                                           `path:"helper-override-restart-time" module:"nokia-conf"`
	HelperOverrideStaleTime      *uint32                                                                                                                                                                                           `path:"helper-override-stale-time" module:"nokia-conf"`
	WithoutNoExport              *bool                                                                                                                                                                                             `path:"without-no-export" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived) IsYANGGoStruct() {
}

// NewFamily creates a new entry in the Family list of the
// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived) NewFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family_FamilyType_Union) (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family)
	}

	key := FamilyType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Family[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Family", key)
	}

	t.Family[key] = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family{
		FamilyType: FamilyType,
	}

	return t.Family[key], nil
}

// RenameFamily renames an entry in the list Family within
// the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived) RenameFamily(oldK, newK NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family_FamilyType_Union) error {
	if _, ok := t.Family[newK]; ok {
		return fmt.Errorf("key %v already exists in Family", newK)
	}

	e, ok := t.Family[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Family", oldK)
	}
	e.FamilyType = newK

	t.Family[newK] = e
	delete(t.Family, oldK)
	return nil
}

// GetOrCreateFamily retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived) GetOrCreateFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family_FamilyType_Union) *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family {

	key := FamilyType

	if v, ok := t.Family[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFamily(FamilyType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFamily got unexpected error: %v", err))
	}
	return v
}

// GetFamily retrieves the value with the specified key from
// the Family map field of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived) GetFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family_FamilyType_Union) *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family {

	if t == nil {
		return nil
	}

	key := FamilyType

	if lm, ok := t.Family[key]; ok {
		return lm
	}
	return nil
}

// DeleteFamily deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived) DeleteFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family_FamilyType_Union) {
	key := FamilyType

	delete(t.Family, key)
}

// AppendFamily appends the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family struct to the
// list Family of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived) AppendFamily(v *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family) error {
	key := v.FamilyType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family)
	}

	if _, ok := t.Family[key]; ok {
		return fmt.Errorf("duplicate key for list Family %v", key)
	}

	t.Family[key] = v
	return nil
}

// GetAdvertiseStaleToAllNeighbors retrieves the value of the leaf AdvertiseStaleToAllNeighbors from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseStaleToAllNeighbors is set, it can
// safely use t.GetAdvertiseStaleToAllNeighbors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseStaleToAllNeighbors == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived) GetAdvertiseStaleToAllNeighbors() bool {
	if t == nil || t.AdvertiseStaleToAllNeighbors == nil {
		return false
	}
	return *t.AdvertiseStaleToAllNeighbors
}

// GetAdvertisedStaleTime retrieves the value of the leaf AdvertisedStaleTime from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisedStaleTime is set, it can
// safely use t.GetAdvertisedStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisedStaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived) GetAdvertisedStaleTime() uint32 {
	if t == nil || t.AdvertisedStaleTime == nil {
		return 86400
	}
	return *t.AdvertisedStaleTime
}

// GetForwardingBitsSet retrieves the value of the leaf ForwardingBitsSet from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingBitsSet is set, it can
// safely use t.GetForwardingBitsSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingBitsSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived) GetForwardingBitsSet() E_NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_ForwardingBitsSet {
	if t == nil || t.ForwardingBitsSet == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_ForwardingBitsSet_none
	}
	return t.ForwardingBitsSet
}

// GetHelperOverrideRestartTime retrieves the value of the leaf HelperOverrideRestartTime from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperOverrideRestartTime is set, it can
// safely use t.GetHelperOverrideRestartTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperOverrideRestartTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived) GetHelperOverrideRestartTime() uint32 {
	if t == nil || t.HelperOverrideRestartTime == nil {
		return 0
	}
	return *t.HelperOverrideRestartTime
}

// GetHelperOverrideStaleTime retrieves the value of the leaf HelperOverrideStaleTime from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperOverrideStaleTime is set, it can
// safely use t.GetHelperOverrideStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperOverrideStaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived) GetHelperOverrideStaleTime() uint32 {
	if t == nil || t.HelperOverrideStaleTime == nil {
		return 0
	}
	return *t.HelperOverrideStaleTime
}

// GetWithoutNoExport retrieves the value of the leaf WithoutNoExport from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WithoutNoExport is set, it can
// safely use t.GetWithoutNoExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WithoutNoExport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived) GetWithoutNoExport() bool {
	if t == nil || t.WithoutNoExport == nil {
		return false
	}
	return *t.WithoutNoExport
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertiseStaleToAllNeighbors == nil {
		var v bool = false
		t.AdvertiseStaleToAllNeighbors = &v
	}
	if t.AdvertisedStaleTime == nil {
		var v uint32 = 86400
		t.AdvertisedStaleTime = &v
	}
	if t.ForwardingBitsSet == 0 {
		t.ForwardingBitsSet = NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_ForwardingBitsSet_none
	}
	if t.WithoutNoExport == nil {
		var v bool = false
		t.WithoutNoExport = &v
	}
	for _, e := range t.Family {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/graceful-restart/long-lived/family YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family struct {
	AdvertisedStaleTime     *uint32                                                                                                `path:"advertised-stale-time" module:"nokia-conf"`
	FamilyType              NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family_FamilyType_Union `path:"family-type" module:"nokia-conf"`
	HelperOverrideStaleTime *uint32                                                                                                `path:"helper-override-stale-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family) IsYANGGoStruct() {
}

// GetAdvertisedStaleTime retrieves the value of the leaf AdvertisedStaleTime from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisedStaleTime is set, it can
// safely use t.GetAdvertisedStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisedStaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family) GetAdvertisedStaleTime() uint32 {
	if t == nil || t.AdvertisedStaleTime == nil {
		return 86400
	}
	return *t.AdvertisedStaleTime
}

// GetFamilyType retrieves the value of the leaf FamilyType from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FamilyType is set, it can
// safely use t.GetFamilyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FamilyType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family) GetFamilyType() NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family_FamilyType_Union {
	if t == nil || t.FamilyType == nil {
		return nil
	}
	return t.FamilyType
}

// GetHelperOverrideStaleTime retrieves the value of the leaf HelperOverrideStaleTime from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperOverrideStaleTime is set, it can
// safely use t.GetHelperOverrideStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperOverrideStaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family) GetHelperOverrideStaleTime() uint32 {
	if t == nil || t.HelperOverrideStaleTime == nil {
		return 16777216
	}
	return *t.HelperOverrideStaleTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertisedStaleTime == nil {
		var v uint32 = 86400
		t.AdvertisedStaleTime = &v
	}
	if t.HelperOverrideStaleTime == nil {
		var v uint32 = 16777216
		t.HelperOverrideStaleTime = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"family-type": t.FamilyType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_GracefulRestart_LongLived_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_HoldTime represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/hold-time YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_HoldTime struct {
	MinimumHoldTime *int32 `path:"minimum-hold-time" module:"nokia-conf"`
	Seconds         *int32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_HoldTime) IsYANGGoStruct() {}

// GetMinimumHoldTime retrieves the value of the leaf MinimumHoldTime from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinimumHoldTime is set, it can
// safely use t.GetMinimumHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinimumHoldTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_HoldTime) GetMinimumHoldTime() int32 {
	if t == nil || t.MinimumHoldTime == nil {
		return 0
	}
	return *t.MinimumHoldTime
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_HoldTime) GetSeconds() int32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MinimumHoldTime == nil {
		var v int32 = 0
		t.MinimumHoldTime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_HoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_HoldTime.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_HoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Import represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/import YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Import struct {
	Policy []string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Import implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Import) IsYANGGoStruct() {}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Import
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Import) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Import
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Import) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Import) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Import"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Import) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Import) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Import.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Import) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/link-bandwidth YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth struct {
	AcceptFromEbgp     *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp     `path:"accept-from-ebgp" module:"nokia-conf" yangPresence:"true"`
	AddToReceivedEbgp  *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp  `path:"add-to-received-ebgp" module:"nokia-conf" yangPresence:"true"`
	AggregateUsedPaths *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths `path:"aggregate-used-paths" module:"nokia-conf" yangPresence:"true"`
	SendToEbgp         *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp         `path:"send-to-ebgp" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth) IsYANGGoStruct() {}

// GetOrCreateAcceptFromEbgp retrieves the value of the AcceptFromEbgp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth) GetOrCreateAcceptFromEbgp() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp {
	if t.AcceptFromEbgp != nil {
		return t.AcceptFromEbgp
	}
	t.AcceptFromEbgp = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp{}
	return t.AcceptFromEbgp
}

// GetOrCreateAddToReceivedEbgp retrieves the value of the AddToReceivedEbgp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth) GetOrCreateAddToReceivedEbgp() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp {
	if t.AddToReceivedEbgp != nil {
		return t.AddToReceivedEbgp
	}
	t.AddToReceivedEbgp = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp{}
	return t.AddToReceivedEbgp
}

// GetOrCreateAggregateUsedPaths retrieves the value of the AggregateUsedPaths field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth) GetOrCreateAggregateUsedPaths() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths {
	if t.AggregateUsedPaths != nil {
		return t.AggregateUsedPaths
	}
	t.AggregateUsedPaths = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths{}
	return t.AggregateUsedPaths
}

// GetOrCreateSendToEbgp retrieves the value of the SendToEbgp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth) GetOrCreateSendToEbgp() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp {
	if t.SendToEbgp != nil {
		return t.SendToEbgp
	}
	t.SendToEbgp = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp{}
	return t.SendToEbgp
}

// GetAcceptFromEbgp returns the value of the AcceptFromEbgp struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth. If the receiver or the field AcceptFromEbgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth) GetAcceptFromEbgp() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp {
	if t != nil && t.AcceptFromEbgp != nil {
		return t.AcceptFromEbgp
	}
	return nil
}

// GetAddToReceivedEbgp returns the value of the AddToReceivedEbgp struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth. If the receiver or the field AddToReceivedEbgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth) GetAddToReceivedEbgp() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp {
	if t != nil && t.AddToReceivedEbgp != nil {
		return t.AddToReceivedEbgp
	}
	return nil
}

// GetAggregateUsedPaths returns the value of the AggregateUsedPaths struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth. If the receiver or the field AggregateUsedPaths is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth) GetAggregateUsedPaths() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths {
	if t != nil && t.AggregateUsedPaths != nil {
		return t.AggregateUsedPaths
	}
	return nil
}

// GetSendToEbgp returns the value of the SendToEbgp struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth. If the receiver or the field SendToEbgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth) GetSendToEbgp() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp {
	if t != nil && t.SendToEbgp != nil {
		return t.SendToEbgp
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AcceptFromEbgp.PopulateDefaults()
	t.AddToReceivedEbgp.PopulateDefaults()
	t.AggregateUsedPaths.PopulateDefaults()
	t.SendToEbgp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/link-bandwidth/accept-from-ebgp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
	VpnIpv4   *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6   *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp) IsYANGGoStruct() {
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AcceptFromEbgp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/link-bandwidth/add-to-received-ebgp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
	VpnIpv4   *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6   *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp) IsYANGGoStruct() {
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AddToReceivedEbgp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/link-bandwidth/aggregate-used-paths YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
	VpnIpv4   *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6   *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths) IsYANGGoStruct() {
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_AggregateUsedPaths) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/link-bandwidth/send-to-ebgp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
	VpnIpv4   *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6   *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp) IsYANGGoStruct() {
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LinkBandwidth_SendToEbgp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LocalAs represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/local-as YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LocalAs struct {
	AsNumber        *uint32 `path:"as-number" module:"nokia-conf"`
	PrependGlobalAs *bool   `path:"prepend-global-as" module:"nokia-conf"`
	Private         *bool   `path:"private" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LocalAs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LocalAs) IsYANGGoStruct() {}

// GetAsNumber retrieves the value of the leaf AsNumber from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsNumber is set, it can
// safely use t.GetAsNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LocalAs) GetAsNumber() uint32 {
	if t == nil || t.AsNumber == nil {
		return 0
	}
	return *t.AsNumber
}

// GetPrependGlobalAs retrieves the value of the leaf PrependGlobalAs from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrependGlobalAs is set, it can
// safely use t.GetPrependGlobalAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrependGlobalAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LocalAs) GetPrependGlobalAs() bool {
	if t == nil || t.PrependGlobalAs == nil {
		return true
	}
	return *t.PrependGlobalAs
}

// GetPrivate retrieves the value of the leaf Private from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LocalAs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Private is set, it can
// safely use t.GetPrivate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Private == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LocalAs) GetPrivate() bool {
	if t == nil || t.Private == nil {
		return false
	}
	return *t.Private
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LocalAs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LocalAs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PrependGlobalAs == nil {
		var v bool = true
		t.PrependGlobalAs = &v
	}
	if t.Private == nil {
		var v bool = false
		t.Private = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LocalAs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LocalAs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LocalAs) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LocalAs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LocalAs.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_LocalAs) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/monitor YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor struct {
	AdminState      E_NokiaTypesSros_AdminState                                                      `path:"admin-state" module:"nokia-conf"`
	AllStations     *bool                                                                            `path:"all-stations" module:"nokia-conf"`
	RouteMonitoring *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_RouteMonitoring    `path:"route-monitoring" module:"nokia-conf"`
	Station         map[string]*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_Station `path:"station" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor) IsYANGGoStruct() {}

// NewStation creates a new entry in the Station list of the
// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor) NewStation(StationName string) (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_Station, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Station == nil {
		t.Station = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_Station)
	}

	key := StationName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Station[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Station", key)
	}

	t.Station[key] = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_Station{
		StationName: &StationName,
	}

	return t.Station[key], nil
}

// RenameStation renames an entry in the list Station within
// the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor) RenameStation(oldK, newK string) error {
	if _, ok := t.Station[newK]; ok {
		return fmt.Errorf("key %v already exists in Station", newK)
	}

	e, ok := t.Station[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Station", oldK)
	}
	e.StationName = &newK

	t.Station[newK] = e
	delete(t.Station, oldK)
	return nil
}

// GetOrCreateStation retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor) GetOrCreateStation(StationName string) *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_Station {

	key := StationName

	if v, ok := t.Station[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStation(StationName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStation got unexpected error: %v", err))
	}
	return v
}

// GetStation retrieves the value with the specified key from
// the Station map field of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor) GetStation(StationName string) *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_Station {

	if t == nil {
		return nil
	}

	key := StationName

	if lm, ok := t.Station[key]; ok {
		return lm
	}
	return nil
}

// DeleteStation deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor) DeleteStation(StationName string) {
	key := StationName

	delete(t.Station, key)
}

// AppendStation appends the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_Station struct to the
// list Station of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_Station already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor) AppendStation(v *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_Station) error {
	if v.StationName == nil {
		return fmt.Errorf("invalid nil key received for StationName")
	}

	key := *v.StationName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Station == nil {
		t.Station = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_Station)
	}

	if _, ok := t.Station[key]; ok {
		return fmt.Errorf("duplicate key for list Station %v", key)
	}

	t.Station[key] = v
	return nil
}

// GetOrCreateRouteMonitoring retrieves the value of the RouteMonitoring field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor) GetOrCreateRouteMonitoring() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_RouteMonitoring {
	if t.RouteMonitoring != nil {
		return t.RouteMonitoring
	}
	t.RouteMonitoring = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_RouteMonitoring{}
	return t.RouteMonitoring
}

// GetRouteMonitoring returns the value of the RouteMonitoring struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor. If the receiver or the field RouteMonitoring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor) GetRouteMonitoring() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_RouteMonitoring {
	if t != nil && t.RouteMonitoring != nil {
		return t.RouteMonitoring
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAllStations retrieves the value of the leaf AllStations from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllStations is set, it can
// safely use t.GetAllStations() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllStations == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor) GetAllStations() bool {
	if t == nil || t.AllStations == nil {
		return false
	}
	return *t.AllStations
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AllStations == nil {
		var v bool = false
		t.AllStations = &v
	}
	t.RouteMonitoring.PopulateDefaults()
	for _, e := range t.Station {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_RouteMonitoring represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/monitor/route-monitoring YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_RouteMonitoring struct {
	PostPolicy *bool `path:"post-policy" module:"nokia-conf"`
	PrePolicy  *bool `path:"pre-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_RouteMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_RouteMonitoring) IsYANGGoStruct() {
}

// GetPostPolicy retrieves the value of the leaf PostPolicy from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_RouteMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PostPolicy is set, it can
// safely use t.GetPostPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PostPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_RouteMonitoring) GetPostPolicy() bool {
	if t == nil || t.PostPolicy == nil {
		return false
	}
	return *t.PostPolicy
}

// GetPrePolicy retrieves the value of the leaf PrePolicy from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_RouteMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrePolicy is set, it can
// safely use t.GetPrePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_RouteMonitoring) GetPrePolicy() bool {
	if t == nil || t.PrePolicy == nil {
		return false
	}
	return *t.PrePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_RouteMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_RouteMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PostPolicy == nil {
		var v bool = false
		t.PostPolicy = &v
	}
	if t.PrePolicy == nil {
		var v bool = false
		t.PrePolicy = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_RouteMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_RouteMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_RouteMonitoring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_RouteMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_RouteMonitoring.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_RouteMonitoring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_Station represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/monitor/station YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_Station struct {
	StationName *string `path:"station-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_Station implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_Station) IsYANGGoStruct() {}

// GetStationName retrieves the value of the leaf StationName from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_Station
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StationName is set, it can
// safely use t.GetStationName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StationName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_Station) GetStationName() string {
	if t == nil || t.StationName == nil {
		return ""
	}
	return *t.StationName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_Station
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_Station) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_Station struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_Station) ΛListKeyMap() (map[string]interface{}, error) {
	if t.StationName == nil {
		return nil, fmt.Errorf("nil value for key StationName")
	}

	return map[string]interface{}{
		"station-name": *t.StationName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_Station) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_Station"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_Station) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_Station) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_Station.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_Monitor_Station) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_NextHopUnchanged represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/next-hop-unchanged YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_NextHopUnchanged struct {
	Evpn      *bool `path:"evpn" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
	VpnIpv4   *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6   *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_NextHopUnchanged implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_NextHopUnchanged) IsYANGGoStruct() {}

// GetEvpn retrieves the value of the leaf Evpn from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_NextHopUnchanged
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Evpn is set, it can
// safely use t.GetEvpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Evpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_NextHopUnchanged) GetEvpn() bool {
	if t == nil || t.Evpn == nil {
		return false
	}
	return *t.Evpn
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_NextHopUnchanged
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_NextHopUnchanged) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_NextHopUnchanged
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_NextHopUnchanged) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_NextHopUnchanged
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_NextHopUnchanged) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_NextHopUnchanged
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_NextHopUnchanged) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_NextHopUnchanged
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_NextHopUnchanged) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Evpn == nil {
		var v bool = false
		t.Evpn = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_NextHopUnchanged) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_NextHopUnchanged"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_NextHopUnchanged) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_NextHopUnchanged) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_NextHopUnchanged.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_NextHopUnchanged) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OriginValidation represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/origin-validation YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OriginValidation struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6      *bool `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *bool `path:"label-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OriginValidation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OriginValidation) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OriginValidation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OriginValidation) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OriginValidation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OriginValidation) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OriginValidation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OriginValidation) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OriginValidation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OriginValidation) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OriginValidation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OriginValidation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OriginValidation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OriginValidation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OriginValidation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OriginValidation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OriginValidation.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OriginValidation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/outbound-route-filtering YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering struct {
	ExtendedCommunity *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity `path:"extended-community" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering) IsYANGGoStruct() {
}

// GetOrCreateExtendedCommunity retrieves the value of the ExtendedCommunity field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering) GetOrCreateExtendedCommunity() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity {
	if t.ExtendedCommunity != nil {
		return t.ExtendedCommunity
	}
	t.ExtendedCommunity = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity{}
	return t.ExtendedCommunity
}

// GetExtendedCommunity returns the value of the ExtendedCommunity struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering. If the receiver or the field ExtendedCommunity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering) GetExtendedCommunity() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity {
	if t != nil && t.ExtendedCommunity != nil {
		return t.ExtendedCommunity
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ExtendedCommunity.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/outbound-route-filtering/extended-community YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity struct {
	AcceptOrf *bool                                                                                                  `path:"accept-orf" module:"nokia-conf"`
	SendOrf   *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf `path:"send-orf" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity) IsYANGGoStruct() {
}

// GetOrCreateSendOrf retrieves the value of the SendOrf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity) GetOrCreateSendOrf() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf {
	if t.SendOrf != nil {
		return t.SendOrf
	}
	t.SendOrf = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf{}
	return t.SendOrf
}

// GetSendOrf returns the value of the SendOrf struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity. If the receiver or the field SendOrf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity) GetSendOrf() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf {
	if t != nil && t.SendOrf != nil {
		return t.SendOrf
	}
	return nil
}

// GetAcceptOrf retrieves the value of the leaf AcceptOrf from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcceptOrf is set, it can
// safely use t.GetAcceptOrf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcceptOrf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity) GetAcceptOrf() bool {
	if t == nil || t.AcceptOrf == nil {
		return false
	}
	return *t.AcceptOrf
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SendOrf.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/outbound-route-filtering/extended-community/send-orf YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf struct {
	RouteTarget map[string]*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget `path:"route-target" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf) IsYANGGoStruct() {
}

// NewRouteTarget creates a new entry in the RouteTarget list of the
// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf) NewRouteTarget(CommunityName string) (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouteTarget == nil {
		t.RouteTarget = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget)
	}

	key := CommunityName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RouteTarget[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RouteTarget", key)
	}

	t.RouteTarget[key] = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget{
		CommunityName: &CommunityName,
	}

	return t.RouteTarget[key], nil
}

// RenameRouteTarget renames an entry in the list RouteTarget within
// the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf) RenameRouteTarget(oldK, newK string) error {
	if _, ok := t.RouteTarget[newK]; ok {
		return fmt.Errorf("key %v already exists in RouteTarget", newK)
	}

	e, ok := t.RouteTarget[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RouteTarget", oldK)
	}
	e.CommunityName = &newK

	t.RouteTarget[newK] = e
	delete(t.RouteTarget, oldK)
	return nil
}

// GetOrCreateRouteTarget retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf) GetOrCreateRouteTarget(CommunityName string) *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget {

	key := CommunityName

	if v, ok := t.RouteTarget[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRouteTarget(CommunityName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRouteTarget got unexpected error: %v", err))
	}
	return v
}

// GetRouteTarget retrieves the value with the specified key from
// the RouteTarget map field of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf) GetRouteTarget(CommunityName string) *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget {

	if t == nil {
		return nil
	}

	key := CommunityName

	if lm, ok := t.RouteTarget[key]; ok {
		return lm
	}
	return nil
}

// DeleteRouteTarget deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf) DeleteRouteTarget(CommunityName string) {
	key := CommunityName

	delete(t.RouteTarget, key)
}

// AppendRouteTarget appends the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget struct to the
// list RouteTarget of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf) AppendRouteTarget(v *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) error {
	if v.CommunityName == nil {
		return fmt.Errorf("invalid nil key received for CommunityName")
	}

	key := *v.CommunityName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouteTarget == nil {
		t.RouteTarget = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget)
	}

	if _, ok := t.RouteTarget[key]; ok {
		return fmt.Errorf("duplicate key for list RouteTarget %v", key)
	}

	t.RouteTarget[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.RouteTarget {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/outbound-route-filtering/extended-community/send-orf/route-target YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget struct {
	CommunityName *string `path:"community-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) IsYANGGoStruct() {
}

// GetCommunityName retrieves the value of the leaf CommunityName from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityName is set, it can
// safely use t.GetCommunityName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) GetCommunityName() string {
	if t == nil || t.CommunityName == nil {
		return ""
	}
	return *t.CommunityName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CommunityName == nil {
		return nil, fmt.Errorf("nil value for key CommunityName")
	}

	return map[string]interface{}{
		"community-name": *t.CommunityName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/prefix-limit YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit struct {
	Family      NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit_Family_Union `path:"family" module:"nokia-conf"`
	IdleTimeout *int32                                                                        `path:"idle-timeout" module:"nokia-conf"`
	LogOnly     *bool                                                                         `path:"log-only" module:"nokia-conf"`
	Maximum     *uint32                                                                       `path:"maximum" module:"nokia-conf"`
	PostImport  *bool                                                                         `path:"post-import" module:"nokia-conf"`
	Threshold   *uint32                                                                       `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit) IsYANGGoStruct() {}

// GetFamily retrieves the value of the leaf Family from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Family is set, it can
// safely use t.GetFamily() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Family == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit) GetFamily() NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit_Family_Union {
	if t == nil || t.Family == nil {
		return nil
	}
	return t.Family
}

// GetIdleTimeout retrieves the value of the leaf IdleTimeout from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleTimeout is set, it can
// safely use t.GetIdleTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit) GetIdleTimeout() int32 {
	if t == nil || t.IdleTimeout == nil {
		return 0
	}
	return *t.IdleTimeout
}

// GetLogOnly retrieves the value of the leaf LogOnly from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogOnly is set, it can
// safely use t.GetLogOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit) GetLogOnly() bool {
	if t == nil || t.LogOnly == nil {
		return false
	}
	return *t.LogOnly
}

// GetMaximum retrieves the value of the leaf Maximum from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Maximum is set, it can
// safely use t.GetMaximum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Maximum == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit) GetMaximum() uint32 {
	if t == nil || t.Maximum == nil {
		return 0
	}
	return *t.Maximum
}

// GetPostImport retrieves the value of the leaf PostImport from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PostImport is set, it can
// safely use t.GetPostImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PostImport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit) GetPostImport() bool {
	if t == nil || t.PostImport == nil {
		return false
	}
	return *t.PostImport
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 90
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LogOnly == nil {
		var v bool = false
		t.LogOnly = &v
	}
	if t.PostImport == nil {
		var v bool = false
		t.PostImport = &v
	}
	if t.Threshold == nil {
		var v uint32 = 90
		t.Threshold = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"family": t.Family,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_PrefixLimit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_RemovePrivate represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/remove-private YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_RemovePrivate struct {
	Limited    *bool `path:"limited" module:"nokia-conf"`
	Replace    *bool `path:"replace" module:"nokia-conf"`
	SkipPeerAs *bool `path:"skip-peer-as" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_RemovePrivate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_RemovePrivate) IsYANGGoStruct() {}

// GetLimited retrieves the value of the leaf Limited from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_RemovePrivate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Limited is set, it can
// safely use t.GetLimited() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Limited == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_RemovePrivate) GetLimited() bool {
	if t == nil || t.Limited == nil {
		return false
	}
	return *t.Limited
}

// GetReplace retrieves the value of the leaf Replace from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_RemovePrivate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Replace is set, it can
// safely use t.GetReplace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Replace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_RemovePrivate) GetReplace() bool {
	if t == nil || t.Replace == nil {
		return false
	}
	return *t.Replace
}

// GetSkipPeerAs retrieves the value of the leaf SkipPeerAs from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_RemovePrivate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SkipPeerAs is set, it can
// safely use t.GetSkipPeerAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SkipPeerAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_RemovePrivate) GetSkipPeerAs() bool {
	if t == nil || t.SkipPeerAs == nil {
		return false
	}
	return *t.SkipPeerAs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_RemovePrivate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_RemovePrivate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Limited == nil {
		var v bool = false
		t.Limited = &v
	}
	if t.Replace == nil {
		var v bool = false
		t.Replace = &v
	}
	if t.SkipPeerAs == nil {
		var v bool = false
		t.SkipPeerAs = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_RemovePrivate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_RemovePrivate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_RemovePrivate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_RemovePrivate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_RemovePrivate.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_RemovePrivate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6 represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/segment-routing-v6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6 struct {
	RouteAdvertisement *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement `path:"route-advertisement" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6) IsYANGGoStruct() {}

// GetOrCreateRouteAdvertisement retrieves the value of the RouteAdvertisement field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6) GetOrCreateRouteAdvertisement() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement {
	if t.RouteAdvertisement != nil {
		return t.RouteAdvertisement
	}
	t.RouteAdvertisement = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement{}
	return t.RouteAdvertisement
}

// GetRouteAdvertisement returns the value of the RouteAdvertisement struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6. If the receiver or the field RouteAdvertisement is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6) GetRouteAdvertisement() *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement {
	if t != nil && t.RouteAdvertisement != nil {
		return t.RouteAdvertisement
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RouteAdvertisement.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/segment-routing-v6/route-advertisement YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement struct {
	DropRoutesWithSrv6Tlvs *bool                                                                                                                                                                                                                 `path:"drop-routes-with-srv6-tlvs" module:"nokia-conf"`
	Family                 map[NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family `path:"family" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement) IsYANGGoStruct() {
}

// NewFamily creates a new entry in the Family list of the
// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement) NewFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType_Union) (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family)
	}

	key := FamilyType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Family[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Family", key)
	}

	t.Family[key] = &NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family{
		FamilyType: FamilyType,
	}

	return t.Family[key], nil
}

// RenameFamily renames an entry in the list Family within
// the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement) RenameFamily(oldK, newK NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType_Union) error {
	if _, ok := t.Family[newK]; ok {
		return fmt.Errorf("key %v already exists in Family", newK)
	}

	e, ok := t.Family[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Family", oldK)
	}
	e.FamilyType = newK

	t.Family[newK] = e
	delete(t.Family, oldK)
	return nil
}

// GetOrCreateFamily retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement) GetOrCreateFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType_Union) *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family {

	key := FamilyType

	if v, ok := t.Family[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFamily(FamilyType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFamily got unexpected error: %v", err))
	}
	return v
}

// GetFamily retrieves the value with the specified key from
// the Family map field of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement) GetFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType_Union) *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family {

	if t == nil {
		return nil
	}

	key := FamilyType

	if lm, ok := t.Family[key]; ok {
		return lm
	}
	return nil
}

// DeleteFamily deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement) DeleteFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType_Union) {
	key := FamilyType

	delete(t.Family, key)
}

// AppendFamily appends the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family struct to the
// list Family of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement) AppendFamily(v *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family) error {
	key := v.FamilyType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family)
	}

	if _, ok := t.Family[key]; ok {
		return fmt.Errorf("duplicate key for list Family %v", key)
	}

	t.Family[key] = v
	return nil
}

// GetDropRoutesWithSrv6Tlvs retrieves the value of the leaf DropRoutesWithSrv6Tlvs from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropRoutesWithSrv6Tlvs is set, it can
// safely use t.GetDropRoutesWithSrv6Tlvs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropRoutesWithSrv6Tlvs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement) GetDropRoutesWithSrv6Tlvs() bool {
	if t == nil || t.DropRoutesWithSrv6Tlvs == nil {
		return false
	}
	return *t.DropRoutesWithSrv6Tlvs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DropRoutesWithSrv6Tlvs == nil {
		var v bool = false
		t.DropRoutesWithSrv6Tlvs = &v
	}
	for _, e := range t.Family {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/segment-routing-v6/route-advertisement/family YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family struct {
	FamilyType    NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType_Union `path:"family-type" module:"nokia-conf"`
	StripSrv6Tlvs *bool                                                                                                            `path:"strip-srv6-tlvs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family) IsYANGGoStruct() {
}

// GetFamilyType retrieves the value of the leaf FamilyType from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FamilyType is set, it can
// safely use t.GetFamilyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FamilyType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family) GetFamilyType() NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family_FamilyType_Union {
	if t == nil || t.FamilyType == nil {
		return nil
	}
	return t.FamilyType
}

// GetStripSrv6Tlvs retrieves the value of the leaf StripSrv6Tlvs from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StripSrv6Tlvs is set, it can
// safely use t.GetStripSrv6Tlvs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StripSrv6Tlvs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family) GetStripSrv6Tlvs() bool {
	if t == nil || t.StripSrv6Tlvs == nil {
		return false
	}
	return *t.StripSrv6Tlvs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.StripSrv6Tlvs == nil {
		var v bool = false
		t.StripSrv6Tlvs = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"family-type": t.FamilyType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SegmentRoutingV6_RouteAdvertisement_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendCommunities represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/send-communities YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendCommunities struct {
	Extended *bool `path:"extended" module:"nokia-conf"`
	Large    *bool `path:"large" module:"nokia-conf"`
	Standard *bool `path:"standard" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendCommunities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendCommunities) IsYANGGoStruct() {}

// GetExtended retrieves the value of the leaf Extended from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendCommunities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendCommunities) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetLarge retrieves the value of the leaf Large from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendCommunities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Large is set, it can
// safely use t.GetLarge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Large == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendCommunities) GetLarge() bool {
	if t == nil || t.Large == nil {
		return false
	}
	return *t.Large
}

// GetStandard retrieves the value of the leaf Standard from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendCommunities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Standard is set, it can
// safely use t.GetStandard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Standard == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendCommunities) GetStandard() bool {
	if t == nil || t.Standard == nil {
		return false
	}
	return *t.Standard
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendCommunities
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendCommunities) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendCommunities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendCommunities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendCommunities) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendCommunities) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendCommunities.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendCommunities) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendDefault represents the /nokia-conf/configure/groups/group/router/bgp/neighbor/send-default YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendDefault struct {
	ExportPolicy *string `path:"export-policy" module:"nokia-conf"`
	Ipv4         *bool   `path:"ipv4" module:"nokia-conf"`
	Ipv6         *bool   `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendDefault implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendDefault) IsYANGGoStruct() {}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendDefault
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendDefault) GetExportPolicy() string {
	if t == nil || t.ExportPolicy == nil {
		return ""
	}
	return *t.ExportPolicy
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendDefault
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendDefault) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendDefault
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendDefault) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendDefault
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendDefault) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendDefault) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendDefault"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendDefault) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendDefault) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendDefault.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_Neighbor_SendDefault) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution represents the /nokia-conf/configure/groups/group/router/bgp/next-hop-resolution YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution struct {
	AllowUnresolvedLeaking *bool                                                                         `path:"allow-unresolved-leaking" module:"nokia-conf"`
	LabeledRoutes          *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes  `path:"labeled-routes" module:"nokia-conf"`
	Policy                 *string                                                                       `path:"policy" module:"nokia-conf"`
	ShortcutTunnel         *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel `path:"shortcut-tunnel" module:"nokia-conf"`
	UseBgpRoutes           *bool                                                                         `path:"use-bgp-routes" module:"nokia-conf"`
	VpnFamilyPolicy        *string                                                                       `path:"vpn-family-policy" module:"nokia-conf"`
	WeightedEcmp           *bool                                                                         `path:"weighted-ecmp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution) IsYANGGoStruct() {}

// GetOrCreateLabeledRoutes retrieves the value of the LabeledRoutes field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution) GetOrCreateLabeledRoutes() *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes {
	if t.LabeledRoutes != nil {
		return t.LabeledRoutes
	}
	t.LabeledRoutes = &NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes{}
	return t.LabeledRoutes
}

// GetOrCreateShortcutTunnel retrieves the value of the ShortcutTunnel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution) GetOrCreateShortcutTunnel() *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel {
	if t.ShortcutTunnel != nil {
		return t.ShortcutTunnel
	}
	t.ShortcutTunnel = &NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel{}
	return t.ShortcutTunnel
}

// GetLabeledRoutes returns the value of the LabeledRoutes struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution. If the receiver or the field LabeledRoutes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution) GetLabeledRoutes() *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes {
	if t != nil && t.LabeledRoutes != nil {
		return t.LabeledRoutes
	}
	return nil
}

// GetShortcutTunnel returns the value of the ShortcutTunnel struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution. If the receiver or the field ShortcutTunnel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution) GetShortcutTunnel() *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel {
	if t != nil && t.ShortcutTunnel != nil {
		return t.ShortcutTunnel
	}
	return nil
}

// GetAllowUnresolvedLeaking retrieves the value of the leaf AllowUnresolvedLeaking from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowUnresolvedLeaking is set, it can
// safely use t.GetAllowUnresolvedLeaking() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowUnresolvedLeaking == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution) GetAllowUnresolvedLeaking() bool {
	if t == nil || t.AllowUnresolvedLeaking == nil {
		return false
	}
	return *t.AllowUnresolvedLeaking
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// GetUseBgpRoutes retrieves the value of the leaf UseBgpRoutes from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseBgpRoutes is set, it can
// safely use t.GetUseBgpRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseBgpRoutes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution) GetUseBgpRoutes() bool {
	if t == nil || t.UseBgpRoutes == nil {
		return false
	}
	return *t.UseBgpRoutes
}

// GetVpnFamilyPolicy retrieves the value of the leaf VpnFamilyPolicy from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnFamilyPolicy is set, it can
// safely use t.GetVpnFamilyPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnFamilyPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution) GetVpnFamilyPolicy() string {
	if t == nil || t.VpnFamilyPolicy == nil {
		return ""
	}
	return *t.VpnFamilyPolicy
}

// GetWeightedEcmp retrieves the value of the leaf WeightedEcmp from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WeightedEcmp is set, it can
// safely use t.GetWeightedEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WeightedEcmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution) GetWeightedEcmp() bool {
	if t == nil || t.WeightedEcmp == nil {
		return false
	}
	return *t.WeightedEcmp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowUnresolvedLeaking == nil {
		var v bool = false
		t.AllowUnresolvedLeaking = &v
	}
	if t.UseBgpRoutes == nil {
		var v bool = false
		t.UseBgpRoutes = &v
	}
	if t.WeightedEcmp == nil {
		var v bool = false
		t.WeightedEcmp = &v
	}
	t.LabeledRoutes.PopulateDefaults()
	t.ShortcutTunnel.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes represents the /nokia-conf/configure/groups/group/router/bgp/next-hop-resolution/labeled-routes YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes struct {
	AllowStatic        *bool                                                                                        `path:"allow-static" module:"nokia-conf"`
	PreferTransportFrr *bool                                                                                        `path:"prefer-transport-frr" module:"nokia-conf"`
	RrUseRouteTable    *bool                                                                                        `path:"rr-use-route-table" module:"nokia-conf"`
	TransportTunnel    *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel `path:"transport-tunnel" module:"nokia-conf"`
	UseBgpRoutes       *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_UseBgpRoutes    `path:"use-bgp-routes" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes) IsYANGGoStruct() {
}

// GetOrCreateTransportTunnel retrieves the value of the TransportTunnel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes) GetOrCreateTransportTunnel() *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel {
	if t.TransportTunnel != nil {
		return t.TransportTunnel
	}
	t.TransportTunnel = &NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel{}
	return t.TransportTunnel
}

// GetOrCreateUseBgpRoutes retrieves the value of the UseBgpRoutes field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes) GetOrCreateUseBgpRoutes() *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_UseBgpRoutes {
	if t.UseBgpRoutes != nil {
		return t.UseBgpRoutes
	}
	t.UseBgpRoutes = &NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_UseBgpRoutes{}
	return t.UseBgpRoutes
}

// GetTransportTunnel returns the value of the TransportTunnel struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes. If the receiver or the field TransportTunnel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes) GetTransportTunnel() *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel {
	if t != nil && t.TransportTunnel != nil {
		return t.TransportTunnel
	}
	return nil
}

// GetUseBgpRoutes returns the value of the UseBgpRoutes struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes. If the receiver or the field UseBgpRoutes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes) GetUseBgpRoutes() *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_UseBgpRoutes {
	if t != nil && t.UseBgpRoutes != nil {
		return t.UseBgpRoutes
	}
	return nil
}

// GetAllowStatic retrieves the value of the leaf AllowStatic from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowStatic is set, it can
// safely use t.GetAllowStatic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowStatic == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes) GetAllowStatic() bool {
	if t == nil || t.AllowStatic == nil {
		return false
	}
	return *t.AllowStatic
}

// GetPreferTransportFrr retrieves the value of the leaf PreferTransportFrr from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferTransportFrr is set, it can
// safely use t.GetPreferTransportFrr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferTransportFrr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes) GetPreferTransportFrr() bool {
	if t == nil || t.PreferTransportFrr == nil {
		return false
	}
	return *t.PreferTransportFrr
}

// GetRrUseRouteTable retrieves the value of the leaf RrUseRouteTable from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RrUseRouteTable is set, it can
// safely use t.GetRrUseRouteTable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RrUseRouteTable == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes) GetRrUseRouteTable() bool {
	if t == nil || t.RrUseRouteTable == nil {
		return false
	}
	return *t.RrUseRouteTable
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowStatic == nil {
		var v bool = false
		t.AllowStatic = &v
	}
	if t.PreferTransportFrr == nil {
		var v bool = false
		t.PreferTransportFrr = &v
	}
	if t.RrUseRouteTable == nil {
		var v bool = false
		t.RrUseRouteTable = &v
	}
	t.TransportTunnel.PopulateDefaults()
	t.UseBgpRoutes.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel represents the /nokia-conf/configure/groups/group/router/bgp/next-hop-resolution/labeled-routes/transport-tunnel YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel struct {
	Family map[NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family `path:"family" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel) IsYANGGoStruct() {
}

// NewFamily creates a new entry in the Family list of the
// NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel) NewFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_FamilyType_Union) (*NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family)
	}

	key := FamilyType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Family[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Family", key)
	}

	t.Family[key] = &NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family{
		FamilyType: FamilyType,
	}

	return t.Family[key], nil
}

// RenameFamily renames an entry in the list Family within
// the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel) RenameFamily(oldK, newK NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_FamilyType_Union) error {
	if _, ok := t.Family[newK]; ok {
		return fmt.Errorf("key %v already exists in Family", newK)
	}

	e, ok := t.Family[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Family", oldK)
	}
	e.FamilyType = newK

	t.Family[newK] = e
	delete(t.Family, oldK)
	return nil
}

// GetOrCreateFamily retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel) GetOrCreateFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_FamilyType_Union) *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family {

	key := FamilyType

	if v, ok := t.Family[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFamily(FamilyType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFamily got unexpected error: %v", err))
	}
	return v
}

// GetFamily retrieves the value with the specified key from
// the Family map field of NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel) GetFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_FamilyType_Union) *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family {

	if t == nil {
		return nil
	}

	key := FamilyType

	if lm, ok := t.Family[key]; ok {
		return lm
	}
	return nil
}

// DeleteFamily deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel) DeleteFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_FamilyType_Union) {
	key := FamilyType

	delete(t.Family, key)
}

// AppendFamily appends the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family struct to the
// list Family of NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel) AppendFamily(v *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family) error {
	key := v.FamilyType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family)
	}

	if _, ok := t.Family[key]; ok {
		return fmt.Errorf("duplicate key for list Family %v", key)
	}

	t.Family[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Family {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family represents the /nokia-conf/configure/groups/group/router/bgp/next-hop-resolution/labeled-routes/transport-tunnel/family YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family struct {
	AllowFlexAlgoFallback      *bool                                                                                                                `path:"allow-flex-algo-fallback" module:"nokia-conf"`
	EnforceStrictTunnelTagging *bool                                                                                                                `path:"enforce-strict-tunnel-tagging" module:"nokia-conf"`
	FamilyType                 NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_FamilyType_Union  `path:"family-type" module:"nokia-conf"`
	Resolution                 E_NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_Resolution      `path:"resolution" module:"nokia-conf"`
	ResolutionFilter           *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter `path:"resolution-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family) IsYANGGoStruct() {
}

// GetOrCreateResolutionFilter retrieves the value of the ResolutionFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family) GetOrCreateResolutionFilter() *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter {
	if t.ResolutionFilter != nil {
		return t.ResolutionFilter
	}
	t.ResolutionFilter = &NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter{}
	return t.ResolutionFilter
}

// GetResolutionFilter returns the value of the ResolutionFilter struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family. If the receiver or the field ResolutionFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family) GetResolutionFilter() *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter {
	if t != nil && t.ResolutionFilter != nil {
		return t.ResolutionFilter
	}
	return nil
}

// GetAllowFlexAlgoFallback retrieves the value of the leaf AllowFlexAlgoFallback from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowFlexAlgoFallback is set, it can
// safely use t.GetAllowFlexAlgoFallback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowFlexAlgoFallback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family) GetAllowFlexAlgoFallback() bool {
	if t == nil || t.AllowFlexAlgoFallback == nil {
		return false
	}
	return *t.AllowFlexAlgoFallback
}

// GetEnforceStrictTunnelTagging retrieves the value of the leaf EnforceStrictTunnelTagging from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnforceStrictTunnelTagging is set, it can
// safely use t.GetEnforceStrictTunnelTagging() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnforceStrictTunnelTagging == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family) GetEnforceStrictTunnelTagging() bool {
	if t == nil || t.EnforceStrictTunnelTagging == nil {
		return false
	}
	return *t.EnforceStrictTunnelTagging
}

// GetFamilyType retrieves the value of the leaf FamilyType from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FamilyType is set, it can
// safely use t.GetFamilyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FamilyType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family) GetFamilyType() NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_FamilyType_Union {
	if t == nil || t.FamilyType == nil {
		return nil
	}
	return t.FamilyType
}

// GetResolution retrieves the value of the leaf Resolution from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Resolution is set, it can
// safely use t.GetResolution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Resolution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family) GetResolution() E_NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_Resolution {
	if t == nil || t.Resolution == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_Resolution_filter
	}
	return t.Resolution
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowFlexAlgoFallback == nil {
		var v bool = false
		t.AllowFlexAlgoFallback = &v
	}
	if t.EnforceStrictTunnelTagging == nil {
		var v bool = false
		t.EnforceStrictTunnelTagging = &v
	}
	if t.Resolution == 0 {
		t.Resolution = NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_Resolution_filter
	}
	t.ResolutionFilter.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"family-type": t.FamilyType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter represents the /nokia-conf/configure/groups/group/router/bgp/next-hop-resolution/labeled-routes/transport-tunnel/family/resolution-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter struct {
	Bgp           *bool `path:"bgp" module:"nokia-conf"`
	Ldp           *bool `path:"ldp" module:"nokia-conf"`
	MplsFwdPolicy *bool `path:"mpls-fwd-policy" module:"nokia-conf"`
	RibApi        *bool `path:"rib-api" module:"nokia-conf"`
	Rsvp          *bool `path:"rsvp" module:"nokia-conf"`
	SrIsis        *bool `path:"sr-isis" module:"nokia-conf"`
	SrOspf        *bool `path:"sr-ospf" module:"nokia-conf"`
	SrOspf3       *bool `path:"sr-ospf3" module:"nokia-conf"`
	SrPolicy      *bool `path:"sr-policy" module:"nokia-conf"`
	SrTe          *bool `path:"sr-te" module:"nokia-conf"`
	Udp           *bool `path:"udp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter) IsYANGGoStruct() {
}

// GetBgp retrieves the value of the leaf Bgp from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bgp is set, it can
// safely use t.GetBgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter) GetBgp() bool {
	if t == nil || t.Bgp == nil {
		return false
	}
	return *t.Bgp
}

// GetLdp retrieves the value of the leaf Ldp from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ldp is set, it can
// safely use t.GetLdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ldp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter) GetLdp() bool {
	if t == nil || t.Ldp == nil {
		return true
	}
	return *t.Ldp
}

// GetMplsFwdPolicy retrieves the value of the leaf MplsFwdPolicy from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsFwdPolicy is set, it can
// safely use t.GetMplsFwdPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsFwdPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter) GetMplsFwdPolicy() bool {
	if t == nil || t.MplsFwdPolicy == nil {
		return false
	}
	return *t.MplsFwdPolicy
}

// GetRibApi retrieves the value of the leaf RibApi from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RibApi is set, it can
// safely use t.GetRibApi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RibApi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter) GetRibApi() bool {
	if t == nil || t.RibApi == nil {
		return false
	}
	return *t.RibApi
}

// GetRsvp retrieves the value of the leaf Rsvp from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rsvp is set, it can
// safely use t.GetRsvp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rsvp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter) GetRsvp() bool {
	if t == nil || t.Rsvp == nil {
		return false
	}
	return *t.Rsvp
}

// GetSrIsis retrieves the value of the leaf SrIsis from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrIsis is set, it can
// safely use t.GetSrIsis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrIsis == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter) GetSrIsis() bool {
	if t == nil || t.SrIsis == nil {
		return false
	}
	return *t.SrIsis
}

// GetSrOspf retrieves the value of the leaf SrOspf from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrOspf is set, it can
// safely use t.GetSrOspf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrOspf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter) GetSrOspf() bool {
	if t == nil || t.SrOspf == nil {
		return false
	}
	return *t.SrOspf
}

// GetSrOspf3 retrieves the value of the leaf SrOspf3 from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrOspf3 is set, it can
// safely use t.GetSrOspf3() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrOspf3 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter) GetSrOspf3() bool {
	if t == nil || t.SrOspf3 == nil {
		return false
	}
	return *t.SrOspf3
}

// GetSrPolicy retrieves the value of the leaf SrPolicy from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrPolicy is set, it can
// safely use t.GetSrPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter) GetSrPolicy() bool {
	if t == nil || t.SrPolicy == nil {
		return false
	}
	return *t.SrPolicy
}

// GetSrTe retrieves the value of the leaf SrTe from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrTe is set, it can
// safely use t.GetSrTe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrTe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter) GetSrTe() bool {
	if t == nil || t.SrTe == nil {
		return false
	}
	return *t.SrTe
}

// GetUdp retrieves the value of the leaf Udp from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Udp is set, it can
// safely use t.GetUdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Udp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter) GetUdp() bool {
	if t == nil || t.Udp == nil {
		return false
	}
	return *t.Udp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ldp == nil {
		var v bool = true
		t.Ldp = &v
	}
	if t.MplsFwdPolicy == nil {
		var v bool = false
		t.MplsFwdPolicy = &v
	}
	if t.RibApi == nil {
		var v bool = false
		t.RibApi = &v
	}
	if t.Rsvp == nil {
		var v bool = false
		t.Rsvp = &v
	}
	if t.SrIsis == nil {
		var v bool = false
		t.SrIsis = &v
	}
	if t.SrOspf == nil {
		var v bool = false
		t.SrOspf = &v
	}
	if t.SrOspf3 == nil {
		var v bool = false
		t.SrOspf3 = &v
	}
	if t.SrPolicy == nil {
		var v bool = false
		t.SrPolicy = &v
	}
	if t.SrTe == nil {
		var v bool = false
		t.SrTe = &v
	}
	if t.Udp == nil {
		var v bool = false
		t.Udp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_TransportTunnel_Family_ResolutionFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_UseBgpRoutes represents the /nokia-conf/configure/groups/group/router/bgp/next-hop-resolution/labeled-routes/use-bgp-routes YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_UseBgpRoutes struct {
	LabelIpv6ExplicitNull *bool `path:"label-ipv6-explicit-null" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_UseBgpRoutes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_UseBgpRoutes) IsYANGGoStruct() {
}

// GetLabelIpv6ExplicitNull retrieves the value of the leaf LabelIpv6ExplicitNull from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_UseBgpRoutes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6ExplicitNull is set, it can
// safely use t.GetLabelIpv6ExplicitNull() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6ExplicitNull == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_UseBgpRoutes) GetLabelIpv6ExplicitNull() bool {
	if t == nil || t.LabelIpv6ExplicitNull == nil {
		return false
	}
	return *t.LabelIpv6ExplicitNull
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_UseBgpRoutes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_UseBgpRoutes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LabelIpv6ExplicitNull == nil {
		var v bool = false
		t.LabelIpv6ExplicitNull = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_UseBgpRoutes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_UseBgpRoutes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_UseBgpRoutes) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_UseBgpRoutes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_UseBgpRoutes.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_LabeledRoutes_UseBgpRoutes) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel represents the /nokia-conf/configure/groups/group/router/bgp/next-hop-resolution/shortcut-tunnel YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel struct {
	Family map[NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family `path:"family" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel) IsYANGGoStruct() {
}

// NewFamily creates a new entry in the Family list of the
// NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel) NewFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_FamilyType_Union) (*NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family)
	}

	key := FamilyType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Family[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Family", key)
	}

	t.Family[key] = &NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family{
		FamilyType: FamilyType,
	}

	return t.Family[key], nil
}

// RenameFamily renames an entry in the list Family within
// the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel) RenameFamily(oldK, newK NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_FamilyType_Union) error {
	if _, ok := t.Family[newK]; ok {
		return fmt.Errorf("key %v already exists in Family", newK)
	}

	e, ok := t.Family[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Family", oldK)
	}
	e.FamilyType = newK

	t.Family[newK] = e
	delete(t.Family, oldK)
	return nil
}

// GetOrCreateFamily retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel) GetOrCreateFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_FamilyType_Union) *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family {

	key := FamilyType

	if v, ok := t.Family[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFamily(FamilyType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFamily got unexpected error: %v", err))
	}
	return v
}

// GetFamily retrieves the value with the specified key from
// the Family map field of NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel) GetFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_FamilyType_Union) *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family {

	if t == nil {
		return nil
	}

	key := FamilyType

	if lm, ok := t.Family[key]; ok {
		return lm
	}
	return nil
}

// DeleteFamily deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel) DeleteFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_FamilyType_Union) {
	key := FamilyType

	delete(t.Family, key)
}

// AppendFamily appends the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family struct to the
// list Family of NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel) AppendFamily(v *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family) error {
	key := v.FamilyType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family)
	}

	if _, ok := t.Family[key]; ok {
		return fmt.Errorf("duplicate key for list Family %v", key)
	}

	t.Family[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Family {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family represents the /nokia-conf/configure/groups/group/router/bgp/next-hop-resolution/shortcut-tunnel/family YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family struct {
	AllowFlexAlgoFallback      *bool                                                                                                 `path:"allow-flex-algo-fallback" module:"nokia-conf"`
	DisallowIgp                *bool                                                                                                 `path:"disallow-igp" module:"nokia-conf"`
	EnforceStrictTunnelTagging *bool                                                                                                 `path:"enforce-strict-tunnel-tagging" module:"nokia-conf"`
	FamilyType                 NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_FamilyType_Union  `path:"family-type" module:"nokia-conf"`
	Resolution                 E_NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_Resolution      `path:"resolution" module:"nokia-conf"`
	ResolutionFilter           *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter `path:"resolution-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family) IsYANGGoStruct() {
}

// GetOrCreateResolutionFilter retrieves the value of the ResolutionFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family) GetOrCreateResolutionFilter() *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter {
	if t.ResolutionFilter != nil {
		return t.ResolutionFilter
	}
	t.ResolutionFilter = &NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter{}
	return t.ResolutionFilter
}

// GetResolutionFilter returns the value of the ResolutionFilter struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family. If the receiver or the field ResolutionFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family) GetResolutionFilter() *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter {
	if t != nil && t.ResolutionFilter != nil {
		return t.ResolutionFilter
	}
	return nil
}

// GetAllowFlexAlgoFallback retrieves the value of the leaf AllowFlexAlgoFallback from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowFlexAlgoFallback is set, it can
// safely use t.GetAllowFlexAlgoFallback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowFlexAlgoFallback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family) GetAllowFlexAlgoFallback() bool {
	if t == nil || t.AllowFlexAlgoFallback == nil {
		return false
	}
	return *t.AllowFlexAlgoFallback
}

// GetDisallowIgp retrieves the value of the leaf DisallowIgp from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DisallowIgp is set, it can
// safely use t.GetDisallowIgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DisallowIgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family) GetDisallowIgp() bool {
	if t == nil || t.DisallowIgp == nil {
		return false
	}
	return *t.DisallowIgp
}

// GetEnforceStrictTunnelTagging retrieves the value of the leaf EnforceStrictTunnelTagging from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnforceStrictTunnelTagging is set, it can
// safely use t.GetEnforceStrictTunnelTagging() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnforceStrictTunnelTagging == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family) GetEnforceStrictTunnelTagging() bool {
	if t == nil || t.EnforceStrictTunnelTagging == nil {
		return false
	}
	return *t.EnforceStrictTunnelTagging
}

// GetFamilyType retrieves the value of the leaf FamilyType from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FamilyType is set, it can
// safely use t.GetFamilyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FamilyType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family) GetFamilyType() NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_FamilyType_Union {
	if t == nil || t.FamilyType == nil {
		return nil
	}
	return t.FamilyType
}

// GetResolution retrieves the value of the leaf Resolution from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Resolution is set, it can
// safely use t.GetResolution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Resolution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family) GetResolution() E_NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_Resolution {
	if t == nil || t.Resolution == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_Resolution_none
	}
	return t.Resolution
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowFlexAlgoFallback == nil {
		var v bool = false
		t.AllowFlexAlgoFallback = &v
	}
	if t.DisallowIgp == nil {
		var v bool = false
		t.DisallowIgp = &v
	}
	if t.EnforceStrictTunnelTagging == nil {
		var v bool = false
		t.EnforceStrictTunnelTagging = &v
	}
	if t.Resolution == 0 {
		t.Resolution = NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_Resolution_none
	}
	t.ResolutionFilter.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"family-type": t.FamilyType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter represents the /nokia-conf/configure/groups/group/router/bgp/next-hop-resolution/shortcut-tunnel/family/resolution-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter struct {
	Bgp           *bool `path:"bgp" module:"nokia-conf"`
	Ldp           *bool `path:"ldp" module:"nokia-conf"`
	MplsFwdPolicy *bool `path:"mpls-fwd-policy" module:"nokia-conf"`
	RibApi        *bool `path:"rib-api" module:"nokia-conf"`
	Rsvp          *bool `path:"rsvp" module:"nokia-conf"`
	SrIsis        *bool `path:"sr-isis" module:"nokia-conf"`
	SrOspf        *bool `path:"sr-ospf" module:"nokia-conf"`
	SrOspf3       *bool `path:"sr-ospf3" module:"nokia-conf"`
	SrPolicy      *bool `path:"sr-policy" module:"nokia-conf"`
	SrTe          *bool `path:"sr-te" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter) IsYANGGoStruct() {
}

// GetBgp retrieves the value of the leaf Bgp from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bgp is set, it can
// safely use t.GetBgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter) GetBgp() bool {
	if t == nil || t.Bgp == nil {
		return false
	}
	return *t.Bgp
}

// GetLdp retrieves the value of the leaf Ldp from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ldp is set, it can
// safely use t.GetLdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ldp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter) GetLdp() bool {
	if t == nil || t.Ldp == nil {
		return false
	}
	return *t.Ldp
}

// GetMplsFwdPolicy retrieves the value of the leaf MplsFwdPolicy from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsFwdPolicy is set, it can
// safely use t.GetMplsFwdPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsFwdPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter) GetMplsFwdPolicy() bool {
	if t == nil || t.MplsFwdPolicy == nil {
		return false
	}
	return *t.MplsFwdPolicy
}

// GetRibApi retrieves the value of the leaf RibApi from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RibApi is set, it can
// safely use t.GetRibApi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RibApi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter) GetRibApi() bool {
	if t == nil || t.RibApi == nil {
		return false
	}
	return *t.RibApi
}

// GetRsvp retrieves the value of the leaf Rsvp from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rsvp is set, it can
// safely use t.GetRsvp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rsvp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter) GetRsvp() bool {
	if t == nil || t.Rsvp == nil {
		return false
	}
	return *t.Rsvp
}

// GetSrIsis retrieves the value of the leaf SrIsis from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrIsis is set, it can
// safely use t.GetSrIsis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrIsis == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter) GetSrIsis() bool {
	if t == nil || t.SrIsis == nil {
		return false
	}
	return *t.SrIsis
}

// GetSrOspf retrieves the value of the leaf SrOspf from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrOspf is set, it can
// safely use t.GetSrOspf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrOspf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter) GetSrOspf() bool {
	if t == nil || t.SrOspf == nil {
		return false
	}
	return *t.SrOspf
}

// GetSrOspf3 retrieves the value of the leaf SrOspf3 from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrOspf3 is set, it can
// safely use t.GetSrOspf3() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrOspf3 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter) GetSrOspf3() bool {
	if t == nil || t.SrOspf3 == nil {
		return false
	}
	return *t.SrOspf3
}

// GetSrPolicy retrieves the value of the leaf SrPolicy from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrPolicy is set, it can
// safely use t.GetSrPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter) GetSrPolicy() bool {
	if t == nil || t.SrPolicy == nil {
		return false
	}
	return *t.SrPolicy
}

// GetSrTe retrieves the value of the leaf SrTe from the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrTe is set, it can
// safely use t.GetSrTe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrTe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter) GetSrTe() bool {
	if t == nil || t.SrTe == nil {
		return false
	}
	return *t.SrTe
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Bgp == nil {
		var v bool = false
		t.Bgp = &v
	}
	if t.Ldp == nil {
		var v bool = false
		t.Ldp = &v
	}
	if t.MplsFwdPolicy == nil {
		var v bool = false
		t.MplsFwdPolicy = &v
	}
	if t.RibApi == nil {
		var v bool = false
		t.RibApi = &v
	}
	if t.Rsvp == nil {
		var v bool = false
		t.Rsvp = &v
	}
	if t.SrIsis == nil {
		var v bool = false
		t.SrIsis = &v
	}
	if t.SrOspf == nil {
		var v bool = false
		t.SrOspf = &v
	}
	if t.SrOspf3 == nil {
		var v bool = false
		t.SrOspf3 = &v
	}
	if t.SrPolicy == nil {
		var v bool = false
		t.SrPolicy = &v
	}
	if t.SrTe == nil {
		var v bool = false
		t.SrTe = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_NextHopResolution_ShortcutTunnel_Family_ResolutionFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection represents the /nokia-conf/configure/groups/group/router/bgp/optimal-route-reflection YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection struct {
	Location map[NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location_LocationId_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location `path:"location" module:"nokia-conf"`
	SpfWait  *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_SpfWait                                                                                                   `path:"spf-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection) IsYANGGoStruct() {}

// NewLocation creates a new entry in the Location list of the
// NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection) NewLocation(LocationId NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location_LocationId_Union) (*NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Location == nil {
		t.Location = make(map[NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location_LocationId_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location)
	}

	key := LocationId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Location[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Location", key)
	}

	t.Location[key] = &NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location{
		LocationId: LocationId,
	}

	return t.Location[key], nil
}

// RenameLocation renames an entry in the list Location within
// the NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection) RenameLocation(oldK, newK NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location_LocationId_Union) error {
	if _, ok := t.Location[newK]; ok {
		return fmt.Errorf("key %v already exists in Location", newK)
	}

	e, ok := t.Location[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Location", oldK)
	}
	e.LocationId = newK

	t.Location[newK] = e
	delete(t.Location, oldK)
	return nil
}

// GetOrCreateLocation retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection) GetOrCreateLocation(LocationId NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location_LocationId_Union) *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location {

	key := LocationId

	if v, ok := t.Location[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLocation(LocationId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLocation got unexpected error: %v", err))
	}
	return v
}

// GetLocation retrieves the value with the specified key from
// the Location map field of NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection) GetLocation(LocationId NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location_LocationId_Union) *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location {

	if t == nil {
		return nil
	}

	key := LocationId

	if lm, ok := t.Location[key]; ok {
		return lm
	}
	return nil
}

// DeleteLocation deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection) DeleteLocation(LocationId NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location_LocationId_Union) {
	key := LocationId

	delete(t.Location, key)
}

// AppendLocation appends the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location struct to the
// list Location of NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection) AppendLocation(v *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location) error {
	key := v.LocationId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Location == nil {
		t.Location = make(map[NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location_LocationId_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location)
	}

	if _, ok := t.Location[key]; ok {
		return fmt.Errorf("duplicate key for list Location %v", key)
	}

	t.Location[key] = v
	return nil
}

// GetOrCreateSpfWait retrieves the value of the SpfWait field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection) GetOrCreateSpfWait() *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_SpfWait {
	if t.SpfWait != nil {
		return t.SpfWait
	}
	t.SpfWait = &NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_SpfWait{}
	return t.SpfWait
}

// GetSpfWait returns the value of the SpfWait struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection. If the receiver or the field SpfWait is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection) GetSpfWait() *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_SpfWait {
	if t != nil && t.SpfWait != nil {
		return t.SpfWait
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SpfWait.PopulateDefaults()
	for _, e := range t.Location {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location represents the /nokia-conf/configure/groups/group/router/bgp/optimal-route-reflection/location YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location struct {
	LocationId           NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location_LocationId_Union `path:"location-id" module:"nokia-conf"`
	PrimaryIpAddress     *string                                                                                      `path:"primary-ip-address" module:"nokia-conf"`
	PrimaryIpv6Address   *string                                                                                      `path:"primary-ipv6-address" module:"nokia-conf"`
	SecondaryIpAddress   *string                                                                                      `path:"secondary-ip-address" module:"nokia-conf"`
	SecondaryIpv6Address *string                                                                                      `path:"secondary-ipv6-address" module:"nokia-conf"`
	TertiaryIpAddress    *string                                                                                      `path:"tertiary-ip-address" module:"nokia-conf"`
	TertiaryIpv6Address  *string                                                                                      `path:"tertiary-ipv6-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location) IsYANGGoStruct() {
}

// GetLocationId retrieves the value of the leaf LocationId from the NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocationId is set, it can
// safely use t.GetLocationId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocationId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location) GetLocationId() NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location_LocationId_Union {
	if t == nil || t.LocationId == nil {
		return nil
	}
	return t.LocationId
}

// GetPrimaryIpAddress retrieves the value of the leaf PrimaryIpAddress from the NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrimaryIpAddress is set, it can
// safely use t.GetPrimaryIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrimaryIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location) GetPrimaryIpAddress() string {
	if t == nil || t.PrimaryIpAddress == nil {
		return ""
	}
	return *t.PrimaryIpAddress
}

// GetPrimaryIpv6Address retrieves the value of the leaf PrimaryIpv6Address from the NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrimaryIpv6Address is set, it can
// safely use t.GetPrimaryIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrimaryIpv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location) GetPrimaryIpv6Address() string {
	if t == nil || t.PrimaryIpv6Address == nil {
		return ""
	}
	return *t.PrimaryIpv6Address
}

// GetSecondaryIpAddress retrieves the value of the leaf SecondaryIpAddress from the NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondaryIpAddress is set, it can
// safely use t.GetSecondaryIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondaryIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location) GetSecondaryIpAddress() string {
	if t == nil || t.SecondaryIpAddress == nil {
		return ""
	}
	return *t.SecondaryIpAddress
}

// GetSecondaryIpv6Address retrieves the value of the leaf SecondaryIpv6Address from the NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondaryIpv6Address is set, it can
// safely use t.GetSecondaryIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondaryIpv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location) GetSecondaryIpv6Address() string {
	if t == nil || t.SecondaryIpv6Address == nil {
		return ""
	}
	return *t.SecondaryIpv6Address
}

// GetTertiaryIpAddress retrieves the value of the leaf TertiaryIpAddress from the NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TertiaryIpAddress is set, it can
// safely use t.GetTertiaryIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TertiaryIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location) GetTertiaryIpAddress() string {
	if t == nil || t.TertiaryIpAddress == nil {
		return ""
	}
	return *t.TertiaryIpAddress
}

// GetTertiaryIpv6Address retrieves the value of the leaf TertiaryIpv6Address from the NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TertiaryIpv6Address is set, it can
// safely use t.GetTertiaryIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TertiaryIpv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location) GetTertiaryIpv6Address() string {
	if t == nil || t.TertiaryIpv6Address == nil {
		return ""
	}
	return *t.TertiaryIpv6Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"location-id": t.LocationId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_Location) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_SpfWait represents the /nokia-conf/configure/groups/group/router/bgp/optimal-route-reflection/spf-wait YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_SpfWait struct {
	InitialWait *uint32 `path:"initial-wait" module:"nokia-conf"`
	MaxWait     *uint32 `path:"max-wait" module:"nokia-conf"`
	SecondWait  *uint32 `path:"second-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_SpfWait implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_SpfWait) IsYANGGoStruct() {}

// GetInitialWait retrieves the value of the leaf InitialWait from the NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialWait is set, it can
// safely use t.GetInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_SpfWait) GetInitialWait() uint32 {
	if t == nil || t.InitialWait == nil {
		return 5
	}
	return *t.InitialWait
}

// GetMaxWait retrieves the value of the leaf MaxWait from the NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxWait is set, it can
// safely use t.GetMaxWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_SpfWait) GetMaxWait() uint32 {
	if t == nil || t.MaxWait == nil {
		return 60
	}
	return *t.MaxWait
}

// GetSecondWait retrieves the value of the leaf SecondWait from the NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondWait is set, it can
// safely use t.GetSecondWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_SpfWait) GetSecondWait() uint32 {
	if t == nil || t.SecondWait == nil {
		return 15
	}
	return *t.SecondWait
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_SpfWait
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_SpfWait) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitialWait == nil {
		var v uint32 = 5
		t.InitialWait = &v
	}
	if t.MaxWait == nil {
		var v uint32 = 60
		t.MaxWait = &v
	}
	if t.SecondWait == nil {
		var v uint32 = 15
		t.SecondWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_SpfWait) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_SpfWait"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_SpfWait) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_SpfWait) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_SpfWait.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_OptimalRouteReflection_SpfWait) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering represents the /nokia-conf/configure/groups/group/router/bgp/outbound-route-filtering YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering struct {
	ExtendedCommunity *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity `path:"extended-community" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering) IsYANGGoStruct() {}

// GetOrCreateExtendedCommunity retrieves the value of the ExtendedCommunity field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering) GetOrCreateExtendedCommunity() *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity {
	if t.ExtendedCommunity != nil {
		return t.ExtendedCommunity
	}
	t.ExtendedCommunity = &NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity{}
	return t.ExtendedCommunity
}

// GetExtendedCommunity returns the value of the ExtendedCommunity struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering. If the receiver or the field ExtendedCommunity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering) GetExtendedCommunity() *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity {
	if t != nil && t.ExtendedCommunity != nil {
		return t.ExtendedCommunity
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ExtendedCommunity.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity represents the /nokia-conf/configure/groups/group/router/bgp/outbound-route-filtering/extended-community YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity struct {
	AcceptOrf *bool                                                                                         `path:"accept-orf" module:"nokia-conf"`
	SendOrf   *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf `path:"send-orf" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity) IsYANGGoStruct() {
}

// GetOrCreateSendOrf retrieves the value of the SendOrf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity) GetOrCreateSendOrf() *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf {
	if t.SendOrf != nil {
		return t.SendOrf
	}
	t.SendOrf = &NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf{}
	return t.SendOrf
}

// GetSendOrf returns the value of the SendOrf struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity. If the receiver or the field SendOrf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity) GetSendOrf() *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf {
	if t != nil && t.SendOrf != nil {
		return t.SendOrf
	}
	return nil
}

// GetAcceptOrf retrieves the value of the leaf AcceptOrf from the NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcceptOrf is set, it can
// safely use t.GetAcceptOrf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcceptOrf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity) GetAcceptOrf() bool {
	if t == nil || t.AcceptOrf == nil {
		return false
	}
	return *t.AcceptOrf
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AcceptOrf == nil {
		var v bool = false
		t.AcceptOrf = &v
	}
	t.SendOrf.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf represents the /nokia-conf/configure/groups/group/router/bgp/outbound-route-filtering/extended-community/send-orf YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf struct {
	RouteTarget map[string]*NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget `path:"route-target" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf) IsYANGGoStruct() {
}

// NewRouteTarget creates a new entry in the RouteTarget list of the
// NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf) NewRouteTarget(CommunityName string) (*NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouteTarget == nil {
		t.RouteTarget = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget)
	}

	key := CommunityName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RouteTarget[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RouteTarget", key)
	}

	t.RouteTarget[key] = &NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget{
		CommunityName: &CommunityName,
	}

	return t.RouteTarget[key], nil
}

// RenameRouteTarget renames an entry in the list RouteTarget within
// the NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf) RenameRouteTarget(oldK, newK string) error {
	if _, ok := t.RouteTarget[newK]; ok {
		return fmt.Errorf("key %v already exists in RouteTarget", newK)
	}

	e, ok := t.RouteTarget[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RouteTarget", oldK)
	}
	e.CommunityName = &newK

	t.RouteTarget[newK] = e
	delete(t.RouteTarget, oldK)
	return nil
}

// GetOrCreateRouteTarget retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf) GetOrCreateRouteTarget(CommunityName string) *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget {

	key := CommunityName

	if v, ok := t.RouteTarget[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRouteTarget(CommunityName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRouteTarget got unexpected error: %v", err))
	}
	return v
}

// GetRouteTarget retrieves the value with the specified key from
// the RouteTarget map field of NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf) GetRouteTarget(CommunityName string) *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget {

	if t == nil {
		return nil
	}

	key := CommunityName

	if lm, ok := t.RouteTarget[key]; ok {
		return lm
	}
	return nil
}

// DeleteRouteTarget deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf) DeleteRouteTarget(CommunityName string) {
	key := CommunityName

	delete(t.RouteTarget, key)
}

// AppendRouteTarget appends the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget struct to the
// list RouteTarget of NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf) AppendRouteTarget(v *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) error {
	if v.CommunityName == nil {
		return fmt.Errorf("invalid nil key received for CommunityName")
	}

	key := *v.CommunityName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouteTarget == nil {
		t.RouteTarget = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget)
	}

	if _, ok := t.RouteTarget[key]; ok {
		return fmt.Errorf("duplicate key for list RouteTarget %v", key)
	}

	t.RouteTarget[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.RouteTarget {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget represents the /nokia-conf/configure/groups/group/router/bgp/outbound-route-filtering/extended-community/send-orf/route-target YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget struct {
	CommunityName *string `path:"community-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) IsYANGGoStruct() {
}

// GetCommunityName retrieves the value of the leaf CommunityName from the NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityName is set, it can
// safely use t.GetCommunityName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) GetCommunityName() string {
	if t == nil || t.CommunityName == nil {
		return ""
	}
	return *t.CommunityName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CommunityName == nil {
		return nil, fmt.Errorf("nil value for key CommunityName")
	}

	return map[string]interface{}{
		"community-name": *t.CommunityName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_OutboundRouteFiltering_ExtendedCommunity_SendOrf_RouteTarget) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate represents the /nokia-conf/configure/groups/group/router/bgp/rapid-update YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate struct {
	Evpn         *bool `path:"evpn" module:"nokia-conf"`
	L2Vpn        *bool `path:"l2-vpn" module:"nokia-conf"`
	LabelIpv4    *bool `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6    *bool `path:"label-ipv6" module:"nokia-conf"`
	McastVpnIpv4 *bool `path:"mcast-vpn-ipv4" module:"nokia-conf"`
	McastVpnIpv6 *bool `path:"mcast-vpn-ipv6" module:"nokia-conf"`
	MdtSafi      *bool `path:"mdt-safi" module:"nokia-conf"`
	MvpnIpv4     *bool `path:"mvpn-ipv4" module:"nokia-conf"`
	MvpnIpv6     *bool `path:"mvpn-ipv6" module:"nokia-conf"`
	VpnIpv4      *bool `path:"vpn-ipv4" module:"nokia-conf"`
	VpnIpv6      *bool `path:"vpn-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate) IsYANGGoStruct() {}

// GetEvpn retrieves the value of the leaf Evpn from the NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Evpn is set, it can
// safely use t.GetEvpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Evpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate) GetEvpn() bool {
	if t == nil || t.Evpn == nil {
		return false
	}
	return *t.Evpn
}

// GetL2Vpn retrieves the value of the leaf L2Vpn from the NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2Vpn is set, it can
// safely use t.GetL2Vpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2Vpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate) GetL2Vpn() bool {
	if t == nil || t.L2Vpn == nil {
		return false
	}
	return *t.L2Vpn
}

// GetLabelIpv4 retrieves the value of the leaf LabelIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv4 is set, it can
// safely use t.GetLabelIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate) GetLabelIpv4() bool {
	if t == nil || t.LabelIpv4 == nil {
		return false
	}
	return *t.LabelIpv4
}

// GetLabelIpv6 retrieves the value of the leaf LabelIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelIpv6 is set, it can
// safely use t.GetLabelIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate) GetLabelIpv6() bool {
	if t == nil || t.LabelIpv6 == nil {
		return false
	}
	return *t.LabelIpv6
}

// GetMcastVpnIpv4 retrieves the value of the leaf McastVpnIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastVpnIpv4 is set, it can
// safely use t.GetMcastVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastVpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate) GetMcastVpnIpv4() bool {
	if t == nil || t.McastVpnIpv4 == nil {
		return false
	}
	return *t.McastVpnIpv4
}

// GetMcastVpnIpv6 retrieves the value of the leaf McastVpnIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastVpnIpv6 is set, it can
// safely use t.GetMcastVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastVpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate) GetMcastVpnIpv6() bool {
	if t == nil || t.McastVpnIpv6 == nil {
		return false
	}
	return *t.McastVpnIpv6
}

// GetMdtSafi retrieves the value of the leaf MdtSafi from the NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdtSafi is set, it can
// safely use t.GetMdtSafi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdtSafi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate) GetMdtSafi() bool {
	if t == nil || t.MdtSafi == nil {
		return false
	}
	return *t.MdtSafi
}

// GetMvpnIpv4 retrieves the value of the leaf MvpnIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MvpnIpv4 is set, it can
// safely use t.GetMvpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MvpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate) GetMvpnIpv4() bool {
	if t == nil || t.MvpnIpv4 == nil {
		return false
	}
	return *t.MvpnIpv4
}

// GetMvpnIpv6 retrieves the value of the leaf MvpnIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MvpnIpv6 is set, it can
// safely use t.GetMvpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MvpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate) GetMvpnIpv6() bool {
	if t == nil || t.MvpnIpv6 == nil {
		return false
	}
	return *t.MvpnIpv6
}

// GetVpnIpv4 retrieves the value of the leaf VpnIpv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv4 is set, it can
// safely use t.GetVpnIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate) GetVpnIpv4() bool {
	if t == nil || t.VpnIpv4 == nil {
		return false
	}
	return *t.VpnIpv4
}

// GetVpnIpv6 retrieves the value of the leaf VpnIpv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnIpv6 is set, it can
// safely use t.GetVpnIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate) GetVpnIpv6() bool {
	if t == nil || t.VpnIpv6 == nil {
		return false
	}
	return *t.VpnIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Evpn == nil {
		var v bool = false
		t.Evpn = &v
	}
	if t.L2Vpn == nil {
		var v bool = false
		t.L2Vpn = &v
	}
	if t.LabelIpv4 == nil {
		var v bool = false
		t.LabelIpv4 = &v
	}
	if t.LabelIpv6 == nil {
		var v bool = false
		t.LabelIpv6 = &v
	}
	if t.McastVpnIpv4 == nil {
		var v bool = false
		t.McastVpnIpv4 = &v
	}
	if t.McastVpnIpv6 == nil {
		var v bool = false
		t.McastVpnIpv6 = &v
	}
	if t.MdtSafi == nil {
		var v bool = false
		t.MdtSafi = &v
	}
	if t.MvpnIpv4 == nil {
		var v bool = false
		t.MvpnIpv4 = &v
	}
	if t.MvpnIpv6 == nil {
		var v bool = false
		t.MvpnIpv6 = &v
	}
	if t.VpnIpv4 == nil {
		var v bool = false
		t.VpnIpv4 = &v
	}
	if t.VpnIpv6 == nil {
		var v bool = false
		t.VpnIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_RapidUpdate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_RemovePrivate represents the /nokia-conf/configure/groups/group/router/bgp/remove-private YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_RemovePrivate struct {
	Limited    *bool `path:"limited" module:"nokia-conf"`
	Replace    *bool `path:"replace" module:"nokia-conf"`
	SkipPeerAs *bool `path:"skip-peer-as" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_RemovePrivate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_RemovePrivate) IsYANGGoStruct() {}

// GetLimited retrieves the value of the leaf Limited from the NokiaConf_Configure_Groups_Group_Router_Bgp_RemovePrivate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Limited is set, it can
// safely use t.GetLimited() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Limited == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RemovePrivate) GetLimited() bool {
	if t == nil || t.Limited == nil {
		return false
	}
	return *t.Limited
}

// GetReplace retrieves the value of the leaf Replace from the NokiaConf_Configure_Groups_Group_Router_Bgp_RemovePrivate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Replace is set, it can
// safely use t.GetReplace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Replace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RemovePrivate) GetReplace() bool {
	if t == nil || t.Replace == nil {
		return false
	}
	return *t.Replace
}

// GetSkipPeerAs retrieves the value of the leaf SkipPeerAs from the NokiaConf_Configure_Groups_Group_Router_Bgp_RemovePrivate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SkipPeerAs is set, it can
// safely use t.GetSkipPeerAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SkipPeerAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RemovePrivate) GetSkipPeerAs() bool {
	if t == nil || t.SkipPeerAs == nil {
		return false
	}
	return *t.SkipPeerAs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_RemovePrivate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RemovePrivate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Limited == nil {
		var v bool = false
		t.Limited = &v
	}
	if t.Replace == nil {
		var v bool = false
		t.Replace = &v
	}
	if t.SkipPeerAs == nil {
		var v bool = false
		t.SkipPeerAs = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RemovePrivate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_RemovePrivate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RemovePrivate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RemovePrivate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_RemovePrivate.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_RemovePrivate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement represents the /nokia-conf/configure/groups/group/router/bgp/rib-management YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement struct {
	Ipv4      *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4      `path:"ipv4" module:"nokia-conf"`
	Ipv6      *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6      `path:"ipv6" module:"nokia-conf"`
	LabelIpv4 *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4 `path:"label-ipv4" module:"nokia-conf"`
	LabelIpv6 *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv6 `path:"label-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement) GetOrCreateIpv6() *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6{}
	return t.Ipv6
}

// GetOrCreateLabelIpv4 retrieves the value of the LabelIpv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement) GetOrCreateLabelIpv4() *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4 {
	if t.LabelIpv4 != nil {
		return t.LabelIpv4
	}
	t.LabelIpv4 = &NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4{}
	return t.LabelIpv4
}

// GetOrCreateLabelIpv6 retrieves the value of the LabelIpv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement) GetOrCreateLabelIpv6() *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv6 {
	if t.LabelIpv6 != nil {
		return t.LabelIpv6
	}
	t.LabelIpv6 = &NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv6{}
	return t.LabelIpv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement) GetIpv4() *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement) GetIpv6() *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetLabelIpv4 returns the value of the LabelIpv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement. If the receiver or the field LabelIpv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement) GetLabelIpv4() *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4 {
	if t != nil && t.LabelIpv4 != nil {
		return t.LabelIpv4
	}
	return nil
}

// GetLabelIpv6 returns the value of the LabelIpv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement. If the receiver or the field LabelIpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement) GetLabelIpv6() *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv6 {
	if t != nil && t.LabelIpv6 != nil {
		return t.LabelIpv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	t.LabelIpv4.PopulateDefaults()
	t.LabelIpv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4 represents the /nokia-conf/configure/groups/group/router/bgp/rib-management/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4 struct {
	LeakImport       *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4_LeakImport       `path:"leak-import" module:"nokia-conf" yangPresence:"true"`
	RouteTableImport *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4_RouteTableImport `path:"route-table-import" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4) IsYANGGoStruct() {}

// GetOrCreateLeakImport retrieves the value of the LeakImport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4) GetOrCreateLeakImport() *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4_LeakImport {
	if t.LeakImport != nil {
		return t.LeakImport
	}
	t.LeakImport = &NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4_LeakImport{}
	return t.LeakImport
}

// GetOrCreateRouteTableImport retrieves the value of the RouteTableImport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4) GetOrCreateRouteTableImport() *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4_RouteTableImport {
	if t.RouteTableImport != nil {
		return t.RouteTableImport
	}
	t.RouteTableImport = &NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4_RouteTableImport{}
	return t.RouteTableImport
}

// GetLeakImport returns the value of the LeakImport struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4. If the receiver or the field LeakImport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4) GetLeakImport() *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4_LeakImport {
	if t != nil && t.LeakImport != nil {
		return t.LeakImport
	}
	return nil
}

// GetRouteTableImport returns the value of the RouteTableImport struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4. If the receiver or the field RouteTableImport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4) GetRouteTableImport() *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4_RouteTableImport {
	if t != nil && t.RouteTableImport != nil {
		return t.RouteTableImport
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LeakImport.PopulateDefaults()
	t.RouteTableImport.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4_LeakImport represents the /nokia-conf/configure/groups/group/router/bgp/rib-management/ipv4/leak-import YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4_LeakImport struct {
	Policy []string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4_LeakImport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4_LeakImport) IsYANGGoStruct() {}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4_LeakImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4_LeakImport) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4_LeakImport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4_LeakImport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4_LeakImport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4_LeakImport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4_LeakImport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4_LeakImport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4_LeakImport.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4_LeakImport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4_RouteTableImport represents the /nokia-conf/configure/groups/group/router/bgp/rib-management/ipv4/route-table-import YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4_RouteTableImport struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4_RouteTableImport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4_RouteTableImport) IsYANGGoStruct() {
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4_RouteTableImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4_RouteTableImport) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4_RouteTableImport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4_RouteTableImport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4_RouteTableImport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4_RouteTableImport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4_RouteTableImport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4_RouteTableImport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4_RouteTableImport.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv4_RouteTableImport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6 represents the /nokia-conf/configure/groups/group/router/bgp/rib-management/ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6 struct {
	LeakImport       *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6_LeakImport       `path:"leak-import" module:"nokia-conf" yangPresence:"true"`
	RouteTableImport *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6_RouteTableImport `path:"route-table-import" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6) IsYANGGoStruct() {}

// GetOrCreateLeakImport retrieves the value of the LeakImport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6) GetOrCreateLeakImport() *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6_LeakImport {
	if t.LeakImport != nil {
		return t.LeakImport
	}
	t.LeakImport = &NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6_LeakImport{}
	return t.LeakImport
}

// GetOrCreateRouteTableImport retrieves the value of the RouteTableImport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6) GetOrCreateRouteTableImport() *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6_RouteTableImport {
	if t.RouteTableImport != nil {
		return t.RouteTableImport
	}
	t.RouteTableImport = &NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6_RouteTableImport{}
	return t.RouteTableImport
}

// GetLeakImport returns the value of the LeakImport struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6. If the receiver or the field LeakImport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6) GetLeakImport() *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6_LeakImport {
	if t != nil && t.LeakImport != nil {
		return t.LeakImport
	}
	return nil
}

// GetRouteTableImport returns the value of the RouteTableImport struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6. If the receiver or the field RouteTableImport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6) GetRouteTableImport() *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6_RouteTableImport {
	if t != nil && t.RouteTableImport != nil {
		return t.RouteTableImport
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LeakImport.PopulateDefaults()
	t.RouteTableImport.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6_LeakImport represents the /nokia-conf/configure/groups/group/router/bgp/rib-management/ipv6/leak-import YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6_LeakImport struct {
	Policy []string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6_LeakImport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6_LeakImport) IsYANGGoStruct() {}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6_LeakImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6_LeakImport) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6_LeakImport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6_LeakImport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6_LeakImport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6_LeakImport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6_LeakImport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6_LeakImport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6_LeakImport.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6_LeakImport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6_RouteTableImport represents the /nokia-conf/configure/groups/group/router/bgp/rib-management/ipv6/route-table-import YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6_RouteTableImport struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6_RouteTableImport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6_RouteTableImport) IsYANGGoStruct() {
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6_RouteTableImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6_RouteTableImport) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6_RouteTableImport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6_RouteTableImport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6_RouteTableImport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6_RouteTableImport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6_RouteTableImport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6_RouteTableImport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6_RouteTableImport.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_Ipv6_RouteTableImport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4 represents the /nokia-conf/configure/groups/group/router/bgp/rib-management/label-ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4 struct {
	LeakImport       *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4_LeakImport       `path:"leak-import" module:"nokia-conf" yangPresence:"true"`
	RouteTableImport *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport `path:"route-table-import" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4) IsYANGGoStruct() {}

// GetOrCreateLeakImport retrieves the value of the LeakImport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4) GetOrCreateLeakImport() *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4_LeakImport {
	if t.LeakImport != nil {
		return t.LeakImport
	}
	t.LeakImport = &NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4_LeakImport{}
	return t.LeakImport
}

// GetOrCreateRouteTableImport retrieves the value of the RouteTableImport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4) GetOrCreateRouteTableImport() *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport {
	if t.RouteTableImport != nil {
		return t.RouteTableImport
	}
	t.RouteTableImport = &NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport{}
	return t.RouteTableImport
}

// GetLeakImport returns the value of the LeakImport struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4. If the receiver or the field LeakImport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4) GetLeakImport() *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4_LeakImport {
	if t != nil && t.LeakImport != nil {
		return t.LeakImport
	}
	return nil
}

// GetRouteTableImport returns the value of the RouteTableImport struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4. If the receiver or the field RouteTableImport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4) GetRouteTableImport() *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport {
	if t != nil && t.RouteTableImport != nil {
		return t.RouteTableImport
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LeakImport.PopulateDefaults()
	t.RouteTableImport.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4_LeakImport represents the /nokia-conf/configure/groups/group/router/bgp/rib-management/label-ipv4/leak-import YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4_LeakImport struct {
	Policy []string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4_LeakImport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4_LeakImport) IsYANGGoStruct() {
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4_LeakImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4_LeakImport) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4_LeakImport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4_LeakImport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4_LeakImport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4_LeakImport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4_LeakImport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4_LeakImport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4_LeakImport.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4_LeakImport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport represents the /nokia-conf/configure/groups/group/router/bgp/rib-management/label-ipv4/route-table-import YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport) IsYANGGoStruct() {
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv4_RouteTableImport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv6 represents the /nokia-conf/configure/groups/group/router/bgp/rib-management/label-ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv6 struct {
	RouteTableImport *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport `path:"route-table-import" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv6) IsYANGGoStruct() {}

// GetOrCreateRouteTableImport retrieves the value of the RouteTableImport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv6) GetOrCreateRouteTableImport() *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport {
	if t.RouteTableImport != nil {
		return t.RouteTableImport
	}
	t.RouteTableImport = &NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport{}
	return t.RouteTableImport
}

// GetRouteTableImport returns the value of the RouteTableImport struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv6. If the receiver or the field RouteTableImport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv6) GetRouteTableImport() *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport {
	if t != nil && t.RouteTableImport != nil {
		return t.RouteTableImport
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RouteTableImport.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv6.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport represents the /nokia-conf/configure/groups/group/router/bgp/rib-management/label-ipv6/route-table-import YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport) IsYANGGoStruct() {
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_RibManagement_LabelIpv6_RouteTableImport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_RouteTargetList represents the /nokia-conf/configure/groups/group/router/bgp/route-target-list YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_RouteTargetList struct {
	CommunityName *string `path:"community-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_RouteTargetList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_RouteTargetList) IsYANGGoStruct() {}

// GetCommunityName retrieves the value of the leaf CommunityName from the NokiaConf_Configure_Groups_Group_Router_Bgp_RouteTargetList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityName is set, it can
// safely use t.GetCommunityName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RouteTargetList) GetCommunityName() string {
	if t == nil || t.CommunityName == nil {
		return ""
	}
	return *t.CommunityName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_RouteTargetList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RouteTargetList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Bgp_RouteTargetList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RouteTargetList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CommunityName == nil {
		return nil, fmt.Errorf("nil value for key CommunityName")
	}

	return map[string]interface{}{
		"community-name": *t.CommunityName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RouteTargetList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_RouteTargetList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RouteTargetList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_RouteTargetList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_RouteTargetList.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_RouteTargetList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting represents the /nokia-conf/configure/groups/group/router/bgp/segment-routing YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting struct {
	AdminState     E_NokiaTypesSros_AdminState                                                `path:"admin-state" module:"nokia-conf"`
	PrefixSidRange *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting_PrefixSidRange `path:"prefix-sid-range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting) IsYANGGoStruct() {}

// GetOrCreatePrefixSidRange retrieves the value of the PrefixSidRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting) GetOrCreatePrefixSidRange() *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting_PrefixSidRange {
	if t.PrefixSidRange != nil {
		return t.PrefixSidRange
	}
	t.PrefixSidRange = &NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting_PrefixSidRange{}
	return t.PrefixSidRange
}

// GetPrefixSidRange returns the value of the PrefixSidRange struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting. If the receiver or the field PrefixSidRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting) GetPrefixSidRange() *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting_PrefixSidRange {
	if t != nil && t.PrefixSidRange != nil {
		return t.PrefixSidRange
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.PrefixSidRange.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6 represents the /nokia-conf/configure/groups/group/router/bgp/segment-routing-v6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6 struct {
	Family        map[NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family `path:"family" module:"nokia-conf"`
	SourceAddress *string                                                                                                                                                       `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6) IsYANGGoStruct() {}

// NewFamily creates a new entry in the Family list of the
// NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6) NewFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family_FamilyType_Union) (*NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family)
	}

	key := FamilyType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Family[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Family", key)
	}

	t.Family[key] = &NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family{
		FamilyType: FamilyType,
	}

	return t.Family[key], nil
}

// RenameFamily renames an entry in the list Family within
// the NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6) RenameFamily(oldK, newK NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family_FamilyType_Union) error {
	if _, ok := t.Family[newK]; ok {
		return fmt.Errorf("key %v already exists in Family", newK)
	}

	e, ok := t.Family[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Family", oldK)
	}
	e.FamilyType = newK

	t.Family[newK] = e
	delete(t.Family, oldK)
	return nil
}

// GetOrCreateFamily retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6) GetOrCreateFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family_FamilyType_Union) *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family {

	key := FamilyType

	if v, ok := t.Family[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFamily(FamilyType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFamily got unexpected error: %v", err))
	}
	return v
}

// GetFamily retrieves the value with the specified key from
// the Family map field of NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6) GetFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family_FamilyType_Union) *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family {

	if t == nil {
		return nil
	}

	key := FamilyType

	if lm, ok := t.Family[key]; ok {
		return lm
	}
	return nil
}

// DeleteFamily deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6) DeleteFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family_FamilyType_Union) {
	key := FamilyType

	delete(t.Family, key)
}

// AppendFamily appends the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family struct to the
// list Family of NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6) AppendFamily(v *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family) error {
	key := v.FamilyType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family)
	}

	if _, ok := t.Family[key]; ok {
		return fmt.Errorf("duplicate key for list Family %v", key)
	}

	t.Family[key] = v
	return nil
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Family {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family represents the /nokia-conf/configure/groups/group/router/bgp/segment-routing-v6/family YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family struct {
	AddSrv6Tlvs            *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family_AddSrv6Tlvs     `path:"add-srv6-tlvs" module:"nokia-conf" yangPresence:"true"`
	FamilyType             NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family_FamilyType_Union `path:"family-type" module:"nokia-conf"`
	IgnoreReceivedSrv6Tlvs *bool                                                                                `path:"ignore-received-srv6-tlvs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family) IsYANGGoStruct() {}

// GetOrCreateAddSrv6Tlvs retrieves the value of the AddSrv6Tlvs field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family) GetOrCreateAddSrv6Tlvs() *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family_AddSrv6Tlvs {
	if t.AddSrv6Tlvs != nil {
		return t.AddSrv6Tlvs
	}
	t.AddSrv6Tlvs = &NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family_AddSrv6Tlvs{}
	return t.AddSrv6Tlvs
}

// GetAddSrv6Tlvs returns the value of the AddSrv6Tlvs struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family. If the receiver or the field AddSrv6Tlvs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family) GetAddSrv6Tlvs() *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family_AddSrv6Tlvs {
	if t != nil && t.AddSrv6Tlvs != nil {
		return t.AddSrv6Tlvs
	}
	return nil
}

// GetFamilyType retrieves the value of the leaf FamilyType from the NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FamilyType is set, it can
// safely use t.GetFamilyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FamilyType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family) GetFamilyType() NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family_FamilyType_Union {
	if t == nil || t.FamilyType == nil {
		return nil
	}
	return t.FamilyType
}

// GetIgnoreReceivedSrv6Tlvs retrieves the value of the leaf IgnoreReceivedSrv6Tlvs from the NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreReceivedSrv6Tlvs is set, it can
// safely use t.GetIgnoreReceivedSrv6Tlvs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreReceivedSrv6Tlvs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family) GetIgnoreReceivedSrv6Tlvs() bool {
	if t == nil || t.IgnoreReceivedSrv6Tlvs == nil {
		return true
	}
	return *t.IgnoreReceivedSrv6Tlvs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IgnoreReceivedSrv6Tlvs == nil {
		var v bool = true
		t.IgnoreReceivedSrv6Tlvs = &v
	}
	t.AddSrv6Tlvs.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"family-type": t.FamilyType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family_AddSrv6Tlvs represents the /nokia-conf/configure/groups/group/router/bgp/segment-routing-v6/family/add-srv6-tlvs YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family_AddSrv6Tlvs struct {
	LocatorName *string `path:"locator-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family_AddSrv6Tlvs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family_AddSrv6Tlvs) IsYANGGoStruct() {
}

// GetLocatorName retrieves the value of the leaf LocatorName from the NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family_AddSrv6Tlvs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocatorName is set, it can
// safely use t.GetLocatorName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocatorName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family_AddSrv6Tlvs) GetLocatorName() string {
	if t == nil || t.LocatorName == nil {
		return ""
	}
	return *t.LocatorName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family_AddSrv6Tlvs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family_AddSrv6Tlvs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family_AddSrv6Tlvs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family_AddSrv6Tlvs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family_AddSrv6Tlvs) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family_AddSrv6Tlvs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family_AddSrv6Tlvs.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRoutingV6_Family_AddSrv6Tlvs) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting_PrefixSidRange represents the /nokia-conf/configure/groups/group/router/bgp/segment-routing/prefix-sid-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting_PrefixSidRange struct {
	Global     YANGEmpty `path:"global" module:"nokia-conf"`
	MaxIndex   *uint32   `path:"max-index" module:"nokia-conf"`
	StartLabel *uint32   `path:"start-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting_PrefixSidRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting_PrefixSidRange) IsYANGGoStruct() {}

// GetGlobal retrieves the value of the leaf Global from the NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting_PrefixSidRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Global is set, it can
// safely use t.GetGlobal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Global == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting_PrefixSidRange) GetGlobal() YANGEmpty {
	if t == nil || t.Global == false {
		return false
	}
	return t.Global
}

// GetMaxIndex retrieves the value of the leaf MaxIndex from the NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting_PrefixSidRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxIndex is set, it can
// safely use t.GetMaxIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting_PrefixSidRange) GetMaxIndex() uint32 {
	if t == nil || t.MaxIndex == nil {
		return 1
	}
	return *t.MaxIndex
}

// GetStartLabel retrieves the value of the leaf StartLabel from the NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting_PrefixSidRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartLabel is set, it can
// safely use t.GetStartLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting_PrefixSidRange) GetStartLabel() uint32 {
	if t == nil || t.StartLabel == nil {
		return 0
	}
	return *t.StartLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting_PrefixSidRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting_PrefixSidRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxIndex == nil {
		var v uint32 = 1
		t.MaxIndex = &v
	}
	if t.StartLabel == nil {
		var v uint32 = 0
		t.StartLabel = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting_PrefixSidRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting_PrefixSidRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting_PrefixSidRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting_PrefixSidRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting_PrefixSidRange.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_SegmentRouting_PrefixSidRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_SendCommunities represents the /nokia-conf/configure/groups/group/router/bgp/send-communities YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_SendCommunities struct {
	Extended *bool `path:"extended" module:"nokia-conf"`
	Large    *bool `path:"large" module:"nokia-conf"`
	Standard *bool `path:"standard" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_SendCommunities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_SendCommunities) IsYANGGoStruct() {}

// GetExtended retrieves the value of the leaf Extended from the NokiaConf_Configure_Groups_Group_Router_Bgp_SendCommunities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SendCommunities) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return true
	}
	return *t.Extended
}

// GetLarge retrieves the value of the leaf Large from the NokiaConf_Configure_Groups_Group_Router_Bgp_SendCommunities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Large is set, it can
// safely use t.GetLarge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Large == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SendCommunities) GetLarge() bool {
	if t == nil || t.Large == nil {
		return true
	}
	return *t.Large
}

// GetStandard retrieves the value of the leaf Standard from the NokiaConf_Configure_Groups_Group_Router_Bgp_SendCommunities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Standard is set, it can
// safely use t.GetStandard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Standard == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SendCommunities) GetStandard() bool {
	if t == nil || t.Standard == nil {
		return true
	}
	return *t.Standard
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_SendCommunities
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SendCommunities) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Extended == nil {
		var v bool = true
		t.Extended = &v
	}
	if t.Large == nil {
		var v bool = true
		t.Large = &v
	}
	if t.Standard == nil {
		var v bool = true
		t.Standard = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SendCommunities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_SendCommunities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SendCommunities) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SendCommunities) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_SendCommunities.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_SendCommunities) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bgp_SendDefault represents the /nokia-conf/configure/groups/group/router/bgp/send-default YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bgp_SendDefault struct {
	ExportPolicy *string `path:"export-policy" module:"nokia-conf"`
	Ipv4         *bool   `path:"ipv4" module:"nokia-conf"`
	Ipv6         *bool   `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bgp_SendDefault implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_SendDefault) IsYANGGoStruct() {}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Groups_Group_Router_Bgp_SendDefault
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SendDefault) GetExportPolicy() string {
	if t == nil || t.ExportPolicy == nil {
		return ""
	}
	return *t.ExportPolicy
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Router_Bgp_SendDefault
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SendDefault) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Router_Bgp_SendDefault
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SendDefault) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bgp_SendDefault
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SendDefault) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SendDefault) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bgp_SendDefault"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SendDefault) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bgp_SendDefault) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bgp_SendDefault.
func (*NokiaConf_Configure_Groups_Group_Router_Bgp_SendDefault) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bier represents the /nokia-conf/configure/groups/group/router/bier YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bier struct {
	AdminState  E_NokiaTypesSros_AdminState                                       `path:"admin-state" module:"nokia-conf"`
	BfdLiveness []E_NokiaConf_Configure_Groups_Group_Router_Bier_BfdLiveness      `path:"bfd-liveness" module:"nokia-conf"`
	FastReroute *bool                                                             `path:"fast-reroute" module:"nokia-conf"`
	Template    map[string]*NokiaConf_Configure_Groups_Group_Router_Bier_Template `path:"template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bier) IsYANGGoStruct() {}

// NewTemplate creates a new entry in the Template list of the
// NokiaConf_Configure_Groups_Group_Router_Bier struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Bier) NewTemplate(TemplateName string) (*NokiaConf_Configure_Groups_Group_Router_Bier_Template, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Template == nil {
		t.Template = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Bier_Template)
	}

	key := TemplateName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Template[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Template", key)
	}

	t.Template[key] = &NokiaConf_Configure_Groups_Group_Router_Bier_Template{
		TemplateName: &TemplateName,
	}

	return t.Template[key], nil
}

// RenameTemplate renames an entry in the list Template within
// the NokiaConf_Configure_Groups_Group_Router_Bier struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bier) RenameTemplate(oldK, newK string) error {
	if _, ok := t.Template[newK]; ok {
		return fmt.Errorf("key %v already exists in Template", newK)
	}

	e, ok := t.Template[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Template", oldK)
	}
	e.TemplateName = &newK

	t.Template[newK] = e
	delete(t.Template, oldK)
	return nil
}

// GetOrCreateTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bier. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Bier) GetOrCreateTemplate(TemplateName string) *NokiaConf_Configure_Groups_Group_Router_Bier_Template {

	key := TemplateName

	if v, ok := t.Template[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTemplate(TemplateName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTemplate got unexpected error: %v", err))
	}
	return v
}

// GetTemplate retrieves the value with the specified key from
// the Template map field of NokiaConf_Configure_Groups_Group_Router_Bier. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bier) GetTemplate(TemplateName string) *NokiaConf_Configure_Groups_Group_Router_Bier_Template {

	if t == nil {
		return nil
	}

	key := TemplateName

	if lm, ok := t.Template[key]; ok {
		return lm
	}
	return nil
}

// DeleteTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bier. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Bier) DeleteTemplate(TemplateName string) {
	key := TemplateName

	delete(t.Template, key)
}

// AppendTemplate appends the supplied NokiaConf_Configure_Groups_Group_Router_Bier_Template struct to the
// list Template of NokiaConf_Configure_Groups_Group_Router_Bier. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Bier_Template already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Bier) AppendTemplate(v *NokiaConf_Configure_Groups_Group_Router_Bier_Template) error {
	if v.TemplateName == nil {
		return fmt.Errorf("invalid nil key received for TemplateName")
	}

	key := *v.TemplateName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Template == nil {
		t.Template = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Bier_Template)
	}

	if _, ok := t.Template[key]; ok {
		return fmt.Errorf("duplicate key for list Template %v", key)
	}

	t.Template[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Bier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bier) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Groups_Group_Router_Bier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bier) GetBfdLiveness() []E_NokiaConf_Configure_Groups_Group_Router_Bier_BfdLiveness {
	if t == nil || t.BfdLiveness == nil {
		return nil
	}
	return t.BfdLiveness
}

// GetFastReroute retrieves the value of the leaf FastReroute from the NokiaConf_Configure_Groups_Group_Router_Bier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastReroute is set, it can
// safely use t.GetFastReroute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastReroute == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bier) GetFastReroute() bool {
	if t == nil || t.FastReroute == nil {
		return false
	}
	return *t.FastReroute
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.FastReroute == nil {
		var v bool = false
		t.FastReroute = &v
	}
	for _, e := range t.Template {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bier) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bier.
func (*NokiaConf_Configure_Groups_Group_Router_Bier) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bier_Template represents the /nokia-conf/configure/groups/group/router/bier/template YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bier_Template struct {
	AdminState   E_NokiaTypesSros_AdminState                                                                                                              `path:"admin-state" module:"nokia-conf"`
	SubDomain    map[NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain_Key]*NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain `path:"sub-domain" module:"nokia-conf"`
	TemplateName *string                                                                                                                                  `path:"template-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bier_Template implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bier_Template) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain_Key represents the key for list SubDomain of element /nokia-conf/configure/groups/group/router/bier/template.
type NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain_Key struct {
	Start NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain_Start_Union `path:"start"`
	End   NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain_End_Union   `path:"end"`
}

// NewSubDomain creates a new entry in the SubDomain list of the
// NokiaConf_Configure_Groups_Group_Router_Bier_Template struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Bier_Template) NewSubDomain(Start NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain_Start_Union, End NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain_End_Union) (*NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SubDomain == nil {
		t.SubDomain = make(map[NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain_Key]*NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain)
	}

	key := NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SubDomain[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SubDomain", key)
	}

	t.SubDomain[key] = &NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain{
		Start: Start,
		End:   End,
	}

	return t.SubDomain[key], nil
}

// RenameSubDomain renames an entry in the list SubDomain within
// the NokiaConf_Configure_Groups_Group_Router_Bier_Template struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bier_Template) RenameSubDomain(oldK, newK NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain_Key) error {
	if _, ok := t.SubDomain[newK]; ok {
		return fmt.Errorf("key %v already exists in SubDomain", newK)
	}

	e, ok := t.SubDomain[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SubDomain", oldK)
	}
	e.Start = newK.Start
	e.End = newK.End

	t.SubDomain[newK] = e
	delete(t.SubDomain, oldK)
	return nil
}

// GetOrCreateSubDomain retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bier_Template. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Bier_Template) GetOrCreateSubDomain(Start NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain_Start_Union, End NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain_End_Union) *NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain {

	key := NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.SubDomain[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubDomain(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubDomain got unexpected error: %v", err))
	}
	return v
}

// GetSubDomain retrieves the value with the specified key from
// the SubDomain map field of NokiaConf_Configure_Groups_Group_Router_Bier_Template. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Bier_Template) GetSubDomain(Start NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain_Start_Union, End NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain_End_Union) *NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.SubDomain[key]; ok {
		return lm
	}
	return nil
}

// DeleteSubDomain deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Bier_Template. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Bier_Template) DeleteSubDomain(Start NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain_Start_Union, End NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain_End_Union) {
	key := NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain_Key{
		Start: Start,
		End:   End,
	}

	delete(t.SubDomain, key)
}

// AppendSubDomain appends the supplied NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain struct to the
// list SubDomain of NokiaConf_Configure_Groups_Group_Router_Bier_Template. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Bier_Template) AppendSubDomain(v *NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain) error {
	key := NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain_Key{
		Start: v.Start,
		End:   v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SubDomain == nil {
		t.SubDomain = make(map[NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain_Key]*NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain)
	}

	if _, ok := t.SubDomain[key]; ok {
		return fmt.Errorf("duplicate key for list SubDomain %v", key)
	}

	t.SubDomain[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Bier_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bier_Template) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetTemplateName retrieves the value of the leaf TemplateName from the NokiaConf_Configure_Groups_Group_Router_Bier_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TemplateName is set, it can
// safely use t.GetTemplateName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TemplateName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bier_Template) GetTemplateName() string {
	if t == nil || t.TemplateName == nil {
		return ""
	}
	return *t.TemplateName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bier_Template
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bier_Template) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.SubDomain {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Bier_Template struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Bier_Template) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TemplateName == nil {
		return nil, fmt.Errorf("nil value for key TemplateName")
	}

	return map[string]interface{}{
		"template-name": *t.TemplateName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bier_Template) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bier_Template"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bier_Template) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bier_Template) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bier_Template.
func (*NokiaConf_Configure_Groups_Group_Router_Bier_Template) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain represents the /nokia-conf/configure/groups/group/router/bier/template/sub-domain YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain struct {
	BfrId         *uint32                                                                         `path:"bfr-id" module:"nokia-conf"`
	End           NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain_End_Union       `path:"end" module:"nokia-conf"`
	MultiTopology E_NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain_MultiTopology `path:"multi-topology" module:"nokia-conf"`
	Prefix        *string                                                                         `path:"prefix" module:"nokia-conf"`
	Start         NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain_Start_Union     `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain) IsYANGGoStruct() {}

// GetBfrId retrieves the value of the leaf BfrId from the NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfrId is set, it can
// safely use t.GetBfrId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfrId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain) GetBfrId() uint32 {
	if t == nil || t.BfrId == nil {
		return 0
	}
	return *t.BfrId
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain) GetEnd() NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain_End_Union {
	if t == nil || t.End == nil {
		return nil
	}
	return t.End
}

// GetMultiTopology retrieves the value of the leaf MultiTopology from the NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultiTopology is set, it can
// safely use t.GetMultiTopology() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultiTopology == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain) GetMultiTopology() E_NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain_MultiTopology {
	if t == nil || t.MultiTopology == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain_MultiTopology_ipv4_unicast
	}
	return t.MultiTopology
}

// GetPrefix retrieves the value of the leaf Prefix from the NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return "0.0.0.0"
	}
	return *t.Prefix
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain) GetStart() NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MultiTopology == 0 {
		t.MultiTopology = NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain_MultiTopology_ipv4_unicast
	}
	if t.Prefix == nil {
		var v string = "0.0.0.0"
		t.Prefix = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"end":   t.End,
		"start": t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain.
func (*NokiaConf_Configure_Groups_Group_Router_Bier_Template_SubDomain) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Confederation represents the /nokia-conf/configure/groups/group/router/confederation YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Confederation struct {
	ConfedAsNum *uint32                                                                                                                                         `path:"confed-as-num" module:"nokia-conf"`
	Members     map[NokiaConf_Configure_Groups_Group_Router_Confederation_Members_AsNumber_Union]*NokiaConf_Configure_Groups_Group_Router_Confederation_Members `path:"members" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Confederation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Confederation) IsYANGGoStruct() {}

// NewMembers creates a new entry in the Members list of the
// NokiaConf_Configure_Groups_Group_Router_Confederation struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Confederation) NewMembers(AsNumber NokiaConf_Configure_Groups_Group_Router_Confederation_Members_AsNumber_Union) (*NokiaConf_Configure_Groups_Group_Router_Confederation_Members, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Members == nil {
		t.Members = make(map[NokiaConf_Configure_Groups_Group_Router_Confederation_Members_AsNumber_Union]*NokiaConf_Configure_Groups_Group_Router_Confederation_Members)
	}

	key := AsNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Members[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Members", key)
	}

	t.Members[key] = &NokiaConf_Configure_Groups_Group_Router_Confederation_Members{
		AsNumber: AsNumber,
	}

	return t.Members[key], nil
}

// RenameMembers renames an entry in the list Members within
// the NokiaConf_Configure_Groups_Group_Router_Confederation struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Confederation) RenameMembers(oldK, newK NokiaConf_Configure_Groups_Group_Router_Confederation_Members_AsNumber_Union) error {
	if _, ok := t.Members[newK]; ok {
		return fmt.Errorf("key %v already exists in Members", newK)
	}

	e, ok := t.Members[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Members", oldK)
	}
	e.AsNumber = newK

	t.Members[newK] = e
	delete(t.Members, oldK)
	return nil
}

// GetOrCreateMembers retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Confederation. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Confederation) GetOrCreateMembers(AsNumber NokiaConf_Configure_Groups_Group_Router_Confederation_Members_AsNumber_Union) *NokiaConf_Configure_Groups_Group_Router_Confederation_Members {

	key := AsNumber

	if v, ok := t.Members[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMembers(AsNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMembers got unexpected error: %v", err))
	}
	return v
}

// GetMembers retrieves the value with the specified key from
// the Members map field of NokiaConf_Configure_Groups_Group_Router_Confederation. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Confederation) GetMembers(AsNumber NokiaConf_Configure_Groups_Group_Router_Confederation_Members_AsNumber_Union) *NokiaConf_Configure_Groups_Group_Router_Confederation_Members {

	if t == nil {
		return nil
	}

	key := AsNumber

	if lm, ok := t.Members[key]; ok {
		return lm
	}
	return nil
}

// DeleteMembers deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Confederation. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Confederation) DeleteMembers(AsNumber NokiaConf_Configure_Groups_Group_Router_Confederation_Members_AsNumber_Union) {
	key := AsNumber

	delete(t.Members, key)
}

// AppendMembers appends the supplied NokiaConf_Configure_Groups_Group_Router_Confederation_Members struct to the
// list Members of NokiaConf_Configure_Groups_Group_Router_Confederation. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Confederation_Members already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Confederation) AppendMembers(v *NokiaConf_Configure_Groups_Group_Router_Confederation_Members) error {
	key := v.AsNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Members == nil {
		t.Members = make(map[NokiaConf_Configure_Groups_Group_Router_Confederation_Members_AsNumber_Union]*NokiaConf_Configure_Groups_Group_Router_Confederation_Members)
	}

	if _, ok := t.Members[key]; ok {
		return fmt.Errorf("duplicate key for list Members %v", key)
	}

	t.Members[key] = v
	return nil
}

// GetConfedAsNum retrieves the value of the leaf ConfedAsNum from the NokiaConf_Configure_Groups_Group_Router_Confederation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConfedAsNum is set, it can
// safely use t.GetConfedAsNum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConfedAsNum == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Confederation) GetConfedAsNum() uint32 {
	if t == nil || t.ConfedAsNum == nil {
		return 0
	}
	return *t.ConfedAsNum
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Confederation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Confederation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Members {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Confederation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Confederation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Confederation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Confederation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Confederation.
func (*NokiaConf_Configure_Groups_Group_Router_Confederation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Confederation_Members represents the /nokia-conf/configure/groups/group/router/confederation/members YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Confederation_Members struct {
	AsNumber NokiaConf_Configure_Groups_Group_Router_Confederation_Members_AsNumber_Union `path:"as-number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Confederation_Members implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Confederation_Members) IsYANGGoStruct() {}

// GetAsNumber retrieves the value of the leaf AsNumber from the NokiaConf_Configure_Groups_Group_Router_Confederation_Members
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsNumber is set, it can
// safely use t.GetAsNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Confederation_Members) GetAsNumber() NokiaConf_Configure_Groups_Group_Router_Confederation_Members_AsNumber_Union {
	if t == nil || t.AsNumber == nil {
		return nil
	}
	return t.AsNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Confederation_Members
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Confederation_Members) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Confederation_Members struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Confederation_Members) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"as-number": t.AsNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Confederation_Members) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Confederation_Members"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Confederation_Members) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Confederation_Members) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Confederation_Members.
func (*NokiaConf_Configure_Groups_Group_Router_Confederation_Members) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer represents the /nokia-conf/configure/groups/group/router/dhcp-server YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer struct {
	Dhcpv4 map[string]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4 `path:"dhcpv4" module:"nokia-conf"`
	Dhcpv6 map[string]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6 `path:"dhcpv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer) IsYANGGoStruct() {}

// NewDhcpv4 creates a new entry in the Dhcpv4 list of the
// NokiaConf_Configure_Groups_Group_Router_DhcpServer struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer) NewDhcpv4(Name string) (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dhcpv4 == nil {
		t.Dhcpv4 = make(map[string]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dhcpv4[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dhcpv4", key)
	}

	t.Dhcpv4[key] = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4{
		Name: &Name,
	}

	return t.Dhcpv4[key], nil
}

// RenameDhcpv4 renames an entry in the list Dhcpv4 within
// the NokiaConf_Configure_Groups_Group_Router_DhcpServer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer) RenameDhcpv4(oldK, newK string) error {
	if _, ok := t.Dhcpv4[newK]; ok {
		return fmt.Errorf("key %v already exists in Dhcpv4", newK)
	}

	e, ok := t.Dhcpv4[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dhcpv4", oldK)
	}
	e.Name = &newK

	t.Dhcpv4[newK] = e
	delete(t.Dhcpv4, oldK)
	return nil
}

// GetOrCreateDhcpv4 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer) GetOrCreateDhcpv4(Name string) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4 {

	key := Name

	if v, ok := t.Dhcpv4[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDhcpv4(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDhcpv4 got unexpected error: %v", err))
	}
	return v
}

// GetDhcpv4 retrieves the value with the specified key from
// the Dhcpv4 map field of NokiaConf_Configure_Groups_Group_Router_DhcpServer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer) GetDhcpv4(Name string) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4 {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Dhcpv4[key]; ok {
		return lm
	}
	return nil
}

// DeleteDhcpv4 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer) DeleteDhcpv4(Name string) {
	key := Name

	delete(t.Dhcpv4, key)
}

// AppendDhcpv4 appends the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4 struct to the
// list Dhcpv4 of NokiaConf_Configure_Groups_Group_Router_DhcpServer. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer) AppendDhcpv4(v *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dhcpv4 == nil {
		t.Dhcpv4 = make(map[string]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4)
	}

	if _, ok := t.Dhcpv4[key]; ok {
		return fmt.Errorf("duplicate key for list Dhcpv4 %v", key)
	}

	t.Dhcpv4[key] = v
	return nil
}

// NewDhcpv6 creates a new entry in the Dhcpv6 list of the
// NokiaConf_Configure_Groups_Group_Router_DhcpServer struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer) NewDhcpv6(Name string) (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dhcpv6 == nil {
		t.Dhcpv6 = make(map[string]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Dhcpv6[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Dhcpv6", key)
	}

	t.Dhcpv6[key] = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6{
		Name: &Name,
	}

	return t.Dhcpv6[key], nil
}

// RenameDhcpv6 renames an entry in the list Dhcpv6 within
// the NokiaConf_Configure_Groups_Group_Router_DhcpServer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer) RenameDhcpv6(oldK, newK string) error {
	if _, ok := t.Dhcpv6[newK]; ok {
		return fmt.Errorf("key %v already exists in Dhcpv6", newK)
	}

	e, ok := t.Dhcpv6[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Dhcpv6", oldK)
	}
	e.Name = &newK

	t.Dhcpv6[newK] = e
	delete(t.Dhcpv6, oldK)
	return nil
}

// GetOrCreateDhcpv6 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer) GetOrCreateDhcpv6(Name string) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6 {

	key := Name

	if v, ok := t.Dhcpv6[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDhcpv6(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDhcpv6 got unexpected error: %v", err))
	}
	return v
}

// GetDhcpv6 retrieves the value with the specified key from
// the Dhcpv6 map field of NokiaConf_Configure_Groups_Group_Router_DhcpServer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer) GetDhcpv6(Name string) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6 {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Dhcpv6[key]; ok {
		return lm
	}
	return nil
}

// DeleteDhcpv6 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer) DeleteDhcpv6(Name string) {
	key := Name

	delete(t.Dhcpv6, key)
}

// AppendDhcpv6 appends the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6 struct to the
// list Dhcpv6 of NokiaConf_Configure_Groups_Group_Router_DhcpServer. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer) AppendDhcpv6(v *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Dhcpv6 == nil {
		t.Dhcpv6 = make(map[string]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6)
	}

	if _, ok := t.Dhcpv6[key]; ok {
		return fmt.Errorf("duplicate key for list Dhcpv6 %v", key)
	}

	t.Dhcpv6[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Dhcpv4 {
		e.PopulateDefaults()
	}
	for _, e := range t.Dhcpv6 {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4 represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4 struct {
	AdminState         E_NokiaTypesSros_AdminState                                                    `path:"admin-state" module:"nokia-conf"`
	Description        *string                                                                        `path:"description" module:"nokia-conf"`
	Failover           *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover            `path:"failover" module:"nokia-conf" yangPresence:"true"`
	ForceRenews        *bool                                                                          `path:"force-renews" module:"nokia-conf"`
	LeaseHold          *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold           `path:"lease-hold" module:"nokia-conf"`
	Name               *string                                                                        `path:"name" module:"nokia-conf"`
	Pool               map[string]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool     `path:"pool" module:"nokia-conf"`
	PoolSelection      *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection       `path:"pool-selection" module:"nokia-conf"`
	UserDb             *string                                                                        `path:"user-db" module:"nokia-conf"`
	UserIdentification E_NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_UserIdentification `path:"user-identification" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4) IsYANGGoStruct() {}

// NewPool creates a new entry in the Pool list of the
// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4) NewPool(PoolName string) (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool)
	}

	key := PoolName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Pool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Pool", key)
	}

	t.Pool[key] = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool{
		PoolName: &PoolName,
	}

	return t.Pool[key], nil
}

// RenamePool renames an entry in the list Pool within
// the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4) RenamePool(oldK, newK string) error {
	if _, ok := t.Pool[newK]; ok {
		return fmt.Errorf("key %v already exists in Pool", newK)
	}

	e, ok := t.Pool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Pool", oldK)
	}
	e.PoolName = &newK

	t.Pool[newK] = e
	delete(t.Pool, oldK)
	return nil
}

// GetOrCreatePool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4) GetOrCreatePool(PoolName string) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool {

	key := PoolName

	if v, ok := t.Pool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPool(PoolName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePool got unexpected error: %v", err))
	}
	return v
}

// GetPool retrieves the value with the specified key from
// the Pool map field of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4) GetPool(PoolName string) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool {

	if t == nil {
		return nil
	}

	key := PoolName

	if lm, ok := t.Pool[key]; ok {
		return lm
	}
	return nil
}

// DeletePool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4) DeletePool(PoolName string) {
	key := PoolName

	delete(t.Pool, key)
}

// AppendPool appends the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool struct to the
// list Pool of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4) AppendPool(v *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool) error {
	if v.PoolName == nil {
		return fmt.Errorf("invalid nil key received for PoolName")
	}

	key := *v.PoolName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool)
	}

	if _, ok := t.Pool[key]; ok {
		return fmt.Errorf("duplicate key for list Pool %v", key)
	}

	t.Pool[key] = v
	return nil
}

// GetOrCreateFailover retrieves the value of the Failover field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4) GetOrCreateFailover() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover {
	if t.Failover != nil {
		return t.Failover
	}
	t.Failover = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover{}
	return t.Failover
}

// GetOrCreateLeaseHold retrieves the value of the LeaseHold field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4) GetOrCreateLeaseHold() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold {
	if t.LeaseHold != nil {
		return t.LeaseHold
	}
	t.LeaseHold = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold{}
	return t.LeaseHold
}

// GetOrCreatePoolSelection retrieves the value of the PoolSelection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4) GetOrCreatePoolSelection() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection {
	if t.PoolSelection != nil {
		return t.PoolSelection
	}
	t.PoolSelection = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection{}
	return t.PoolSelection
}

// GetFailover returns the value of the Failover struct pointer
// from NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4. If the receiver or the field Failover is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4) GetFailover() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover {
	if t != nil && t.Failover != nil {
		return t.Failover
	}
	return nil
}

// GetLeaseHold returns the value of the LeaseHold struct pointer
// from NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4. If the receiver or the field LeaseHold is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4) GetLeaseHold() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold {
	if t != nil && t.LeaseHold != nil {
		return t.LeaseHold
	}
	return nil
}

// GetPoolSelection returns the value of the PoolSelection struct pointer
// from NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4. If the receiver or the field PoolSelection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4) GetPoolSelection() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection {
	if t != nil && t.PoolSelection != nil {
		return t.PoolSelection
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetForceRenews retrieves the value of the leaf ForceRenews from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForceRenews is set, it can
// safely use t.GetForceRenews() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForceRenews == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4) GetForceRenews() bool {
	if t == nil || t.ForceRenews == nil {
		return false
	}
	return *t.ForceRenews
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetUserDb retrieves the value of the leaf UserDb from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserDb is set, it can
// safely use t.GetUserDb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserDb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4) GetUserDb() string {
	if t == nil || t.UserDb == nil {
		return ""
	}
	return *t.UserDb
}

// GetUserIdentification retrieves the value of the leaf UserIdentification from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserIdentification is set, it can
// safely use t.GetUserIdentification() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserIdentification == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4) GetUserIdentification() E_NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_UserIdentification {
	if t == nil || t.UserIdentification == 0 {
		return 0
	}
	return t.UserIdentification
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ForceRenews == nil {
		var v bool = false
		t.ForceRenews = &v
	}
	t.Failover.PopulateDefaults()
	t.LeaseHold.PopulateDefaults()
	t.PoolSelection.PopulateDefaults()
	for _, e := range t.Pool {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv4/failover YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover struct {
	AdminState            E_NokiaTypesSros_AdminState                                                         `path:"admin-state" module:"nokia-conf"`
	IgnoreMcltOnTakeover  *bool                                                                               `path:"ignore-mclt-on-takeover" module:"nokia-conf"`
	MaximumClientLeadTime *uint32                                                                             `path:"maximum-client-lead-time" module:"nokia-conf"`
	PartnerDownDelay      *uint32                                                                             `path:"partner-down-delay" module:"nokia-conf"`
	Peer                  map[string]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover_Peer `path:"peer" module:"nokia-conf"`
	StartupWaitTime       *uint32                                                                             `path:"startup-wait-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover) IsYANGGoStruct() {}

// NewPeer creates a new entry in the Peer list of the
// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover) NewPeer(Address string) (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover_Peer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover_Peer)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover_Peer{
		Address: &Address,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover) RenamePeer(oldK, newK string) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.Address = &newK

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover) GetOrCreatePeer(Address string) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover_Peer {

	key := Address

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover) GetPeer(Address string) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover_Peer {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover) DeletePeer(Address string) {
	key := Address

	delete(t.Peer, key)
}

// AppendPeer appends the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover_Peer struct to the
// list Peer of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover_Peer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover) AppendPeer(v *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover_Peer) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetIgnoreMcltOnTakeover retrieves the value of the leaf IgnoreMcltOnTakeover from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreMcltOnTakeover is set, it can
// safely use t.GetIgnoreMcltOnTakeover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreMcltOnTakeover == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover) GetIgnoreMcltOnTakeover() bool {
	if t == nil || t.IgnoreMcltOnTakeover == nil {
		return false
	}
	return *t.IgnoreMcltOnTakeover
}

// GetMaximumClientLeadTime retrieves the value of the leaf MaximumClientLeadTime from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumClientLeadTime is set, it can
// safely use t.GetMaximumClientLeadTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumClientLeadTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover) GetMaximumClientLeadTime() uint32 {
	if t == nil || t.MaximumClientLeadTime == nil {
		return 600
	}
	return *t.MaximumClientLeadTime
}

// GetPartnerDownDelay retrieves the value of the leaf PartnerDownDelay from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PartnerDownDelay is set, it can
// safely use t.GetPartnerDownDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PartnerDownDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover) GetPartnerDownDelay() uint32 {
	if t == nil || t.PartnerDownDelay == nil {
		return 86399
	}
	return *t.PartnerDownDelay
}

// GetStartupWaitTime retrieves the value of the leaf StartupWaitTime from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartupWaitTime is set, it can
// safely use t.GetStartupWaitTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartupWaitTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover) GetStartupWaitTime() uint32 {
	if t == nil || t.StartupWaitTime == nil {
		return 120
	}
	return *t.StartupWaitTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.IgnoreMcltOnTakeover == nil {
		var v bool = false
		t.IgnoreMcltOnTakeover = &v
	}
	if t.MaximumClientLeadTime == nil {
		var v uint32 = 600
		t.MaximumClientLeadTime = &v
	}
	if t.PartnerDownDelay == nil {
		var v uint32 = 86399
		t.PartnerDownDelay = &v
	}
	if t.StartupWaitTime == nil {
		var v uint32 = 120
		t.StartupWaitTime = &v
	}
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover_Peer represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv4/failover/peer YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover_Peer struct {
	Address *string `path:"address" module:"nokia-conf"`
	SyncTag *string `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover_Peer) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover_Peer) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover_Peer) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover_Peer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover_Peer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover_Peer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover_Peer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover_Peer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover_Peer.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Failover_Peer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv4/lease-hold YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold struct {
	AdditionalScenarios *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios `path:"additional-scenarios" module:"nokia-conf"`
	Time                *uint32                                                                                  `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold) IsYANGGoStruct() {}

// GetOrCreateAdditionalScenarios retrieves the value of the AdditionalScenarios field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold) GetOrCreateAdditionalScenarios() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios {
	if t.AdditionalScenarios != nil {
		return t.AdditionalScenarios
	}
	t.AdditionalScenarios = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios{}
	return t.AdditionalScenarios
}

// GetAdditionalScenarios returns the value of the AdditionalScenarios struct pointer
// from NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold. If the receiver or the field AdditionalScenarios is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold) GetAdditionalScenarios() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios {
	if t != nil && t.AdditionalScenarios != nil {
		return t.AdditionalScenarios
	}
	return nil
}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold) GetTime() uint32 {
	if t == nil || t.Time == nil {
		return 0
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AdditionalScenarios.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv4/lease-hold/additional-scenarios YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios struct {
	InternalLeaseIpsec *bool `path:"internal-lease-ipsec" module:"nokia-conf"`
	SolicitedRelease   *bool `path:"solicited-release" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios) IsYANGGoStruct() {
}

// GetInternalLeaseIpsec retrieves the value of the leaf InternalLeaseIpsec from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InternalLeaseIpsec is set, it can
// safely use t.GetInternalLeaseIpsec() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InternalLeaseIpsec == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios) GetInternalLeaseIpsec() bool {
	if t == nil || t.InternalLeaseIpsec == nil {
		return false
	}
	return *t.InternalLeaseIpsec
}

// GetSolicitedRelease retrieves the value of the leaf SolicitedRelease from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SolicitedRelease is set, it can
// safely use t.GetSolicitedRelease() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SolicitedRelease == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios) GetSolicitedRelease() bool {
	if t == nil || t.SolicitedRelease == nil {
		return false
	}
	return *t.SolicitedRelease
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InternalLeaseIpsec == nil {
		var v bool = false
		t.InternalLeaseIpsec = &v
	}
	if t.SolicitedRelease == nil {
		var v bool = false
		t.SolicitedRelease = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_LeaseHold_AdditionalScenarios) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv4/pool YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool struct {
	Description          *string                                                                           `path:"description" module:"nokia-conf"`
	Failover             *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover          `path:"failover" module:"nokia-conf" yangPresence:"true"`
	MaxLeaseTime         *uint32                                                                           `path:"max-lease-time" module:"nokia-conf"`
	MinLeaseTime         *uint32                                                                           `path:"min-lease-time" module:"nokia-conf"`
	MinimumFree          *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_MinimumFree       `path:"minimum-free" module:"nokia-conf"`
	NakNonMatchingSubnet *bool                                                                             `path:"nak-non-matching-subnet" module:"nokia-conf"`
	OfferTime            *uint32                                                                           `path:"offer-time" module:"nokia-conf"`
	Options              *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options           `path:"options" module:"nokia-conf"`
	PoolName             *string                                                                           `path:"pool-name" module:"nokia-conf"`
	Subnet               map[string]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet `path:"subnet" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool) IsYANGGoStruct() {}

// NewSubnet creates a new entry in the Subnet list of the
// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool) NewSubnet(Ipv4Prefix string) (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subnet == nil {
		t.Subnet = make(map[string]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet)
	}

	key := Ipv4Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subnet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subnet", key)
	}

	t.Subnet[key] = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet{
		Ipv4Prefix: &Ipv4Prefix,
	}

	return t.Subnet[key], nil
}

// RenameSubnet renames an entry in the list Subnet within
// the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool) RenameSubnet(oldK, newK string) error {
	if _, ok := t.Subnet[newK]; ok {
		return fmt.Errorf("key %v already exists in Subnet", newK)
	}

	e, ok := t.Subnet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Subnet", oldK)
	}
	e.Ipv4Prefix = &newK

	t.Subnet[newK] = e
	delete(t.Subnet, oldK)
	return nil
}

// GetOrCreateSubnet retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool) GetOrCreateSubnet(Ipv4Prefix string) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet {

	key := Ipv4Prefix

	if v, ok := t.Subnet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubnet(Ipv4Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubnet got unexpected error: %v", err))
	}
	return v
}

// GetSubnet retrieves the value with the specified key from
// the Subnet map field of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool) GetSubnet(Ipv4Prefix string) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet {

	if t == nil {
		return nil
	}

	key := Ipv4Prefix

	if lm, ok := t.Subnet[key]; ok {
		return lm
	}
	return nil
}

// DeleteSubnet deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool) DeleteSubnet(Ipv4Prefix string) {
	key := Ipv4Prefix

	delete(t.Subnet, key)
}

// AppendSubnet appends the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet struct to the
// list Subnet of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool) AppendSubnet(v *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet) error {
	if v.Ipv4Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv4Prefix")
	}

	key := *v.Ipv4Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subnet == nil {
		t.Subnet = make(map[string]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet)
	}

	if _, ok := t.Subnet[key]; ok {
		return fmt.Errorf("duplicate key for list Subnet %v", key)
	}

	t.Subnet[key] = v
	return nil
}

// GetOrCreateFailover retrieves the value of the Failover field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool) GetOrCreateFailover() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover {
	if t.Failover != nil {
		return t.Failover
	}
	t.Failover = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover{}
	return t.Failover
}

// GetOrCreateMinimumFree retrieves the value of the MinimumFree field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool) GetOrCreateMinimumFree() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_MinimumFree {
	if t.MinimumFree != nil {
		return t.MinimumFree
	}
	t.MinimumFree = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_MinimumFree{}
	return t.MinimumFree
}

// GetOrCreateOptions retrieves the value of the Options field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool) GetOrCreateOptions() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options {
	if t.Options != nil {
		return t.Options
	}
	t.Options = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options{}
	return t.Options
}

// GetFailover returns the value of the Failover struct pointer
// from NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool. If the receiver or the field Failover is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool) GetFailover() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover {
	if t != nil && t.Failover != nil {
		return t.Failover
	}
	return nil
}

// GetMinimumFree returns the value of the MinimumFree struct pointer
// from NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool. If the receiver or the field MinimumFree is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool) GetMinimumFree() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_MinimumFree {
	if t != nil && t.MinimumFree != nil {
		return t.MinimumFree
	}
	return nil
}

// GetOptions returns the value of the Options struct pointer
// from NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool. If the receiver or the field Options is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool) GetOptions() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options {
	if t != nil && t.Options != nil {
		return t.Options
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMaxLeaseTime retrieves the value of the leaf MaxLeaseTime from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLeaseTime is set, it can
// safely use t.GetMaxLeaseTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLeaseTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool) GetMaxLeaseTime() uint32 {
	if t == nil || t.MaxLeaseTime == nil {
		return 864000
	}
	return *t.MaxLeaseTime
}

// GetMinLeaseTime retrieves the value of the leaf MinLeaseTime from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinLeaseTime is set, it can
// safely use t.GetMinLeaseTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinLeaseTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool) GetMinLeaseTime() uint32 {
	if t == nil || t.MinLeaseTime == nil {
		return 600
	}
	return *t.MinLeaseTime
}

// GetNakNonMatchingSubnet retrieves the value of the leaf NakNonMatchingSubnet from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NakNonMatchingSubnet is set, it can
// safely use t.GetNakNonMatchingSubnet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NakNonMatchingSubnet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool) GetNakNonMatchingSubnet() bool {
	if t == nil || t.NakNonMatchingSubnet == nil {
		return false
	}
	return *t.NakNonMatchingSubnet
}

// GetOfferTime retrieves the value of the leaf OfferTime from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OfferTime is set, it can
// safely use t.GetOfferTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OfferTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool) GetOfferTime() uint32 {
	if t == nil || t.OfferTime == nil {
		return 60
	}
	return *t.OfferTime
}

// GetPoolName retrieves the value of the leaf PoolName from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PoolName is set, it can
// safely use t.GetPoolName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PoolName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool) GetPoolName() string {
	if t == nil || t.PoolName == nil {
		return ""
	}
	return *t.PoolName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxLeaseTime == nil {
		var v uint32 = 864000
		t.MaxLeaseTime = &v
	}
	if t.MinLeaseTime == nil {
		var v uint32 = 600
		t.MinLeaseTime = &v
	}
	if t.NakNonMatchingSubnet == nil {
		var v bool = false
		t.NakNonMatchingSubnet = &v
	}
	if t.OfferTime == nil {
		var v uint32 = 60
		t.OfferTime = &v
	}
	t.Failover.PopulateDefaults()
	t.MinimumFree.PopulateDefaults()
	t.Options.PopulateDefaults()
	for _, e := range t.Subnet {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PoolName == nil {
		return nil, fmt.Errorf("nil value for key PoolName")
	}

	return map[string]interface{}{
		"pool-name": *t.PoolName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv4/pool-selection YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection struct {
	UseGiAddress      *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress      `path:"use-gi-address" module:"nokia-conf" yangPresence:"true"`
	UsePoolFromClient *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient `path:"use-pool-from-client" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection) IsYANGGoStruct() {}

// GetOrCreateUseGiAddress retrieves the value of the UseGiAddress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection) GetOrCreateUseGiAddress() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress {
	if t.UseGiAddress != nil {
		return t.UseGiAddress
	}
	t.UseGiAddress = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress{}
	return t.UseGiAddress
}

// GetOrCreateUsePoolFromClient retrieves the value of the UsePoolFromClient field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection) GetOrCreateUsePoolFromClient() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient {
	if t.UsePoolFromClient != nil {
		return t.UsePoolFromClient
	}
	t.UsePoolFromClient = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient{}
	return t.UsePoolFromClient
}

// GetUseGiAddress returns the value of the UseGiAddress struct pointer
// from NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection. If the receiver or the field UseGiAddress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection) GetUseGiAddress() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress {
	if t != nil && t.UseGiAddress != nil {
		return t.UseGiAddress
	}
	return nil
}

// GetUsePoolFromClient returns the value of the UsePoolFromClient struct pointer
// from NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection. If the receiver or the field UsePoolFromClient is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection) GetUsePoolFromClient() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient {
	if t != nil && t.UsePoolFromClient != nil {
		return t.UsePoolFromClient
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.UseGiAddress.PopulateDefaults()
	t.UsePoolFromClient.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv4/pool-selection/use-gi-address YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress struct {
	Scope E_NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress_Scope `path:"scope" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress) IsYANGGoStruct() {
}

// GetScope retrieves the value of the leaf Scope from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scope is set, it can
// safely use t.GetScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scope == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress) GetScope() E_NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress_Scope {
	if t == nil || t.Scope == 0 {
		return NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress_Scope_subnet
	}
	return t.Scope
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Scope == 0 {
		t.Scope = NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress_Scope_subnet
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UseGiAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv4/pool-selection/use-pool-from-client YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient struct {
	Delimiter *string `path:"delimiter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient) IsYANGGoStruct() {
}

// GetDelimiter retrieves the value of the leaf Delimiter from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Delimiter is set, it can
// safely use t.GetDelimiter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Delimiter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient) GetDelimiter() string {
	if t == nil || t.Delimiter == nil {
		return ""
	}
	return *t.Delimiter
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_PoolSelection_UsePoolFromClient) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv4/pool/failover YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover struct {
	AdminState            E_NokiaTypesSros_AdminState                                                              `path:"admin-state" module:"nokia-conf"`
	IgnoreMcltOnTakeover  *bool                                                                                    `path:"ignore-mclt-on-takeover" module:"nokia-conf"`
	MaximumClientLeadTime *uint32                                                                                  `path:"maximum-client-lead-time" module:"nokia-conf"`
	PartnerDownDelay      *uint32                                                                                  `path:"partner-down-delay" module:"nokia-conf"`
	Peer                  map[string]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer `path:"peer" module:"nokia-conf"`
	StartupWaitTime       *uint32                                                                                  `path:"startup-wait-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover) IsYANGGoStruct() {}

// NewPeer creates a new entry in the Peer list of the
// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover) NewPeer(Address string) (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer{
		Address: &Address,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover) RenamePeer(oldK, newK string) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.Address = &newK

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover) GetOrCreatePeer(Address string) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer {

	key := Address

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover) GetPeer(Address string) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover) DeletePeer(Address string) {
	key := Address

	delete(t.Peer, key)
}

// AppendPeer appends the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer struct to the
// list Peer of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover) AppendPeer(v *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetIgnoreMcltOnTakeover retrieves the value of the leaf IgnoreMcltOnTakeover from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreMcltOnTakeover is set, it can
// safely use t.GetIgnoreMcltOnTakeover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreMcltOnTakeover == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover) GetIgnoreMcltOnTakeover() bool {
	if t == nil || t.IgnoreMcltOnTakeover == nil {
		return false
	}
	return *t.IgnoreMcltOnTakeover
}

// GetMaximumClientLeadTime retrieves the value of the leaf MaximumClientLeadTime from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumClientLeadTime is set, it can
// safely use t.GetMaximumClientLeadTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumClientLeadTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover) GetMaximumClientLeadTime() uint32 {
	if t == nil || t.MaximumClientLeadTime == nil {
		return 600
	}
	return *t.MaximumClientLeadTime
}

// GetPartnerDownDelay retrieves the value of the leaf PartnerDownDelay from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PartnerDownDelay is set, it can
// safely use t.GetPartnerDownDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PartnerDownDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover) GetPartnerDownDelay() uint32 {
	if t == nil || t.PartnerDownDelay == nil {
		return 86399
	}
	return *t.PartnerDownDelay
}

// GetStartupWaitTime retrieves the value of the leaf StartupWaitTime from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartupWaitTime is set, it can
// safely use t.GetStartupWaitTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartupWaitTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover) GetStartupWaitTime() uint32 {
	if t == nil || t.StartupWaitTime == nil {
		return 120
	}
	return *t.StartupWaitTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.IgnoreMcltOnTakeover == nil {
		var v bool = false
		t.IgnoreMcltOnTakeover = &v
	}
	if t.MaximumClientLeadTime == nil {
		var v uint32 = 600
		t.MaximumClientLeadTime = &v
	}
	if t.PartnerDownDelay == nil {
		var v uint32 = 86399
		t.PartnerDownDelay = &v
	}
	if t.StartupWaitTime == nil {
		var v uint32 = 120
		t.StartupWaitTime = &v
	}
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv4/pool/failover/peer YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer struct {
	Address *string `path:"address" module:"nokia-conf"`
	SyncTag *string `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Failover_Peer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_MinimumFree represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv4/pool/minimum-free YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_MinimumFree struct {
	Absolute          *uint32 `path:"absolute" module:"nokia-conf"`
	EventWhenDepleted *bool   `path:"event-when-depleted" module:"nokia-conf"`
	Percent           *uint32 `path:"percent" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_MinimumFree implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_MinimumFree) IsYANGGoStruct() {}

// GetAbsolute retrieves the value of the leaf Absolute from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_MinimumFree
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Absolute is set, it can
// safely use t.GetAbsolute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Absolute == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_MinimumFree) GetAbsolute() uint32 {
	if t == nil || t.Absolute == nil {
		return 1
	}
	return *t.Absolute
}

// GetEventWhenDepleted retrieves the value of the leaf EventWhenDepleted from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_MinimumFree
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventWhenDepleted is set, it can
// safely use t.GetEventWhenDepleted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventWhenDepleted == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_MinimumFree) GetEventWhenDepleted() bool {
	if t == nil || t.EventWhenDepleted == nil {
		return false
	}
	return *t.EventWhenDepleted
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_MinimumFree
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_MinimumFree) GetPercent() uint32 {
	if t == nil || t.Percent == nil {
		return 1
	}
	return *t.Percent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_MinimumFree
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_MinimumFree) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Absolute == nil {
		var v uint32 = 1
		t.Absolute = &v
	}
	if t.EventWhenDepleted == nil {
		var v bool = false
		t.EventWhenDepleted = &v
	}
	if t.Percent == nil {
		var v uint32 = 1
		t.Percent = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_MinimumFree) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_MinimumFree"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_MinimumFree) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_MinimumFree) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_MinimumFree.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_MinimumFree) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv4/pool/options YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options struct {
	Option map[NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option_Number_Union]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option `path:"option" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options) IsYANGGoStruct() {}

// NewOption creates a new entry in the Option list of the
// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options) NewOption(Number NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option_Number_Union) (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option_Number_Union]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option)
	}

	key := Number

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Option[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Option", key)
	}

	t.Option[key] = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option{
		Number: Number,
	}

	return t.Option[key], nil
}

// RenameOption renames an entry in the list Option within
// the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options) RenameOption(oldK, newK NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option_Number_Union) error {
	if _, ok := t.Option[newK]; ok {
		return fmt.Errorf("key %v already exists in Option", newK)
	}

	e, ok := t.Option[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Option", oldK)
	}
	e.Number = newK

	t.Option[newK] = e
	delete(t.Option, oldK)
	return nil
}

// GetOrCreateOption retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options) GetOrCreateOption(Number NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option_Number_Union) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option {

	key := Number

	if v, ok := t.Option[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOption(Number)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOption got unexpected error: %v", err))
	}
	return v
}

// GetOption retrieves the value with the specified key from
// the Option map field of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options) GetOption(Number NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option_Number_Union) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option {

	if t == nil {
		return nil
	}

	key := Number

	if lm, ok := t.Option[key]; ok {
		return lm
	}
	return nil
}

// DeleteOption deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options) DeleteOption(Number NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option_Number_Union) {
	key := Number

	delete(t.Option, key)
}

// AppendOption appends the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option struct to the
// list Option of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options) AppendOption(v *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option) error {
	key := v.Number

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option_Number_Union]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option)
	}

	if _, ok := t.Option[key]; ok {
		return fmt.Errorf("duplicate key for list Option %v", key)
	}

	t.Option[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Option {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv4/pool/options/option YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option struct {
	AsciiString     *string                                                                                         `path:"ascii-string" module:"nokia-conf"`
	Duration        *uint32                                                                                         `path:"duration" module:"nokia-conf"`
	Empty           YANGEmpty                                                                                       `path:"empty" module:"nokia-conf"`
	HexString       *string                                                                                         `path:"hex-string" module:"nokia-conf"`
	Ipv4Address     []string                                                                                        `path:"ipv4-address" module:"nokia-conf"`
	NetbiosNodeType E_NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option_NetbiosNodeType `path:"netbios-node-type" module:"nokia-conf"`
	Number          NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option_Number_Union      `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option) IsYANGGoStruct() {
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetDuration retrieves the value of the leaf Duration from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Duration is set, it can
// safely use t.GetDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Duration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option) GetDuration() uint32 {
	if t == nil || t.Duration == nil {
		return 0
	}
	return *t.Duration
}

// GetEmpty retrieves the value of the leaf Empty from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Empty is set, it can
// safely use t.GetEmpty() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Empty == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option) GetEmpty() YANGEmpty {
	if t == nil || t.Empty == false {
		return false
	}
	return t.Empty
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option) GetIpv4Address() []string {
	if t == nil || t.Ipv4Address == nil {
		return nil
	}
	return t.Ipv4Address
}

// GetNetbiosNodeType retrieves the value of the leaf NetbiosNodeType from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetbiosNodeType is set, it can
// safely use t.GetNetbiosNodeType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetbiosNodeType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option) GetNetbiosNodeType() E_NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option_NetbiosNodeType {
	if t == nil || t.NetbiosNodeType == 0 {
		return 0
	}
	return t.NetbiosNodeType
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option) GetNumber() NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option_Number_Union {
	if t == nil || t.Number == nil {
		return nil
	}
	return t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"number": t.Number,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Options_Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv4/pool/subnet YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet struct {
	AddressRange     map[NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange_Key]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange         `path:"address-range" module:"nokia-conf"`
	Drain            *bool                                                                                                                                                                                  `path:"drain" module:"nokia-conf"`
	ExcludeAddresses map[NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses_Key]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses `path:"exclude-addresses" module:"nokia-conf"`
	Ipv4Prefix       *string                                                                                                                                                                                `path:"ipv4-prefix" module:"nokia-conf"`
	MaximumDeclined  *uint32                                                                                                                                                                                `path:"maximum-declined" module:"nokia-conf"`
	MinimumFree      *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree                                                                                                     `path:"minimum-free" module:"nokia-conf"`
	Options          *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options                                                                                                         `path:"options" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange_Key represents the key for list AddressRange of element /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv4/pool/subnet.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses_Key represents the key for list ExcludeAddresses of element /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv4/pool/subnet.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// NewAddressRange creates a new entry in the AddressRange list of the
// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet) NewAddressRange(Start string, End string) (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AddressRange == nil {
		t.AddressRange = make(map[NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange_Key]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange)
	}

	key := NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AddressRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AddressRange", key)
	}

	t.AddressRange[key] = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange{
		Start: &Start,
		End:   &End,
	}

	return t.AddressRange[key], nil
}

// RenameAddressRange renames an entry in the list AddressRange within
// the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet) RenameAddressRange(oldK, newK NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange_Key) error {
	if _, ok := t.AddressRange[newK]; ok {
		return fmt.Errorf("key %v already exists in AddressRange", newK)
	}

	e, ok := t.AddressRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AddressRange", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.AddressRange[newK] = e
	delete(t.AddressRange, oldK)
	return nil
}

// GetOrCreateAddressRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet) GetOrCreateAddressRange(Start string, End string) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange {

	key := NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.AddressRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddressRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddressRange got unexpected error: %v", err))
	}
	return v
}

// GetAddressRange retrieves the value with the specified key from
// the AddressRange map field of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet) GetAddressRange(Start string, End string) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.AddressRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddressRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet) DeleteAddressRange(Start string, End string) {
	key := NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange_Key{
		Start: Start,
		End:   End,
	}

	delete(t.AddressRange, key)
}

// AppendAddressRange appends the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange struct to the
// list AddressRange of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet) AppendAddressRange(v *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AddressRange == nil {
		t.AddressRange = make(map[NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange_Key]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange)
	}

	if _, ok := t.AddressRange[key]; ok {
		return fmt.Errorf("duplicate key for list AddressRange %v", key)
	}

	t.AddressRange[key] = v
	return nil
}

// NewExcludeAddresses creates a new entry in the ExcludeAddresses list of the
// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet) NewExcludeAddresses(Start string, End string) (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExcludeAddresses == nil {
		t.ExcludeAddresses = make(map[NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses_Key]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses)
	}

	key := NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ExcludeAddresses[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ExcludeAddresses", key)
	}

	t.ExcludeAddresses[key] = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses{
		Start: &Start,
		End:   &End,
	}

	return t.ExcludeAddresses[key], nil
}

// RenameExcludeAddresses renames an entry in the list ExcludeAddresses within
// the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet) RenameExcludeAddresses(oldK, newK NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses_Key) error {
	if _, ok := t.ExcludeAddresses[newK]; ok {
		return fmt.Errorf("key %v already exists in ExcludeAddresses", newK)
	}

	e, ok := t.ExcludeAddresses[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ExcludeAddresses", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.ExcludeAddresses[newK] = e
	delete(t.ExcludeAddresses, oldK)
	return nil
}

// GetOrCreateExcludeAddresses retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet) GetOrCreateExcludeAddresses(Start string, End string) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses {

	key := NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.ExcludeAddresses[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExcludeAddresses(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExcludeAddresses got unexpected error: %v", err))
	}
	return v
}

// GetExcludeAddresses retrieves the value with the specified key from
// the ExcludeAddresses map field of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet) GetExcludeAddresses(Start string, End string) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.ExcludeAddresses[key]; ok {
		return lm
	}
	return nil
}

// DeleteExcludeAddresses deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet) DeleteExcludeAddresses(Start string, End string) {
	key := NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses_Key{
		Start: Start,
		End:   End,
	}

	delete(t.ExcludeAddresses, key)
}

// AppendExcludeAddresses appends the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses struct to the
// list ExcludeAddresses of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet) AppendExcludeAddresses(v *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExcludeAddresses == nil {
		t.ExcludeAddresses = make(map[NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses_Key]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses)
	}

	if _, ok := t.ExcludeAddresses[key]; ok {
		return fmt.Errorf("duplicate key for list ExcludeAddresses %v", key)
	}

	t.ExcludeAddresses[key] = v
	return nil
}

// GetOrCreateMinimumFree retrieves the value of the MinimumFree field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet) GetOrCreateMinimumFree() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree {
	if t.MinimumFree != nil {
		return t.MinimumFree
	}
	t.MinimumFree = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree{}
	return t.MinimumFree
}

// GetOrCreateOptions retrieves the value of the Options field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet) GetOrCreateOptions() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options {
	if t.Options != nil {
		return t.Options
	}
	t.Options = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options{}
	return t.Options
}

// GetMinimumFree returns the value of the MinimumFree struct pointer
// from NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet. If the receiver or the field MinimumFree is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet) GetMinimumFree() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree {
	if t != nil && t.MinimumFree != nil {
		return t.MinimumFree
	}
	return nil
}

// GetOptions returns the value of the Options struct pointer
// from NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet. If the receiver or the field Options is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet) GetOptions() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options {
	if t != nil && t.Options != nil {
		return t.Options
	}
	return nil
}

// GetDrain retrieves the value of the leaf Drain from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drain is set, it can
// safely use t.GetDrain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet) GetDrain() bool {
	if t == nil || t.Drain == nil {
		return false
	}
	return *t.Drain
}

// GetIpv4Prefix retrieves the value of the leaf Ipv4Prefix from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Prefix is set, it can
// safely use t.GetIpv4Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet) GetIpv4Prefix() string {
	if t == nil || t.Ipv4Prefix == nil {
		return ""
	}
	return *t.Ipv4Prefix
}

// GetMaximumDeclined retrieves the value of the leaf MaximumDeclined from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumDeclined is set, it can
// safely use t.GetMaximumDeclined() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumDeclined == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet) GetMaximumDeclined() uint32 {
	if t == nil || t.MaximumDeclined == nil {
		return 64
	}
	return *t.MaximumDeclined
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Drain == nil {
		var v bool = false
		t.Drain = &v
	}
	if t.MaximumDeclined == nil {
		var v uint32 = 64
		t.MaximumDeclined = &v
	}
	t.MinimumFree.PopulateDefaults()
	t.Options.PopulateDefaults()
	for _, e := range t.AddressRange {
		e.PopulateDefaults()
	}
	for _, e := range t.ExcludeAddresses {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Prefix")
	}

	return map[string]interface{}{
		"ipv4-prefix": *t.Ipv4Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv4/pool/subnet/address-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange struct {
	End                 *string                              `path:"end" module:"nokia-conf"`
	FailoverControlType E_NokiaTypesDhcp_FailoverControlType `path:"failover-control-type" module:"nokia-conf"`
	Start               *string                              `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetFailoverControlType retrieves the value of the leaf FailoverControlType from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FailoverControlType is set, it can
// safely use t.GetFailoverControlType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FailoverControlType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange) GetFailoverControlType() E_NokiaTypesDhcp_FailoverControlType {
	if t == nil || t.FailoverControlType == 0 {
		return NokiaTypesDhcp_FailoverControlType_local
	}
	return t.FailoverControlType
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FailoverControlType == 0 {
		t.FailoverControlType = NokiaTypesDhcp_FailoverControlType_local
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_AddressRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv4/pool/subnet/exclude-addresses YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses struct {
	End   *string `path:"end" module:"nokia-conf"`
	Start *string `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_ExcludeAddresses) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv4/pool/subnet/minimum-free YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree struct {
	Absolute          *uint32 `path:"absolute" module:"nokia-conf"`
	EventWhenDepleted *bool   `path:"event-when-depleted" module:"nokia-conf"`
	Percent           *uint32 `path:"percent" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree) IsYANGGoStruct() {
}

// GetAbsolute retrieves the value of the leaf Absolute from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Absolute is set, it can
// safely use t.GetAbsolute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Absolute == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree) GetAbsolute() uint32 {
	if t == nil || t.Absolute == nil {
		return 1
	}
	return *t.Absolute
}

// GetEventWhenDepleted retrieves the value of the leaf EventWhenDepleted from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventWhenDepleted is set, it can
// safely use t.GetEventWhenDepleted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventWhenDepleted == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree) GetEventWhenDepleted() bool {
	if t == nil || t.EventWhenDepleted == nil {
		return false
	}
	return *t.EventWhenDepleted
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree) GetPercent() uint32 {
	if t == nil || t.Percent == nil {
		return 1
	}
	return *t.Percent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Absolute == nil {
		var v uint32 = 1
		t.Absolute = &v
	}
	if t.EventWhenDepleted == nil {
		var v bool = false
		t.EventWhenDepleted = &v
	}
	if t.Percent == nil {
		var v uint32 = 1
		t.Percent = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_MinimumFree) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv4/pool/subnet/options YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options struct {
	Option map[NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option `path:"option" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options) IsYANGGoStruct() {
}

// NewOption creates a new entry in the Option list of the
// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options) NewOption(Number NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union) (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option)
	}

	key := Number

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Option[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Option", key)
	}

	t.Option[key] = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option{
		Number: Number,
	}

	return t.Option[key], nil
}

// RenameOption renames an entry in the list Option within
// the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options) RenameOption(oldK, newK NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union) error {
	if _, ok := t.Option[newK]; ok {
		return fmt.Errorf("key %v already exists in Option", newK)
	}

	e, ok := t.Option[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Option", oldK)
	}
	e.Number = newK

	t.Option[newK] = e
	delete(t.Option, oldK)
	return nil
}

// GetOrCreateOption retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options) GetOrCreateOption(Number NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option {

	key := Number

	if v, ok := t.Option[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOption(Number)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOption got unexpected error: %v", err))
	}
	return v
}

// GetOption retrieves the value with the specified key from
// the Option map field of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options) GetOption(Number NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option {

	if t == nil {
		return nil
	}

	key := Number

	if lm, ok := t.Option[key]; ok {
		return lm
	}
	return nil
}

// DeleteOption deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options) DeleteOption(Number NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union) {
	key := Number

	delete(t.Option, key)
}

// AppendOption appends the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option struct to the
// list Option of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options) AppendOption(v *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) error {
	key := v.Number

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option)
	}

	if _, ok := t.Option[key]; ok {
		return fmt.Errorf("duplicate key for list Option %v", key)
	}

	t.Option[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Option {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv4/pool/subnet/options/option YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option struct {
	AsciiString     *string                                                                                                `path:"ascii-string" module:"nokia-conf"`
	Duration        *uint32                                                                                                `path:"duration" module:"nokia-conf"`
	Empty           YANGEmpty                                                                                              `path:"empty" module:"nokia-conf"`
	HexString       *string                                                                                                `path:"hex-string" module:"nokia-conf"`
	Ipv4Address     []string                                                                                               `path:"ipv4-address" module:"nokia-conf"`
	NetbiosNodeType E_NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_NetbiosNodeType `path:"netbios-node-type" module:"nokia-conf"`
	Number          NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union      `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) IsYANGGoStruct() {
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetDuration retrieves the value of the leaf Duration from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Duration is set, it can
// safely use t.GetDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Duration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) GetDuration() uint32 {
	if t == nil || t.Duration == nil {
		return 0
	}
	return *t.Duration
}

// GetEmpty retrieves the value of the leaf Empty from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Empty is set, it can
// safely use t.GetEmpty() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Empty == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) GetEmpty() YANGEmpty {
	if t == nil || t.Empty == false {
		return false
	}
	return t.Empty
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) GetIpv4Address() []string {
	if t == nil || t.Ipv4Address == nil {
		return nil
	}
	return t.Ipv4Address
}

// GetNetbiosNodeType retrieves the value of the leaf NetbiosNodeType from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetbiosNodeType is set, it can
// safely use t.GetNetbiosNodeType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetbiosNodeType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) GetNetbiosNodeType() E_NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_NetbiosNodeType {
	if t == nil || t.NetbiosNodeType == 0 {
		return 0
	}
	return t.NetbiosNodeType
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) GetNumber() NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option_Number_Union {
	if t == nil || t.Number == nil {
		return nil
	}
	return t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"number": t.Number,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv4_Pool_Subnet_Options_Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6 represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6 struct {
	AdminState         E_NokiaTypesSros_AdminState                                                    `path:"admin-state" module:"nokia-conf"`
	AutoProvisioned    *bool                                                                          `path:"auto-provisioned" module:"nokia-conf"`
	Defaults           *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults            `path:"defaults" module:"nokia-conf" yangPresence:"true"`
	Description        *string                                                                        `path:"description" module:"nokia-conf"`
	Failover           *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover            `path:"failover" module:"nokia-conf" yangPresence:"true"`
	IgnoreRapidCommit  *bool                                                                          `path:"ignore-rapid-commit" module:"nokia-conf"`
	InterfaceIdMapping *bool                                                                          `path:"interface-id-mapping" module:"nokia-conf"`
	LeaseHold          *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold           `path:"lease-hold" module:"nokia-conf"`
	LeaseQuery         *bool                                                                          `path:"lease-query" module:"nokia-conf"`
	Name               *string                                                                        `path:"name" module:"nokia-conf"`
	Pool               map[string]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool     `path:"pool" module:"nokia-conf"`
	PoolSelection      *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection       `path:"pool-selection" module:"nokia-conf"`
	ServerId           *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId            `path:"server-id" module:"nokia-conf" yangPresence:"true"`
	UserIdentification E_NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_UserIdentification `path:"user-identification" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6) IsYANGGoStruct() {}

// NewPool creates a new entry in the Pool list of the
// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6) NewPool(PoolName string) (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool)
	}

	key := PoolName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Pool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Pool", key)
	}

	t.Pool[key] = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool{
		PoolName: &PoolName,
	}

	return t.Pool[key], nil
}

// RenamePool renames an entry in the list Pool within
// the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6) RenamePool(oldK, newK string) error {
	if _, ok := t.Pool[newK]; ok {
		return fmt.Errorf("key %v already exists in Pool", newK)
	}

	e, ok := t.Pool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Pool", oldK)
	}
	e.PoolName = &newK

	t.Pool[newK] = e
	delete(t.Pool, oldK)
	return nil
}

// GetOrCreatePool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6) GetOrCreatePool(PoolName string) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool {

	key := PoolName

	if v, ok := t.Pool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPool(PoolName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePool got unexpected error: %v", err))
	}
	return v
}

// GetPool retrieves the value with the specified key from
// the Pool map field of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6) GetPool(PoolName string) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool {

	if t == nil {
		return nil
	}

	key := PoolName

	if lm, ok := t.Pool[key]; ok {
		return lm
	}
	return nil
}

// DeletePool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6) DeletePool(PoolName string) {
	key := PoolName

	delete(t.Pool, key)
}

// AppendPool appends the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool struct to the
// list Pool of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6) AppendPool(v *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool) error {
	if v.PoolName == nil {
		return fmt.Errorf("invalid nil key received for PoolName")
	}

	key := *v.PoolName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool)
	}

	if _, ok := t.Pool[key]; ok {
		return fmt.Errorf("duplicate key for list Pool %v", key)
	}

	t.Pool[key] = v
	return nil
}

// GetOrCreateDefaults retrieves the value of the Defaults field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6) GetOrCreateDefaults() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults {
	if t.Defaults != nil {
		return t.Defaults
	}
	t.Defaults = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults{}
	return t.Defaults
}

// GetOrCreateFailover retrieves the value of the Failover field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6) GetOrCreateFailover() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover {
	if t.Failover != nil {
		return t.Failover
	}
	t.Failover = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover{}
	return t.Failover
}

// GetOrCreateLeaseHold retrieves the value of the LeaseHold field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6) GetOrCreateLeaseHold() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold {
	if t.LeaseHold != nil {
		return t.LeaseHold
	}
	t.LeaseHold = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold{}
	return t.LeaseHold
}

// GetOrCreatePoolSelection retrieves the value of the PoolSelection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6) GetOrCreatePoolSelection() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection {
	if t.PoolSelection != nil {
		return t.PoolSelection
	}
	t.PoolSelection = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection{}
	return t.PoolSelection
}

// GetOrCreateServerId retrieves the value of the ServerId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6) GetOrCreateServerId() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId {
	if t.ServerId != nil {
		return t.ServerId
	}
	t.ServerId = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId{}
	return t.ServerId
}

// GetDefaults returns the value of the Defaults struct pointer
// from NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6. If the receiver or the field Defaults is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6) GetDefaults() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults {
	if t != nil && t.Defaults != nil {
		return t.Defaults
	}
	return nil
}

// GetFailover returns the value of the Failover struct pointer
// from NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6. If the receiver or the field Failover is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6) GetFailover() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover {
	if t != nil && t.Failover != nil {
		return t.Failover
	}
	return nil
}

// GetLeaseHold returns the value of the LeaseHold struct pointer
// from NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6. If the receiver or the field LeaseHold is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6) GetLeaseHold() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold {
	if t != nil && t.LeaseHold != nil {
		return t.LeaseHold
	}
	return nil
}

// GetPoolSelection returns the value of the PoolSelection struct pointer
// from NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6. If the receiver or the field PoolSelection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6) GetPoolSelection() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection {
	if t != nil && t.PoolSelection != nil {
		return t.PoolSelection
	}
	return nil
}

// GetServerId returns the value of the ServerId struct pointer
// from NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6. If the receiver or the field ServerId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6) GetServerId() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId {
	if t != nil && t.ServerId != nil {
		return t.ServerId
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAutoProvisioned retrieves the value of the leaf AutoProvisioned from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoProvisioned is set, it can
// safely use t.GetAutoProvisioned() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoProvisioned == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6) GetAutoProvisioned() bool {
	if t == nil || t.AutoProvisioned == nil {
		return false
	}
	return *t.AutoProvisioned
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIgnoreRapidCommit retrieves the value of the leaf IgnoreRapidCommit from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreRapidCommit is set, it can
// safely use t.GetIgnoreRapidCommit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreRapidCommit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6) GetIgnoreRapidCommit() bool {
	if t == nil || t.IgnoreRapidCommit == nil {
		return false
	}
	return *t.IgnoreRapidCommit
}

// GetInterfaceIdMapping retrieves the value of the leaf InterfaceIdMapping from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceIdMapping is set, it can
// safely use t.GetInterfaceIdMapping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceIdMapping == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6) GetInterfaceIdMapping() bool {
	if t == nil || t.InterfaceIdMapping == nil {
		return false
	}
	return *t.InterfaceIdMapping
}

// GetLeaseQuery retrieves the value of the leaf LeaseQuery from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LeaseQuery is set, it can
// safely use t.GetLeaseQuery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LeaseQuery == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6) GetLeaseQuery() bool {
	if t == nil || t.LeaseQuery == nil {
		return false
	}
	return *t.LeaseQuery
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetUserIdentification retrieves the value of the leaf UserIdentification from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserIdentification is set, it can
// safely use t.GetUserIdentification() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserIdentification == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6) GetUserIdentification() E_NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_UserIdentification {
	if t == nil || t.UserIdentification == 0 {
		return 0
	}
	return t.UserIdentification
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AutoProvisioned == nil {
		var v bool = false
		t.AutoProvisioned = &v
	}
	if t.IgnoreRapidCommit == nil {
		var v bool = false
		t.IgnoreRapidCommit = &v
	}
	if t.InterfaceIdMapping == nil {
		var v bool = false
		t.InterfaceIdMapping = &v
	}
	if t.LeaseQuery == nil {
		var v bool = false
		t.LeaseQuery = &v
	}
	t.Defaults.PopulateDefaults()
	t.Failover.PopulateDefaults()
	t.LeaseHold.PopulateDefaults()
	t.PoolSelection.PopulateDefaults()
	t.ServerId.PopulateDefaults()
	for _, e := range t.Pool {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv6/defaults YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults struct {
	Options           *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options `path:"options" module:"nokia-conf"`
	PreferredLifetime *uint32                                                                     `path:"preferred-lifetime" module:"nokia-conf"`
	RebindTime        *uint32                                                                     `path:"rebind-time" module:"nokia-conf"`
	RenewTime         *uint32                                                                     `path:"renew-time" module:"nokia-conf"`
	ValidLifetime     *uint32                                                                     `path:"valid-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults) IsYANGGoStruct() {}

// GetOrCreateOptions retrieves the value of the Options field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults) GetOrCreateOptions() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options {
	if t.Options != nil {
		return t.Options
	}
	t.Options = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options{}
	return t.Options
}

// GetOptions returns the value of the Options struct pointer
// from NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults. If the receiver or the field Options is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults) GetOptions() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options {
	if t != nil && t.Options != nil {
		return t.Options
	}
	return nil
}

// GetPreferredLifetime retrieves the value of the leaf PreferredLifetime from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferredLifetime is set, it can
// safely use t.GetPreferredLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferredLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults) GetPreferredLifetime() uint32 {
	if t == nil || t.PreferredLifetime == nil {
		return 3600
	}
	return *t.PreferredLifetime
}

// GetRebindTime retrieves the value of the leaf RebindTime from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RebindTime is set, it can
// safely use t.GetRebindTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RebindTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults) GetRebindTime() uint32 {
	if t == nil || t.RebindTime == nil {
		return 2880
	}
	return *t.RebindTime
}

// GetRenewTime retrieves the value of the leaf RenewTime from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RenewTime is set, it can
// safely use t.GetRenewTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RenewTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults) GetRenewTime() uint32 {
	if t == nil || t.RenewTime == nil {
		return 1800
	}
	return *t.RenewTime
}

// GetValidLifetime retrieves the value of the leaf ValidLifetime from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidLifetime is set, it can
// safely use t.GetValidLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults) GetValidLifetime() uint32 {
	if t == nil || t.ValidLifetime == nil {
		return 86400
	}
	return *t.ValidLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PreferredLifetime == nil {
		var v uint32 = 3600
		t.PreferredLifetime = &v
	}
	if t.RebindTime == nil {
		var v uint32 = 2880
		t.RebindTime = &v
	}
	if t.RenewTime == nil {
		var v uint32 = 1800
		t.RenewTime = &v
	}
	if t.ValidLifetime == nil {
		var v uint32 = 86400
		t.ValidLifetime = &v
	}
	t.Options.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv6/defaults/options YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options struct {
	Option map[NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option `path:"option" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options) IsYANGGoStruct() {}

// NewOption creates a new entry in the Option list of the
// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options) NewOption(Number NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union) (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option)
	}

	key := Number

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Option[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Option", key)
	}

	t.Option[key] = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option{
		Number: Number,
	}

	return t.Option[key], nil
}

// RenameOption renames an entry in the list Option within
// the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options) RenameOption(oldK, newK NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union) error {
	if _, ok := t.Option[newK]; ok {
		return fmt.Errorf("key %v already exists in Option", newK)
	}

	e, ok := t.Option[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Option", oldK)
	}
	e.Number = newK

	t.Option[newK] = e
	delete(t.Option, oldK)
	return nil
}

// GetOrCreateOption retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options) GetOrCreateOption(Number NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option {

	key := Number

	if v, ok := t.Option[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOption(Number)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOption got unexpected error: %v", err))
	}
	return v
}

// GetOption retrieves the value with the specified key from
// the Option map field of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options) GetOption(Number NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option {

	if t == nil {
		return nil
	}

	key := Number

	if lm, ok := t.Option[key]; ok {
		return lm
	}
	return nil
}

// DeleteOption deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options) DeleteOption(Number NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union) {
	key := Number

	delete(t.Option, key)
}

// AppendOption appends the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option struct to the
// list Option of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options) AppendOption(v *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option) error {
	key := v.Number

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option)
	}

	if _, ok := t.Option[key]; ok {
		return fmt.Errorf("duplicate key for list Option %v", key)
	}

	t.Option[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Option {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv6/defaults/options/option YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option struct {
	AsciiString  *string                                                                                        `path:"ascii-string" module:"nokia-conf"`
	DomainString *string                                                                                        `path:"domain-string" module:"nokia-conf"`
	Duration     *uint32                                                                                        `path:"duration" module:"nokia-conf"`
	Empty        YANGEmpty                                                                                      `path:"empty" module:"nokia-conf"`
	HexString    *string                                                                                        `path:"hex-string" module:"nokia-conf"`
	Ipv6Address  []string                                                                                       `path:"ipv6-address" module:"nokia-conf"`
	Number       NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option) IsYANGGoStruct() {
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetDomainString retrieves the value of the leaf DomainString from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainString is set, it can
// safely use t.GetDomainString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option) GetDomainString() string {
	if t == nil || t.DomainString == nil {
		return ""
	}
	return *t.DomainString
}

// GetDuration retrieves the value of the leaf Duration from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Duration is set, it can
// safely use t.GetDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Duration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option) GetDuration() uint32 {
	if t == nil || t.Duration == nil {
		return 0
	}
	return *t.Duration
}

// GetEmpty retrieves the value of the leaf Empty from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Empty is set, it can
// safely use t.GetEmpty() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Empty == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option) GetEmpty() YANGEmpty {
	if t == nil || t.Empty == false {
		return false
	}
	return t.Empty
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option) GetIpv6Address() []string {
	if t == nil || t.Ipv6Address == nil {
		return nil
	}
	return t.Ipv6Address
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option) GetNumber() NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option_Number_Union {
	if t == nil || t.Number == nil {
		return nil
	}
	return t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"number": t.Number,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Defaults_Options_Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv6/failover YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover struct {
	AdminState            E_NokiaTypesSros_AdminState                                                         `path:"admin-state" module:"nokia-conf"`
	IgnoreMcltOnTakeover  *bool                                                                               `path:"ignore-mclt-on-takeover" module:"nokia-conf"`
	MaximumClientLeadTime *uint32                                                                             `path:"maximum-client-lead-time" module:"nokia-conf"`
	PartnerDownDelay      *uint32                                                                             `path:"partner-down-delay" module:"nokia-conf"`
	Peer                  map[string]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover_Peer `path:"peer" module:"nokia-conf"`
	StartupWaitTime       *uint32                                                                             `path:"startup-wait-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover) IsYANGGoStruct() {}

// NewPeer creates a new entry in the Peer list of the
// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover) NewPeer(Address string) (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover_Peer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover_Peer)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover_Peer{
		Address: &Address,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover) RenamePeer(oldK, newK string) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.Address = &newK

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover) GetOrCreatePeer(Address string) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover_Peer {

	key := Address

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover) GetPeer(Address string) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover_Peer {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover) DeletePeer(Address string) {
	key := Address

	delete(t.Peer, key)
}

// AppendPeer appends the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover_Peer struct to the
// list Peer of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover_Peer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover) AppendPeer(v *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover_Peer) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetIgnoreMcltOnTakeover retrieves the value of the leaf IgnoreMcltOnTakeover from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreMcltOnTakeover is set, it can
// safely use t.GetIgnoreMcltOnTakeover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreMcltOnTakeover == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover) GetIgnoreMcltOnTakeover() bool {
	if t == nil || t.IgnoreMcltOnTakeover == nil {
		return false
	}
	return *t.IgnoreMcltOnTakeover
}

// GetMaximumClientLeadTime retrieves the value of the leaf MaximumClientLeadTime from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumClientLeadTime is set, it can
// safely use t.GetMaximumClientLeadTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumClientLeadTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover) GetMaximumClientLeadTime() uint32 {
	if t == nil || t.MaximumClientLeadTime == nil {
		return 600
	}
	return *t.MaximumClientLeadTime
}

// GetPartnerDownDelay retrieves the value of the leaf PartnerDownDelay from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PartnerDownDelay is set, it can
// safely use t.GetPartnerDownDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PartnerDownDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover) GetPartnerDownDelay() uint32 {
	if t == nil || t.PartnerDownDelay == nil {
		return 86399
	}
	return *t.PartnerDownDelay
}

// GetStartupWaitTime retrieves the value of the leaf StartupWaitTime from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartupWaitTime is set, it can
// safely use t.GetStartupWaitTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartupWaitTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover) GetStartupWaitTime() uint32 {
	if t == nil || t.StartupWaitTime == nil {
		return 120
	}
	return *t.StartupWaitTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.IgnoreMcltOnTakeover == nil {
		var v bool = false
		t.IgnoreMcltOnTakeover = &v
	}
	if t.MaximumClientLeadTime == nil {
		var v uint32 = 600
		t.MaximumClientLeadTime = &v
	}
	if t.PartnerDownDelay == nil {
		var v uint32 = 86399
		t.PartnerDownDelay = &v
	}
	if t.StartupWaitTime == nil {
		var v uint32 = 120
		t.StartupWaitTime = &v
	}
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover_Peer represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv6/failover/peer YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover_Peer struct {
	Address *string `path:"address" module:"nokia-conf"`
	SyncTag *string `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover_Peer) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover_Peer) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover_Peer) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover_Peer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover_Peer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover_Peer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover_Peer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover_Peer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover_Peer.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Failover_Peer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv6/lease-hold YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold struct {
	AdditionalScenarios *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios `path:"additional-scenarios" module:"nokia-conf"`
	Time                *uint32                                                                                  `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold) IsYANGGoStruct() {}

// GetOrCreateAdditionalScenarios retrieves the value of the AdditionalScenarios field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold) GetOrCreateAdditionalScenarios() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios {
	if t.AdditionalScenarios != nil {
		return t.AdditionalScenarios
	}
	t.AdditionalScenarios = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios{}
	return t.AdditionalScenarios
}

// GetAdditionalScenarios returns the value of the AdditionalScenarios struct pointer
// from NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold. If the receiver or the field AdditionalScenarios is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold) GetAdditionalScenarios() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios {
	if t != nil && t.AdditionalScenarios != nil {
		return t.AdditionalScenarios
	}
	return nil
}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold) GetTime() uint32 {
	if t == nil || t.Time == nil {
		return 0
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AdditionalScenarios.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv6/lease-hold/additional-scenarios YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios struct {
	InternalLeaseIpsec *bool `path:"internal-lease-ipsec" module:"nokia-conf"`
	SolicitedRelease   *bool `path:"solicited-release" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios) IsYANGGoStruct() {
}

// GetInternalLeaseIpsec retrieves the value of the leaf InternalLeaseIpsec from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InternalLeaseIpsec is set, it can
// safely use t.GetInternalLeaseIpsec() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InternalLeaseIpsec == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios) GetInternalLeaseIpsec() bool {
	if t == nil || t.InternalLeaseIpsec == nil {
		return false
	}
	return *t.InternalLeaseIpsec
}

// GetSolicitedRelease retrieves the value of the leaf SolicitedRelease from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SolicitedRelease is set, it can
// safely use t.GetSolicitedRelease() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SolicitedRelease == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios) GetSolicitedRelease() bool {
	if t == nil || t.SolicitedRelease == nil {
		return false
	}
	return *t.SolicitedRelease
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InternalLeaseIpsec == nil {
		var v bool = false
		t.InternalLeaseIpsec = &v
	}
	if t.SolicitedRelease == nil {
		var v bool = false
		t.SolicitedRelease = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_LeaseHold_AdditionalScenarios) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv6/pool YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool struct {
	DelegatedPrefix       *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix                                                                                                                   `path:"delegated-prefix" module:"nokia-conf"`
	Description           *string                                                                                                                                                                                           `path:"description" module:"nokia-conf"`
	ExcludePrefix         map[string]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix                                                                                                          `path:"exclude-prefix" module:"nokia-conf"`
	Failover              *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover                                                                                                                          `path:"failover" module:"nokia-conf" yangPresence:"true"`
	Options               *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options                                                                                                                           `path:"options" module:"nokia-conf"`
	PoolName              *string                                                                                                                                                                                           `path:"pool-name" module:"nokia-conf"`
	Prefix                map[string]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix                                                                                                                 `path:"prefix" module:"nokia-conf"`
	PrefixLengthThreshold map[NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold_PrefixLength_Union]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold `path:"prefix-length-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool) IsYANGGoStruct() {}

// NewExcludePrefix creates a new entry in the ExcludePrefix list of the
// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool) NewExcludePrefix(Ipv6Prefix string) (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExcludePrefix == nil {
		t.ExcludePrefix = make(map[string]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix)
	}

	key := Ipv6Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ExcludePrefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ExcludePrefix", key)
	}

	t.ExcludePrefix[key] = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix{
		Ipv6Prefix: &Ipv6Prefix,
	}

	return t.ExcludePrefix[key], nil
}

// RenameExcludePrefix renames an entry in the list ExcludePrefix within
// the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool) RenameExcludePrefix(oldK, newK string) error {
	if _, ok := t.ExcludePrefix[newK]; ok {
		return fmt.Errorf("key %v already exists in ExcludePrefix", newK)
	}

	e, ok := t.ExcludePrefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ExcludePrefix", oldK)
	}
	e.Ipv6Prefix = &newK

	t.ExcludePrefix[newK] = e
	delete(t.ExcludePrefix, oldK)
	return nil
}

// GetOrCreateExcludePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool) GetOrCreateExcludePrefix(Ipv6Prefix string) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix {

	key := Ipv6Prefix

	if v, ok := t.ExcludePrefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExcludePrefix(Ipv6Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExcludePrefix got unexpected error: %v", err))
	}
	return v
}

// GetExcludePrefix retrieves the value with the specified key from
// the ExcludePrefix map field of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool) GetExcludePrefix(Ipv6Prefix string) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix {

	if t == nil {
		return nil
	}

	key := Ipv6Prefix

	if lm, ok := t.ExcludePrefix[key]; ok {
		return lm
	}
	return nil
}

// DeleteExcludePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool) DeleteExcludePrefix(Ipv6Prefix string) {
	key := Ipv6Prefix

	delete(t.ExcludePrefix, key)
}

// AppendExcludePrefix appends the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix struct to the
// list ExcludePrefix of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool) AppendExcludePrefix(v *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix) error {
	if v.Ipv6Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Prefix")
	}

	key := *v.Ipv6Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExcludePrefix == nil {
		t.ExcludePrefix = make(map[string]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix)
	}

	if _, ok := t.ExcludePrefix[key]; ok {
		return fmt.Errorf("duplicate key for list ExcludePrefix %v", key)
	}

	t.ExcludePrefix[key] = v
	return nil
}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool) NewPrefix(Ipv6Prefix string) (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix)
	}

	key := Ipv6Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix{
		Ipv6Prefix: &Ipv6Prefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.Ipv6Prefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool) GetOrCreatePrefix(Ipv6Prefix string) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix {

	key := Ipv6Prefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(Ipv6Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool) GetPrefix(Ipv6Prefix string) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix {

	if t == nil {
		return nil
	}

	key := Ipv6Prefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool) DeletePrefix(Ipv6Prefix string) {
	key := Ipv6Prefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix struct to the
// list Prefix of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool) AppendPrefix(v *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix) error {
	if v.Ipv6Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Prefix")
	}

	key := *v.Ipv6Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// NewPrefixLengthThreshold creates a new entry in the PrefixLengthThreshold list of the
// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool) NewPrefixLengthThreshold(PrefixLength NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold_PrefixLength_Union) (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixLengthThreshold == nil {
		t.PrefixLengthThreshold = make(map[NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold_PrefixLength_Union]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold)
	}

	key := PrefixLength

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrefixLengthThreshold[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrefixLengthThreshold", key)
	}

	t.PrefixLengthThreshold[key] = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold{
		PrefixLength: PrefixLength,
	}

	return t.PrefixLengthThreshold[key], nil
}

// RenamePrefixLengthThreshold renames an entry in the list PrefixLengthThreshold within
// the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool) RenamePrefixLengthThreshold(oldK, newK NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold_PrefixLength_Union) error {
	if _, ok := t.PrefixLengthThreshold[newK]; ok {
		return fmt.Errorf("key %v already exists in PrefixLengthThreshold", newK)
	}

	e, ok := t.PrefixLengthThreshold[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrefixLengthThreshold", oldK)
	}
	e.PrefixLength = newK

	t.PrefixLengthThreshold[newK] = e
	delete(t.PrefixLengthThreshold, oldK)
	return nil
}

// GetOrCreatePrefixLengthThreshold retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool) GetOrCreatePrefixLengthThreshold(PrefixLength NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold_PrefixLength_Union) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold {

	key := PrefixLength

	if v, ok := t.PrefixLengthThreshold[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefixLengthThreshold(PrefixLength)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefixLengthThreshold got unexpected error: %v", err))
	}
	return v
}

// GetPrefixLengthThreshold retrieves the value with the specified key from
// the PrefixLengthThreshold map field of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool) GetPrefixLengthThreshold(PrefixLength NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold_PrefixLength_Union) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold {

	if t == nil {
		return nil
	}

	key := PrefixLength

	if lm, ok := t.PrefixLengthThreshold[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefixLengthThreshold deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool) DeletePrefixLengthThreshold(PrefixLength NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold_PrefixLength_Union) {
	key := PrefixLength

	delete(t.PrefixLengthThreshold, key)
}

// AppendPrefixLengthThreshold appends the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold struct to the
// list PrefixLengthThreshold of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool) AppendPrefixLengthThreshold(v *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) error {
	key := v.PrefixLength

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixLengthThreshold == nil {
		t.PrefixLengthThreshold = make(map[NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold_PrefixLength_Union]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold)
	}

	if _, ok := t.PrefixLengthThreshold[key]; ok {
		return fmt.Errorf("duplicate key for list PrefixLengthThreshold %v", key)
	}

	t.PrefixLengthThreshold[key] = v
	return nil
}

// GetOrCreateDelegatedPrefix retrieves the value of the DelegatedPrefix field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool) GetOrCreateDelegatedPrefix() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix {
	if t.DelegatedPrefix != nil {
		return t.DelegatedPrefix
	}
	t.DelegatedPrefix = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix{}
	return t.DelegatedPrefix
}

// GetOrCreateFailover retrieves the value of the Failover field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool) GetOrCreateFailover() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover {
	if t.Failover != nil {
		return t.Failover
	}
	t.Failover = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover{}
	return t.Failover
}

// GetOrCreateOptions retrieves the value of the Options field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool) GetOrCreateOptions() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options {
	if t.Options != nil {
		return t.Options
	}
	t.Options = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options{}
	return t.Options
}

// GetDelegatedPrefix returns the value of the DelegatedPrefix struct pointer
// from NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool. If the receiver or the field DelegatedPrefix is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool) GetDelegatedPrefix() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix {
	if t != nil && t.DelegatedPrefix != nil {
		return t.DelegatedPrefix
	}
	return nil
}

// GetFailover returns the value of the Failover struct pointer
// from NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool. If the receiver or the field Failover is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool) GetFailover() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover {
	if t != nil && t.Failover != nil {
		return t.Failover
	}
	return nil
}

// GetOptions returns the value of the Options struct pointer
// from NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool. If the receiver or the field Options is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool) GetOptions() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options {
	if t != nil && t.Options != nil {
		return t.Options
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPoolName retrieves the value of the leaf PoolName from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PoolName is set, it can
// safely use t.GetPoolName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PoolName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool) GetPoolName() string {
	if t == nil || t.PoolName == nil {
		return ""
	}
	return *t.PoolName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DelegatedPrefix.PopulateDefaults()
	t.Failover.PopulateDefaults()
	t.Options.PopulateDefaults()
	for _, e := range t.ExcludePrefix {
		e.PopulateDefaults()
	}
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
	for _, e := range t.PrefixLengthThreshold {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PoolName == nil {
		return nil, fmt.Errorf("nil value for key PoolName")
	}

	return map[string]interface{}{
		"pool-name": *t.PoolName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv6/pool-selection YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection struct {
	UseLinkAddress    *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress    `path:"use-link-address" module:"nokia-conf" yangPresence:"true"`
	UsePoolFromClient *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient `path:"use-pool-from-client" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection) IsYANGGoStruct() {}

// GetOrCreateUseLinkAddress retrieves the value of the UseLinkAddress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection) GetOrCreateUseLinkAddress() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress {
	if t.UseLinkAddress != nil {
		return t.UseLinkAddress
	}
	t.UseLinkAddress = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress{}
	return t.UseLinkAddress
}

// GetOrCreateUsePoolFromClient retrieves the value of the UsePoolFromClient field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection) GetOrCreateUsePoolFromClient() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient {
	if t.UsePoolFromClient != nil {
		return t.UsePoolFromClient
	}
	t.UsePoolFromClient = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient{}
	return t.UsePoolFromClient
}

// GetUseLinkAddress returns the value of the UseLinkAddress struct pointer
// from NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection. If the receiver or the field UseLinkAddress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection) GetUseLinkAddress() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress {
	if t != nil && t.UseLinkAddress != nil {
		return t.UseLinkAddress
	}
	return nil
}

// GetUsePoolFromClient returns the value of the UsePoolFromClient struct pointer
// from NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection. If the receiver or the field UsePoolFromClient is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection) GetUsePoolFromClient() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient {
	if t != nil && t.UsePoolFromClient != nil {
		return t.UsePoolFromClient
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.UseLinkAddress.PopulateDefaults()
	t.UsePoolFromClient.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv6/pool-selection/use-link-address YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress struct {
	Scope E_NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress_Scope `path:"scope" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress) IsYANGGoStruct() {
}

// GetScope retrieves the value of the leaf Scope from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scope is set, it can
// safely use t.GetScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scope == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress) GetScope() E_NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress_Scope {
	if t == nil || t.Scope == 0 {
		return NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress_Scope_subnet
	}
	return t.Scope
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Scope == 0 {
		t.Scope = NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress_Scope_subnet
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UseLinkAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv6/pool-selection/use-pool-from-client YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient struct {
	Delimiter *string `path:"delimiter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient) IsYANGGoStruct() {
}

// GetDelimiter retrieves the value of the leaf Delimiter from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Delimiter is set, it can
// safely use t.GetDelimiter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Delimiter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient) GetDelimiter() string {
	if t == nil || t.Delimiter == nil {
		return ""
	}
	return *t.Delimiter
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_PoolSelection_UsePoolFromClient) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv6/pool/delegated-prefix YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix struct {
	Length  *uint32 `path:"length" module:"nokia-conf"`
	Maximum *uint32 `path:"maximum" module:"nokia-conf"`
	Minimum *uint32 `path:"minimum" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix) IsYANGGoStruct() {
}

// GetLength retrieves the value of the leaf Length from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Length is set, it can
// safely use t.GetLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Length == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix) GetLength() uint32 {
	if t == nil || t.Length == nil {
		return 64
	}
	return *t.Length
}

// GetMaximum retrieves the value of the leaf Maximum from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Maximum is set, it can
// safely use t.GetMaximum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Maximum == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix) GetMaximum() uint32 {
	if t == nil || t.Maximum == nil {
		return 64
	}
	return *t.Maximum
}

// GetMinimum retrieves the value of the leaf Minimum from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Minimum is set, it can
// safely use t.GetMinimum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Minimum == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix) GetMinimum() uint32 {
	if t == nil || t.Minimum == nil {
		return 48
	}
	return *t.Minimum
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Length == nil {
		var v uint32 = 64
		t.Length = &v
	}
	if t.Maximum == nil {
		var v uint32 = 64
		t.Maximum = &v
	}
	if t.Minimum == nil {
		var v uint32 = 48
		t.Minimum = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_DelegatedPrefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv6/pool/exclude-prefix YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix struct {
	Ipv6Prefix *string `path:"ipv6-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix) IsYANGGoStruct() {
}

// GetIpv6Prefix retrieves the value of the leaf Ipv6Prefix from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Prefix is set, it can
// safely use t.GetIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix) GetIpv6Prefix() string {
	if t == nil || t.Ipv6Prefix == nil {
		return ""
	}
	return *t.Ipv6Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Prefix")
	}

	return map[string]interface{}{
		"ipv6-prefix": *t.Ipv6Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_ExcludePrefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv6/pool/failover YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover struct {
	AdminState            E_NokiaTypesSros_AdminState                                                              `path:"admin-state" module:"nokia-conf"`
	IgnoreMcltOnTakeover  *bool                                                                                    `path:"ignore-mclt-on-takeover" module:"nokia-conf"`
	MaximumClientLeadTime *uint32                                                                                  `path:"maximum-client-lead-time" module:"nokia-conf"`
	PartnerDownDelay      *uint32                                                                                  `path:"partner-down-delay" module:"nokia-conf"`
	Peer                  map[string]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer `path:"peer" module:"nokia-conf"`
	StartupWaitTime       *uint32                                                                                  `path:"startup-wait-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover) IsYANGGoStruct() {}

// NewPeer creates a new entry in the Peer list of the
// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover) NewPeer(Address string) (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer{
		Address: &Address,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover) RenamePeer(oldK, newK string) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.Address = &newK

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover) GetOrCreatePeer(Address string) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer {

	key := Address

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover) GetPeer(Address string) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover) DeletePeer(Address string) {
	key := Address

	delete(t.Peer, key)
}

// AppendPeer appends the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer struct to the
// list Peer of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover) AppendPeer(v *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetIgnoreMcltOnTakeover retrieves the value of the leaf IgnoreMcltOnTakeover from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreMcltOnTakeover is set, it can
// safely use t.GetIgnoreMcltOnTakeover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreMcltOnTakeover == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover) GetIgnoreMcltOnTakeover() bool {
	if t == nil || t.IgnoreMcltOnTakeover == nil {
		return false
	}
	return *t.IgnoreMcltOnTakeover
}

// GetMaximumClientLeadTime retrieves the value of the leaf MaximumClientLeadTime from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumClientLeadTime is set, it can
// safely use t.GetMaximumClientLeadTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumClientLeadTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover) GetMaximumClientLeadTime() uint32 {
	if t == nil || t.MaximumClientLeadTime == nil {
		return 600
	}
	return *t.MaximumClientLeadTime
}

// GetPartnerDownDelay retrieves the value of the leaf PartnerDownDelay from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PartnerDownDelay is set, it can
// safely use t.GetPartnerDownDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PartnerDownDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover) GetPartnerDownDelay() uint32 {
	if t == nil || t.PartnerDownDelay == nil {
		return 86399
	}
	return *t.PartnerDownDelay
}

// GetStartupWaitTime retrieves the value of the leaf StartupWaitTime from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartupWaitTime is set, it can
// safely use t.GetStartupWaitTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartupWaitTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover) GetStartupWaitTime() uint32 {
	if t == nil || t.StartupWaitTime == nil {
		return 120
	}
	return *t.StartupWaitTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.IgnoreMcltOnTakeover == nil {
		var v bool = false
		t.IgnoreMcltOnTakeover = &v
	}
	if t.MaximumClientLeadTime == nil {
		var v uint32 = 600
		t.MaximumClientLeadTime = &v
	}
	if t.PartnerDownDelay == nil {
		var v uint32 = 86399
		t.PartnerDownDelay = &v
	}
	if t.StartupWaitTime == nil {
		var v uint32 = 120
		t.StartupWaitTime = &v
	}
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv6/pool/failover/peer YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer struct {
	Address *string `path:"address" module:"nokia-conf"`
	SyncTag *string `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Failover_Peer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv6/pool/options YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options struct {
	Option map[NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option `path:"option" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options) IsYANGGoStruct() {}

// NewOption creates a new entry in the Option list of the
// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options) NewOption(Number NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union) (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option)
	}

	key := Number

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Option[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Option", key)
	}

	t.Option[key] = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option{
		Number: Number,
	}

	return t.Option[key], nil
}

// RenameOption renames an entry in the list Option within
// the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options) RenameOption(oldK, newK NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union) error {
	if _, ok := t.Option[newK]; ok {
		return fmt.Errorf("key %v already exists in Option", newK)
	}

	e, ok := t.Option[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Option", oldK)
	}
	e.Number = newK

	t.Option[newK] = e
	delete(t.Option, oldK)
	return nil
}

// GetOrCreateOption retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options) GetOrCreateOption(Number NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option {

	key := Number

	if v, ok := t.Option[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOption(Number)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOption got unexpected error: %v", err))
	}
	return v
}

// GetOption retrieves the value with the specified key from
// the Option map field of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options) GetOption(Number NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option {

	if t == nil {
		return nil
	}

	key := Number

	if lm, ok := t.Option[key]; ok {
		return lm
	}
	return nil
}

// DeleteOption deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options) DeleteOption(Number NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union) {
	key := Number

	delete(t.Option, key)
}

// AppendOption appends the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option struct to the
// list Option of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options) AppendOption(v *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option) error {
	key := v.Number

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option)
	}

	if _, ok := t.Option[key]; ok {
		return fmt.Errorf("duplicate key for list Option %v", key)
	}

	t.Option[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Option {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv6/pool/options/option YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option struct {
	AsciiString  *string                                                                                    `path:"ascii-string" module:"nokia-conf"`
	DomainString *string                                                                                    `path:"domain-string" module:"nokia-conf"`
	Duration     *uint32                                                                                    `path:"duration" module:"nokia-conf"`
	Empty        YANGEmpty                                                                                  `path:"empty" module:"nokia-conf"`
	HexString    *string                                                                                    `path:"hex-string" module:"nokia-conf"`
	Ipv6Address  []string                                                                                   `path:"ipv6-address" module:"nokia-conf"`
	Number       NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option) IsYANGGoStruct() {
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetDomainString retrieves the value of the leaf DomainString from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainString is set, it can
// safely use t.GetDomainString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option) GetDomainString() string {
	if t == nil || t.DomainString == nil {
		return ""
	}
	return *t.DomainString
}

// GetDuration retrieves the value of the leaf Duration from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Duration is set, it can
// safely use t.GetDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Duration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option) GetDuration() uint32 {
	if t == nil || t.Duration == nil {
		return 0
	}
	return *t.Duration
}

// GetEmpty retrieves the value of the leaf Empty from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Empty is set, it can
// safely use t.GetEmpty() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Empty == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option) GetEmpty() YANGEmpty {
	if t == nil || t.Empty == false {
		return false
	}
	return t.Empty
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option) GetIpv6Address() []string {
	if t == nil || t.Ipv6Address == nil {
		return nil
	}
	return t.Ipv6Address
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option) GetNumber() NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option_Number_Union {
	if t == nil || t.Number == nil {
		return nil
	}
	return t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"number": t.Number,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Options_Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv6/pool/prefix YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix struct {
	Drain                 *bool                                                                                                                                                                                                           `path:"drain" module:"nokia-conf"`
	FailoverControlType   E_NokiaTypesDhcp_FailoverControlType                                                                                                                                                                            `path:"failover-control-type" module:"nokia-conf"`
	Ipv6Prefix            *string                                                                                                                                                                                                         `path:"ipv6-prefix" module:"nokia-conf"`
	Options               *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options                                                                                                                                  `path:"options" module:"nokia-conf"`
	PreferredLifetime     *uint32                                                                                                                                                                                                         `path:"preferred-lifetime" module:"nokia-conf"`
	PrefixLengthThreshold map[NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold_PrefixLength_Union]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold `path:"prefix-length-threshold" module:"nokia-conf"`
	PrefixType            *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType                                                                                                                               `path:"prefix-type" module:"nokia-conf"`
	RebindTime            *uint32                                                                                                                                                                                                         `path:"rebind-time" module:"nokia-conf"`
	RenewTime             *uint32                                                                                                                                                                                                         `path:"renew-time" module:"nokia-conf"`
	ValidLifetime         *uint32                                                                                                                                                                                                         `path:"valid-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix) IsYANGGoStruct() {}

// NewPrefixLengthThreshold creates a new entry in the PrefixLengthThreshold list of the
// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix) NewPrefixLengthThreshold(PrefixLength NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold_PrefixLength_Union) (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixLengthThreshold == nil {
		t.PrefixLengthThreshold = make(map[NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold_PrefixLength_Union]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold)
	}

	key := PrefixLength

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrefixLengthThreshold[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrefixLengthThreshold", key)
	}

	t.PrefixLengthThreshold[key] = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold{
		PrefixLength: PrefixLength,
	}

	return t.PrefixLengthThreshold[key], nil
}

// RenamePrefixLengthThreshold renames an entry in the list PrefixLengthThreshold within
// the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix) RenamePrefixLengthThreshold(oldK, newK NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold_PrefixLength_Union) error {
	if _, ok := t.PrefixLengthThreshold[newK]; ok {
		return fmt.Errorf("key %v already exists in PrefixLengthThreshold", newK)
	}

	e, ok := t.PrefixLengthThreshold[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrefixLengthThreshold", oldK)
	}
	e.PrefixLength = newK

	t.PrefixLengthThreshold[newK] = e
	delete(t.PrefixLengthThreshold, oldK)
	return nil
}

// GetOrCreatePrefixLengthThreshold retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix) GetOrCreatePrefixLengthThreshold(PrefixLength NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold_PrefixLength_Union) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold {

	key := PrefixLength

	if v, ok := t.PrefixLengthThreshold[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefixLengthThreshold(PrefixLength)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefixLengthThreshold got unexpected error: %v", err))
	}
	return v
}

// GetPrefixLengthThreshold retrieves the value with the specified key from
// the PrefixLengthThreshold map field of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix) GetPrefixLengthThreshold(PrefixLength NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold_PrefixLength_Union) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold {

	if t == nil {
		return nil
	}

	key := PrefixLength

	if lm, ok := t.PrefixLengthThreshold[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefixLengthThreshold deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix) DeletePrefixLengthThreshold(PrefixLength NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold_PrefixLength_Union) {
	key := PrefixLength

	delete(t.PrefixLengthThreshold, key)
}

// AppendPrefixLengthThreshold appends the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold struct to the
// list PrefixLengthThreshold of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix) AppendPrefixLengthThreshold(v *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) error {
	key := v.PrefixLength

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixLengthThreshold == nil {
		t.PrefixLengthThreshold = make(map[NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold_PrefixLength_Union]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold)
	}

	if _, ok := t.PrefixLengthThreshold[key]; ok {
		return fmt.Errorf("duplicate key for list PrefixLengthThreshold %v", key)
	}

	t.PrefixLengthThreshold[key] = v
	return nil
}

// GetOrCreateOptions retrieves the value of the Options field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix) GetOrCreateOptions() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options {
	if t.Options != nil {
		return t.Options
	}
	t.Options = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options{}
	return t.Options
}

// GetOrCreatePrefixType retrieves the value of the PrefixType field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix) GetOrCreatePrefixType() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType {
	if t.PrefixType != nil {
		return t.PrefixType
	}
	t.PrefixType = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType{}
	return t.PrefixType
}

// GetOptions returns the value of the Options struct pointer
// from NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix. If the receiver or the field Options is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix) GetOptions() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options {
	if t != nil && t.Options != nil {
		return t.Options
	}
	return nil
}

// GetPrefixType returns the value of the PrefixType struct pointer
// from NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix. If the receiver or the field PrefixType is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix) GetPrefixType() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType {
	if t != nil && t.PrefixType != nil {
		return t.PrefixType
	}
	return nil
}

// GetDrain retrieves the value of the leaf Drain from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drain is set, it can
// safely use t.GetDrain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix) GetDrain() bool {
	if t == nil || t.Drain == nil {
		return false
	}
	return *t.Drain
}

// GetFailoverControlType retrieves the value of the leaf FailoverControlType from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FailoverControlType is set, it can
// safely use t.GetFailoverControlType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FailoverControlType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix) GetFailoverControlType() E_NokiaTypesDhcp_FailoverControlType {
	if t == nil || t.FailoverControlType == 0 {
		return NokiaTypesDhcp_FailoverControlType_local
	}
	return t.FailoverControlType
}

// GetIpv6Prefix retrieves the value of the leaf Ipv6Prefix from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Prefix is set, it can
// safely use t.GetIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix) GetIpv6Prefix() string {
	if t == nil || t.Ipv6Prefix == nil {
		return ""
	}
	return *t.Ipv6Prefix
}

// GetPreferredLifetime retrieves the value of the leaf PreferredLifetime from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferredLifetime is set, it can
// safely use t.GetPreferredLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferredLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix) GetPreferredLifetime() uint32 {
	if t == nil || t.PreferredLifetime == nil {
		return 3600
	}
	return *t.PreferredLifetime
}

// GetRebindTime retrieves the value of the leaf RebindTime from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RebindTime is set, it can
// safely use t.GetRebindTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RebindTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix) GetRebindTime() uint32 {
	if t == nil || t.RebindTime == nil {
		return 2880
	}
	return *t.RebindTime
}

// GetRenewTime retrieves the value of the leaf RenewTime from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RenewTime is set, it can
// safely use t.GetRenewTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RenewTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix) GetRenewTime() uint32 {
	if t == nil || t.RenewTime == nil {
		return 1800
	}
	return *t.RenewTime
}

// GetValidLifetime retrieves the value of the leaf ValidLifetime from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidLifetime is set, it can
// safely use t.GetValidLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix) GetValidLifetime() uint32 {
	if t == nil || t.ValidLifetime == nil {
		return 86400
	}
	return *t.ValidLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Drain == nil {
		var v bool = false
		t.Drain = &v
	}
	if t.FailoverControlType == 0 {
		t.FailoverControlType = NokiaTypesDhcp_FailoverControlType_local
	}
	if t.PreferredLifetime == nil {
		var v uint32 = 3600
		t.PreferredLifetime = &v
	}
	if t.RebindTime == nil {
		var v uint32 = 2880
		t.RebindTime = &v
	}
	if t.RenewTime == nil {
		var v uint32 = 1800
		t.RenewTime = &v
	}
	if t.ValidLifetime == nil {
		var v uint32 = 86400
		t.ValidLifetime = &v
	}
	t.Options.PopulateDefaults()
	t.PrefixType.PopulateDefaults()
	for _, e := range t.PrefixLengthThreshold {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Prefix")
	}

	return map[string]interface{}{
		"ipv6-prefix": *t.Ipv6Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv6/pool/prefix-length-threshold YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold struct {
	EventWhenDepleted  *bool                                                                                                   `path:"event-when-depleted" module:"nokia-conf"`
	MinimumFreePercent *uint32                                                                                                 `path:"minimum-free-percent" module:"nokia-conf"`
	PrefixLength       NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold_PrefixLength_Union `path:"prefix-length" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) IsYANGGoStruct() {
}

// GetEventWhenDepleted retrieves the value of the leaf EventWhenDepleted from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventWhenDepleted is set, it can
// safely use t.GetEventWhenDepleted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventWhenDepleted == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) GetEventWhenDepleted() bool {
	if t == nil || t.EventWhenDepleted == nil {
		return false
	}
	return *t.EventWhenDepleted
}

// GetMinimumFreePercent retrieves the value of the leaf MinimumFreePercent from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinimumFreePercent is set, it can
// safely use t.GetMinimumFreePercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinimumFreePercent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) GetMinimumFreePercent() uint32 {
	if t == nil || t.MinimumFreePercent == nil {
		return 0
	}
	return *t.MinimumFreePercent
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) GetPrefixLength() NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold_PrefixLength_Union {
	if t == nil || t.PrefixLength == nil {
		return nil
	}
	return t.PrefixLength
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EventWhenDepleted == nil {
		var v bool = false
		t.EventWhenDepleted = &v
	}
	if t.MinimumFreePercent == nil {
		var v uint32 = 0
		t.MinimumFreePercent = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"prefix-length": t.PrefixLength,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_PrefixLengthThreshold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv6/pool/prefix/options YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options struct {
	Option map[NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option `path:"option" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options) IsYANGGoStruct() {
}

// NewOption creates a new entry in the Option list of the
// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options) NewOption(Number NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union) (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option)
	}

	key := Number

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Option[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Option", key)
	}

	t.Option[key] = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option{
		Number: Number,
	}

	return t.Option[key], nil
}

// RenameOption renames an entry in the list Option within
// the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options) RenameOption(oldK, newK NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union) error {
	if _, ok := t.Option[newK]; ok {
		return fmt.Errorf("key %v already exists in Option", newK)
	}

	e, ok := t.Option[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Option", oldK)
	}
	e.Number = newK

	t.Option[newK] = e
	delete(t.Option, oldK)
	return nil
}

// GetOrCreateOption retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options) GetOrCreateOption(Number NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option {

	key := Number

	if v, ok := t.Option[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOption(Number)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOption got unexpected error: %v", err))
	}
	return v
}

// GetOption retrieves the value with the specified key from
// the Option map field of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options) GetOption(Number NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union) *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option {

	if t == nil {
		return nil
	}

	key := Number

	if lm, ok := t.Option[key]; ok {
		return lm
	}
	return nil
}

// DeleteOption deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options) DeleteOption(Number NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union) {
	key := Number

	delete(t.Option, key)
}

// AppendOption appends the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option struct to the
// list Option of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options) AppendOption(v *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) error {
	key := v.Number

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union]*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option)
	}

	if _, ok := t.Option[key]; ok {
		return fmt.Errorf("duplicate key for list Option %v", key)
	}

	t.Option[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Option {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv6/pool/prefix/options/option YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option struct {
	AsciiString  *string                                                                                           `path:"ascii-string" module:"nokia-conf"`
	DomainString *string                                                                                           `path:"domain-string" module:"nokia-conf"`
	Duration     *uint32                                                                                           `path:"duration" module:"nokia-conf"`
	Empty        YANGEmpty                                                                                         `path:"empty" module:"nokia-conf"`
	HexString    *string                                                                                           `path:"hex-string" module:"nokia-conf"`
	Ipv6Address  []string                                                                                          `path:"ipv6-address" module:"nokia-conf"`
	Number       NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) IsYANGGoStruct() {
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetDomainString retrieves the value of the leaf DomainString from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainString is set, it can
// safely use t.GetDomainString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) GetDomainString() string {
	if t == nil || t.DomainString == nil {
		return ""
	}
	return *t.DomainString
}

// GetDuration retrieves the value of the leaf Duration from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Duration is set, it can
// safely use t.GetDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Duration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) GetDuration() uint32 {
	if t == nil || t.Duration == nil {
		return 0
	}
	return *t.Duration
}

// GetEmpty retrieves the value of the leaf Empty from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Empty is set, it can
// safely use t.GetEmpty() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Empty == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) GetEmpty() YANGEmpty {
	if t == nil || t.Empty == false {
		return false
	}
	return t.Empty
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) GetIpv6Address() []string {
	if t == nil || t.Ipv6Address == nil {
		return nil
	}
	return t.Ipv6Address
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) GetNumber() NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option_Number_Union {
	if t == nil || t.Number == nil {
		return nil
	}
	return t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"number": t.Number,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_Options_Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv6/pool/prefix/prefix-length-threshold YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold struct {
	Absolute          *uint32                                                                                                        `path:"absolute" module:"nokia-conf"`
	EventWhenDepleted *bool                                                                                                          `path:"event-when-depleted" module:"nokia-conf"`
	Percent           *uint32                                                                                                        `path:"percent" module:"nokia-conf"`
	PrefixLength      NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold_PrefixLength_Union `path:"prefix-length" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) IsYANGGoStruct() {
}

// GetAbsolute retrieves the value of the leaf Absolute from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Absolute is set, it can
// safely use t.GetAbsolute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Absolute == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) GetAbsolute() uint32 {
	if t == nil || t.Absolute == nil {
		return 0
	}
	return *t.Absolute
}

// GetEventWhenDepleted retrieves the value of the leaf EventWhenDepleted from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventWhenDepleted is set, it can
// safely use t.GetEventWhenDepleted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventWhenDepleted == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) GetEventWhenDepleted() bool {
	if t == nil || t.EventWhenDepleted == nil {
		return false
	}
	return *t.EventWhenDepleted
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) GetPercent() uint32 {
	if t == nil || t.Percent == nil {
		return 0
	}
	return *t.Percent
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) GetPrefixLength() NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold_PrefixLength_Union {
	if t == nil || t.PrefixLength == nil {
		return nil
	}
	return t.PrefixLength
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EventWhenDepleted == nil {
		var v bool = false
		t.EventWhenDepleted = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"prefix-length": t.PrefixLength,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixLengthThreshold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv6/pool/prefix/prefix-type YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType struct {
	Pd      *bool `path:"pd" module:"nokia-conf"`
	WanHost *bool `path:"wan-host" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType) IsYANGGoStruct() {
}

// GetPd retrieves the value of the leaf Pd from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pd is set, it can
// safely use t.GetPd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType) GetPd() bool {
	if t == nil || t.Pd == nil {
		return true
	}
	return *t.Pd
}

// GetWanHost retrieves the value of the leaf WanHost from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WanHost is set, it can
// safely use t.GetWanHost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WanHost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType) GetWanHost() bool {
	if t == nil || t.WanHost == nil {
		return true
	}
	return *t.WanHost
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Pd == nil {
		var v bool = true
		t.Pd = &v
	}
	if t.WanHost == nil {
		var v bool = true
		t.WanHost = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_Pool_Prefix_PrefixType) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv6/server-id YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId struct {
	DuidEnterprise *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise `path:"duid-enterprise" module:"nokia-conf"`
	DuidLinkLocal  YANGEmpty                                                                          `path:"duid-link-local" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId) IsYANGGoStruct() {}

// GetOrCreateDuidEnterprise retrieves the value of the DuidEnterprise field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId) GetOrCreateDuidEnterprise() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise {
	if t.DuidEnterprise != nil {
		return t.DuidEnterprise
	}
	t.DuidEnterprise = &NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise{}
	return t.DuidEnterprise
}

// GetDuidEnterprise returns the value of the DuidEnterprise struct pointer
// from NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId. If the receiver or the field DuidEnterprise is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId) GetDuidEnterprise() *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise {
	if t != nil && t.DuidEnterprise != nil {
		return t.DuidEnterprise
	}
	return nil
}

// GetDuidLinkLocal retrieves the value of the leaf DuidLinkLocal from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DuidLinkLocal is set, it can
// safely use t.GetDuidLinkLocal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DuidLinkLocal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId) GetDuidLinkLocal() YANGEmpty {
	if t == nil || t.DuidLinkLocal == false {
		return false
	}
	return t.DuidLinkLocal
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DuidEnterprise.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise represents the /nokia-conf/configure/groups/group/router/dhcp-server/dhcpv6/server-id/duid-enterprise YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise struct {
	AsciiString *string `path:"ascii-string" module:"nokia-conf"`
	HexString   *string `path:"hex-string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise) IsYANGGoStruct() {
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise.
func (*NokiaConf_Configure_Groups_Group_Router_DhcpServer_Dhcpv6_ServerId_DuidEnterprise) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Dns represents the /nokia-conf/configure/groups/group/router/dns YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Dns struct {
	RedirectVprn *NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn `path:"redirect-vprn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Dns implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Dns) IsYANGGoStruct() {}

// GetOrCreateRedirectVprn retrieves the value of the RedirectVprn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Dns) GetOrCreateRedirectVprn() *NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn {
	if t.RedirectVprn != nil {
		return t.RedirectVprn
	}
	t.RedirectVprn = &NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn{}
	return t.RedirectVprn
}

// GetRedirectVprn returns the value of the RedirectVprn struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Dns. If the receiver or the field RedirectVprn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Dns) GetRedirectVprn() *NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn {
	if t != nil && t.RedirectVprn != nil {
		return t.RedirectVprn
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Dns
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Dns) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RedirectVprn.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Dns) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Dns"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Dns) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Dns) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Dns.
func (*NokiaConf_Configure_Groups_Group_Router_Dns) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn represents the /nokia-conf/configure/groups/group/router/dns/redirect-vprn YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn struct {
	Service map[string]*NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn_Service `path:"service" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn) IsYANGGoStruct() {}

// NewService creates a new entry in the Service list of the
// NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn) NewService(ServiceName string) (*NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn_Service, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Service == nil {
		t.Service = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn_Service)
	}

	key := ServiceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Service[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Service", key)
	}

	t.Service[key] = &NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn_Service{
		ServiceName: &ServiceName,
	}

	return t.Service[key], nil
}

// RenameService renames an entry in the list Service within
// the NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn) RenameService(oldK, newK string) error {
	if _, ok := t.Service[newK]; ok {
		return fmt.Errorf("key %v already exists in Service", newK)
	}

	e, ok := t.Service[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Service", oldK)
	}
	e.ServiceName = &newK

	t.Service[newK] = e
	delete(t.Service, oldK)
	return nil
}

// GetOrCreateService retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn) GetOrCreateService(ServiceName string) *NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn_Service {

	key := ServiceName

	if v, ok := t.Service[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewService(ServiceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateService got unexpected error: %v", err))
	}
	return v
}

// GetService retrieves the value with the specified key from
// the Service map field of NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn) GetService(ServiceName string) *NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn_Service {

	if t == nil {
		return nil
	}

	key := ServiceName

	if lm, ok := t.Service[key]; ok {
		return lm
	}
	return nil
}

// DeleteService deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn) DeleteService(ServiceName string) {
	key := ServiceName

	delete(t.Service, key)
}

// AppendService appends the supplied NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn_Service struct to the
// list Service of NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn_Service already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn) AppendService(v *NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn_Service) error {
	if v.ServiceName == nil {
		return fmt.Errorf("invalid nil key received for ServiceName")
	}

	key := *v.ServiceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Service == nil {
		t.Service = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn_Service)
	}

	if _, ok := t.Service[key]; ok {
		return fmt.Errorf("duplicate key for list Service %v", key)
	}

	t.Service[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Service {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn.
func (*NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn_Service represents the /nokia-conf/configure/groups/group/router/dns/redirect-vprn/service YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn_Service struct {
	Preference  *uint32 `path:"preference" module:"nokia-conf"`
	ServiceName *string `path:"service-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn_Service implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn_Service) IsYANGGoStruct() {}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn_Service
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn_Service) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn_Service
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn_Service) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn_Service
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn_Service) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn_Service struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn_Service) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ServiceName == nil {
		return nil, fmt.Errorf("nil value for key ServiceName")
	}

	return map[string]interface{}{
		"service-name": *t.ServiceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn_Service) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn_Service"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn_Service) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn_Service) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn_Service.
func (*NokiaConf_Configure_Groups_Group_Router_Dns_RedirectVprn_Service) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Firewall represents the /nokia-conf/configure/groups/group/router/firewall YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Firewall struct {
	Domain map[string]*NokiaConf_Configure_Groups_Group_Router_Firewall_Domain `path:"domain" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Firewall implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Firewall) IsYANGGoStruct() {}

// NewDomain creates a new entry in the Domain list of the
// NokiaConf_Configure_Groups_Group_Router_Firewall struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall) NewDomain(Name string) (*NokiaConf_Configure_Groups_Group_Router_Firewall_Domain, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Domain == nil {
		t.Domain = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Firewall_Domain)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Domain[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Domain", key)
	}

	t.Domain[key] = &NokiaConf_Configure_Groups_Group_Router_Firewall_Domain{
		Name: &Name,
	}

	return t.Domain[key], nil
}

// RenameDomain renames an entry in the list Domain within
// the NokiaConf_Configure_Groups_Group_Router_Firewall struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall) RenameDomain(oldK, newK string) error {
	if _, ok := t.Domain[newK]; ok {
		return fmt.Errorf("key %v already exists in Domain", newK)
	}

	e, ok := t.Domain[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Domain", oldK)
	}
	e.Name = &newK

	t.Domain[newK] = e
	delete(t.Domain, oldK)
	return nil
}

// GetOrCreateDomain retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Firewall. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall) GetOrCreateDomain(Name string) *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain {

	key := Name

	if v, ok := t.Domain[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDomain(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDomain got unexpected error: %v", err))
	}
	return v
}

// GetDomain retrieves the value with the specified key from
// the Domain map field of NokiaConf_Configure_Groups_Group_Router_Firewall. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall) GetDomain(Name string) *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Domain[key]; ok {
		return lm
	}
	return nil
}

// DeleteDomain deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Firewall. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall) DeleteDomain(Name string) {
	key := Name

	delete(t.Domain, key)
}

// AppendDomain appends the supplied NokiaConf_Configure_Groups_Group_Router_Firewall_Domain struct to the
// list Domain of NokiaConf_Configure_Groups_Group_Router_Firewall. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Firewall_Domain already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall) AppendDomain(v *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Domain == nil {
		t.Domain = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Firewall_Domain)
	}

	if _, ok := t.Domain[key]; ok {
		return fmt.Errorf("duplicate key for list Domain %v", key)
	}

	t.Domain[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Firewall
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Domain {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Firewall"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Firewall.
func (*NokiaConf_Configure_Groups_Group_Router_Firewall) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Firewall_Domain represents the /nokia-conf/configure/groups/group/router/firewall/domain YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Firewall_Domain struct {
	AdminState   E_NokiaTypesSros_AdminState                                                `path:"admin-state" module:"nokia-conf"`
	Dhcpv6Server *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Dhcpv6Server      `path:"dhcpv6-server" module:"nokia-conf"`
	Name         *string                                                                    `path:"name" module:"nokia-conf"`
	NatGroup     *uint32                                                                    `path:"nat-group" module:"nokia-conf"`
	Prefix       map[string]*NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Prefix `path:"prefix" module:"nokia-conf"`
	WlanGwGroup  *uint32                                                                    `path:"wlan-gw-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Firewall_Domain implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Firewall_Domain) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Groups_Group_Router_Firewall_Domain struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain) NewPrefix(IpPrefix string) (*NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Prefix)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Prefix{
		IpPrefix: &IpPrefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Groups_Group_Router_Firewall_Domain struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.IpPrefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Firewall_Domain. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain) GetOrCreatePrefix(IpPrefix string) *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Prefix {

	key := IpPrefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Groups_Group_Router_Firewall_Domain. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain) GetPrefix(IpPrefix string) *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Prefix {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Firewall_Domain. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain) DeletePrefix(IpPrefix string) {
	key := IpPrefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Prefix struct to the
// list Prefix of NokiaConf_Configure_Groups_Group_Router_Firewall_Domain. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain) AppendPrefix(v *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Prefix) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// GetOrCreateDhcpv6Server retrieves the value of the Dhcpv6Server field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain) GetOrCreateDhcpv6Server() *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Dhcpv6Server {
	if t.Dhcpv6Server != nil {
		return t.Dhcpv6Server
	}
	t.Dhcpv6Server = &NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Dhcpv6Server{}
	return t.Dhcpv6Server
}

// GetDhcpv6Server returns the value of the Dhcpv6Server struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Firewall_Domain. If the receiver or the field Dhcpv6Server is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain) GetDhcpv6Server() *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Dhcpv6Server {
	if t != nil && t.Dhcpv6Server != nil {
		return t.Dhcpv6Server
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Firewall_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Router_Firewall_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetNatGroup retrieves the value of the leaf NatGroup from the NokiaConf_Configure_Groups_Group_Router_Firewall_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatGroup is set, it can
// safely use t.GetNatGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain) GetNatGroup() uint32 {
	if t == nil || t.NatGroup == nil {
		return 0
	}
	return *t.NatGroup
}

// GetWlanGwGroup retrieves the value of the leaf WlanGwGroup from the NokiaConf_Configure_Groups_Group_Router_Firewall_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WlanGwGroup is set, it can
// safely use t.GetWlanGwGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WlanGwGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain) GetWlanGwGroup() uint32 {
	if t == nil || t.WlanGwGroup == nil {
		return 0
	}
	return *t.WlanGwGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Firewall_Domain
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Dhcpv6Server.PopulateDefaults()
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Firewall_Domain struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Firewall_Domain"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Firewall_Domain.
func (*NokiaConf_Configure_Groups_Group_Router_Firewall_Domain) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Dhcpv6Server represents the /nokia-conf/configure/groups/group/router/firewall/domain/dhcpv6-server YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Dhcpv6Server struct {
	Name           *string `path:"name" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Dhcpv6Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Dhcpv6Server) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Dhcpv6Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Dhcpv6Server) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Dhcpv6Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Dhcpv6Server) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Dhcpv6Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Dhcpv6Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Dhcpv6Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Dhcpv6Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Dhcpv6Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Dhcpv6Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Dhcpv6Server.
func (*NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Dhcpv6Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Prefix represents the /nokia-conf/configure/groups/group/router/firewall/domain/prefix YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Prefix struct {
	Description *string `path:"description" module:"nokia-conf"`
	IpPrefix    *string `path:"ip-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Prefix) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Prefix) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Prefix) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Prefix.
func (*NokiaConf_Configure_Groups_Group_Router_Firewall_Domain_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Flowspec represents the /nokia-conf/configure/groups/group/router/flowspec YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Flowspec struct {
	FilterCamType     E_NokiaConf_Configure_Groups_Group_Router_Flowspec_FilterCamType `path:"filter-cam-type" module:"nokia-conf"`
	IpFilterMaxSize   *uint32                                                          `path:"ip-filter-max-size" module:"nokia-conf"`
	Ipv6FilterMaxSize *uint32                                                          `path:"ipv6-filter-max-size" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Flowspec implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Flowspec) IsYANGGoStruct() {}

// GetFilterCamType retrieves the value of the leaf FilterCamType from the NokiaConf_Configure_Groups_Group_Router_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilterCamType is set, it can
// safely use t.GetFilterCamType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilterCamType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Flowspec) GetFilterCamType() E_NokiaConf_Configure_Groups_Group_Router_Flowspec_FilterCamType {
	if t == nil || t.FilterCamType == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Flowspec_FilterCamType_normal
	}
	return t.FilterCamType
}

// GetIpFilterMaxSize retrieves the value of the leaf IpFilterMaxSize from the NokiaConf_Configure_Groups_Group_Router_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpFilterMaxSize is set, it can
// safely use t.GetIpFilterMaxSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpFilterMaxSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Flowspec) GetIpFilterMaxSize() uint32 {
	if t == nil || t.IpFilterMaxSize == nil {
		return 512
	}
	return *t.IpFilterMaxSize
}

// GetIpv6FilterMaxSize retrieves the value of the leaf Ipv6FilterMaxSize from the NokiaConf_Configure_Groups_Group_Router_Flowspec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6FilterMaxSize is set, it can
// safely use t.GetIpv6FilterMaxSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6FilterMaxSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Flowspec) GetIpv6FilterMaxSize() uint32 {
	if t == nil || t.Ipv6FilterMaxSize == nil {
		return 512
	}
	return *t.Ipv6FilterMaxSize
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Flowspec
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Flowspec) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FilterCamType == 0 {
		t.FilterCamType = NokiaConf_Configure_Groups_Group_Router_Flowspec_FilterCamType_normal
	}
	if t.IpFilterMaxSize == nil {
		var v uint32 = 512
		t.IpFilterMaxSize = &v
	}
	if t.Ipv6FilterMaxSize == nil {
		var v uint32 = 512
		t.Ipv6FilterMaxSize = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Flowspec) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Flowspec"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Flowspec) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Flowspec) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Flowspec.
func (*NokiaConf_Configure_Groups_Group_Router_Flowspec) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Gtm represents the /nokia-conf/configure/groups/group/router/gtm YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Gtm struct {
	Mvpn           *bool                                                       `path:"mvpn" module:"nokia-conf"`
	ProviderTunnel *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel `path:"provider-tunnel" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Gtm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Gtm) IsYANGGoStruct() {}

// GetOrCreateProviderTunnel retrieves the value of the ProviderTunnel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm) GetOrCreateProviderTunnel() *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel {
	if t.ProviderTunnel != nil {
		return t.ProviderTunnel
	}
	t.ProviderTunnel = &NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel{}
	return t.ProviderTunnel
}

// GetProviderTunnel returns the value of the ProviderTunnel struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Gtm. If the receiver or the field ProviderTunnel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm) GetProviderTunnel() *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel {
	if t != nil && t.ProviderTunnel != nil {
		return t.ProviderTunnel
	}
	return nil
}

// GetMvpn retrieves the value of the leaf Mvpn from the NokiaConf_Configure_Groups_Group_Router_Gtm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mvpn is set, it can
// safely use t.GetMvpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mvpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm) GetMvpn() bool {
	if t == nil || t.Mvpn == nil {
		return false
	}
	return *t.Mvpn
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Gtm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mvpn == nil {
		var v bool = false
		t.Mvpn = &v
	}
	t.ProviderTunnel.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Gtm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Gtm.
func (*NokiaConf_Configure_Groups_Group_Router_Gtm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel represents the /nokia-conf/configure/groups/group/router/gtm/provider-tunnel YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel struct {
	Inclusive *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive `path:"inclusive" module:"nokia-conf"`
	Selective *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective `path:"selective" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel) IsYANGGoStruct() {}

// GetOrCreateInclusive retrieves the value of the Inclusive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel) GetOrCreateInclusive() *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive {
	if t.Inclusive != nil {
		return t.Inclusive
	}
	t.Inclusive = &NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive{}
	return t.Inclusive
}

// GetOrCreateSelective retrieves the value of the Selective field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel) GetOrCreateSelective() *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective {
	if t.Selective != nil {
		return t.Selective
	}
	t.Selective = &NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective{}
	return t.Selective
}

// GetInclusive returns the value of the Inclusive struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel. If the receiver or the field Inclusive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel) GetInclusive() *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive {
	if t != nil && t.Inclusive != nil {
		return t.Inclusive
	}
	return nil
}

// GetSelective returns the value of the Selective struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel. If the receiver or the field Selective is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel) GetSelective() *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective {
	if t != nil && t.Selective != nil {
		return t.Selective
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Inclusive.PopulateDefaults()
	t.Selective.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel.
func (*NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive represents the /nokia-conf/configure/groups/group/router/gtm/provider-tunnel/inclusive YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive struct {
	Rsvp *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive_Rsvp `path:"rsvp" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive) IsYANGGoStruct() {}

// GetOrCreateRsvp retrieves the value of the Rsvp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive) GetOrCreateRsvp() *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive_Rsvp {
	if t.Rsvp != nil {
		return t.Rsvp
	}
	t.Rsvp = &NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive_Rsvp{}
	return t.Rsvp
}

// GetRsvp returns the value of the Rsvp struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive. If the receiver or the field Rsvp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive) GetRsvp() *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive_Rsvp {
	if t != nil && t.Rsvp != nil {
		return t.Rsvp
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Rsvp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive.
func (*NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive_Rsvp represents the /nokia-conf/configure/groups/group/router/gtm/provider-tunnel/inclusive/rsvp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive_Rsvp struct {
	AdminState  E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	LspTemplate *string                     `path:"lsp-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive_Rsvp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive_Rsvp) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive_Rsvp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetLspTemplate retrieves the value of the leaf LspTemplate from the NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspTemplate is set, it can
// safely use t.GetLspTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive_Rsvp) GetLspTemplate() string {
	if t == nil || t.LspTemplate == nil {
		return ""
	}
	return *t.LspTemplate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive_Rsvp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive_Rsvp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive_Rsvp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive_Rsvp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive_Rsvp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive_Rsvp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive_Rsvp.
func (*NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Inclusive_Rsvp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective represents the /nokia-conf/configure/groups/group/router/gtm/provider-tunnel/selective YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective struct {
	DataDelayInterval *uint32                                                                             `path:"data-delay-interval" module:"nokia-conf"`
	DataThreshold     *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold `path:"data-threshold" module:"nokia-conf"`
	MaximumP2MpSpmsi  *uint32                                                                             `path:"maximum-p2mp-spmsi" module:"nokia-conf"`
	Rsvp              *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_Rsvp          `path:"rsvp" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective) IsYANGGoStruct() {}

// GetOrCreateDataThreshold retrieves the value of the DataThreshold field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective) GetOrCreateDataThreshold() *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold {
	if t.DataThreshold != nil {
		return t.DataThreshold
	}
	t.DataThreshold = &NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold{}
	return t.DataThreshold
}

// GetOrCreateRsvp retrieves the value of the Rsvp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective) GetOrCreateRsvp() *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_Rsvp {
	if t.Rsvp != nil {
		return t.Rsvp
	}
	t.Rsvp = &NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_Rsvp{}
	return t.Rsvp
}

// GetDataThreshold returns the value of the DataThreshold struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective. If the receiver or the field DataThreshold is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective) GetDataThreshold() *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold {
	if t != nil && t.DataThreshold != nil {
		return t.DataThreshold
	}
	return nil
}

// GetRsvp returns the value of the Rsvp struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective. If the receiver or the field Rsvp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective) GetRsvp() *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_Rsvp {
	if t != nil && t.Rsvp != nil {
		return t.Rsvp
	}
	return nil
}

// GetDataDelayInterval retrieves the value of the leaf DataDelayInterval from the NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DataDelayInterval is set, it can
// safely use t.GetDataDelayInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DataDelayInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective) GetDataDelayInterval() uint32 {
	if t == nil || t.DataDelayInterval == nil {
		return 3
	}
	return *t.DataDelayInterval
}

// GetMaximumP2MpSpmsi retrieves the value of the leaf MaximumP2MpSpmsi from the NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumP2MpSpmsi is set, it can
// safely use t.GetMaximumP2MpSpmsi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumP2MpSpmsi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective) GetMaximumP2MpSpmsi() uint32 {
	if t == nil || t.MaximumP2MpSpmsi == nil {
		return 10
	}
	return *t.MaximumP2MpSpmsi
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DataDelayInterval == nil {
		var v uint32 = 3
		t.DataDelayInterval = &v
	}
	if t.MaximumP2MpSpmsi == nil {
		var v uint32 = 10
		t.MaximumP2MpSpmsi = &v
	}
	t.DataThreshold.PopulateDefaults()
	t.Rsvp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective.
func (*NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold represents the /nokia-conf/configure/groups/group/router/gtm/provider-tunnel/selective/data-threshold YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold struct {
	GroupPrefix map[string]*NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix `path:"group-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold) IsYANGGoStruct() {
}

// NewGroupPrefix creates a new entry in the GroupPrefix list of the
// NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold) NewGroupPrefix(IpGroupPrefix string) (*NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupPrefix == nil {
		t.GroupPrefix = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix)
	}

	key := IpGroupPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupPrefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupPrefix", key)
	}

	t.GroupPrefix[key] = &NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix{
		IpGroupPrefix: &IpGroupPrefix,
	}

	return t.GroupPrefix[key], nil
}

// RenameGroupPrefix renames an entry in the list GroupPrefix within
// the NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold) RenameGroupPrefix(oldK, newK string) error {
	if _, ok := t.GroupPrefix[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupPrefix", newK)
	}

	e, ok := t.GroupPrefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupPrefix", oldK)
	}
	e.IpGroupPrefix = &newK

	t.GroupPrefix[newK] = e
	delete(t.GroupPrefix, oldK)
	return nil
}

// GetOrCreateGroupPrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold) GetOrCreateGroupPrefix(IpGroupPrefix string) *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix {

	key := IpGroupPrefix

	if v, ok := t.GroupPrefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupPrefix(IpGroupPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupPrefix got unexpected error: %v", err))
	}
	return v
}

// GetGroupPrefix retrieves the value with the specified key from
// the GroupPrefix map field of NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold) GetGroupPrefix(IpGroupPrefix string) *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix {

	if t == nil {
		return nil
	}

	key := IpGroupPrefix

	if lm, ok := t.GroupPrefix[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupPrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold) DeleteGroupPrefix(IpGroupPrefix string) {
	key := IpGroupPrefix

	delete(t.GroupPrefix, key)
}

// AppendGroupPrefix appends the supplied NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix struct to the
// list GroupPrefix of NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold) AppendGroupPrefix(v *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix) error {
	if v.IpGroupPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpGroupPrefix")
	}

	key := *v.IpGroupPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupPrefix == nil {
		t.GroupPrefix = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix)
	}

	if _, ok := t.GroupPrefix[key]; ok {
		return fmt.Errorf("duplicate key for list GroupPrefix %v", key)
	}

	t.GroupPrefix[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupPrefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold.
func (*NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix represents the /nokia-conf/configure/groups/group/router/gtm/provider-tunnel/selective/data-threshold/group-prefix YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix struct {
	IpGroupPrefix     *string `path:"ip-group-prefix" module:"nokia-conf"`
	PeThresholdAdd    *uint32 `path:"pe-threshold-add" module:"nokia-conf"`
	PeThresholdDelete *uint32 `path:"pe-threshold-delete" module:"nokia-conf"`
	Threshold         *uint32 `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix) IsYANGGoStruct() {
}

// GetIpGroupPrefix retrieves the value of the leaf IpGroupPrefix from the NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpGroupPrefix is set, it can
// safely use t.GetIpGroupPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpGroupPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix) GetIpGroupPrefix() string {
	if t == nil || t.IpGroupPrefix == nil {
		return ""
	}
	return *t.IpGroupPrefix
}

// GetPeThresholdAdd retrieves the value of the leaf PeThresholdAdd from the NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeThresholdAdd is set, it can
// safely use t.GetPeThresholdAdd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeThresholdAdd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix) GetPeThresholdAdd() uint32 {
	if t == nil || t.PeThresholdAdd == nil {
		return 65535
	}
	return *t.PeThresholdAdd
}

// GetPeThresholdDelete retrieves the value of the leaf PeThresholdDelete from the NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeThresholdDelete is set, it can
// safely use t.GetPeThresholdDelete() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeThresholdDelete == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix) GetPeThresholdDelete() uint32 {
	if t == nil || t.PeThresholdDelete == nil {
		return 65535
	}
	return *t.PeThresholdDelete
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 0
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PeThresholdAdd == nil {
		var v uint32 = 65535
		t.PeThresholdAdd = &v
	}
	if t.PeThresholdDelete == nil {
		var v uint32 = 65535
		t.PeThresholdDelete = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpGroupPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpGroupPrefix")
	}

	return map[string]interface{}{
		"ip-group-prefix": *t.IpGroupPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix.
func (*NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_DataThreshold_GroupPrefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_Rsvp represents the /nokia-conf/configure/groups/group/router/gtm/provider-tunnel/selective/rsvp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_Rsvp struct {
	AdminState  E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	LspTemplate *string                     `path:"lsp-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_Rsvp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_Rsvp) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_Rsvp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetLspTemplate retrieves the value of the leaf LspTemplate from the NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspTemplate is set, it can
// safely use t.GetLspTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_Rsvp) GetLspTemplate() string {
	if t == nil || t.LspTemplate == nil {
		return ""
	}
	return *t.LspTemplate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_Rsvp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_Rsvp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_Rsvp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_Rsvp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_Rsvp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_Rsvp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_Rsvp.
func (*NokiaConf_Configure_Groups_Group_Router_Gtm_ProviderTunnel_Selective_Rsvp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Gtp represents the /nokia-conf/configure/groups/group/router/gtp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Gtp struct {
	S11             *NokiaConf_Configure_Groups_Group_Router_Gtp_S11             `path:"s11" module:"nokia-conf"`
	UpfDataEndpoint *NokiaConf_Configure_Groups_Group_Router_Gtp_UpfDataEndpoint `path:"upf-data-endpoint" module:"nokia-conf" yangPresence:"true"`
	Uplink          *NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink          `path:"uplink" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Gtp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Gtp) IsYANGGoStruct() {}

// GetOrCreateS11 retrieves the value of the S11 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp) GetOrCreateS11() *NokiaConf_Configure_Groups_Group_Router_Gtp_S11 {
	if t.S11 != nil {
		return t.S11
	}
	t.S11 = &NokiaConf_Configure_Groups_Group_Router_Gtp_S11{}
	return t.S11
}

// GetOrCreateUpfDataEndpoint retrieves the value of the UpfDataEndpoint field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp) GetOrCreateUpfDataEndpoint() *NokiaConf_Configure_Groups_Group_Router_Gtp_UpfDataEndpoint {
	if t.UpfDataEndpoint != nil {
		return t.UpfDataEndpoint
	}
	t.UpfDataEndpoint = &NokiaConf_Configure_Groups_Group_Router_Gtp_UpfDataEndpoint{}
	return t.UpfDataEndpoint
}

// GetOrCreateUplink retrieves the value of the Uplink field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp) GetOrCreateUplink() *NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink {
	if t.Uplink != nil {
		return t.Uplink
	}
	t.Uplink = &NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink{}
	return t.Uplink
}

// GetS11 returns the value of the S11 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Gtp. If the receiver or the field S11 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp) GetS11() *NokiaConf_Configure_Groups_Group_Router_Gtp_S11 {
	if t != nil && t.S11 != nil {
		return t.S11
	}
	return nil
}

// GetUpfDataEndpoint returns the value of the UpfDataEndpoint struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Gtp. If the receiver or the field UpfDataEndpoint is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp) GetUpfDataEndpoint() *NokiaConf_Configure_Groups_Group_Router_Gtp_UpfDataEndpoint {
	if t != nil && t.UpfDataEndpoint != nil {
		return t.UpfDataEndpoint
	}
	return nil
}

// GetUplink returns the value of the Uplink struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Gtp. If the receiver or the field Uplink is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp) GetUplink() *NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink {
	if t != nil && t.Uplink != nil {
		return t.Uplink
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Gtp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.S11.PopulateDefaults()
	t.UpfDataEndpoint.PopulateDefaults()
	t.Uplink.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Gtp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Gtp.
func (*NokiaConf_Configure_Groups_Group_Router_Gtp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Gtp_S11 represents the /nokia-conf/configure/groups/group/router/gtp/s11 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Gtp_S11 struct {
	Interface      map[string]*NokiaConf_Configure_Groups_Group_Router_Gtp_S11_Interface `path:"interface" module:"nokia-conf"`
	PeerProfileMap *NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap       `path:"peer-profile-map" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Gtp_S11 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Gtp_S11) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Groups_Group_Router_Gtp_S11 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_S11) NewInterface(InterfaceName string) (*NokiaConf_Configure_Groups_Group_Router_Gtp_S11_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Gtp_S11_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Groups_Group_Router_Gtp_S11_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Groups_Group_Router_Gtp_S11 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_S11) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Gtp_S11. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_S11) GetOrCreateInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Router_Gtp_S11_Interface {

	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Groups_Group_Router_Gtp_S11. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_S11) GetInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Router_Gtp_S11_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Gtp_S11. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_S11) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Groups_Group_Router_Gtp_S11_Interface struct to the
// list Interface of NokiaConf_Configure_Groups_Group_Router_Gtp_S11. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Gtp_S11_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_S11) AppendInterface(v *NokiaConf_Configure_Groups_Group_Router_Gtp_S11_Interface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Gtp_S11_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreatePeerProfileMap retrieves the value of the PeerProfileMap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_S11) GetOrCreatePeerProfileMap() *NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap {
	if t.PeerProfileMap != nil {
		return t.PeerProfileMap
	}
	t.PeerProfileMap = &NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap{}
	return t.PeerProfileMap
}

// GetPeerProfileMap returns the value of the PeerProfileMap struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Gtp_S11. If the receiver or the field PeerProfileMap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_S11) GetPeerProfileMap() *NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap {
	if t != nil && t.PeerProfileMap != nil {
		return t.PeerProfileMap
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Gtp_S11
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_S11) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PeerProfileMap.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_S11) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Gtp_S11"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_S11) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_S11) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Gtp_S11.
func (*NokiaConf_Configure_Groups_Group_Router_Gtp_S11) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Gtp_S11_Interface represents the /nokia-conf/configure/groups/group/router/gtp/s11/interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Gtp_S11_Interface struct {
	ApnPolicy     *string `path:"apn-policy" module:"nokia-conf"`
	InterfaceName *string `path:"interface-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Gtp_S11_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Gtp_S11_Interface) IsYANGGoStruct() {}

// GetApnPolicy retrieves the value of the leaf ApnPolicy from the NokiaConf_Configure_Groups_Group_Router_Gtp_S11_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApnPolicy is set, it can
// safely use t.GetApnPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApnPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_S11_Interface) GetApnPolicy() string {
	if t == nil || t.ApnPolicy == nil {
		return ""
	}
	return *t.ApnPolicy
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Router_Gtp_S11_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_S11_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Gtp_S11_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_S11_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Gtp_S11_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_S11_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_S11_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Gtp_S11_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_S11_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_S11_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Gtp_S11_Interface.
func (*NokiaConf_Configure_Groups_Group_Router_Gtp_S11_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap represents the /nokia-conf/configure/groups/group/router/gtp/s11/peer-profile-map YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap struct {
	Prefix map[string]*NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap_Prefix `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap) NewPrefix(PeerPrefix string) (*NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap_Prefix)
	}

	key := PeerPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap_Prefix{
		PeerPrefix: &PeerPrefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.PeerPrefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap) GetOrCreatePrefix(PeerPrefix string) *NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap_Prefix {

	key := PeerPrefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(PeerPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap) GetPrefix(PeerPrefix string) *NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap_Prefix {

	if t == nil {
		return nil
	}

	key := PeerPrefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap) DeletePrefix(PeerPrefix string) {
	key := PeerPrefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap_Prefix struct to the
// list Prefix of NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap) AppendPrefix(v *NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap_Prefix) error {
	if v.PeerPrefix == nil {
		return fmt.Errorf("invalid nil key received for PeerPrefix")
	}

	key := *v.PeerPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap.
func (*NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap_Prefix represents the /nokia-conf/configure/groups/group/router/gtp/s11/peer-profile-map/prefix YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap_Prefix struct {
	PeerPrefix  *string `path:"peer-prefix" module:"nokia-conf"`
	PeerProfile *string `path:"peer-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap_Prefix) IsYANGGoStruct() {}

// GetPeerPrefix retrieves the value of the leaf PeerPrefix from the NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerPrefix is set, it can
// safely use t.GetPeerPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap_Prefix) GetPeerPrefix() string {
	if t == nil || t.PeerPrefix == nil {
		return ""
	}
	return *t.PeerPrefix
}

// GetPeerProfile retrieves the value of the leaf PeerProfile from the NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerProfile is set, it can
// safely use t.GetPeerProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap_Prefix) GetPeerProfile() string {
	if t == nil || t.PeerProfile == nil {
		return ""
	}
	return *t.PeerProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PeerPrefix == nil {
		return nil, fmt.Errorf("nil value for key PeerPrefix")
	}

	return map[string]interface{}{
		"peer-prefix": *t.PeerPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap_Prefix.
func (*NokiaConf_Configure_Groups_Group_Router_Gtp_S11_PeerProfileMap_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Gtp_UpfDataEndpoint represents the /nokia-conf/configure/groups/group/router/gtp/upf-data-endpoint YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Gtp_UpfDataEndpoint struct {
	Fpe       *uint32 `path:"fpe" module:"nokia-conf"`
	Interface *string `path:"interface" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Gtp_UpfDataEndpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Gtp_UpfDataEndpoint) IsYANGGoStruct() {}

// GetFpe retrieves the value of the leaf Fpe from the NokiaConf_Configure_Groups_Group_Router_Gtp_UpfDataEndpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fpe is set, it can
// safely use t.GetFpe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fpe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_UpfDataEndpoint) GetFpe() uint32 {
	if t == nil || t.Fpe == nil {
		return 0
	}
	return *t.Fpe
}

// GetInterface retrieves the value of the leaf Interface from the NokiaConf_Configure_Groups_Group_Router_Gtp_UpfDataEndpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_UpfDataEndpoint) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Gtp_UpfDataEndpoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_UpfDataEndpoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_UpfDataEndpoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Gtp_UpfDataEndpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_UpfDataEndpoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_UpfDataEndpoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Gtp_UpfDataEndpoint.
func (*NokiaConf_Configure_Groups_Group_Router_Gtp_UpfDataEndpoint) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink represents the /nokia-conf/configure/groups/group/router/gtp/uplink YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink struct {
	Apn            *string                                                            `path:"apn" module:"nokia-conf"`
	PdnType        E_NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PdnType       `path:"pdn-type" module:"nokia-conf"`
	PeerProfileMap *NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap `path:"peer-profile-map" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink) IsYANGGoStruct() {}

// GetOrCreatePeerProfileMap retrieves the value of the PeerProfileMap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink) GetOrCreatePeerProfileMap() *NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap {
	if t.PeerProfileMap != nil {
		return t.PeerProfileMap
	}
	t.PeerProfileMap = &NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap{}
	return t.PeerProfileMap
}

// GetPeerProfileMap returns the value of the PeerProfileMap struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink. If the receiver or the field PeerProfileMap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink) GetPeerProfileMap() *NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap {
	if t != nil && t.PeerProfileMap != nil {
		return t.PeerProfileMap
	}
	return nil
}

// GetApn retrieves the value of the leaf Apn from the NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Apn is set, it can
// safely use t.GetApn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Apn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink) GetApn() string {
	if t == nil || t.Apn == nil {
		return ""
	}
	return *t.Apn
}

// GetPdnType retrieves the value of the leaf PdnType from the NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PdnType is set, it can
// safely use t.GetPdnType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PdnType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink) GetPdnType() E_NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PdnType {
	if t == nil || t.PdnType == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PdnType_ipv4
	}
	return t.PdnType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PdnType == 0 {
		t.PdnType = NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PdnType_ipv4
	}
	t.PeerProfileMap.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink.
func (*NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap represents the /nokia-conf/configure/groups/group/router/gtp/uplink/peer-profile-map YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap struct {
	Prefix map[string]*NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap_Prefix `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap) NewPrefix(PeerPrefix string) (*NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap_Prefix)
	}

	key := PeerPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap_Prefix{
		PeerPrefix: &PeerPrefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.PeerPrefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap) GetOrCreatePrefix(PeerPrefix string) *NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap_Prefix {

	key := PeerPrefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(PeerPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap) GetPrefix(PeerPrefix string) *NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap_Prefix {

	if t == nil {
		return nil
	}

	key := PeerPrefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap) DeletePrefix(PeerPrefix string) {
	key := PeerPrefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap_Prefix struct to the
// list Prefix of NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap) AppendPrefix(v *NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap_Prefix) error {
	if v.PeerPrefix == nil {
		return fmt.Errorf("invalid nil key received for PeerPrefix")
	}

	key := *v.PeerPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap.
func (*NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap_Prefix represents the /nokia-conf/configure/groups/group/router/gtp/uplink/peer-profile-map/prefix YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap_Prefix struct {
	PeerPrefix  *string `path:"peer-prefix" module:"nokia-conf"`
	PeerProfile *string `path:"peer-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap_Prefix) IsYANGGoStruct() {}

// GetPeerPrefix retrieves the value of the leaf PeerPrefix from the NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerPrefix is set, it can
// safely use t.GetPeerPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap_Prefix) GetPeerPrefix() string {
	if t == nil || t.PeerPrefix == nil {
		return ""
	}
	return *t.PeerPrefix
}

// GetPeerProfile retrieves the value of the leaf PeerProfile from the NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerProfile is set, it can
// safely use t.GetPeerProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap_Prefix) GetPeerProfile() string {
	if t == nil || t.PeerProfile == nil {
		return ""
	}
	return *t.PeerProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PeerPrefix == nil {
		return nil, fmt.Errorf("nil value for key PeerPrefix")
	}

	return map[string]interface{}{
		"peer-prefix": *t.PeerPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap_Prefix.
func (*NokiaConf_Configure_Groups_Group_Router_Gtp_Uplink_PeerProfileMap_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Igmp represents the /nokia-conf/configure/groups/group/router/igmp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Igmp struct {
	AdminState                E_NokiaTypesSros_AdminState                                                                                                                          `path:"admin-state" module:"nokia-conf"`
	ForwardingGroupInterface  map[NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Key]*NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface `path:"forwarding-group-interface" module:"nokia-conf"`
	GroupIfQuerySourceAddress *string                                                                                                                                              `path:"group-if-query-source-address" module:"nokia-conf"`
	GroupInterface            map[string]*NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface                                                                              `path:"group-interface" module:"nokia-conf"`
	Interface                 map[string]*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface                                                                                   `path:"interface" module:"nokia-conf"`
	QueryInterval             *uint32                                                                                                                                              `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval   *uint32                                                                                                                                              `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval     *uint32                                                                                                                                              `path:"query-response-interval" module:"nokia-conf"`
	RobustCount               *uint32                                                                                                                                              `path:"robust-count" module:"nokia-conf"`
	SsmTranslate              *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate                                                                                           `path:"ssm-translate" module:"nokia-conf"`
	TunnelInterface           *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface                                                                                        `path:"tunnel-interface" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Igmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Key represents the key for list ForwardingGroupInterface of element /nokia-conf/configure/groups/group/router/igmp.
type NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Key struct {
	ForwardingService  string `path:"forwarding-service"`
	GroupInterfaceName string `path:"group-interface-name"`
}

// NewForwardingGroupInterface creates a new entry in the ForwardingGroupInterface list of the
// NokiaConf_Configure_Groups_Group_Router_Igmp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp) NewForwardingGroupInterface(ForwardingService string, GroupInterfaceName string) (*NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ForwardingGroupInterface == nil {
		t.ForwardingGroupInterface = make(map[NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Key]*NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface)
	}

	key := NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Key{
		ForwardingService:  ForwardingService,
		GroupInterfaceName: GroupInterfaceName,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ForwardingGroupInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ForwardingGroupInterface", key)
	}

	t.ForwardingGroupInterface[key] = &NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface{
		ForwardingService:  &ForwardingService,
		GroupInterfaceName: &GroupInterfaceName,
	}

	return t.ForwardingGroupInterface[key], nil
}

// RenameForwardingGroupInterface renames an entry in the list ForwardingGroupInterface within
// the NokiaConf_Configure_Groups_Group_Router_Igmp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp) RenameForwardingGroupInterface(oldK, newK NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Key) error {
	if _, ok := t.ForwardingGroupInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in ForwardingGroupInterface", newK)
	}

	e, ok := t.ForwardingGroupInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ForwardingGroupInterface", oldK)
	}
	e.ForwardingService = &newK.ForwardingService
	e.GroupInterfaceName = &newK.GroupInterfaceName

	t.ForwardingGroupInterface[newK] = e
	delete(t.ForwardingGroupInterface, oldK)
	return nil
}

// GetOrCreateForwardingGroupInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp) GetOrCreateForwardingGroupInterface(ForwardingService string, GroupInterfaceName string) *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface {

	key := NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Key{
		ForwardingService:  ForwardingService,
		GroupInterfaceName: GroupInterfaceName,
	}

	if v, ok := t.ForwardingGroupInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewForwardingGroupInterface(ForwardingService, GroupInterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateForwardingGroupInterface got unexpected error: %v", err))
	}
	return v
}

// GetForwardingGroupInterface retrieves the value with the specified key from
// the ForwardingGroupInterface map field of NokiaConf_Configure_Groups_Group_Router_Igmp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp) GetForwardingGroupInterface(ForwardingService string, GroupInterfaceName string) *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Key{
		ForwardingService:  ForwardingService,
		GroupInterfaceName: GroupInterfaceName,
	}

	if lm, ok := t.ForwardingGroupInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteForwardingGroupInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp) DeleteForwardingGroupInterface(ForwardingService string, GroupInterfaceName string) {
	key := NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Key{
		ForwardingService:  ForwardingService,
		GroupInterfaceName: GroupInterfaceName,
	}

	delete(t.ForwardingGroupInterface, key)
}

// AppendForwardingGroupInterface appends the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface struct to the
// list ForwardingGroupInterface of NokiaConf_Configure_Groups_Group_Router_Igmp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp) AppendForwardingGroupInterface(v *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface) error {
	if v.ForwardingService == nil {
		return fmt.Errorf("invalid nil key for ForwardingService")
	}

	if v.GroupInterfaceName == nil {
		return fmt.Errorf("invalid nil key for GroupInterfaceName")
	}

	key := NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Key{
		ForwardingService:  *v.ForwardingService,
		GroupInterfaceName: *v.GroupInterfaceName,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ForwardingGroupInterface == nil {
		t.ForwardingGroupInterface = make(map[NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Key]*NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface)
	}

	if _, ok := t.ForwardingGroupInterface[key]; ok {
		return fmt.Errorf("duplicate key for list ForwardingGroupInterface %v", key)
	}

	t.ForwardingGroupInterface[key] = v
	return nil
}

// NewGroupInterface creates a new entry in the GroupInterface list of the
// NokiaConf_Configure_Groups_Group_Router_Igmp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp) NewGroupInterface(GroupInterfaceName string) (*NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupInterface == nil {
		t.GroupInterface = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface)
	}

	key := GroupInterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupInterface", key)
	}

	t.GroupInterface[key] = &NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface{
		GroupInterfaceName: &GroupInterfaceName,
	}

	return t.GroupInterface[key], nil
}

// RenameGroupInterface renames an entry in the list GroupInterface within
// the NokiaConf_Configure_Groups_Group_Router_Igmp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp) RenameGroupInterface(oldK, newK string) error {
	if _, ok := t.GroupInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupInterface", newK)
	}

	e, ok := t.GroupInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupInterface", oldK)
	}
	e.GroupInterfaceName = &newK

	t.GroupInterface[newK] = e
	delete(t.GroupInterface, oldK)
	return nil
}

// GetOrCreateGroupInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp) GetOrCreateGroupInterface(GroupInterfaceName string) *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface {

	key := GroupInterfaceName

	if v, ok := t.GroupInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupInterface(GroupInterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupInterface got unexpected error: %v", err))
	}
	return v
}

// GetGroupInterface retrieves the value with the specified key from
// the GroupInterface map field of NokiaConf_Configure_Groups_Group_Router_Igmp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp) GetGroupInterface(GroupInterfaceName string) *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface {

	if t == nil {
		return nil
	}

	key := GroupInterfaceName

	if lm, ok := t.GroupInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp) DeleteGroupInterface(GroupInterfaceName string) {
	key := GroupInterfaceName

	delete(t.GroupInterface, key)
}

// AppendGroupInterface appends the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface struct to the
// list GroupInterface of NokiaConf_Configure_Groups_Group_Router_Igmp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp) AppendGroupInterface(v *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface) error {
	if v.GroupInterfaceName == nil {
		return fmt.Errorf("invalid nil key received for GroupInterfaceName")
	}

	key := *v.GroupInterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupInterface == nil {
		t.GroupInterface = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface)
	}

	if _, ok := t.GroupInterface[key]; ok {
		return fmt.Errorf("duplicate key for list GroupInterface %v", key)
	}

	t.GroupInterface[key] = v
	return nil
}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Groups_Group_Router_Igmp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp) NewInterface(IpInterfaceName string) (*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface)
	}

	key := IpInterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Groups_Group_Router_Igmp_Interface{
		IpInterfaceName: &IpInterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Groups_Group_Router_Igmp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.IpInterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp) GetOrCreateInterface(IpInterfaceName string) *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface {

	key := IpInterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(IpInterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Groups_Group_Router_Igmp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp) GetInterface(IpInterfaceName string) *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface {

	if t == nil {
		return nil
	}

	key := IpInterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp) DeleteInterface(IpInterfaceName string) {
	key := IpInterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_Interface struct to the
// list Interface of NokiaConf_Configure_Groups_Group_Router_Igmp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp) AppendInterface(v *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface) error {
	if v.IpInterfaceName == nil {
		return fmt.Errorf("invalid nil key received for IpInterfaceName")
	}

	key := *v.IpInterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateSsmTranslate retrieves the value of the SsmTranslate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp) GetOrCreateSsmTranslate() *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate {
	if t.SsmTranslate != nil {
		return t.SsmTranslate
	}
	t.SsmTranslate = &NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate{}
	return t.SsmTranslate
}

// GetOrCreateTunnelInterface retrieves the value of the TunnelInterface field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp) GetOrCreateTunnelInterface() *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface {
	if t.TunnelInterface != nil {
		return t.TunnelInterface
	}
	t.TunnelInterface = &NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface{}
	return t.TunnelInterface
}

// GetSsmTranslate returns the value of the SsmTranslate struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Igmp. If the receiver or the field SsmTranslate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp) GetSsmTranslate() *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate {
	if t != nil && t.SsmTranslate != nil {
		return t.SsmTranslate
	}
	return nil
}

// GetTunnelInterface returns the value of the TunnelInterface struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Igmp. If the receiver or the field TunnelInterface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp) GetTunnelInterface() *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface {
	if t != nil && t.TunnelInterface != nil {
		return t.TunnelInterface
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetGroupIfQuerySourceAddress retrieves the value of the leaf GroupIfQuerySourceAddress from the NokiaConf_Configure_Groups_Group_Router_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupIfQuerySourceAddress is set, it can
// safely use t.GetGroupIfQuerySourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupIfQuerySourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp) GetGroupIfQuerySourceAddress() string {
	if t == nil || t.GroupIfQuerySourceAddress == nil {
		return ""
	}
	return *t.GroupIfQuerySourceAddress
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Groups_Group_Router_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 125
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Groups_Group_Router_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 1
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Groups_Group_Router_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 10
	}
	return *t.QueryResponseInterval
}

// GetRobustCount retrieves the value of the leaf RobustCount from the NokiaConf_Configure_Groups_Group_Router_Igmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RobustCount is set, it can
// safely use t.GetRobustCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RobustCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp) GetRobustCount() uint32 {
	if t == nil || t.RobustCount == nil {
		return 2
	}
	return *t.RobustCount
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Igmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.QueryInterval == nil {
		var v uint32 = 125
		t.QueryInterval = &v
	}
	if t.QueryLastMemberInterval == nil {
		var v uint32 = 1
		t.QueryLastMemberInterval = &v
	}
	if t.QueryResponseInterval == nil {
		var v uint32 = 10
		t.QueryResponseInterval = &v
	}
	if t.RobustCount == nil {
		var v uint32 = 2
		t.RobustCount = &v
	}
	t.SsmTranslate.PopulateDefaults()
	t.TunnelInterface.PopulateDefaults()
	for _, e := range t.ForwardingGroupInterface {
		e.PopulateDefaults()
	}
	for _, e := range t.GroupInterface {
		e.PopulateDefaults()
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Igmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Igmp.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface represents the /nokia-conf/configure/groups/group/router/igmp/forwarding-group-interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface struct {
	AdminState                E_NokiaTypesSros_AdminState                                                 `path:"admin-state" module:"nokia-conf"`
	ForwardingService         *string                                                                     `path:"forwarding-service" module:"nokia-conf"`
	GroupInterfaceName        *string                                                                     `path:"group-interface-name" module:"nokia-conf"`
	ImportPolicy              *string                                                                     `path:"import-policy" module:"nokia-conf"`
	MaximumNumberGroupSources *uint32                                                                     `path:"maximum-number-group-sources" module:"nokia-conf"`
	MaximumNumberGroups       *uint32                                                                     `path:"maximum-number-groups" module:"nokia-conf"`
	MaximumNumberSources      *uint32                                                                     `path:"maximum-number-sources" module:"nokia-conf"`
	Mcac                      *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac `path:"mcac" module:"nokia-conf"`
	QueryInterval             *uint32                                                                     `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval   *uint32                                                                     `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval     *uint32                                                                     `path:"query-response-interval" module:"nokia-conf"`
	QuerySourceAddress        *string                                                                     `path:"query-source-address" module:"nokia-conf"`
	RouterAlertCheck          *bool                                                                       `path:"router-alert-check" module:"nokia-conf"`
	SubHostsOnly              *bool                                                                       `path:"sub-hosts-only" module:"nokia-conf"`
	SubnetCheck               *bool                                                                       `path:"subnet-check" module:"nokia-conf"`
	Version                   E_NokiaTypesIgmp_IgmpVersion                                                `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface) IsYANGGoStruct() {}

// GetOrCreateMcac retrieves the value of the Mcac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface) GetOrCreateMcac() *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac {
	if t.Mcac != nil {
		return t.Mcac
	}
	t.Mcac = &NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac{}
	return t.Mcac
}

// GetMcac returns the value of the Mcac struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface. If the receiver or the field Mcac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface) GetMcac() *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac {
	if t != nil && t.Mcac != nil {
		return t.Mcac
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetForwardingService retrieves the value of the leaf ForwardingService from the NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingService is set, it can
// safely use t.GetForwardingService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingService == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface) GetForwardingService() string {
	if t == nil || t.ForwardingService == nil {
		return ""
	}
	return *t.ForwardingService
}

// GetGroupInterfaceName retrieves the value of the leaf GroupInterfaceName from the NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupInterfaceName is set, it can
// safely use t.GetGroupInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupInterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface) GetGroupInterfaceName() string {
	if t == nil || t.GroupInterfaceName == nil {
		return ""
	}
	return *t.GroupInterfaceName
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetMaximumNumberGroupSources retrieves the value of the leaf MaximumNumberGroupSources from the NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroupSources is set, it can
// safely use t.GetMaximumNumberGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroupSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface) GetMaximumNumberGroupSources() uint32 {
	if t == nil || t.MaximumNumberGroupSources == nil {
		return 0
	}
	return *t.MaximumNumberGroupSources
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMaximumNumberSources retrieves the value of the leaf MaximumNumberSources from the NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberSources is set, it can
// safely use t.GetMaximumNumberSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface) GetMaximumNumberSources() uint32 {
	if t == nil || t.MaximumNumberSources == nil {
		return 0
	}
	return *t.MaximumNumberSources
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 0
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 0
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 0
	}
	return *t.QueryResponseInterval
}

// GetQuerySourceAddress retrieves the value of the leaf QuerySourceAddress from the NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QuerySourceAddress is set, it can
// safely use t.GetQuerySourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QuerySourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface) GetQuerySourceAddress() string {
	if t == nil || t.QuerySourceAddress == nil {
		return ""
	}
	return *t.QuerySourceAddress
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetSubHostsOnly retrieves the value of the leaf SubHostsOnly from the NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubHostsOnly is set, it can
// safely use t.GetSubHostsOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubHostsOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface) GetSubHostsOnly() bool {
	if t == nil || t.SubHostsOnly == nil {
		return true
	}
	return *t.SubHostsOnly
}

// GetSubnetCheck retrieves the value of the leaf SubnetCheck from the NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubnetCheck is set, it can
// safely use t.GetSubnetCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubnetCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface) GetSubnetCheck() bool {
	if t == nil || t.SubnetCheck == nil {
		return true
	}
	return *t.SubnetCheck
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface) GetVersion() E_NokiaTypesIgmp_IgmpVersion {
	if t == nil || t.Version == 0 {
		return NokiaTypesIgmp_IgmpVersion_3
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.SubHostsOnly == nil {
		var v bool = true
		t.SubHostsOnly = &v
	}
	if t.SubnetCheck == nil {
		var v bool = true
		t.SubnetCheck = &v
	}
	if t.Version == 0 {
		t.Version = NokiaTypesIgmp_IgmpVersion_3
	}
	t.Mcac.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ForwardingService == nil {
		return nil, fmt.Errorf("nil value for key ForwardingService")
	}

	if t.GroupInterfaceName == nil {
		return nil, fmt.Errorf("nil value for key GroupInterfaceName")
	}

	return map[string]interface{}{
		"forwarding-service":   *t.ForwardingService,
		"group-interface-name": *t.GroupInterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac represents the /nokia-conf/configure/groups/group/router/igmp/forwarding-group-interface/mcac YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac struct {
	Bandwidth       *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth `path:"bandwidth" module:"nokia-conf"`
	InterfacePolicy *string                                                                               `path:"interface-policy" module:"nokia-conf"`
	Policy          *string                                                                               `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac) IsYANGGoStruct() {}

// GetOrCreateBandwidth retrieves the value of the Bandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac) GetOrCreateBandwidth() *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth {
	if t.Bandwidth != nil {
		return t.Bandwidth
	}
	t.Bandwidth = &NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth{}
	return t.Bandwidth
}

// GetBandwidth returns the value of the Bandwidth struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac. If the receiver or the field Bandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac) GetBandwidth() *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth {
	if t != nil && t.Bandwidth != nil {
		return t.Bandwidth
	}
	return nil
}

// GetInterfacePolicy retrieves the value of the leaf InterfacePolicy from the NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfacePolicy is set, it can
// safely use t.GetInterfacePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfacePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac) GetInterfacePolicy() string {
	if t == nil || t.InterfacePolicy == nil {
		return ""
	}
	return *t.InterfacePolicy
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bandwidth.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth represents the /nokia-conf/configure/groups/group/router/igmp/forwarding-group-interface/mcac/bandwidth YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth struct {
	Mandatory NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth_Mandatory_Union `path:"mandatory" module:"nokia-conf"`
	Total     NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth_Total_Union     `path:"total" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth) IsYANGGoStruct() {
}

// GetMandatory retrieves the value of the leaf Mandatory from the NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mandatory is set, it can
// safely use t.GetMandatory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mandatory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth) GetMandatory() NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth_Mandatory_Union {
	if t == nil || t.Mandatory == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Mandatory
}

// GetTotal retrieves the value of the leaf Total from the NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Total is set, it can
// safely use t.GetTotal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Total == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth) GetTotal() NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth_Total_Union {
	if t == nil || t.Total == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Total
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mandatory == nil {
		t.Mandatory = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	if t.Total == nil {
		t.Total = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_ForwardingGroupInterface_Mcac_Bandwidth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface represents the /nokia-conf/configure/groups/group/router/igmp/group-interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface struct {
	AdminState                E_NokiaTypesSros_AdminState                                       `path:"admin-state" module:"nokia-conf"`
	GroupInterfaceName        *string                                                           `path:"group-interface-name" module:"nokia-conf"`
	ImportPolicy              *string                                                           `path:"import-policy" module:"nokia-conf"`
	MaximumNumberGroupSources *uint32                                                           `path:"maximum-number-group-sources" module:"nokia-conf"`
	MaximumNumberGroups       *uint32                                                           `path:"maximum-number-groups" module:"nokia-conf"`
	MaximumNumberSources      *uint32                                                           `path:"maximum-number-sources" module:"nokia-conf"`
	Mcac                      *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac `path:"mcac" module:"nokia-conf"`
	QueryInterval             *uint32                                                           `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval   *uint32                                                           `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval     *uint32                                                           `path:"query-response-interval" module:"nokia-conf"`
	QuerySourceAddress        *string                                                           `path:"query-source-address" module:"nokia-conf"`
	RouterAlertCheck          *bool                                                             `path:"router-alert-check" module:"nokia-conf"`
	SubHostsOnly              *bool                                                             `path:"sub-hosts-only" module:"nokia-conf"`
	SubnetCheck               *bool                                                             `path:"subnet-check" module:"nokia-conf"`
	Version                   E_NokiaTypesIgmp_IgmpVersion                                      `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface) IsYANGGoStruct() {}

// GetOrCreateMcac retrieves the value of the Mcac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface) GetOrCreateMcac() *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac {
	if t.Mcac != nil {
		return t.Mcac
	}
	t.Mcac = &NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac{}
	return t.Mcac
}

// GetMcac returns the value of the Mcac struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface. If the receiver or the field Mcac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface) GetMcac() *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac {
	if t != nil && t.Mcac != nil {
		return t.Mcac
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetGroupInterfaceName retrieves the value of the leaf GroupInterfaceName from the NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupInterfaceName is set, it can
// safely use t.GetGroupInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupInterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface) GetGroupInterfaceName() string {
	if t == nil || t.GroupInterfaceName == nil {
		return ""
	}
	return *t.GroupInterfaceName
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetMaximumNumberGroupSources retrieves the value of the leaf MaximumNumberGroupSources from the NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroupSources is set, it can
// safely use t.GetMaximumNumberGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroupSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface) GetMaximumNumberGroupSources() uint32 {
	if t == nil || t.MaximumNumberGroupSources == nil {
		return 0
	}
	return *t.MaximumNumberGroupSources
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMaximumNumberSources retrieves the value of the leaf MaximumNumberSources from the NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberSources is set, it can
// safely use t.GetMaximumNumberSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface) GetMaximumNumberSources() uint32 {
	if t == nil || t.MaximumNumberSources == nil {
		return 0
	}
	return *t.MaximumNumberSources
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 0
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 0
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 0
	}
	return *t.QueryResponseInterval
}

// GetQuerySourceAddress retrieves the value of the leaf QuerySourceAddress from the NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QuerySourceAddress is set, it can
// safely use t.GetQuerySourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QuerySourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface) GetQuerySourceAddress() string {
	if t == nil || t.QuerySourceAddress == nil {
		return ""
	}
	return *t.QuerySourceAddress
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetSubHostsOnly retrieves the value of the leaf SubHostsOnly from the NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubHostsOnly is set, it can
// safely use t.GetSubHostsOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubHostsOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface) GetSubHostsOnly() bool {
	if t == nil || t.SubHostsOnly == nil {
		return true
	}
	return *t.SubHostsOnly
}

// GetSubnetCheck retrieves the value of the leaf SubnetCheck from the NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubnetCheck is set, it can
// safely use t.GetSubnetCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubnetCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface) GetSubnetCheck() bool {
	if t == nil || t.SubnetCheck == nil {
		return true
	}
	return *t.SubnetCheck
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface) GetVersion() E_NokiaTypesIgmp_IgmpVersion {
	if t == nil || t.Version == 0 {
		return NokiaTypesIgmp_IgmpVersion_3
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.SubHostsOnly == nil {
		var v bool = true
		t.SubHostsOnly = &v
	}
	if t.SubnetCheck == nil {
		var v bool = true
		t.SubnetCheck = &v
	}
	if t.Version == 0 {
		t.Version = NokiaTypesIgmp_IgmpVersion_3
	}
	t.Mcac.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupInterfaceName == nil {
		return nil, fmt.Errorf("nil value for key GroupInterfaceName")
	}

	return map[string]interface{}{
		"group-interface-name": *t.GroupInterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac represents the /nokia-conf/configure/groups/group/router/igmp/group-interface/mcac YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac struct {
	Bandwidth       *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac_Bandwidth `path:"bandwidth" module:"nokia-conf"`
	InterfacePolicy *string                                                                     `path:"interface-policy" module:"nokia-conf"`
	Policy          *string                                                                     `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac) IsYANGGoStruct() {}

// GetOrCreateBandwidth retrieves the value of the Bandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac) GetOrCreateBandwidth() *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac_Bandwidth {
	if t.Bandwidth != nil {
		return t.Bandwidth
	}
	t.Bandwidth = &NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac_Bandwidth{}
	return t.Bandwidth
}

// GetBandwidth returns the value of the Bandwidth struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac. If the receiver or the field Bandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac) GetBandwidth() *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac_Bandwidth {
	if t != nil && t.Bandwidth != nil {
		return t.Bandwidth
	}
	return nil
}

// GetInterfacePolicy retrieves the value of the leaf InterfacePolicy from the NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfacePolicy is set, it can
// safely use t.GetInterfacePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfacePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac) GetInterfacePolicy() string {
	if t == nil || t.InterfacePolicy == nil {
		return ""
	}
	return *t.InterfacePolicy
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bandwidth.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac_Bandwidth represents the /nokia-conf/configure/groups/group/router/igmp/group-interface/mcac/bandwidth YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac_Bandwidth struct {
	Mandatory NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac_Bandwidth_Mandatory_Union `path:"mandatory" module:"nokia-conf"`
	Total     NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac_Bandwidth_Total_Union     `path:"total" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac_Bandwidth) IsYANGGoStruct() {}

// GetMandatory retrieves the value of the leaf Mandatory from the NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mandatory is set, it can
// safely use t.GetMandatory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mandatory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac_Bandwidth) GetMandatory() NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac_Bandwidth_Mandatory_Union {
	if t == nil || t.Mandatory == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Mandatory
}

// GetTotal retrieves the value of the leaf Total from the NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Total is set, it can
// safely use t.GetTotal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Total == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac_Bandwidth) GetTotal() NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac_Bandwidth_Total_Union {
	if t == nil || t.Total == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Total
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac_Bandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac_Bandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mandatory == nil {
		t.Mandatory = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	if t.Total == nil {
		t.Total = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac_Bandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac_Bandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac_Bandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac_Bandwidth.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_GroupInterface_Mcac_Bandwidth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Igmp_Interface represents the /nokia-conf/configure/groups/group/router/igmp/interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Igmp_Interface struct {
	AdminState                E_NokiaTypesSros_AdminState                                          `path:"admin-state" module:"nokia-conf"`
	ImportPolicy              *string                                                              `path:"import-policy" module:"nokia-conf"`
	IpInterfaceName           *string                                                              `path:"ip-interface-name" module:"nokia-conf"`
	MaximumNumberGroupSources *uint32                                                              `path:"maximum-number-group-sources" module:"nokia-conf"`
	MaximumNumberGroups       *uint32                                                              `path:"maximum-number-groups" module:"nokia-conf"`
	MaximumNumberSources      *uint32                                                              `path:"maximum-number-sources" module:"nokia-conf"`
	Mcac                      *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac         `path:"mcac" module:"nokia-conf"`
	QueryInterval             *uint32                                                              `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval   *uint32                                                              `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval     *uint32                                                              `path:"query-response-interval" module:"nokia-conf"`
	RedundantMcast            *bool                                                                `path:"redundant-mcast" module:"nokia-conf"`
	RouterAlertCheck          *bool                                                                `path:"router-alert-check" module:"nokia-conf"`
	SsmTranslate              *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate `path:"ssm-translate" module:"nokia-conf"`
	Static                    *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static       `path:"static" module:"nokia-conf"`
	SubnetCheck               *bool                                                                `path:"subnet-check" module:"nokia-conf"`
	Version                   E_NokiaTypesIgmp_IgmpVersion                                         `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Igmp_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface) IsYANGGoStruct() {}

// GetOrCreateMcac retrieves the value of the Mcac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface) GetOrCreateMcac() *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac {
	if t.Mcac != nil {
		return t.Mcac
	}
	t.Mcac = &NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac{}
	return t.Mcac
}

// GetOrCreateSsmTranslate retrieves the value of the SsmTranslate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface) GetOrCreateSsmTranslate() *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate {
	if t.SsmTranslate != nil {
		return t.SsmTranslate
	}
	t.SsmTranslate = &NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate{}
	return t.SsmTranslate
}

// GetOrCreateStatic retrieves the value of the Static field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface) GetOrCreateStatic() *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static {
	if t.Static != nil {
		return t.Static
	}
	t.Static = &NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static{}
	return t.Static
}

// GetMcac returns the value of the Mcac struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Igmp_Interface. If the receiver or the field Mcac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface) GetMcac() *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac {
	if t != nil && t.Mcac != nil {
		return t.Mcac
	}
	return nil
}

// GetSsmTranslate returns the value of the SsmTranslate struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Igmp_Interface. If the receiver or the field SsmTranslate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface) GetSsmTranslate() *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate {
	if t != nil && t.SsmTranslate != nil {
		return t.SsmTranslate
	}
	return nil
}

// GetStatic returns the value of the Static struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Igmp_Interface. If the receiver or the field Static is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface) GetStatic() *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static {
	if t != nil && t.Static != nil {
		return t.Static
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetIpInterfaceName retrieves the value of the leaf IpInterfaceName from the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpInterfaceName is set, it can
// safely use t.GetIpInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpInterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface) GetIpInterfaceName() string {
	if t == nil || t.IpInterfaceName == nil {
		return ""
	}
	return *t.IpInterfaceName
}

// GetMaximumNumberGroupSources retrieves the value of the leaf MaximumNumberGroupSources from the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroupSources is set, it can
// safely use t.GetMaximumNumberGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroupSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface) GetMaximumNumberGroupSources() uint32 {
	if t == nil || t.MaximumNumberGroupSources == nil {
		return 0
	}
	return *t.MaximumNumberGroupSources
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMaximumNumberSources retrieves the value of the leaf MaximumNumberSources from the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberSources is set, it can
// safely use t.GetMaximumNumberSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface) GetMaximumNumberSources() uint32 {
	if t == nil || t.MaximumNumberSources == nil {
		return 0
	}
	return *t.MaximumNumberSources
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 0
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 0
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 0
	}
	return *t.QueryResponseInterval
}

// GetRedundantMcast retrieves the value of the leaf RedundantMcast from the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedundantMcast is set, it can
// safely use t.GetRedundantMcast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedundantMcast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface) GetRedundantMcast() bool {
	if t == nil || t.RedundantMcast == nil {
		return false
	}
	return *t.RedundantMcast
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetSubnetCheck retrieves the value of the leaf SubnetCheck from the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubnetCheck is set, it can
// safely use t.GetSubnetCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubnetCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface) GetSubnetCheck() bool {
	if t == nil || t.SubnetCheck == nil {
		return true
	}
	return *t.SubnetCheck
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface) GetVersion() E_NokiaTypesIgmp_IgmpVersion {
	if t == nil || t.Version == 0 {
		return NokiaTypesIgmp_IgmpVersion_3
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.RedundantMcast == nil {
		var v bool = false
		t.RedundantMcast = &v
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.SubnetCheck == nil {
		var v bool = true
		t.SubnetCheck = &v
	}
	if t.Version == 0 {
		t.Version = NokiaTypesIgmp_IgmpVersion_3
	}
	t.Mcac.PopulateDefaults()
	t.SsmTranslate.PopulateDefaults()
	t.Static.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpInterfaceName == nil {
		return nil, fmt.Errorf("nil value for key IpInterfaceName")
	}

	return map[string]interface{}{
		"ip-interface-name": *t.IpInterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Igmp_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Igmp_Interface.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac represents the /nokia-conf/configure/groups/group/router/igmp/interface/mcac YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac struct {
	Bandwidth       *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_Bandwidth     `path:"bandwidth" module:"nokia-conf"`
	InterfacePolicy *string                                                                    `path:"interface-policy" module:"nokia-conf"`
	McConstraints   *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints `path:"mc-constraints" module:"nokia-conf"`
	Policy          *string                                                                    `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac) IsYANGGoStruct() {}

// GetOrCreateBandwidth retrieves the value of the Bandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac) GetOrCreateBandwidth() *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_Bandwidth {
	if t.Bandwidth != nil {
		return t.Bandwidth
	}
	t.Bandwidth = &NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_Bandwidth{}
	return t.Bandwidth
}

// GetOrCreateMcConstraints retrieves the value of the McConstraints field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac) GetOrCreateMcConstraints() *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints {
	if t.McConstraints != nil {
		return t.McConstraints
	}
	t.McConstraints = &NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints{}
	return t.McConstraints
}

// GetBandwidth returns the value of the Bandwidth struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac. If the receiver or the field Bandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac) GetBandwidth() *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_Bandwidth {
	if t != nil && t.Bandwidth != nil {
		return t.Bandwidth
	}
	return nil
}

// GetMcConstraints returns the value of the McConstraints struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac. If the receiver or the field McConstraints is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac) GetMcConstraints() *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints {
	if t != nil && t.McConstraints != nil {
		return t.McConstraints
	}
	return nil
}

// GetInterfacePolicy retrieves the value of the leaf InterfacePolicy from the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfacePolicy is set, it can
// safely use t.GetInterfacePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfacePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac) GetInterfacePolicy() string {
	if t == nil || t.InterfacePolicy == nil {
		return ""
	}
	return *t.InterfacePolicy
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bandwidth.PopulateDefaults()
	t.McConstraints.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_Bandwidth represents the /nokia-conf/configure/groups/group/router/igmp/interface/mcac/bandwidth YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_Bandwidth struct {
	Mandatory NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_Bandwidth_Mandatory_Union `path:"mandatory" module:"nokia-conf"`
	Total     NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_Bandwidth_Total_Union     `path:"total" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_Bandwidth) IsYANGGoStruct() {}

// GetMandatory retrieves the value of the leaf Mandatory from the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mandatory is set, it can
// safely use t.GetMandatory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mandatory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_Bandwidth) GetMandatory() NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_Bandwidth_Mandatory_Union {
	if t == nil || t.Mandatory == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Mandatory
}

// GetTotal retrieves the value of the leaf Total from the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Total is set, it can
// safely use t.GetTotal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Total == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_Bandwidth) GetTotal() NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_Bandwidth_Total_Union {
	if t == nil || t.Total == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Total
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_Bandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_Bandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mandatory == nil {
		t.Mandatory = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	if t.Total == nil {
		t.Total = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_Bandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_Bandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_Bandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_Bandwidth.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_Bandwidth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints represents the /nokia-conf/configure/groups/group/router/igmp/interface/mcac/mc-constraints YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints struct {
	Level            map[NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level_LevelId_Union]*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level                     `path:"level" module:"nokia-conf"`
	NumberDown       map[NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union]*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown `path:"number-down" module:"nokia-conf"`
	UseLagPortWeight *bool                                                                                                                                                                                                  `path:"use-lag-port-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints) IsYANGGoStruct() {}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints) NewLevel(LevelId NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level_LevelId_Union) (*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level_LevelId_Union]*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level)
	}

	key := LevelId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level{
		LevelId: LevelId,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints) RenameLevel(oldK, newK NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level_LevelId_Union) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.LevelId = newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints) GetOrCreateLevel(LevelId NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level_LevelId_Union) *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level {

	key := LevelId

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(LevelId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints) GetLevel(LevelId NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level_LevelId_Union) *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level {

	if t == nil {
		return nil
	}

	key := LevelId

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints) DeleteLevel(LevelId NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level_LevelId_Union) {
	key := LevelId

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level struct to the
// list Level of NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints) AppendLevel(v *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level) error {
	key := v.LevelId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level_LevelId_Union]*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// NewNumberDown creates a new entry in the NumberDown list of the
// NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints) NewNumberDown(NumberLagPortDown NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union) (*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NumberDown == nil {
		t.NumberDown = make(map[NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union]*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown)
	}

	key := NumberLagPortDown

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NumberDown[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NumberDown", key)
	}

	t.NumberDown[key] = &NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown{
		NumberLagPortDown: NumberLagPortDown,
	}

	return t.NumberDown[key], nil
}

// RenameNumberDown renames an entry in the list NumberDown within
// the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints) RenameNumberDown(oldK, newK NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union) error {
	if _, ok := t.NumberDown[newK]; ok {
		return fmt.Errorf("key %v already exists in NumberDown", newK)
	}

	e, ok := t.NumberDown[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NumberDown", oldK)
	}
	e.NumberLagPortDown = newK

	t.NumberDown[newK] = e
	delete(t.NumberDown, oldK)
	return nil
}

// GetOrCreateNumberDown retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints) GetOrCreateNumberDown(NumberLagPortDown NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union) *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown {

	key := NumberLagPortDown

	if v, ok := t.NumberDown[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNumberDown(NumberLagPortDown)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNumberDown got unexpected error: %v", err))
	}
	return v
}

// GetNumberDown retrieves the value with the specified key from
// the NumberDown map field of NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints) GetNumberDown(NumberLagPortDown NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union) *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown {

	if t == nil {
		return nil
	}

	key := NumberLagPortDown

	if lm, ok := t.NumberDown[key]; ok {
		return lm
	}
	return nil
}

// DeleteNumberDown deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints) DeleteNumberDown(NumberLagPortDown NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union) {
	key := NumberLagPortDown

	delete(t.NumberDown, key)
}

// AppendNumberDown appends the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown struct to the
// list NumberDown of NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints) AppendNumberDown(v *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown) error {
	key := v.NumberLagPortDown

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NumberDown == nil {
		t.NumberDown = make(map[NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union]*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown)
	}

	if _, ok := t.NumberDown[key]; ok {
		return fmt.Errorf("duplicate key for list NumberDown %v", key)
	}

	t.NumberDown[key] = v
	return nil
}

// GetUseLagPortWeight retrieves the value of the leaf UseLagPortWeight from the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseLagPortWeight is set, it can
// safely use t.GetUseLagPortWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseLagPortWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints) GetUseLagPortWeight() bool {
	if t == nil || t.UseLagPortWeight == nil {
		return false
	}
	return *t.UseLagPortWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UseLagPortWeight == nil {
		var v bool = false
		t.UseLagPortWeight = &v
	}
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
	for _, e := range t.NumberDown {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level represents the /nokia-conf/configure/groups/group/router/igmp/interface/mcac/mc-constraints/level YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level struct {
	Bandwidth *uint32                                                                                       `path:"bandwidth" module:"nokia-conf"`
	LevelId   NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level_LevelId_Union `path:"level-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level) IsYANGGoStruct() {
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level) GetBandwidth() uint32 {
	if t == nil || t.Bandwidth == nil {
		return 0
	}
	return *t.Bandwidth
}

// GetLevelId retrieves the value of the leaf LevelId from the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelId is set, it can
// safely use t.GetLevelId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level) GetLevelId() NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level_LevelId_Union {
	if t == nil || t.LevelId == nil {
		return nil
	}
	return t.LevelId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"level-id": t.LevelId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown represents the /nokia-conf/configure/groups/group/router/igmp/interface/mcac/mc-constraints/number-down YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown struct {
	Level             *uint32                                                                                                      `path:"level" module:"nokia-conf"`
	NumberLagPortDown NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union `path:"number-lag-port-down" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown) IsYANGGoStruct() {
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown) GetLevel() uint32 {
	if t == nil || t.Level == nil {
		return 0
	}
	return *t.Level
}

// GetNumberLagPortDown retrieves the value of the leaf NumberLagPortDown from the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NumberLagPortDown is set, it can
// safely use t.GetNumberLagPortDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NumberLagPortDown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown) GetNumberLagPortDown() NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union {
	if t == nil || t.NumberLagPortDown == nil {
		return nil
	}
	return t.NumberLagPortDown
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"number-lag-port-down": t.NumberLagPortDown,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Mcac_McConstraints_NumberDown) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate represents the /nokia-conf/configure/groups/group/router/igmp/interface/ssm-translate YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate struct {
	GroupRange map[NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange `path:"group-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange_Key represents the key for list GroupRange of element /nokia-conf/configure/groups/group/router/igmp/interface/ssm-translate.
type NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// NewGroupRange creates a new entry in the GroupRange list of the
// NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate) NewGroupRange(Start string, End string) (*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange)
	}

	key := NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange{
		Start: &Start,
		End:   &End,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate) RenameGroupRange(oldK, newK NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange_Key) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate) GetOrCreateGroupRange(Start string, End string) *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange {

	key := NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate) GetGroupRange(Start string, End string) *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate) DeleteGroupRange(Start string, End string) {
	key := NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange struct to the
// list GroupRange of NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate) AppendGroupRange(v *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange represents the /nokia-conf/configure/groups/group/router/igmp/interface/ssm-translate/group-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange struct {
	End    *string                                                                                           `path:"end" module:"nokia-conf"`
	Source map[string]*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange_Source `path:"source" module:"nokia-conf"`
	Start  *string                                                                                           `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange) IsYANGGoStruct() {
}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange) NewSource(SourceAddress string) (*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange) GetSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange_Source struct to the
// list Source of NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange) AppendSource(v *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange_Source represents the /nokia-conf/configure/groups/group/router/igmp/interface/ssm-translate/group-range/source YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange_Source) IsYANGGoStruct() {
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange_Source.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_SsmTranslate_GroupRange_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static represents the /nokia-conf/configure/groups/group/router/igmp/interface/static YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static struct {
	Group      map[string]*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group                                                                            `path:"group" module:"nokia-conf"`
	GroupRange map[NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange_Key]*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange `path:"group-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange_Key represents the key for list GroupRange of element /nokia-conf/configure/groups/group/router/igmp/interface/static.
type NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
	Step  string `path:"step"`
}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static) NewGroup(GroupAddress string) (*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group)
	}

	key := GroupAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group{
		GroupAddress: &GroupAddress,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupAddress = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static) GetOrCreateGroup(GroupAddress string) *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group {

	key := GroupAddress

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static) GetGroup(GroupAddress string) *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group {

	if t == nil {
		return nil
	}

	key := GroupAddress

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static) DeleteGroup(GroupAddress string) {
	key := GroupAddress

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group struct to the
// list Group of NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static) AppendGroup(v *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group) error {
	if v.GroupAddress == nil {
		return fmt.Errorf("invalid nil key received for GroupAddress")
	}

	key := *v.GroupAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// NewGroupRange creates a new entry in the GroupRange list of the
// NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static) NewGroupRange(Start string, End string, Step string) (*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange_Key]*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange)
	}

	key := NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange_Key{
		Start: Start,
		End:   End,
		Step:  Step,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange{
		Start: &Start,
		End:   &End,
		Step:  &Step,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static) RenameGroupRange(oldK, newK NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange_Key) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End
	e.Step = &newK.Step

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static) GetOrCreateGroupRange(Start string, End string, Step string) *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange {

	key := NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange_Key{
		Start: Start,
		End:   End,
		Step:  Step,
	}

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Start, End, Step)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static) GetGroupRange(Start string, End string, Step string) *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange_Key{
		Start: Start,
		End:   End,
		Step:  Step,
	}

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static) DeleteGroupRange(Start string, End string, Step string) {
	key := NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange_Key{
		Start: Start,
		End:   End,
		Step:  Step,
	}

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange struct to the
// list GroupRange of NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static) AppendGroupRange(v *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	if v.Step == nil {
		return fmt.Errorf("invalid nil key for Step")
	}

	key := NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange_Key{
		Start: *v.Start,
		End:   *v.End,
		Step:  *v.Step,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange_Key]*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group represents the /nokia-conf/configure/groups/group/router/igmp/interface/static/group YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group struct {
	GroupAddress *string                                                                                `path:"group-address" module:"nokia-conf"`
	Source       map[string]*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group_Source `path:"source" module:"nokia-conf"`
	Starg        YANGEmpty                                                                              `path:"starg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group) IsYANGGoStruct() {}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group) NewSource(SourceAddress string) (*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group) GetSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group_Source struct to the
// list Source of NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group) AppendSource(v *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetStarg retrieves the value of the leaf Starg from the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group) GetStarg() YANGEmpty {
	if t == nil || t.Starg == false {
		return false
	}
	return t.Starg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupAddress == nil {
		return nil, fmt.Errorf("nil value for key GroupAddress")
	}

	return map[string]interface{}{
		"group-address": *t.GroupAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange represents the /nokia-conf/configure/groups/group/router/igmp/interface/static/group-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange struct {
	End    *string                                                                                     `path:"end" module:"nokia-conf"`
	Source map[string]*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange_Source `path:"source" module:"nokia-conf"`
	Starg  YANGEmpty                                                                                   `path:"starg" module:"nokia-conf"`
	Start  *string                                                                                     `path:"start" module:"nokia-conf"`
	Step   *string                                                                                     `path:"step" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange) IsYANGGoStruct() {}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange) NewSource(SourceAddress string) (*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange) GetSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange_Source struct to the
// list Source of NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange) AppendSource(v *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStarg retrieves the value of the leaf Starg from the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange) GetStarg() YANGEmpty {
	if t == nil || t.Starg == false {
		return false
	}
	return t.Starg
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// GetStep retrieves the value of the leaf Step from the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Step is set, it can
// safely use t.GetStep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Step == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange) GetStep() string {
	if t == nil || t.Step == nil {
		return ""
	}
	return *t.Step
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	if t.Step == nil {
		return nil, fmt.Errorf("nil value for key Step")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
		"step":  *t.Step,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange_Source represents the /nokia-conf/configure/groups/group/router/igmp/interface/static/group-range/source YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange_Source) IsYANGGoStruct() {
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange_Source.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_GroupRange_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group_Source represents the /nokia-conf/configure/groups/group/router/igmp/interface/static/group/source YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group_Source) IsYANGGoStruct() {}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group_Source.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_Interface_Static_Group_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate represents the /nokia-conf/configure/groups/group/router/igmp/ssm-translate YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate struct {
	GroupRange map[NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange `path:"group-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange_Key represents the key for list GroupRange of element /nokia-conf/configure/groups/group/router/igmp/ssm-translate.
type NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// NewGroupRange creates a new entry in the GroupRange list of the
// NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate) NewGroupRange(Start string, End string) (*NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange)
	}

	key := NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange{
		Start: &Start,
		End:   &End,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate) RenameGroupRange(oldK, newK NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange_Key) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate) GetOrCreateGroupRange(Start string, End string) *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange {

	key := NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate) GetGroupRange(Start string, End string) *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate) DeleteGroupRange(Start string, End string) {
	key := NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange struct to the
// list GroupRange of NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate) AppendGroupRange(v *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange represents the /nokia-conf/configure/groups/group/router/igmp/ssm-translate/group-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange struct {
	End    *string                                                                                 `path:"end" module:"nokia-conf"`
	Source map[string]*NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange_Source `path:"source" module:"nokia-conf"`
	Start  *string                                                                                 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange) IsYANGGoStruct() {}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange) NewSource(SourceAddress string) (*NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange) GetSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange_Source struct to the
// list Source of NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange) AppendSource(v *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange_Source represents the /nokia-conf/configure/groups/group/router/igmp/ssm-translate/group-range/source YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange_Source) IsYANGGoStruct() {
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange_Source.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_SsmTranslate_GroupRange_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface represents the /nokia-conf/configure/groups/group/router/igmp/tunnel-interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface struct {
	LdpP2MpRoot  map[NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Key]*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot `path:"ldp-p2mp-root" module:"nokia-conf"`
	RsvpP2MpRoot map[string]*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot                                                                      `path:"rsvp-p2mp-root" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Key represents the key for list LdpP2MpRoot of element /nokia-conf/configure/groups/group/router/igmp/tunnel-interface.
type NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Key struct {
	P2MpId        NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_P2MpId_Union `path:"p2mp-id"`
	SenderAddress string                                                                                `path:"sender-address"`
}

// NewLdpP2MpRoot creates a new entry in the LdpP2MpRoot list of the
// NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface) NewLdpP2MpRoot(P2MpId NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_P2MpId_Union, SenderAddress string) (*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LdpP2MpRoot == nil {
		t.LdpP2MpRoot = make(map[NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Key]*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot)
	}

	key := NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Key{
		P2MpId:        P2MpId,
		SenderAddress: SenderAddress,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LdpP2MpRoot[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LdpP2MpRoot", key)
	}

	t.LdpP2MpRoot[key] = &NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot{
		P2MpId:        P2MpId,
		SenderAddress: &SenderAddress,
	}

	return t.LdpP2MpRoot[key], nil
}

// RenameLdpP2MpRoot renames an entry in the list LdpP2MpRoot within
// the NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface) RenameLdpP2MpRoot(oldK, newK NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Key) error {
	if _, ok := t.LdpP2MpRoot[newK]; ok {
		return fmt.Errorf("key %v already exists in LdpP2MpRoot", newK)
	}

	e, ok := t.LdpP2MpRoot[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LdpP2MpRoot", oldK)
	}
	e.P2MpId = newK.P2MpId
	e.SenderAddress = &newK.SenderAddress

	t.LdpP2MpRoot[newK] = e
	delete(t.LdpP2MpRoot, oldK)
	return nil
}

// GetOrCreateLdpP2MpRoot retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface) GetOrCreateLdpP2MpRoot(P2MpId NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_P2MpId_Union, SenderAddress string) *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot {

	key := NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Key{
		P2MpId:        P2MpId,
		SenderAddress: SenderAddress,
	}

	if v, ok := t.LdpP2MpRoot[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLdpP2MpRoot(P2MpId, SenderAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLdpP2MpRoot got unexpected error: %v", err))
	}
	return v
}

// GetLdpP2MpRoot retrieves the value with the specified key from
// the LdpP2MpRoot map field of NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface) GetLdpP2MpRoot(P2MpId NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_P2MpId_Union, SenderAddress string) *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Key{
		P2MpId:        P2MpId,
		SenderAddress: SenderAddress,
	}

	if lm, ok := t.LdpP2MpRoot[key]; ok {
		return lm
	}
	return nil
}

// DeleteLdpP2MpRoot deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface) DeleteLdpP2MpRoot(P2MpId NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_P2MpId_Union, SenderAddress string) {
	key := NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Key{
		P2MpId:        P2MpId,
		SenderAddress: SenderAddress,
	}

	delete(t.LdpP2MpRoot, key)
}

// AppendLdpP2MpRoot appends the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot struct to the
// list LdpP2MpRoot of NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface) AppendLdpP2MpRoot(v *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot) error {
	if v.SenderAddress == nil {
		return fmt.Errorf("invalid nil key for SenderAddress")
	}

	key := NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Key{
		P2MpId:        v.P2MpId,
		SenderAddress: *v.SenderAddress,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LdpP2MpRoot == nil {
		t.LdpP2MpRoot = make(map[NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Key]*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot)
	}

	if _, ok := t.LdpP2MpRoot[key]; ok {
		return fmt.Errorf("duplicate key for list LdpP2MpRoot %v", key)
	}

	t.LdpP2MpRoot[key] = v
	return nil
}

// NewRsvpP2MpRoot creates a new entry in the RsvpP2MpRoot list of the
// NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface) NewRsvpP2MpRoot(LspName string) (*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RsvpP2MpRoot == nil {
		t.RsvpP2MpRoot = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot)
	}

	key := LspName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RsvpP2MpRoot[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RsvpP2MpRoot", key)
	}

	t.RsvpP2MpRoot[key] = &NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot{
		LspName: &LspName,
	}

	return t.RsvpP2MpRoot[key], nil
}

// RenameRsvpP2MpRoot renames an entry in the list RsvpP2MpRoot within
// the NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface) RenameRsvpP2MpRoot(oldK, newK string) error {
	if _, ok := t.RsvpP2MpRoot[newK]; ok {
		return fmt.Errorf("key %v already exists in RsvpP2MpRoot", newK)
	}

	e, ok := t.RsvpP2MpRoot[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RsvpP2MpRoot", oldK)
	}
	e.LspName = &newK

	t.RsvpP2MpRoot[newK] = e
	delete(t.RsvpP2MpRoot, oldK)
	return nil
}

// GetOrCreateRsvpP2MpRoot retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface) GetOrCreateRsvpP2MpRoot(LspName string) *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot {

	key := LspName

	if v, ok := t.RsvpP2MpRoot[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRsvpP2MpRoot(LspName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRsvpP2MpRoot got unexpected error: %v", err))
	}
	return v
}

// GetRsvpP2MpRoot retrieves the value with the specified key from
// the RsvpP2MpRoot map field of NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface) GetRsvpP2MpRoot(LspName string) *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot {

	if t == nil {
		return nil
	}

	key := LspName

	if lm, ok := t.RsvpP2MpRoot[key]; ok {
		return lm
	}
	return nil
}

// DeleteRsvpP2MpRoot deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface) DeleteRsvpP2MpRoot(LspName string) {
	key := LspName

	delete(t.RsvpP2MpRoot, key)
}

// AppendRsvpP2MpRoot appends the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot struct to the
// list RsvpP2MpRoot of NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface) AppendRsvpP2MpRoot(v *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot) error {
	if v.LspName == nil {
		return fmt.Errorf("invalid nil key received for LspName")
	}

	key := *v.LspName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RsvpP2MpRoot == nil {
		t.RsvpP2MpRoot = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot)
	}

	if _, ok := t.RsvpP2MpRoot[key]; ok {
		return fmt.Errorf("duplicate key for list RsvpP2MpRoot %v", key)
	}

	t.RsvpP2MpRoot[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.LdpP2MpRoot {
		e.PopulateDefaults()
	}
	for _, e := range t.RsvpP2MpRoot {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot represents the /nokia-conf/configure/groups/group/router/igmp/tunnel-interface/ldp-p2mp-root YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot struct {
	AdminState    E_NokiaTypesSros_AdminState                                                           `path:"admin-state" module:"nokia-conf"`
	P2MpId        NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_P2MpId_Union `path:"p2mp-id" module:"nokia-conf"`
	SenderAddress *string                                                                               `path:"sender-address" module:"nokia-conf"`
	Static        *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static      `path:"static" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot) IsYANGGoStruct() {}

// GetOrCreateStatic retrieves the value of the Static field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot) GetOrCreateStatic() *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static {
	if t.Static != nil {
		return t.Static
	}
	t.Static = &NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static{}
	return t.Static
}

// GetStatic returns the value of the Static struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot. If the receiver or the field Static is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot) GetStatic() *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static {
	if t != nil && t.Static != nil {
		return t.Static
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetP2MpId retrieves the value of the leaf P2MpId from the NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if P2MpId is set, it can
// safely use t.GetP2MpId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.P2MpId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot) GetP2MpId() NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_P2MpId_Union {
	if t == nil || t.P2MpId == nil {
		return nil
	}
	return t.P2MpId
}

// GetSenderAddress retrieves the value of the leaf SenderAddress from the NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SenderAddress is set, it can
// safely use t.GetSenderAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SenderAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot) GetSenderAddress() string {
	if t == nil || t.SenderAddress == nil {
		return ""
	}
	return *t.SenderAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	t.Static.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot) ΛListKeyMap() (map[string]interface{}, error) {

	if t.SenderAddress == nil {
		return nil, fmt.Errorf("nil value for key SenderAddress")
	}

	return map[string]interface{}{
		"p2mp-id":        t.P2MpId,
		"sender-address": *t.SenderAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static represents the /nokia-conf/configure/groups/group/router/igmp/tunnel-interface/ldp-p2mp-root/static YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static struct {
	Group map[string]*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group `path:"group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static) IsYANGGoStruct() {
}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static) NewGroup(GroupAddress string) (*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group)
	}

	key := GroupAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group{
		GroupAddress: &GroupAddress,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupAddress = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static) GetOrCreateGroup(GroupAddress string) *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group {

	key := GroupAddress

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static) GetGroup(GroupAddress string) *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group {

	if t == nil {
		return nil
	}

	key := GroupAddress

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static) DeleteGroup(GroupAddress string) {
	key := GroupAddress

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group struct to the
// list Group of NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static) AppendGroup(v *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group) error {
	if v.GroupAddress == nil {
		return fmt.Errorf("invalid nil key received for GroupAddress")
	}

	key := *v.GroupAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group represents the /nokia-conf/configure/groups/group/router/igmp/tunnel-interface/ldp-p2mp-root/static/group YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group struct {
	GroupAddress *string                                                                                                  `path:"group-address" module:"nokia-conf"`
	Source       map[string]*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source `path:"source" module:"nokia-conf"`
	Starg        YANGEmpty                                                                                                `path:"starg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group) IsYANGGoStruct() {
}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group) NewSource(SourceAddress string) (*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group) GetSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source struct to the
// list Source of NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group) AppendSource(v *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetStarg retrieves the value of the leaf Starg from the NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group) GetStarg() YANGEmpty {
	if t == nil || t.Starg == false {
		return false
	}
	return t.Starg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupAddress == nil {
		return nil, fmt.Errorf("nil value for key GroupAddress")
	}

	return map[string]interface{}{
		"group-address": *t.GroupAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source represents the /nokia-conf/configure/groups/group/router/igmp/tunnel-interface/ldp-p2mp-root/static/group/source YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source) IsYANGGoStruct() {
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_LdpP2MpRoot_Static_Group_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot represents the /nokia-conf/configure/groups/group/router/igmp/tunnel-interface/rsvp-p2mp-root YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot struct {
	AdminState E_NokiaTypesSros_AdminState                                                       `path:"admin-state" module:"nokia-conf"`
	LspName    *string                                                                           `path:"lsp-name" module:"nokia-conf"`
	Static     *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static `path:"static" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot) IsYANGGoStruct() {}

// GetOrCreateStatic retrieves the value of the Static field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot) GetOrCreateStatic() *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static {
	if t.Static != nil {
		return t.Static
	}
	t.Static = &NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static{}
	return t.Static
}

// GetStatic returns the value of the Static struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot. If the receiver or the field Static is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot) GetStatic() *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static {
	if t != nil && t.Static != nil {
		return t.Static
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetLspName retrieves the value of the leaf LspName from the NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspName is set, it can
// safely use t.GetLspName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot) GetLspName() string {
	if t == nil || t.LspName == nil {
		return ""
	}
	return *t.LspName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	t.Static.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LspName == nil {
		return nil, fmt.Errorf("nil value for key LspName")
	}

	return map[string]interface{}{
		"lsp-name": *t.LspName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static represents the /nokia-conf/configure/groups/group/router/igmp/tunnel-interface/rsvp-p2mp-root/static YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static struct {
	Group map[string]*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group `path:"group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static) IsYANGGoStruct() {
}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static) NewGroup(GroupAddress string) (*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group)
	}

	key := GroupAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group{
		GroupAddress: &GroupAddress,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupAddress = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static) GetOrCreateGroup(GroupAddress string) *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group {

	key := GroupAddress

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static) GetGroup(GroupAddress string) *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group {

	if t == nil {
		return nil
	}

	key := GroupAddress

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static) DeleteGroup(GroupAddress string) {
	key := GroupAddress

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group struct to the
// list Group of NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static) AppendGroup(v *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group) error {
	if v.GroupAddress == nil {
		return fmt.Errorf("invalid nil key received for GroupAddress")
	}

	key := *v.GroupAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group represents the /nokia-conf/configure/groups/group/router/igmp/tunnel-interface/rsvp-p2mp-root/static/group YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group struct {
	GroupAddress *string                                                                                                   `path:"group-address" module:"nokia-conf"`
	Source       map[string]*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source `path:"source" module:"nokia-conf"`
	Starg        YANGEmpty                                                                                                 `path:"starg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group) IsYANGGoStruct() {
}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group) NewSource(SourceAddress string) (*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group) GetSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source struct to the
// list Source of NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group) AppendSource(v *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetStarg retrieves the value of the leaf Starg from the NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group) GetStarg() YANGEmpty {
	if t == nil || t.Starg == false {
		return false
	}
	return t.Starg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupAddress == nil {
		return nil, fmt.Errorf("nil value for key GroupAddress")
	}

	return map[string]interface{}{
		"group-address": *t.GroupAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source represents the /nokia-conf/configure/groups/group/router/igmp/tunnel-interface/rsvp-p2mp-root/static/group/source YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source) IsYANGGoStruct() {
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source.
func (*NokiaConf_Configure_Groups_Group_Router_Igmp_TunnelInterface_RsvpP2MpRoot_Static_Group_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface represents the /nokia-conf/configure/groups/group/router/interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface struct {
	AccountingPolicy  *uint32                                                             `path:"accounting-policy" module:"nokia-conf"`
	AdminState        E_NokiaTypesSros_AdminState                                         `path:"admin-state" module:"nokia-conf"`
	Autoconfigure     *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure    `path:"autoconfigure" module:"nokia-conf"`
	CflowdParameters  *NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters `path:"cflowd-parameters" module:"nokia-conf"`
	CollectStats      *bool                                                               `path:"collect-stats" module:"nokia-conf"`
	CpuProtection     *uint32                                                             `path:"cpu-protection" module:"nokia-conf"`
	Description       *string                                                             `path:"description" module:"nokia-conf"`
	DistCpuProtection *string                                                             `path:"dist-cpu-protection" module:"nokia-conf"`
	Egress            *NokiaConf_Configure_Groups_Group_Router_Interface_Egress           `path:"egress" module:"nokia-conf"`
	EthCfm            *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm           `path:"eth-cfm" module:"nokia-conf"`
	Flavor            E_NokiaConf_Configure_Groups_Group_Router_Interface_Flavor          `path:"flavor" module:"nokia-conf"`
	GreTermination    *bool                                                               `path:"gre-termination" module:"nokia-conf"`
	HoldTime          *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime         `path:"hold-time" module:"nokia-conf"`
	IfAttribute       *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute      `path:"if-attribute" module:"nokia-conf"`
	Ingress           *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress          `path:"ingress" module:"nokia-conf"`
	IngressStats      *bool                                                               `path:"ingress-stats" module:"nokia-conf"`
	InterfaceName     *string                                                             `path:"interface-name" module:"nokia-conf"`
	IpMtu             *uint32                                                             `path:"ip-mtu" module:"nokia-conf"`
	IpTunnel          *NokiaConf_Configure_Groups_Group_Router_Interface_IpTunnel         `path:"ip-tunnel" module:"nokia-conf"`
	Ipv4              *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4             `path:"ipv4" module:"nokia-conf"`
	Ipv6              *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6             `path:"ipv6" module:"nokia-conf" yangPresence:"true"`
	Lag               *NokiaConf_Configure_Groups_Group_Router_Interface_Lag              `path:"lag" module:"nokia-conf"`
	LdpSyncTimer      *NokiaConf_Configure_Groups_Group_Router_Interface_LdpSyncTimer     `path:"ldp-sync-timer" module:"nokia-conf"`
	LoadBalancing     *NokiaConf_Configure_Groups_Group_Router_Interface_LoadBalancing    `path:"load-balancing" module:"nokia-conf"`
	Loopback          YANGEmpty                                                           `path:"loopback" module:"nokia-conf"`
	Mac               *string                                                             `path:"mac" module:"nokia-conf"`
	MacAccounting     *bool                                                               `path:"mac-accounting" module:"nokia-conf"`
	NetworkDomains    *NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains   `path:"network-domains" module:"nokia-conf"`
	Port              NokiaConf_Configure_Groups_Group_Router_Interface_Port_Union        `path:"port" module:"nokia-conf"`
	PtpHwAssist       *NokiaConf_Configure_Groups_Group_Router_Interface_PtpHwAssist      `path:"ptp-hw-assist" module:"nokia-conf" yangPresence:"true"`
	Qos               *NokiaConf_Configure_Groups_Group_Router_Interface_Qos              `path:"qos" module:"nokia-conf" yangPresence:"true"`
	StripLabel        *bool                                                               `path:"strip-label" module:"nokia-conf"`
	TosMarkingState   E_NokiaTypesRouter_TosMarkingState                                  `path:"tos-marking-state" module:"nokia-conf"`
	Untrusted         *NokiaConf_Configure_Groups_Group_Router_Interface_Untrusted        `path:"untrusted" module:"nokia-conf" yangPresence:"true"`
	UrpfSelectedVprns *bool                                                               `path:"urpf-selected-vprns" module:"nokia-conf"`
	VasIfType         E_NokiaTypesRouter_VasIfType                                        `path:"vas-if-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface) IsYANGGoStruct() {}

// GetOrCreateAutoconfigure retrieves the value of the Autoconfigure field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetOrCreateAutoconfigure() *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure {
	if t.Autoconfigure != nil {
		return t.Autoconfigure
	}
	t.Autoconfigure = &NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure{}
	return t.Autoconfigure
}

// GetOrCreateCflowdParameters retrieves the value of the CflowdParameters field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetOrCreateCflowdParameters() *NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters {
	if t.CflowdParameters != nil {
		return t.CflowdParameters
	}
	t.CflowdParameters = &NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters{}
	return t.CflowdParameters
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_Router_Interface_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_Router_Interface_Egress{}
	return t.Egress
}

// GetOrCreateEthCfm retrieves the value of the EthCfm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetOrCreateEthCfm() *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm {
	if t.EthCfm != nil {
		return t.EthCfm
	}
	t.EthCfm = &NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm{}
	return t.EthCfm
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetOrCreateHoldTime() *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime{}
	return t.HoldTime
}

// GetOrCreateIfAttribute retrieves the value of the IfAttribute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetOrCreateIfAttribute() *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute {
	if t.IfAttribute != nil {
		return t.IfAttribute
	}
	t.IfAttribute = &NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute{}
	return t.IfAttribute
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_Router_Interface_Ingress{}
	return t.Ingress
}

// GetOrCreateIpTunnel retrieves the value of the IpTunnel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetOrCreateIpTunnel() *NokiaConf_Configure_Groups_Group_Router_Interface_IpTunnel {
	if t.IpTunnel != nil {
		return t.IpTunnel
	}
	t.IpTunnel = &NokiaConf_Configure_Groups_Group_Router_Interface_IpTunnel{}
	return t.IpTunnel
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetOrCreateIpv6() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6{}
	return t.Ipv6
}

// GetOrCreateLag retrieves the value of the Lag field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetOrCreateLag() *NokiaConf_Configure_Groups_Group_Router_Interface_Lag {
	if t.Lag != nil {
		return t.Lag
	}
	t.Lag = &NokiaConf_Configure_Groups_Group_Router_Interface_Lag{}
	return t.Lag
}

// GetOrCreateLdpSyncTimer retrieves the value of the LdpSyncTimer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetOrCreateLdpSyncTimer() *NokiaConf_Configure_Groups_Group_Router_Interface_LdpSyncTimer {
	if t.LdpSyncTimer != nil {
		return t.LdpSyncTimer
	}
	t.LdpSyncTimer = &NokiaConf_Configure_Groups_Group_Router_Interface_LdpSyncTimer{}
	return t.LdpSyncTimer
}

// GetOrCreateLoadBalancing retrieves the value of the LoadBalancing field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetOrCreateLoadBalancing() *NokiaConf_Configure_Groups_Group_Router_Interface_LoadBalancing {
	if t.LoadBalancing != nil {
		return t.LoadBalancing
	}
	t.LoadBalancing = &NokiaConf_Configure_Groups_Group_Router_Interface_LoadBalancing{}
	return t.LoadBalancing
}

// GetOrCreateNetworkDomains retrieves the value of the NetworkDomains field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetOrCreateNetworkDomains() *NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains {
	if t.NetworkDomains != nil {
		return t.NetworkDomains
	}
	t.NetworkDomains = &NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains{}
	return t.NetworkDomains
}

// GetOrCreatePtpHwAssist retrieves the value of the PtpHwAssist field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetOrCreatePtpHwAssist() *NokiaConf_Configure_Groups_Group_Router_Interface_PtpHwAssist {
	if t.PtpHwAssist != nil {
		return t.PtpHwAssist
	}
	t.PtpHwAssist = &NokiaConf_Configure_Groups_Group_Router_Interface_PtpHwAssist{}
	return t.PtpHwAssist
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_Router_Interface_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_Router_Interface_Qos{}
	return t.Qos
}

// GetOrCreateUntrusted retrieves the value of the Untrusted field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetOrCreateUntrusted() *NokiaConf_Configure_Groups_Group_Router_Interface_Untrusted {
	if t.Untrusted != nil {
		return t.Untrusted
	}
	t.Untrusted = &NokiaConf_Configure_Groups_Group_Router_Interface_Untrusted{}
	return t.Untrusted
}

// GetAutoconfigure returns the value of the Autoconfigure struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface. If the receiver or the field Autoconfigure is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetAutoconfigure() *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure {
	if t != nil && t.Autoconfigure != nil {
		return t.Autoconfigure
	}
	return nil
}

// GetCflowdParameters returns the value of the CflowdParameters struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface. If the receiver or the field CflowdParameters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetCflowdParameters() *NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters {
	if t != nil && t.CflowdParameters != nil {
		return t.CflowdParameters
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetEgress() *NokiaConf_Configure_Groups_Group_Router_Interface_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetEthCfm returns the value of the EthCfm struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface. If the receiver or the field EthCfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetEthCfm() *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm {
	if t != nil && t.EthCfm != nil {
		return t.EthCfm
	}
	return nil
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetHoldTime() *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetIfAttribute returns the value of the IfAttribute struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface. If the receiver or the field IfAttribute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetIfAttribute() *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute {
	if t != nil && t.IfAttribute != nil {
		return t.IfAttribute
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetIngress() *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetIpTunnel returns the value of the IpTunnel struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface. If the receiver or the field IpTunnel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetIpTunnel() *NokiaConf_Configure_Groups_Group_Router_Interface_IpTunnel {
	if t != nil && t.IpTunnel != nil {
		return t.IpTunnel
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetIpv4() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetIpv6() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetLag returns the value of the Lag struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface. If the receiver or the field Lag is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetLag() *NokiaConf_Configure_Groups_Group_Router_Interface_Lag {
	if t != nil && t.Lag != nil {
		return t.Lag
	}
	return nil
}

// GetLdpSyncTimer returns the value of the LdpSyncTimer struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface. If the receiver or the field LdpSyncTimer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetLdpSyncTimer() *NokiaConf_Configure_Groups_Group_Router_Interface_LdpSyncTimer {
	if t != nil && t.LdpSyncTimer != nil {
		return t.LdpSyncTimer
	}
	return nil
}

// GetLoadBalancing returns the value of the LoadBalancing struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface. If the receiver or the field LoadBalancing is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetLoadBalancing() *NokiaConf_Configure_Groups_Group_Router_Interface_LoadBalancing {
	if t != nil && t.LoadBalancing != nil {
		return t.LoadBalancing
	}
	return nil
}

// GetNetworkDomains returns the value of the NetworkDomains struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface. If the receiver or the field NetworkDomains is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetNetworkDomains() *NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains {
	if t != nil && t.NetworkDomains != nil {
		return t.NetworkDomains
	}
	return nil
}

// GetPtpHwAssist returns the value of the PtpHwAssist struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface. If the receiver or the field PtpHwAssist is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetPtpHwAssist() *NokiaConf_Configure_Groups_Group_Router_Interface_PtpHwAssist {
	if t != nil && t.PtpHwAssist != nil {
		return t.PtpHwAssist
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetQos() *NokiaConf_Configure_Groups_Group_Router_Interface_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetUntrusted returns the value of the Untrusted struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface. If the receiver or the field Untrusted is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetUntrusted() *NokiaConf_Configure_Groups_Group_Router_Interface_Untrusted {
	if t != nil && t.Untrusted != nil {
		return t.Untrusted
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetCpuProtection retrieves the value of the leaf CpuProtection from the NokiaConf_Configure_Groups_Group_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CpuProtection is set, it can
// safely use t.GetCpuProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CpuProtection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetCpuProtection() uint32 {
	if t == nil || t.CpuProtection == nil {
		return 0
	}
	return *t.CpuProtection
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDistCpuProtection retrieves the value of the leaf DistCpuProtection from the NokiaConf_Configure_Groups_Group_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DistCpuProtection is set, it can
// safely use t.GetDistCpuProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DistCpuProtection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetDistCpuProtection() string {
	if t == nil || t.DistCpuProtection == nil {
		return ""
	}
	return *t.DistCpuProtection
}

// GetFlavor retrieves the value of the leaf Flavor from the NokiaConf_Configure_Groups_Group_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flavor is set, it can
// safely use t.GetFlavor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flavor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetFlavor() E_NokiaConf_Configure_Groups_Group_Router_Interface_Flavor {
	if t == nil || t.Flavor == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Interface_Flavor_regular
	}
	return t.Flavor
}

// GetGreTermination retrieves the value of the leaf GreTermination from the NokiaConf_Configure_Groups_Group_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GreTermination is set, it can
// safely use t.GetGreTermination() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GreTermination == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetGreTermination() bool {
	if t == nil || t.GreTermination == nil {
		return false
	}
	return *t.GreTermination
}

// GetIngressStats retrieves the value of the leaf IngressStats from the NokiaConf_Configure_Groups_Group_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressStats is set, it can
// safely use t.GetIngressStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetIngressStats() bool {
	if t == nil || t.IngressStats == nil {
		return false
	}
	return *t.IngressStats
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetIpMtu retrieves the value of the leaf IpMtu from the NokiaConf_Configure_Groups_Group_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpMtu is set, it can
// safely use t.GetIpMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetIpMtu() uint32 {
	if t == nil || t.IpMtu == nil {
		return 0
	}
	return *t.IpMtu
}

// GetLoopback retrieves the value of the leaf Loopback from the NokiaConf_Configure_Groups_Group_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Loopback is set, it can
// safely use t.GetLoopback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Loopback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetLoopback() YANGEmpty {
	if t == nil || t.Loopback == false {
		return false
	}
	return t.Loopback
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// GetMacAccounting retrieves the value of the leaf MacAccounting from the NokiaConf_Configure_Groups_Group_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAccounting is set, it can
// safely use t.GetMacAccounting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAccounting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetMacAccounting() bool {
	if t == nil || t.MacAccounting == nil {
		return false
	}
	return *t.MacAccounting
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Groups_Group_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetPort() NokiaConf_Configure_Groups_Group_Router_Interface_Port_Union {
	if t == nil || t.Port == nil {
		return nil
	}
	return t.Port
}

// GetStripLabel retrieves the value of the leaf StripLabel from the NokiaConf_Configure_Groups_Group_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StripLabel is set, it can
// safely use t.GetStripLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StripLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetStripLabel() bool {
	if t == nil || t.StripLabel == nil {
		return false
	}
	return *t.StripLabel
}

// GetTosMarkingState retrieves the value of the leaf TosMarkingState from the NokiaConf_Configure_Groups_Group_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TosMarkingState is set, it can
// safely use t.GetTosMarkingState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TosMarkingState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetTosMarkingState() E_NokiaTypesRouter_TosMarkingState {
	if t == nil || t.TosMarkingState == 0 {
		return NokiaTypesRouter_TosMarkingState_trusted
	}
	return t.TosMarkingState
}

// GetUrpfSelectedVprns retrieves the value of the leaf UrpfSelectedVprns from the NokiaConf_Configure_Groups_Group_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UrpfSelectedVprns is set, it can
// safely use t.GetUrpfSelectedVprns() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UrpfSelectedVprns == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetUrpfSelectedVprns() bool {
	if t == nil || t.UrpfSelectedVprns == nil {
		return false
	}
	return *t.UrpfSelectedVprns
}

// GetVasIfType retrieves the value of the leaf VasIfType from the NokiaConf_Configure_Groups_Group_Router_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VasIfType is set, it can
// safely use t.GetVasIfType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VasIfType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) GetVasIfType() E_NokiaTypesRouter_VasIfType {
	if t == nil || t.VasIfType == 0 {
		return 0
	}
	return t.VasIfType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.Flavor == 0 {
		t.Flavor = NokiaConf_Configure_Groups_Group_Router_Interface_Flavor_regular
	}
	if t.GreTermination == nil {
		var v bool = false
		t.GreTermination = &v
	}
	if t.IngressStats == nil {
		var v bool = false
		t.IngressStats = &v
	}
	if t.MacAccounting == nil {
		var v bool = false
		t.MacAccounting = &v
	}
	if t.StripLabel == nil {
		var v bool = false
		t.StripLabel = &v
	}
	if t.TosMarkingState == 0 {
		t.TosMarkingState = NokiaTypesRouter_TosMarkingState_trusted
	}
	if t.UrpfSelectedVprns == nil {
		var v bool = false
		t.UrpfSelectedVprns = &v
	}
	t.Autoconfigure.PopulateDefaults()
	t.CflowdParameters.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.EthCfm.PopulateDefaults()
	t.HoldTime.PopulateDefaults()
	t.IfAttribute.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.IpTunnel.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	t.Lag.PopulateDefaults()
	t.LdpSyncTimer.PopulateDefaults()
	t.LoadBalancing.PopulateDefaults()
	t.NetworkDomains.PopulateDefaults()
	t.PtpHwAssist.PopulateDefaults()
	t.Qos.PopulateDefaults()
	t.Untrusted.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface.
func (*NokiaConf_Configure_Groups_Group_Router_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure represents the /nokia-conf/configure/groups/group/router/interface/autoconfigure YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure struct {
	Ipv4 *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4 `path:"ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4{}
	return t.Ipv4
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure) GetIpv4() *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4 represents the /nokia-conf/configure/groups/group/router/interface/autoconfigure/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4 struct {
	DhcpClient *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient `path:"dhcp-client" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4) IsYANGGoStruct() {}

// GetOrCreateDhcpClient retrieves the value of the DhcpClient field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4) GetOrCreateDhcpClient() *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient {
	if t.DhcpClient != nil {
		return t.DhcpClient
	}
	t.DhcpClient = &NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient{}
	return t.DhcpClient
}

// GetDhcpClient returns the value of the DhcpClient struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4. If the receiver or the field DhcpClient is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4) GetDhcpClient() *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient {
	if t != nil && t.DhcpClient != nil {
		return t.DhcpClient
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DhcpClient.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient represents the /nokia-conf/configure/groups/group/router/interface/autoconfigure/ipv4/dhcp-client YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient struct {
	AdminState     E_NokiaTypesSros_AdminState                                                                     `path:"admin-state" module:"nokia-conf"`
	ClassId        *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId        `path:"class-id" module:"nokia-conf"`
	ClientId       *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId       `path:"client-id" module:"nokia-conf"`
	LeaseTime      NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_LeaseTime_Union `path:"lease-time" module:"nokia-conf"`
	RequestOptions *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions `path:"request-options" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient) IsYANGGoStruct() {
}

// GetOrCreateClassId retrieves the value of the ClassId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient) GetOrCreateClassId() *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId {
	if t.ClassId != nil {
		return t.ClassId
	}
	t.ClassId = &NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId{}
	return t.ClassId
}

// GetOrCreateClientId retrieves the value of the ClientId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient) GetOrCreateClientId() *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId {
	if t.ClientId != nil {
		return t.ClientId
	}
	t.ClientId = &NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId{}
	return t.ClientId
}

// GetOrCreateRequestOptions retrieves the value of the RequestOptions field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient) GetOrCreateRequestOptions() *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions {
	if t.RequestOptions != nil {
		return t.RequestOptions
	}
	t.RequestOptions = &NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions{}
	return t.RequestOptions
}

// GetClassId returns the value of the ClassId struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient. If the receiver or the field ClassId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient) GetClassId() *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId {
	if t != nil && t.ClassId != nil {
		return t.ClassId
	}
	return nil
}

// GetClientId returns the value of the ClientId struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient. If the receiver or the field ClientId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient) GetClientId() *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId {
	if t != nil && t.ClientId != nil {
		return t.ClientId
	}
	return nil
}

// GetRequestOptions returns the value of the RequestOptions struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient. If the receiver or the field RequestOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient) GetRequestOptions() *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions {
	if t != nil && t.RequestOptions != nil {
		return t.RequestOptions
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetLeaseTime retrieves the value of the leaf LeaseTime from the NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LeaseTime is set, it can
// safely use t.GetLeaseTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LeaseTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient) GetLeaseTime() NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_LeaseTime_Union {
	if t == nil || t.LeaseTime == nil {
		return UnionUint32(86400)
	}
	return t.LeaseTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.LeaseTime == nil {
		t.LeaseTime = UnionUint32(86400)
	}
	t.ClassId.PopulateDefaults()
	t.ClientId.PopulateDefaults()
	t.RequestOptions.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId represents the /nokia-conf/configure/groups/group/router/interface/autoconfigure/ipv4/dhcp-client/class-id YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId struct {
	AsciiString *string `path:"ascii-string" module:"nokia-conf"`
	HexString   *string `path:"hex-string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId) IsYANGGoStruct() {
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClassId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId represents the /nokia-conf/configure/groups/group/router/interface/autoconfigure/ipv4/dhcp-client/client-id YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId struct {
	AsciiString *string   `path:"ascii-string" module:"nokia-conf"`
	HexString   *string   `path:"hex-string" module:"nokia-conf"`
	Interface   YANGEmpty `path:"interface" module:"nokia-conf"`
	Mac         YANGEmpty `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId) IsYANGGoStruct() {
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// GetInterface retrieves the value of the leaf Interface from the NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId) GetInterface() YANGEmpty {
	if t == nil || t.Interface == false {
		return false
	}
	return t.Interface
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId) GetMac() YANGEmpty {
	if t == nil || t.Mac == false {
		return false
	}
	return t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_ClientId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions represents the /nokia-conf/configure/groups/group/router/interface/autoconfigure/ipv4/dhcp-client/request-options YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions struct {
	DnsServer   *bool `path:"dns-server" module:"nokia-conf"`
	Router      *bool `path:"router" module:"nokia-conf"`
	StaticRoute *bool `path:"static-route" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions) IsYANGGoStruct() {
}

// GetDnsServer retrieves the value of the leaf DnsServer from the NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DnsServer is set, it can
// safely use t.GetDnsServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DnsServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions) GetDnsServer() bool {
	if t == nil || t.DnsServer == nil {
		return false
	}
	return *t.DnsServer
}

// GetRouter retrieves the value of the leaf Router from the NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Router is set, it can
// safely use t.GetRouter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Router == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions) GetRouter() bool {
	if t == nil || t.Router == nil {
		return false
	}
	return *t.Router
}

// GetStaticRoute retrieves the value of the leaf StaticRoute from the NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticRoute is set, it can
// safely use t.GetStaticRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticRoute == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions) GetStaticRoute() bool {
	if t == nil || t.StaticRoute == nil {
		return false
	}
	return *t.StaticRoute
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DnsServer == nil {
		var v bool = false
		t.DnsServer = &v
	}
	if t.Router == nil {
		var v bool = false
		t.Router = &v
	}
	if t.StaticRoute == nil {
		var v bool = false
		t.StaticRoute = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Autoconfigure_Ipv4_DhcpClient_RequestOptions) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters represents the /nokia-conf/configure/groups/group/router/interface/cflowd-parameters YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters struct {
	Sampling map[NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling_SamplingType_Union]*NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling `path:"sampling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters) IsYANGGoStruct() {}

// NewSampling creates a new entry in the Sampling list of the
// NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters) NewSampling(SamplingType NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling_SamplingType_Union) (*NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sampling == nil {
		t.Sampling = make(map[NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling_SamplingType_Union]*NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling)
	}

	key := SamplingType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sampling[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sampling", key)
	}

	t.Sampling[key] = &NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling{
		SamplingType: SamplingType,
	}

	return t.Sampling[key], nil
}

// RenameSampling renames an entry in the list Sampling within
// the NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters) RenameSampling(oldK, newK NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling_SamplingType_Union) error {
	if _, ok := t.Sampling[newK]; ok {
		return fmt.Errorf("key %v already exists in Sampling", newK)
	}

	e, ok := t.Sampling[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sampling", oldK)
	}
	e.SamplingType = newK

	t.Sampling[newK] = e
	delete(t.Sampling, oldK)
	return nil
}

// GetOrCreateSampling retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters) GetOrCreateSampling(SamplingType NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling_SamplingType_Union) *NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling {

	key := SamplingType

	if v, ok := t.Sampling[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSampling(SamplingType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSampling got unexpected error: %v", err))
	}
	return v
}

// GetSampling retrieves the value with the specified key from
// the Sampling map field of NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters) GetSampling(SamplingType NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling_SamplingType_Union) *NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling {

	if t == nil {
		return nil
	}

	key := SamplingType

	if lm, ok := t.Sampling[key]; ok {
		return lm
	}
	return nil
}

// DeleteSampling deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters) DeleteSampling(SamplingType NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling_SamplingType_Union) {
	key := SamplingType

	delete(t.Sampling, key)
}

// AppendSampling appends the supplied NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling struct to the
// list Sampling of NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters) AppendSampling(v *NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling) error {
	key := v.SamplingType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sampling == nil {
		t.Sampling = make(map[NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling_SamplingType_Union]*NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling)
	}

	if _, ok := t.Sampling[key]; ok {
		return fmt.Errorf("duplicate key for list Sampling %v", key)
	}

	t.Sampling[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Sampling {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling represents the /nokia-conf/configure/groups/group/router/interface/cflowd-parameters/sampling YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling struct {
	Direction     E_NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling_Direction         `path:"direction" module:"nokia-conf"`
	SampleProfile NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling_SampleProfile_Union `path:"sample-profile" module:"nokia-conf"`
	SamplingType  NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling_SamplingType_Union  `path:"sampling-type" module:"nokia-conf"`
	Type          E_NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling_Type              `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling) IsYANGGoStruct() {
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling) GetDirection() E_NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling_Direction {
	if t == nil || t.Direction == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling_Direction_ingress_only
	}
	return t.Direction
}

// GetSampleProfile retrieves the value of the leaf SampleProfile from the NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SampleProfile is set, it can
// safely use t.GetSampleProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SampleProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling) GetSampleProfile() NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling_SampleProfile_Union {
	if t == nil || t.SampleProfile == nil {
		return nil
	}
	return t.SampleProfile
}

// GetSamplingType retrieves the value of the leaf SamplingType from the NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SamplingType is set, it can
// safely use t.GetSamplingType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SamplingType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling) GetSamplingType() NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling_SamplingType_Union {
	if t == nil || t.SamplingType == nil {
		return nil
	}
	return t.SamplingType
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling) GetType() E_NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Direction == 0 {
		t.Direction = NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling_Direction_ingress_only
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"sampling-type": t.SamplingType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_CflowdParameters_Sampling) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Egress represents the /nokia-conf/configure/groups/group/router/interface/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Egress struct {
	Filter *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Filter `path:"filter" module:"nokia-conf"`
	Qos    *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos    `path:"qos" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Egress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress) GetOrCreateFilter() *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Egress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress) GetFilter() *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress) GetQos() *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Egress.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Filter represents the /nokia-conf/configure/groups/group/router/interface/egress/filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Filter.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos represents the /nokia-conf/configure/groups/group/router/interface/egress/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos struct {
	AggRate            *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate            `path:"agg-rate" module:"nokia-conf"`
	EgressRemarkPolicy *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_EgressRemarkPolicy `path:"egress-remark-policy" module:"nokia-conf"`
	VlanQosPolicy      *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_VlanQosPolicy      `path:"vlan-qos-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos) IsYANGGoStruct() {}

// GetOrCreateAggRate retrieves the value of the AggRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos) GetOrCreateAggRate() *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate {
	if t.AggRate != nil {
		return t.AggRate
	}
	t.AggRate = &NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate{}
	return t.AggRate
}

// GetOrCreateEgressRemarkPolicy retrieves the value of the EgressRemarkPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos) GetOrCreateEgressRemarkPolicy() *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_EgressRemarkPolicy {
	if t.EgressRemarkPolicy != nil {
		return t.EgressRemarkPolicy
	}
	t.EgressRemarkPolicy = &NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_EgressRemarkPolicy{}
	return t.EgressRemarkPolicy
}

// GetOrCreateVlanQosPolicy retrieves the value of the VlanQosPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos) GetOrCreateVlanQosPolicy() *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_VlanQosPolicy {
	if t.VlanQosPolicy != nil {
		return t.VlanQosPolicy
	}
	t.VlanQosPolicy = &NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_VlanQosPolicy{}
	return t.VlanQosPolicy
}

// GetAggRate returns the value of the AggRate struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos. If the receiver or the field AggRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos) GetAggRate() *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate {
	if t != nil && t.AggRate != nil {
		return t.AggRate
	}
	return nil
}

// GetEgressRemarkPolicy returns the value of the EgressRemarkPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos. If the receiver or the field EgressRemarkPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos) GetEgressRemarkPolicy() *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_EgressRemarkPolicy {
	if t != nil && t.EgressRemarkPolicy != nil {
		return t.EgressRemarkPolicy
	}
	return nil
}

// GetVlanQosPolicy returns the value of the VlanQosPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos. If the receiver or the field VlanQosPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos) GetVlanQosPolicy() *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_VlanQosPolicy {
	if t != nil && t.VlanQosPolicy != nil {
		return t.VlanQosPolicy
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AggRate.PopulateDefaults()
	t.EgressRemarkPolicy.PopulateDefaults()
	t.VlanQosPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate represents the /nokia-conf/configure/groups/group/router/interface/egress/qos/agg-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate struct {
	Rate *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate_Rate `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate) IsYANGGoStruct() {}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate_Rate{}
	return t.Rate
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate) GetRate() *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Rate.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate_Rate represents the /nokia-conf/configure/groups/group/router/interface/egress/qos/agg-rate/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate_Rate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate_Rate) GetCir() NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionInt32(0)
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate_Rate) GetPir() NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate_Rate_Pir_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = UnionInt32(0)
	}
	if t.Pir == nil {
		t.Pir = NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate_Rate_Pir_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate_Rate.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_AggRate_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_EgressRemarkPolicy represents the /nokia-conf/configure/groups/group/router/interface/egress/qos/egress-remark-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_EgressRemarkPolicy struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_EgressRemarkPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_EgressRemarkPolicy) IsYANGGoStruct() {
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_EgressRemarkPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_EgressRemarkPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_EgressRemarkPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_EgressRemarkPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_EgressRemarkPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_EgressRemarkPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_EgressRemarkPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_EgressRemarkPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_EgressRemarkPolicy.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_EgressRemarkPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_VlanQosPolicy represents the /nokia-conf/configure/groups/group/router/interface/egress/qos/vlan-qos-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_VlanQosPolicy struct {
	PolicyName   *string `path:"policy-name" module:"nokia-conf"`
	PortRedirect *bool   `path:"port-redirect" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_VlanQosPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_VlanQosPolicy) IsYANGGoStruct() {}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_VlanQosPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_VlanQosPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetPortRedirect retrieves the value of the leaf PortRedirect from the NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_VlanQosPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortRedirect is set, it can
// safely use t.GetPortRedirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortRedirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_VlanQosPolicy) GetPortRedirect() bool {
	if t == nil || t.PortRedirect == nil {
		return false
	}
	return *t.PortRedirect
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_VlanQosPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_VlanQosPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortRedirect == nil {
		var v bool = false
		t.PortRedirect = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_VlanQosPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_VlanQosPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_VlanQosPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_VlanQosPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_VlanQosPolicy.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Egress_Qos_VlanQosPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm represents the /nokia-conf/configure/groups/group/router/interface/eth-cfm YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm struct {
	Mep map[NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Key]*NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep `path:"mep" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Key represents the key for list Mep of element /nokia-conf/configure/groups/group/router/interface/eth-cfm.
type NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Key struct {
	MdAdminName string                                                                   `path:"md-admin-name"`
	MaAdminName string                                                                   `path:"ma-admin-name"`
	MepId       NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_MepId_Union `path:"mep-id"`
}

// NewMep creates a new entry in the Mep list of the
// NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm) NewMep(MdAdminName string, MaAdminName string, MepId NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_MepId_Union) (*NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Key]*NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep)
	}

	key := NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mep[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mep", key)
	}

	t.Mep[key] = &NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep{
		MdAdminName: &MdAdminName,
		MaAdminName: &MaAdminName,
		MepId:       MepId,
	}

	return t.Mep[key], nil
}

// RenameMep renames an entry in the list Mep within
// the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm) RenameMep(oldK, newK NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Key) error {
	if _, ok := t.Mep[newK]; ok {
		return fmt.Errorf("key %v already exists in Mep", newK)
	}

	e, ok := t.Mep[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mep", oldK)
	}
	e.MdAdminName = &newK.MdAdminName
	e.MaAdminName = &newK.MaAdminName
	e.MepId = newK.MepId

	t.Mep[newK] = e
	delete(t.Mep, oldK)
	return nil
}

// GetOrCreateMep retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm) GetOrCreateMep(MdAdminName string, MaAdminName string, MepId NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_MepId_Union) *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep {

	key := NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if v, ok := t.Mep[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMep(MdAdminName, MaAdminName, MepId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMep got unexpected error: %v", err))
	}
	return v
}

// GetMep retrieves the value with the specified key from
// the Mep map field of NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm) GetMep(MdAdminName string, MaAdminName string, MepId NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_MepId_Union) *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if lm, ok := t.Mep[key]; ok {
		return lm
	}
	return nil
}

// DeleteMep deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm) DeleteMep(MdAdminName string, MaAdminName string, MepId NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_MepId_Union) {
	key := NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	delete(t.Mep, key)
}

// AppendMep appends the supplied NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep struct to the
// list Mep of NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm) AppendMep(v *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep) error {
	if v.MdAdminName == nil {
		return fmt.Errorf("invalid nil key for MdAdminName")
	}

	if v.MaAdminName == nil {
		return fmt.Errorf("invalid nil key for MaAdminName")
	}

	key := NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Key{
		MdAdminName: *v.MdAdminName,
		MaAdminName: *v.MaAdminName,
		MepId:       v.MepId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Key]*NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep)
	}

	if _, ok := t.Mep[key]; ok {
		return fmt.Errorf("duplicate key for list Mep %v", key)
	}

	t.Mep[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Mep {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep represents the /nokia-conf/configure/groups/group/router/interface/eth-cfm/mep YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep struct {
	AdminState           E_NokiaTypesSros_AdminState                                                     `path:"admin-state" module:"nokia-conf"`
	AlarmNotification    *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_AlarmNotification `path:"alarm-notification" module:"nokia-conf"`
	Ccm                  *bool                                                                           `path:"ccm" module:"nokia-conf"`
	CcmLtmPriority       *uint8                                                                          `path:"ccm-ltm-priority" module:"nokia-conf"`
	CcmPaddingSize       *uint32                                                                         `path:"ccm-padding-size" module:"nokia-conf"`
	CcmTlvIgnore         []E_NokiaTypesEthCfm_CcmTlvIgnoreType                                           `path:"ccm-tlv-ignore" module:"nokia-conf"`
	CollectLmmFcStats    *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_CollectLmmFcStats `path:"collect-lmm-fc-stats" module:"nokia-conf"`
	CollectLmmStats      *bool                                                                           `path:"collect-lmm-stats" module:"nokia-conf"`
	Description          *string                                                                         `path:"description" module:"nokia-conf"`
	EthTest              *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest           `path:"eth-test" module:"nokia-conf" yangPresence:"true"`
	FacilityFault        *bool                                                                           `path:"facility-fault" module:"nokia-conf"`
	Grace                *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace             `path:"grace" module:"nokia-conf"`
	LbmSvcActResponder   *bool                                                                           `path:"lbm-svc-act-responder" module:"nokia-conf"`
	LowPriorityDefect    E_NokiaTypesEthCfm_LowestAlarmPriority                                          `path:"low-priority-defect" module:"nokia-conf"`
	MaAdminName          *string                                                                         `path:"ma-admin-name" module:"nokia-conf"`
	MacAddress           *string                                                                         `path:"mac-address" module:"nokia-conf"`
	MdAdminName          *string                                                                         `path:"md-admin-name" module:"nokia-conf"`
	MepId                NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_MepId_Union        `path:"mep-id" module:"nokia-conf"`
	OneWayDelayThreshold *uint32                                                                         `path:"one-way-delay-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep) IsYANGGoStruct() {}

// GetOrCreateAlarmNotification retrieves the value of the AlarmNotification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep) GetOrCreateAlarmNotification() *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_AlarmNotification {
	if t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	t.AlarmNotification = &NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_AlarmNotification{}
	return t.AlarmNotification
}

// GetOrCreateCollectLmmFcStats retrieves the value of the CollectLmmFcStats field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep) GetOrCreateCollectLmmFcStats() *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_CollectLmmFcStats {
	if t.CollectLmmFcStats != nil {
		return t.CollectLmmFcStats
	}
	t.CollectLmmFcStats = &NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_CollectLmmFcStats{}
	return t.CollectLmmFcStats
}

// GetOrCreateEthTest retrieves the value of the EthTest field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep) GetOrCreateEthTest() *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest {
	if t.EthTest != nil {
		return t.EthTest
	}
	t.EthTest = &NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest{}
	return t.EthTest
}

// GetOrCreateGrace retrieves the value of the Grace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep) GetOrCreateGrace() *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace {
	if t.Grace != nil {
		return t.Grace
	}
	t.Grace = &NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace{}
	return t.Grace
}

// GetAlarmNotification returns the value of the AlarmNotification struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep. If the receiver or the field AlarmNotification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep) GetAlarmNotification() *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_AlarmNotification {
	if t != nil && t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	return nil
}

// GetCollectLmmFcStats returns the value of the CollectLmmFcStats struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep. If the receiver or the field CollectLmmFcStats is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep) GetCollectLmmFcStats() *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_CollectLmmFcStats {
	if t != nil && t.CollectLmmFcStats != nil {
		return t.CollectLmmFcStats
	}
	return nil
}

// GetEthTest returns the value of the EthTest struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep. If the receiver or the field EthTest is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep) GetEthTest() *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest {
	if t != nil && t.EthTest != nil {
		return t.EthTest
	}
	return nil
}

// GetGrace returns the value of the Grace struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep. If the receiver or the field Grace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep) GetGrace() *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace {
	if t != nil && t.Grace != nil {
		return t.Grace
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCcm retrieves the value of the leaf Ccm from the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ccm is set, it can
// safely use t.GetCcm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ccm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep) GetCcm() bool {
	if t == nil || t.Ccm == nil {
		return false
	}
	return *t.Ccm
}

// GetCcmLtmPriority retrieves the value of the leaf CcmLtmPriority from the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmLtmPriority is set, it can
// safely use t.GetCcmLtmPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmLtmPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep) GetCcmLtmPriority() uint8 {
	if t == nil || t.CcmLtmPriority == nil {
		return 7
	}
	return *t.CcmLtmPriority
}

// GetCcmPaddingSize retrieves the value of the leaf CcmPaddingSize from the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmPaddingSize is set, it can
// safely use t.GetCcmPaddingSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmPaddingSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep) GetCcmPaddingSize() uint32 {
	if t == nil || t.CcmPaddingSize == nil {
		return 0
	}
	return *t.CcmPaddingSize
}

// GetCcmTlvIgnore retrieves the value of the leaf CcmTlvIgnore from the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmTlvIgnore is set, it can
// safely use t.GetCcmTlvIgnore() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmTlvIgnore == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep) GetCcmTlvIgnore() []E_NokiaTypesEthCfm_CcmTlvIgnoreType {
	if t == nil || t.CcmTlvIgnore == nil {
		return nil
	}
	return t.CcmTlvIgnore
}

// GetCollectLmmStats retrieves the value of the leaf CollectLmmStats from the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectLmmStats is set, it can
// safely use t.GetCollectLmmStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectLmmStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep) GetCollectLmmStats() bool {
	if t == nil || t.CollectLmmStats == nil {
		return false
	}
	return *t.CollectLmmStats
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFacilityFault retrieves the value of the leaf FacilityFault from the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FacilityFault is set, it can
// safely use t.GetFacilityFault() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FacilityFault == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep) GetFacilityFault() bool {
	if t == nil || t.FacilityFault == nil {
		return false
	}
	return *t.FacilityFault
}

// GetLbmSvcActResponder retrieves the value of the leaf LbmSvcActResponder from the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LbmSvcActResponder is set, it can
// safely use t.GetLbmSvcActResponder() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LbmSvcActResponder == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep) GetLbmSvcActResponder() bool {
	if t == nil || t.LbmSvcActResponder == nil {
		return false
	}
	return *t.LbmSvcActResponder
}

// GetLowPriorityDefect retrieves the value of the leaf LowPriorityDefect from the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPriorityDefect is set, it can
// safely use t.GetLowPriorityDefect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPriorityDefect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep) GetLowPriorityDefect() E_NokiaTypesEthCfm_LowestAlarmPriority {
	if t == nil || t.LowPriorityDefect == 0 {
		return NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	return t.LowPriorityDefect
}

// GetMaAdminName retrieves the value of the leaf MaAdminName from the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaAdminName is set, it can
// safely use t.GetMaAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep) GetMaAdminName() string {
	if t == nil || t.MaAdminName == nil {
		return ""
	}
	return *t.MaAdminName
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetMdAdminName retrieves the value of the leaf MdAdminName from the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdAdminName is set, it can
// safely use t.GetMdAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep) GetMdAdminName() string {
	if t == nil || t.MdAdminName == nil {
		return ""
	}
	return *t.MdAdminName
}

// GetMepId retrieves the value of the leaf MepId from the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MepId is set, it can
// safely use t.GetMepId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MepId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep) GetMepId() NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_MepId_Union {
	if t == nil || t.MepId == nil {
		return nil
	}
	return t.MepId
}

// GetOneWayDelayThreshold retrieves the value of the leaf OneWayDelayThreshold from the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OneWayDelayThreshold is set, it can
// safely use t.GetOneWayDelayThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OneWayDelayThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep) GetOneWayDelayThreshold() uint32 {
	if t == nil || t.OneWayDelayThreshold == nil {
		return 3
	}
	return *t.OneWayDelayThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Ccm == nil {
		var v bool = false
		t.Ccm = &v
	}
	if t.CcmLtmPriority == nil {
		var v uint8 = 7
		t.CcmLtmPriority = &v
	}
	if t.CollectLmmStats == nil {
		var v bool = false
		t.CollectLmmStats = &v
	}
	if t.FacilityFault == nil {
		var v bool = false
		t.FacilityFault = &v
	}
	if t.LowPriorityDefect == 0 {
		t.LowPriorityDefect = NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	if t.OneWayDelayThreshold == nil {
		var v uint32 = 3
		t.OneWayDelayThreshold = &v
	}
	t.AlarmNotification.PopulateDefaults()
	t.CollectLmmFcStats.PopulateDefaults()
	t.EthTest.PopulateDefaults()
	t.Grace.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MaAdminName == nil {
		return nil, fmt.Errorf("nil value for key MaAdminName")
	}

	if t.MdAdminName == nil {
		return nil, fmt.Errorf("nil value for key MdAdminName")
	}

	return map[string]interface{}{
		"ma-admin-name": *t.MaAdminName,
		"md-admin-name": *t.MdAdminName,
		"mep-id":        t.MepId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_AlarmNotification represents the /nokia-conf/configure/groups/group/router/interface/eth-cfm/mep/alarm-notification YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_AlarmNotification struct {
	FngAlarmTime *int32 `path:"fng-alarm-time" module:"nokia-conf"`
	FngResetTime *int32 `path:"fng-reset-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_AlarmNotification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_AlarmNotification) IsYANGGoStruct() {
}

// GetFngAlarmTime retrieves the value of the leaf FngAlarmTime from the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngAlarmTime is set, it can
// safely use t.GetFngAlarmTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngAlarmTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_AlarmNotification) GetFngAlarmTime() int32 {
	if t == nil || t.FngAlarmTime == nil {
		return 0
	}
	return *t.FngAlarmTime
}

// GetFngResetTime retrieves the value of the leaf FngResetTime from the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngResetTime is set, it can
// safely use t.GetFngResetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngResetTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_AlarmNotification) GetFngResetTime() int32 {
	if t == nil || t.FngResetTime == nil {
		return 0
	}
	return *t.FngResetTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_AlarmNotification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_AlarmNotification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_AlarmNotification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_AlarmNotification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_AlarmNotification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_AlarmNotification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_AlarmNotification.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_AlarmNotification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_CollectLmmFcStats represents the /nokia-conf/configure/groups/group/router/interface/eth-cfm/mep/collect-lmm-fc-stats YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_CollectLmmFcStats struct {
	Fc          []E_NokiaTypesEthCfm_FcType `path:"fc" module:"nokia-conf"`
	FcInProfile []E_NokiaTypesEthCfm_FcType `path:"fc-in-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_CollectLmmFcStats implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_CollectLmmFcStats) IsYANGGoStruct() {
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_CollectLmmFcStats
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_CollectLmmFcStats) GetFc() []E_NokiaTypesEthCfm_FcType {
	if t == nil || t.Fc == nil {
		return nil
	}
	return t.Fc
}

// GetFcInProfile retrieves the value of the leaf FcInProfile from the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_CollectLmmFcStats
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcInProfile is set, it can
// safely use t.GetFcInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcInProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_CollectLmmFcStats) GetFcInProfile() []E_NokiaTypesEthCfm_FcType {
	if t == nil || t.FcInProfile == nil {
		return nil
	}
	return t.FcInProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_CollectLmmFcStats
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_CollectLmmFcStats) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_CollectLmmFcStats) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_CollectLmmFcStats"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_CollectLmmFcStats) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_CollectLmmFcStats) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_CollectLmmFcStats.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_CollectLmmFcStats) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest represents the /nokia-conf/configure/groups/group/router/interface/eth-cfm/mep/eth-test YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest struct {
	BitErrorThreshold *uint32                                                                           `path:"bit-error-threshold" module:"nokia-conf"`
	TestPattern       *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest_TestPattern `path:"test-pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest) IsYANGGoStruct() {}

// GetOrCreateTestPattern retrieves the value of the TestPattern field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest) GetOrCreateTestPattern() *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest_TestPattern {
	if t.TestPattern != nil {
		return t.TestPattern
	}
	t.TestPattern = &NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest_TestPattern{}
	return t.TestPattern
}

// GetTestPattern returns the value of the TestPattern struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest. If the receiver or the field TestPattern is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest) GetTestPattern() *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest_TestPattern {
	if t != nil && t.TestPattern != nil {
		return t.TestPattern
	}
	return nil
}

// GetBitErrorThreshold retrieves the value of the leaf BitErrorThreshold from the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitErrorThreshold is set, it can
// safely use t.GetBitErrorThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitErrorThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest) GetBitErrorThreshold() uint32 {
	if t == nil || t.BitErrorThreshold == nil {
		return 1
	}
	return *t.BitErrorThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BitErrorThreshold == nil {
		var v uint32 = 1
		t.BitErrorThreshold = &v
	}
	t.TestPattern.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest_TestPattern represents the /nokia-conf/configure/groups/group/router/interface/eth-cfm/mep/eth-test/test-pattern YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest_TestPattern struct {
	CrcTlv  *bool                                                                                      `path:"crc-tlv" module:"nokia-conf"`
	Pattern E_NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest_TestPattern_Pattern `path:"pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest_TestPattern implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest_TestPattern) IsYANGGoStruct() {
}

// GetCrcTlv retrieves the value of the leaf CrcTlv from the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CrcTlv is set, it can
// safely use t.GetCrcTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CrcTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest_TestPattern) GetCrcTlv() bool {
	if t == nil || t.CrcTlv == nil {
		return false
	}
	return *t.CrcTlv
}

// GetPattern retrieves the value of the leaf Pattern from the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pattern is set, it can
// safely use t.GetPattern() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pattern == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest_TestPattern) GetPattern() E_NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest_TestPattern_Pattern {
	if t == nil || t.Pattern == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
	return t.Pattern
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest_TestPattern
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest_TestPattern) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CrcTlv == nil {
		var v bool = false
		t.CrcTlv = &v
	}
	if t.Pattern == 0 {
		t.Pattern = NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest_TestPattern) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest_TestPattern"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest_TestPattern) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest_TestPattern) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest_TestPattern.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_EthTest_TestPattern) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace represents the /nokia-conf/configure/groups/group/router/interface/eth-cfm/mep/grace YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace struct {
	EthEd       *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthEd       `path:"eth-ed" module:"nokia-conf"`
	EthVsmGrace *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace `path:"eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace) IsYANGGoStruct() {}

// GetOrCreateEthEd retrieves the value of the EthEd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace) GetOrCreateEthEd() *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthEd {
	if t.EthEd != nil {
		return t.EthEd
	}
	t.EthEd = &NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthEd{}
	return t.EthEd
}

// GetOrCreateEthVsmGrace retrieves the value of the EthVsmGrace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace) GetOrCreateEthVsmGrace() *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace {
	if t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	t.EthVsmGrace = &NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace{}
	return t.EthVsmGrace
}

// GetEthEd returns the value of the EthEd struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace. If the receiver or the field EthEd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace) GetEthEd() *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthEd {
	if t != nil && t.EthEd != nil {
		return t.EthEd
	}
	return nil
}

// GetEthVsmGrace returns the value of the EthVsmGrace struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace. If the receiver or the field EthVsmGrace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace) GetEthVsmGrace() *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace {
	if t != nil && t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthEd.PopulateDefaults()
	t.EthVsmGrace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthEd represents the /nokia-conf/configure/groups/group/router/interface/eth-cfm/mep/grace/eth-ed YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthEd struct {
	MaxRxDefectWindow *uint32 `path:"max-rx-defect-window" module:"nokia-conf"`
	Priority          *int32  `path:"priority" module:"nokia-conf"`
	RxEthEd           *bool   `path:"rx-eth-ed" module:"nokia-conf"`
	TxEthEd           *bool   `path:"tx-eth-ed" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthEd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthEd) IsYANGGoStruct() {}

// GetMaxRxDefectWindow retrieves the value of the leaf MaxRxDefectWindow from the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRxDefectWindow is set, it can
// safely use t.GetMaxRxDefectWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRxDefectWindow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthEd) GetMaxRxDefectWindow() uint32 {
	if t == nil || t.MaxRxDefectWindow == nil {
		return 0
	}
	return *t.MaxRxDefectWindow
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthEd) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetRxEthEd retrieves the value of the leaf RxEthEd from the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthEd is set, it can
// safely use t.GetRxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthEd) GetRxEthEd() bool {
	if t == nil || t.RxEthEd == nil {
		return true
	}
	return *t.RxEthEd
}

// GetTxEthEd retrieves the value of the leaf TxEthEd from the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthEd is set, it can
// safely use t.GetTxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthEd) GetTxEthEd() bool {
	if t == nil || t.TxEthEd == nil {
		return false
	}
	return *t.TxEthEd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthEd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthEd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthEd == nil {
		var v bool = true
		t.RxEthEd = &v
	}
	if t.TxEthEd == nil {
		var v bool = false
		t.TxEthEd = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthEd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthEd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthEd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthEd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthEd.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthEd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace represents the /nokia-conf/configure/groups/group/router/interface/eth-cfm/mep/grace/eth-vsm-grace YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace struct {
	RxEthVsmGrace *bool `path:"rx-eth-vsm-grace" module:"nokia-conf"`
	TxEthVsmGrace *bool `path:"tx-eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace) IsYANGGoStruct() {
}

// GetRxEthVsmGrace retrieves the value of the leaf RxEthVsmGrace from the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthVsmGrace is set, it can
// safely use t.GetRxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace) GetRxEthVsmGrace() bool {
	if t == nil || t.RxEthVsmGrace == nil {
		return true
	}
	return *t.RxEthVsmGrace
}

// GetTxEthVsmGrace retrieves the value of the leaf TxEthVsmGrace from the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthVsmGrace is set, it can
// safely use t.GetTxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace) GetTxEthVsmGrace() bool {
	if t == nil || t.TxEthVsmGrace == nil {
		return true
	}
	return *t.TxEthVsmGrace
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthVsmGrace == nil {
		var v bool = true
		t.RxEthVsmGrace = &v
	}
	if t.TxEthVsmGrace == nil {
		var v bool = true
		t.TxEthVsmGrace = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_EthCfm_Mep_Grace_EthVsmGrace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime represents the /nokia-conf/configure/groups/group/router/interface/hold-time YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime struct {
	Ipv4 *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4 `path:"ipv4" module:"nokia-conf"`
	Ipv6 *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6 `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime) GetOrCreateIpv6() *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6{}
	return t.Ipv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime) GetIpv4() *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime) GetIpv6() *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4 represents the /nokia-conf/configure/groups/group/router/interface/hold-time/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4 struct {
	Down *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Down `path:"down" module:"nokia-conf"`
	Up   *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Up   `path:"up" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4) IsYANGGoStruct() {}

// GetOrCreateDown retrieves the value of the Down field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4) GetOrCreateDown() *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Down {
	if t.Down != nil {
		return t.Down
	}
	t.Down = &NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Down{}
	return t.Down
}

// GetOrCreateUp retrieves the value of the Up field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4) GetOrCreateUp() *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Up {
	if t.Up != nil {
		return t.Up
	}
	t.Up = &NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Up{}
	return t.Up
}

// GetDown returns the value of the Down struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4. If the receiver or the field Down is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4) GetDown() *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Down {
	if t != nil && t.Down != nil {
		return t.Down
	}
	return nil
}

// GetUp returns the value of the Up struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4. If the receiver or the field Up is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4) GetUp() *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Up {
	if t != nil && t.Up != nil {
		return t.Up
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Down.PopulateDefaults()
	t.Up.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Down represents the /nokia-conf/configure/groups/group/router/interface/hold-time/ipv4/down YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Down struct {
	InitOnly *bool   `path:"init-only" module:"nokia-conf"`
	Seconds  *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Down implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Down) IsYANGGoStruct() {}

// GetInitOnly retrieves the value of the leaf InitOnly from the NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitOnly is set, it can
// safely use t.GetInitOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Down) GetInitOnly() bool {
	if t == nil || t.InitOnly == nil {
		return false
	}
	return *t.InitOnly
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Down) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Down
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Down) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitOnly == nil {
		var v bool = false
		t.InitOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Down) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Down"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Down) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Down) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Down.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Down) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Up represents the /nokia-conf/configure/groups/group/router/interface/hold-time/ipv4/up YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Up struct {
	Seconds *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Up implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Up) IsYANGGoStruct() {}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Up
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Up) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Up
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Up) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Up) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Up"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Up) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Up) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Up.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv4_Up) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6 represents the /nokia-conf/configure/groups/group/router/interface/hold-time/ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6 struct {
	Down *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Down `path:"down" module:"nokia-conf"`
	Up   *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Up   `path:"up" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6) IsYANGGoStruct() {}

// GetOrCreateDown retrieves the value of the Down field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6) GetOrCreateDown() *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Down {
	if t.Down != nil {
		return t.Down
	}
	t.Down = &NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Down{}
	return t.Down
}

// GetOrCreateUp retrieves the value of the Up field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6) GetOrCreateUp() *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Up {
	if t.Up != nil {
		return t.Up
	}
	t.Up = &NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Up{}
	return t.Up
}

// GetDown returns the value of the Down struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6. If the receiver or the field Down is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6) GetDown() *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Down {
	if t != nil && t.Down != nil {
		return t.Down
	}
	return nil
}

// GetUp returns the value of the Up struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6. If the receiver or the field Up is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6) GetUp() *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Up {
	if t != nil && t.Up != nil {
		return t.Up
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Down.PopulateDefaults()
	t.Up.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Down represents the /nokia-conf/configure/groups/group/router/interface/hold-time/ipv6/down YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Down struct {
	InitOnly *bool   `path:"init-only" module:"nokia-conf"`
	Seconds  *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Down implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Down) IsYANGGoStruct() {}

// GetInitOnly retrieves the value of the leaf InitOnly from the NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitOnly is set, it can
// safely use t.GetInitOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Down) GetInitOnly() bool {
	if t == nil || t.InitOnly == nil {
		return false
	}
	return *t.InitOnly
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Down) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Down
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Down) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitOnly == nil {
		var v bool = false
		t.InitOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Down) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Down"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Down) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Down) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Down.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Down) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Up represents the /nokia-conf/configure/groups/group/router/interface/hold-time/ipv6/up YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Up struct {
	Seconds *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Up implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Up) IsYANGGoStruct() {}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Up
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Up) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Up
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Up) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Up) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Up"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Up) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Up) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Up.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_HoldTime_Ipv6_Up) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute represents the /nokia-conf/configure/groups/group/router/interface/if-attribute YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute struct {
	AdminGroup []string                                                                            `path:"admin-group" module:"nokia-conf"`
	Delay      *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay                `path:"delay" module:"nokia-conf"`
	SrlgGroup  map[string]*NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_SrlgGroup `path:"srlg-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute) IsYANGGoStruct() {}

// NewSrlgGroup creates a new entry in the SrlgGroup list of the
// NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute) NewSrlgGroup(Name string) (*NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_SrlgGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SrlgGroup == nil {
		t.SrlgGroup = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_SrlgGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SrlgGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SrlgGroup", key)
	}

	t.SrlgGroup[key] = &NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_SrlgGroup{
		Name: &Name,
	}

	return t.SrlgGroup[key], nil
}

// RenameSrlgGroup renames an entry in the list SrlgGroup within
// the NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute) RenameSrlgGroup(oldK, newK string) error {
	if _, ok := t.SrlgGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in SrlgGroup", newK)
	}

	e, ok := t.SrlgGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SrlgGroup", oldK)
	}
	e.Name = &newK

	t.SrlgGroup[newK] = e
	delete(t.SrlgGroup, oldK)
	return nil
}

// GetOrCreateSrlgGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute) GetOrCreateSrlgGroup(Name string) *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_SrlgGroup {

	key := Name

	if v, ok := t.SrlgGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSrlgGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSrlgGroup got unexpected error: %v", err))
	}
	return v
}

// GetSrlgGroup retrieves the value with the specified key from
// the SrlgGroup map field of NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute) GetSrlgGroup(Name string) *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_SrlgGroup {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.SrlgGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteSrlgGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute) DeleteSrlgGroup(Name string) {
	key := Name

	delete(t.SrlgGroup, key)
}

// AppendSrlgGroup appends the supplied NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_SrlgGroup struct to the
// list SrlgGroup of NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_SrlgGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute) AppendSrlgGroup(v *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_SrlgGroup) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SrlgGroup == nil {
		t.SrlgGroup = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_SrlgGroup)
	}

	if _, ok := t.SrlgGroup[key]; ok {
		return fmt.Errorf("duplicate key for list SrlgGroup %v", key)
	}

	t.SrlgGroup[key] = v
	return nil
}

// GetOrCreateDelay retrieves the value of the Delay field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute) GetOrCreateDelay() *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay {
	if t.Delay != nil {
		return t.Delay
	}
	t.Delay = &NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay{}
	return t.Delay
}

// GetDelay returns the value of the Delay struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute. If the receiver or the field Delay is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute) GetDelay() *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay {
	if t != nil && t.Delay != nil {
		return t.Delay
	}
	return nil
}

// GetAdminGroup retrieves the value of the leaf AdminGroup from the NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminGroup is set, it can
// safely use t.GetAdminGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute) GetAdminGroup() []string {
	if t == nil || t.AdminGroup == nil {
		return nil
	}
	return t.AdminGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Delay.PopulateDefaults()
	for _, e := range t.SrlgGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay represents the /nokia-conf/configure/groups/group/router/interface/if-attribute/delay YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay struct {
	DelaySelection E_NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_DelaySelection `path:"delay-selection" module:"nokia-conf"`
	Dynamic        *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic         `path:"dynamic" module:"nokia-conf"`
	Static         *int32                                                                               `path:"static" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay) IsYANGGoStruct() {}

// GetOrCreateDynamic retrieves the value of the Dynamic field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay) GetOrCreateDynamic() *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic {
	if t.Dynamic != nil {
		return t.Dynamic
	}
	t.Dynamic = &NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic{}
	return t.Dynamic
}

// GetDynamic returns the value of the Dynamic struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay. If the receiver or the field Dynamic is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay) GetDynamic() *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic {
	if t != nil && t.Dynamic != nil {
		return t.Dynamic
	}
	return nil
}

// GetDelaySelection retrieves the value of the leaf DelaySelection from the NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DelaySelection is set, it can
// safely use t.GetDelaySelection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DelaySelection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay) GetDelaySelection() E_NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_DelaySelection {
	if t == nil || t.DelaySelection == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_DelaySelection_static_preferred
	}
	return t.DelaySelection
}

// GetStatic retrieves the value of the leaf Static from the NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Static is set, it can
// safely use t.GetStatic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Static == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay) GetStatic() int32 {
	if t == nil || t.Static == nil {
		return 0
	}
	return *t.Static
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DelaySelection == 0 {
		t.DelaySelection = NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_DelaySelection_static_preferred
	}
	t.Dynamic.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic represents the /nokia-conf/configure/groups/group/router/interface/if-attribute/delay/dynamic YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic struct {
	MeasurementTemplate *string                                                                                 `path:"measurement-template" module:"nokia-conf"`
	TwampLight          *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight `path:"twamp-light" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic) IsYANGGoStruct() {
}

// GetOrCreateTwampLight retrieves the value of the TwampLight field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic) GetOrCreateTwampLight() *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight {
	if t.TwampLight != nil {
		return t.TwampLight
	}
	t.TwampLight = &NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight{}
	return t.TwampLight
}

// GetTwampLight returns the value of the TwampLight struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic. If the receiver or the field TwampLight is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic) GetTwampLight() *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight {
	if t != nil && t.TwampLight != nil {
		return t.TwampLight
	}
	return nil
}

// GetMeasurementTemplate retrieves the value of the leaf MeasurementTemplate from the NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MeasurementTemplate is set, it can
// safely use t.GetMeasurementTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MeasurementTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic) GetMeasurementTemplate() string {
	if t == nil || t.MeasurementTemplate == nil {
		return ""
	}
	return *t.MeasurementTemplate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.TwampLight.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight represents the /nokia-conf/configure/groups/group/router/interface/if-attribute/delay/dynamic/twamp-light YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight struct {
	Ipv4 *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4 `path:"ipv4" module:"nokia-conf"`
	Ipv6 *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6 `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight) IsYANGGoStruct() {
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight) GetOrCreateIpv6() *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6{}
	return t.Ipv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight) GetIpv4() *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight) GetIpv6() *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4 represents the /nokia-conf/configure/groups/group/router/interface/if-attribute/delay/dynamic/twamp-light/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4 struct {
	AdminState  E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Destination *string                     `path:"destination" module:"nokia-conf"`
	Source      *string                     `path:"source" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDestination retrieves the value of the leaf Destination from the NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Destination is set, it can
// safely use t.GetDestination() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Destination == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4) GetDestination() string {
	if t == nil || t.Destination == nil {
		return ""
	}
	return *t.Destination
}

// GetSource retrieves the value of the leaf Source from the NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source is set, it can
// safely use t.GetSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4) GetSource() string {
	if t == nil || t.Source == nil {
		return ""
	}
	return *t.Source
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6 represents the /nokia-conf/configure/groups/group/router/interface/if-attribute/delay/dynamic/twamp-light/ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6 struct {
	AdminState  E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Destination *string                     `path:"destination" module:"nokia-conf"`
	Source      *string                     `path:"source" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDestination retrieves the value of the leaf Destination from the NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Destination is set, it can
// safely use t.GetDestination() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Destination == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6) GetDestination() string {
	if t == nil || t.Destination == nil {
		return ""
	}
	return *t.Destination
}

// GetSource retrieves the value of the leaf Source from the NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source is set, it can
// safely use t.GetSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6) GetSource() string {
	if t == nil || t.Source == nil {
		return ""
	}
	return *t.Source
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_Delay_Dynamic_TwampLight_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_SrlgGroup represents the /nokia-conf/configure/groups/group/router/interface/if-attribute/srlg-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_SrlgGroup struct {
	Name *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_SrlgGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_SrlgGroup) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_SrlgGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_SrlgGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_SrlgGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_SrlgGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_SrlgGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_SrlgGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_SrlgGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_SrlgGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_SrlgGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_SrlgGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_SrlgGroup.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_IfAttribute_SrlgGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ingress represents the /nokia-conf/configure/groups/group/router/interface/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ingress struct {
	DestinationClassLookup *bool                                                             `path:"destination-class-lookup" module:"nokia-conf"`
	Filter                 *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Filter `path:"filter" module:"nokia-conf"`
	IpFilterPair           *bool                                                             `path:"ip-filter-pair" module:"nokia-conf"`
	PolicyAccounting       *string                                                           `path:"policy-accounting" module:"nokia-conf"`
	Qos                    *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Qos    `path:"qos" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ingress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress) GetFilter() *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress) GetQos() *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetDestinationClassLookup retrieves the value of the leaf DestinationClassLookup from the NokiaConf_Configure_Groups_Group_Router_Interface_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationClassLookup is set, it can
// safely use t.GetDestinationClassLookup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationClassLookup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress) GetDestinationClassLookup() bool {
	if t == nil || t.DestinationClassLookup == nil {
		return false
	}
	return *t.DestinationClassLookup
}

// GetIpFilterPair retrieves the value of the leaf IpFilterPair from the NokiaConf_Configure_Groups_Group_Router_Interface_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpFilterPair is set, it can
// safely use t.GetIpFilterPair() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpFilterPair == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress) GetIpFilterPair() bool {
	if t == nil || t.IpFilterPair == nil {
		return false
	}
	return *t.IpFilterPair
}

// GetPolicyAccounting retrieves the value of the leaf PolicyAccounting from the NokiaConf_Configure_Groups_Group_Router_Interface_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyAccounting is set, it can
// safely use t.GetPolicyAccounting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyAccounting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress) GetPolicyAccounting() string {
	if t == nil || t.PolicyAccounting == nil {
		return ""
	}
	return *t.PolicyAccounting
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DestinationClassLookup == nil {
		var v bool = false
		t.DestinationClassLookup = &v
	}
	if t.IpFilterPair == nil {
		var v bool = false
		t.IpFilterPair = &v
	}
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ingress.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Filter represents the /nokia-conf/configure/groups/group/router/interface/ingress/filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Filter.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Qos represents the /nokia-conf/configure/groups/group/router/interface/ingress/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Qos struct {
	NetworkIngress *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Qos_NetworkIngress `path:"network-ingress" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Qos) IsYANGGoStruct() {}

// GetOrCreateNetworkIngress retrieves the value of the NetworkIngress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Qos) GetOrCreateNetworkIngress() *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Qos_NetworkIngress {
	if t.NetworkIngress != nil {
		return t.NetworkIngress
	}
	t.NetworkIngress = &NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Qos_NetworkIngress{}
	return t.NetworkIngress
}

// GetNetworkIngress returns the value of the NetworkIngress struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Qos. If the receiver or the field NetworkIngress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Qos) GetNetworkIngress() *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Qos_NetworkIngress {
	if t != nil && t.NetworkIngress != nil {
		return t.NetworkIngress
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.NetworkIngress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Qos.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Qos_NetworkIngress represents the /nokia-conf/configure/groups/group/router/interface/ingress/qos/network-ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Qos_NetworkIngress struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Qos_NetworkIngress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Qos_NetworkIngress) IsYANGGoStruct() {
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Qos_NetworkIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Qos_NetworkIngress) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Qos_NetworkIngress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Qos_NetworkIngress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Qos_NetworkIngress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Qos_NetworkIngress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Qos_NetworkIngress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Qos_NetworkIngress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Qos_NetworkIngress.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ingress_Qos_NetworkIngress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_IpTunnel represents the /nokia-conf/configure/groups/group/router/interface/ip-tunnel YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_IpTunnel struct {
	RemoteIp *string `path:"remote-ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_IpTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_IpTunnel) IsYANGGoStruct() {}

// GetRemoteIp retrieves the value of the leaf RemoteIp from the NokiaConf_Configure_Groups_Group_Router_Interface_IpTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteIp is set, it can
// safely use t.GetRemoteIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IpTunnel) GetRemoteIp() string {
	if t == nil || t.RemoteIp == nil {
		return ""
	}
	return *t.RemoteIp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_IpTunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IpTunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IpTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_IpTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IpTunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_IpTunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_IpTunnel.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_IpTunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4 represents the /nokia-conf/configure/groups/group/router/interface/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4 struct {
	AllowDirectedBroadcasts *bool                                                                                                                                              `path:"allow-directed-broadcasts" module:"nokia-conf"`
	Bfd                     *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Bfd                                                                                        `path:"bfd" module:"nokia-conf"`
	Dhcp                    *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp                                                                                       `path:"dhcp" module:"nokia-conf" yangPresence:"true"`
	Icmp                    *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp                                                                                       `path:"icmp" module:"nokia-conf"`
	IpHelperAddress         *string                                                                                                                                            `path:"ip-helper-address" module:"nokia-conf"`
	LocalDhcpServer         *string                                                                                                                                            `path:"local-dhcp-server" module:"nokia-conf"`
	NeighborDiscovery       *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery                                                                          `path:"neighbor-discovery" module:"nokia-conf"`
	Primary                 *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Primary                                                                                    `path:"primary" module:"nokia-conf" yangPresence:"true"`
	QosRouteLookup          E_NokiaTypesRouter_QosRouteLookup                                                                                                                  `path:"qos-route-lookup" module:"nokia-conf"`
	Secondary               map[string]*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Secondary                                                                       `path:"secondary" module:"nokia-conf"`
	TcpMss                  *uint32                                                                                                                                            `path:"tcp-mss" module:"nokia-conf"`
	Unnumbered              *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Unnumbered                                                                                 `path:"unnumbered" module:"nokia-conf"`
	UrpfCheck               *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_UrpfCheck                                                                                  `path:"urpf-check" module:"nokia-conf" yangPresence:"true"`
	Vrrp                    map[NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp_VirtualRouterId_Union]*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp `path:"vrrp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4) IsYANGGoStruct() {}

// NewSecondary creates a new entry in the Secondary list of the
// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4) NewSecondary(Address string) (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Secondary, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Secondary == nil {
		t.Secondary = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Secondary)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Secondary[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Secondary", key)
	}

	t.Secondary[key] = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Secondary{
		Address: &Address,
	}

	return t.Secondary[key], nil
}

// RenameSecondary renames an entry in the list Secondary within
// the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4) RenameSecondary(oldK, newK string) error {
	if _, ok := t.Secondary[newK]; ok {
		return fmt.Errorf("key %v already exists in Secondary", newK)
	}

	e, ok := t.Secondary[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Secondary", oldK)
	}
	e.Address = &newK

	t.Secondary[newK] = e
	delete(t.Secondary, oldK)
	return nil
}

// GetOrCreateSecondary retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4) GetOrCreateSecondary(Address string) *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Secondary {

	key := Address

	if v, ok := t.Secondary[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSecondary(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSecondary got unexpected error: %v", err))
	}
	return v
}

// GetSecondary retrieves the value with the specified key from
// the Secondary map field of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4) GetSecondary(Address string) *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Secondary {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Secondary[key]; ok {
		return lm
	}
	return nil
}

// DeleteSecondary deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4) DeleteSecondary(Address string) {
	key := Address

	delete(t.Secondary, key)
}

// AppendSecondary appends the supplied NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Secondary struct to the
// list Secondary of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Secondary already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4) AppendSecondary(v *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Secondary) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Secondary == nil {
		t.Secondary = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Secondary)
	}

	if _, ok := t.Secondary[key]; ok {
		return fmt.Errorf("duplicate key for list Secondary %v", key)
	}

	t.Secondary[key] = v
	return nil
}

// NewVrrp creates a new entry in the Vrrp list of the
// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4) NewVrrp(VirtualRouterId NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp_VirtualRouterId_Union) (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vrrp == nil {
		t.Vrrp = make(map[NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp_VirtualRouterId_Union]*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp)
	}

	key := VirtualRouterId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vrrp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vrrp", key)
	}

	t.Vrrp[key] = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp{
		VirtualRouterId: VirtualRouterId,
	}

	return t.Vrrp[key], nil
}

// RenameVrrp renames an entry in the list Vrrp within
// the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4) RenameVrrp(oldK, newK NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp_VirtualRouterId_Union) error {
	if _, ok := t.Vrrp[newK]; ok {
		return fmt.Errorf("key %v already exists in Vrrp", newK)
	}

	e, ok := t.Vrrp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Vrrp", oldK)
	}
	e.VirtualRouterId = newK

	t.Vrrp[newK] = e
	delete(t.Vrrp, oldK)
	return nil
}

// GetOrCreateVrrp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4) GetOrCreateVrrp(VirtualRouterId NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp_VirtualRouterId_Union) *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp {

	key := VirtualRouterId

	if v, ok := t.Vrrp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVrrp(VirtualRouterId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVrrp got unexpected error: %v", err))
	}
	return v
}

// GetVrrp retrieves the value with the specified key from
// the Vrrp map field of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4) GetVrrp(VirtualRouterId NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp_VirtualRouterId_Union) *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp {

	if t == nil {
		return nil
	}

	key := VirtualRouterId

	if lm, ok := t.Vrrp[key]; ok {
		return lm
	}
	return nil
}

// DeleteVrrp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4) DeleteVrrp(VirtualRouterId NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp_VirtualRouterId_Union) {
	key := VirtualRouterId

	delete(t.Vrrp, key)
}

// AppendVrrp appends the supplied NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp struct to the
// list Vrrp of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4) AppendVrrp(v *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp) error {
	key := v.VirtualRouterId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vrrp == nil {
		t.Vrrp = make(map[NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp_VirtualRouterId_Union]*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp)
	}

	if _, ok := t.Vrrp[key]; ok {
		return fmt.Errorf("duplicate key for list Vrrp %v", key)
	}

	t.Vrrp[key] = v
	return nil
}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4) GetOrCreateBfd() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Bfd{}
	return t.Bfd
}

// GetOrCreateDhcp retrieves the value of the Dhcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4) GetOrCreateDhcp() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp {
	if t.Dhcp != nil {
		return t.Dhcp
	}
	t.Dhcp = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp{}
	return t.Dhcp
}

// GetOrCreateIcmp retrieves the value of the Icmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4) GetOrCreateIcmp() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp {
	if t.Icmp != nil {
		return t.Icmp
	}
	t.Icmp = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp{}
	return t.Icmp
}

// GetOrCreateNeighborDiscovery retrieves the value of the NeighborDiscovery field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4) GetOrCreateNeighborDiscovery() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery {
	if t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	t.NeighborDiscovery = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery{}
	return t.NeighborDiscovery
}

// GetOrCreatePrimary retrieves the value of the Primary field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4) GetOrCreatePrimary() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Primary {
	if t.Primary != nil {
		return t.Primary
	}
	t.Primary = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Primary{}
	return t.Primary
}

// GetOrCreateUnnumbered retrieves the value of the Unnumbered field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4) GetOrCreateUnnumbered() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Unnumbered {
	if t.Unnumbered != nil {
		return t.Unnumbered
	}
	t.Unnumbered = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Unnumbered{}
	return t.Unnumbered
}

// GetOrCreateUrpfCheck retrieves the value of the UrpfCheck field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4) GetOrCreateUrpfCheck() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_UrpfCheck {
	if t.UrpfCheck != nil {
		return t.UrpfCheck
	}
	t.UrpfCheck = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_UrpfCheck{}
	return t.UrpfCheck
}

// GetBfd returns the value of the Bfd struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4) GetBfd() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetDhcp returns the value of the Dhcp struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4. If the receiver or the field Dhcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4) GetDhcp() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp {
	if t != nil && t.Dhcp != nil {
		return t.Dhcp
	}
	return nil
}

// GetIcmp returns the value of the Icmp struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4. If the receiver or the field Icmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4) GetIcmp() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp {
	if t != nil && t.Icmp != nil {
		return t.Icmp
	}
	return nil
}

// GetNeighborDiscovery returns the value of the NeighborDiscovery struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4. If the receiver or the field NeighborDiscovery is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4) GetNeighborDiscovery() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery {
	if t != nil && t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	return nil
}

// GetPrimary returns the value of the Primary struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4. If the receiver or the field Primary is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4) GetPrimary() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Primary {
	if t != nil && t.Primary != nil {
		return t.Primary
	}
	return nil
}

// GetUnnumbered returns the value of the Unnumbered struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4. If the receiver or the field Unnumbered is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4) GetUnnumbered() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Unnumbered {
	if t != nil && t.Unnumbered != nil {
		return t.Unnumbered
	}
	return nil
}

// GetUrpfCheck returns the value of the UrpfCheck struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4. If the receiver or the field UrpfCheck is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4) GetUrpfCheck() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_UrpfCheck {
	if t != nil && t.UrpfCheck != nil {
		return t.UrpfCheck
	}
	return nil
}

// GetAllowDirectedBroadcasts retrieves the value of the leaf AllowDirectedBroadcasts from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowDirectedBroadcasts is set, it can
// safely use t.GetAllowDirectedBroadcasts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowDirectedBroadcasts == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4) GetAllowDirectedBroadcasts() bool {
	if t == nil || t.AllowDirectedBroadcasts == nil {
		return false
	}
	return *t.AllowDirectedBroadcasts
}

// GetIpHelperAddress retrieves the value of the leaf IpHelperAddress from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpHelperAddress is set, it can
// safely use t.GetIpHelperAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpHelperAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4) GetIpHelperAddress() string {
	if t == nil || t.IpHelperAddress == nil {
		return ""
	}
	return *t.IpHelperAddress
}

// GetLocalDhcpServer retrieves the value of the leaf LocalDhcpServer from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalDhcpServer is set, it can
// safely use t.GetLocalDhcpServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalDhcpServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4) GetLocalDhcpServer() string {
	if t == nil || t.LocalDhcpServer == nil {
		return ""
	}
	return *t.LocalDhcpServer
}

// GetQosRouteLookup retrieves the value of the leaf QosRouteLookup from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QosRouteLookup is set, it can
// safely use t.GetQosRouteLookup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QosRouteLookup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4) GetQosRouteLookup() E_NokiaTypesRouter_QosRouteLookup {
	if t == nil || t.QosRouteLookup == 0 {
		return 0
	}
	return t.QosRouteLookup
}

// GetTcpMss retrieves the value of the leaf TcpMss from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpMss is set, it can
// safely use t.GetTcpMss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpMss == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4) GetTcpMss() uint32 {
	if t == nil || t.TcpMss == nil {
		return 0
	}
	return *t.TcpMss
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowDirectedBroadcasts == nil {
		var v bool = false
		t.AllowDirectedBroadcasts = &v
	}
	t.Bfd.PopulateDefaults()
	t.Dhcp.PopulateDefaults()
	t.Icmp.PopulateDefaults()
	t.NeighborDiscovery.PopulateDefaults()
	t.Primary.PopulateDefaults()
	t.Unnumbered.PopulateDefaults()
	t.UrpfCheck.PopulateDefaults()
	for _, e := range t.Secondary {
		e.PopulateDefaults()
	}
	for _, e := range t.Vrrp {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Bfd represents the /nokia-conf/configure/groups/group/router/interface/ipv4/bfd YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Bfd struct {
	AdminState       E_NokiaTypesSros_AdminState                                       `path:"admin-state" module:"nokia-conf"`
	EchoReceive      *uint32                                                           `path:"echo-receive" module:"nokia-conf"`
	Multiplier       *uint32                                                           `path:"multiplier" module:"nokia-conf"`
	Receive          *uint32                                                           `path:"receive" module:"nokia-conf"`
	TransmitInterval *uint32                                                           `path:"transmit-interval" module:"nokia-conf"`
	Type             E_NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Bfd_Type `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Bfd) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Bfd) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetEchoReceive retrieves the value of the leaf EchoReceive from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EchoReceive is set, it can
// safely use t.GetEchoReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EchoReceive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Bfd) GetEchoReceive() uint32 {
	if t == nil || t.EchoReceive == nil {
		return 0
	}
	return *t.EchoReceive
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Bfd) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 3
	}
	return *t.Multiplier
}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Bfd) GetReceive() uint32 {
	if t == nil || t.Receive == nil {
		return 100
	}
	return *t.Receive
}

// GetTransmitInterval retrieves the value of the leaf TransmitInterval from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitInterval is set, it can
// safely use t.GetTransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Bfd) GetTransmitInterval() uint32 {
	if t == nil || t.TransmitInterval == nil {
		return 100
	}
	return *t.TransmitInterval
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Bfd) GetType() E_NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Bfd_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Bfd_Type_auto
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Bfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Bfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Multiplier == nil {
		var v uint32 = 3
		t.Multiplier = &v
	}
	if t.Receive == nil {
		var v uint32 = 100
		t.Receive = &v
	}
	if t.TransmitInterval == nil {
		var v uint32 = 100
		t.TransmitInterval = &v
	}
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Bfd_Type_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Bfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Bfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Bfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Bfd.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Bfd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp represents the /nokia-conf/configure/groups/group/router/interface/ipv4/dhcp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp struct {
	AdminState              E_NokiaTypesSros_AdminState                                             `path:"admin-state" module:"nokia-conf"`
	Description             *string                                                                 `path:"description" module:"nokia-conf"`
	GiAddress               *string                                                                 `path:"gi-address" module:"nokia-conf"`
	Option_82               *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82  `path:"option-82" module:"nokia-conf"`
	PythonPolicy            *string                                                                 `path:"python-policy" module:"nokia-conf"`
	RelayPlainBootp         *bool                                                                   `path:"relay-plain-bootp" module:"nokia-conf"`
	ReleaseIncludeGiAddress *bool                                                                   `path:"release-include-gi-address" module:"nokia-conf"`
	Server                  []string                                                                `path:"server" module:"nokia-conf"`
	SrcIpAddr               E_NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_SrcIpAddr `path:"src-ip-addr" module:"nokia-conf"`
	Trusted                 *bool                                                                   `path:"trusted" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp) IsYANGGoStruct() {}

// GetOrCreateOption_82 retrieves the value of the Option_82 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp) GetOrCreateOption_82() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82 {
	if t.Option_82 != nil {
		return t.Option_82
	}
	t.Option_82 = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82{}
	return t.Option_82
}

// GetOption_82 returns the value of the Option_82 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp. If the receiver or the field Option_82 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp) GetOption_82() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82 {
	if t != nil && t.Option_82 != nil {
		return t.Option_82
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetGiAddress retrieves the value of the leaf GiAddress from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GiAddress is set, it can
// safely use t.GetGiAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GiAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp) GetGiAddress() string {
	if t == nil || t.GiAddress == nil {
		return ""
	}
	return *t.GiAddress
}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// GetRelayPlainBootp retrieves the value of the leaf RelayPlainBootp from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RelayPlainBootp is set, it can
// safely use t.GetRelayPlainBootp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RelayPlainBootp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp) GetRelayPlainBootp() bool {
	if t == nil || t.RelayPlainBootp == nil {
		return false
	}
	return *t.RelayPlainBootp
}

// GetReleaseIncludeGiAddress retrieves the value of the leaf ReleaseIncludeGiAddress from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReleaseIncludeGiAddress is set, it can
// safely use t.GetReleaseIncludeGiAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReleaseIncludeGiAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp) GetReleaseIncludeGiAddress() bool {
	if t == nil || t.ReleaseIncludeGiAddress == nil {
		return false
	}
	return *t.ReleaseIncludeGiAddress
}

// GetServer retrieves the value of the leaf Server from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Server is set, it can
// safely use t.GetServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Server == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp) GetServer() []string {
	if t == nil || t.Server == nil {
		return nil
	}
	return t.Server
}

// GetSrcIpAddr retrieves the value of the leaf SrcIpAddr from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrcIpAddr is set, it can
// safely use t.GetSrcIpAddr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrcIpAddr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp) GetSrcIpAddr() E_NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_SrcIpAddr {
	if t == nil || t.SrcIpAddr == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_SrcIpAddr_auto
	}
	return t.SrcIpAddr
}

// GetTrusted retrieves the value of the leaf Trusted from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Trusted is set, it can
// safely use t.GetTrusted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Trusted == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp) GetTrusted() bool {
	if t == nil || t.Trusted == nil {
		return false
	}
	return *t.Trusted
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RelayPlainBootp == nil {
		var v bool = false
		t.RelayPlainBootp = &v
	}
	if t.ReleaseIncludeGiAddress == nil {
		var v bool = false
		t.ReleaseIncludeGiAddress = &v
	}
	if t.SrcIpAddr == 0 {
		t.SrcIpAddr = NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_SrcIpAddr_auto
	}
	if t.Trusted == nil {
		var v bool = false
		t.Trusted = &v
	}
	t.Option_82.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82 represents the /nokia-conf/configure/groups/group/router/interface/ipv4/dhcp/option-82 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82 struct {
	Action               E_NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_Action              `path:"action" module:"nokia-conf"`
	CircuitId            *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId            `path:"circuit-id" module:"nokia-conf"`
	RemoteId             *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId             `path:"remote-id" module:"nokia-conf"`
	VendorSpecificOption *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption `path:"vendor-specific-option" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82) IsYANGGoStruct() {}

// GetOrCreateCircuitId retrieves the value of the CircuitId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82) GetOrCreateCircuitId() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId {
	if t.CircuitId != nil {
		return t.CircuitId
	}
	t.CircuitId = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId{}
	return t.CircuitId
}

// GetOrCreateRemoteId retrieves the value of the RemoteId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82) GetOrCreateRemoteId() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId {
	if t.RemoteId != nil {
		return t.RemoteId
	}
	t.RemoteId = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId{}
	return t.RemoteId
}

// GetOrCreateVendorSpecificOption retrieves the value of the VendorSpecificOption field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82) GetOrCreateVendorSpecificOption() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption {
	if t.VendorSpecificOption != nil {
		return t.VendorSpecificOption
	}
	t.VendorSpecificOption = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption{}
	return t.VendorSpecificOption
}

// GetCircuitId returns the value of the CircuitId struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82. If the receiver or the field CircuitId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82) GetCircuitId() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId {
	if t != nil && t.CircuitId != nil {
		return t.CircuitId
	}
	return nil
}

// GetRemoteId returns the value of the RemoteId struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82. If the receiver or the field RemoteId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82) GetRemoteId() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId {
	if t != nil && t.RemoteId != nil {
		return t.RemoteId
	}
	return nil
}

// GetVendorSpecificOption returns the value of the VendorSpecificOption struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82. If the receiver or the field VendorSpecificOption is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82) GetVendorSpecificOption() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption {
	if t != nil && t.VendorSpecificOption != nil {
		return t.VendorSpecificOption
	}
	return nil
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82) GetAction() E_NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_Action {
	if t == nil || t.Action == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_Action_keep
	}
	return t.Action
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_Action_keep
	}
	t.CircuitId.PopulateDefaults()
	t.RemoteId.PopulateDefaults()
	t.VendorSpecificOption.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId represents the /nokia-conf/configure/groups/group/router/interface/ipv4/dhcp/option-82/circuit-id YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId struct {
	AsciiTuple     YANGEmpty `path:"ascii-tuple" module:"nokia-conf"`
	IfName         YANGEmpty `path:"if-name" module:"nokia-conf"`
	Ifindex        YANGEmpty `path:"ifindex" module:"nokia-conf"`
	None           YANGEmpty `path:"none" module:"nokia-conf"`
	PortId         YANGEmpty `path:"port-id" module:"nokia-conf"`
	VlanAsciiTuple YANGEmpty `path:"vlan-ascii-tuple" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId) IsYANGGoStruct() {
}

// GetAsciiTuple retrieves the value of the leaf AsciiTuple from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiTuple is set, it can
// safely use t.GetAsciiTuple() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiTuple == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId) GetAsciiTuple() YANGEmpty {
	if t == nil || t.AsciiTuple == false {
		return false
	}
	return t.AsciiTuple
}

// GetIfName retrieves the value of the leaf IfName from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IfName is set, it can
// safely use t.GetIfName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IfName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId) GetIfName() YANGEmpty {
	if t == nil || t.IfName == false {
		return false
	}
	return t.IfName
}

// GetIfindex retrieves the value of the leaf Ifindex from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ifindex is set, it can
// safely use t.GetIfindex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ifindex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId) GetIfindex() YANGEmpty {
	if t == nil || t.Ifindex == false {
		return false
	}
	return t.Ifindex
}

// GetNone retrieves the value of the leaf None from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if None is set, it can
// safely use t.GetNone() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.None == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId) GetNone() YANGEmpty {
	if t == nil || t.None == false {
		return false
	}
	return t.None
}

// GetPortId retrieves the value of the leaf PortId from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortId is set, it can
// safely use t.GetPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId) GetPortId() YANGEmpty {
	if t == nil || t.PortId == false {
		return false
	}
	return t.PortId
}

// GetVlanAsciiTuple retrieves the value of the leaf VlanAsciiTuple from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanAsciiTuple is set, it can
// safely use t.GetVlanAsciiTuple() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanAsciiTuple == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId) GetVlanAsciiTuple() YANGEmpty {
	if t == nil || t.VlanAsciiTuple == false {
		return false
	}
	return t.VlanAsciiTuple
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_CircuitId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId represents the /nokia-conf/configure/groups/group/router/interface/ipv4/dhcp/option-82/remote-id YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId struct {
	AsciiString *string   `path:"ascii-string" module:"nokia-conf"`
	Mac         YANGEmpty `path:"mac" module:"nokia-conf"`
	None        YANGEmpty `path:"none" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId) IsYANGGoStruct() {
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId) GetMac() YANGEmpty {
	if t == nil || t.Mac == false {
		return false
	}
	return t.Mac
}

// GetNone retrieves the value of the leaf None from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if None is set, it can
// safely use t.GetNone() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.None == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId) GetNone() YANGEmpty {
	if t == nil || t.None == false {
		return false
	}
	return t.None
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_RemoteId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption represents the /nokia-conf/configure/groups/group/router/interface/ipv4/dhcp/option-82/vendor-specific-option YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption struct {
	ClientMacAddress *bool   `path:"client-mac-address" module:"nokia-conf"`
	PoolName         *bool   `path:"pool-name" module:"nokia-conf"`
	PortId           *bool   `path:"port-id" module:"nokia-conf"`
	ServiceId        *bool   `path:"service-id" module:"nokia-conf"`
	String           *string `path:"string" module:"nokia-conf"`
	SystemId         *bool   `path:"system-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) IsYANGGoStruct() {
}

// GetClientMacAddress retrieves the value of the leaf ClientMacAddress from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientMacAddress is set, it can
// safely use t.GetClientMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientMacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetClientMacAddress() bool {
	if t == nil || t.ClientMacAddress == nil {
		return false
	}
	return *t.ClientMacAddress
}

// GetPoolName retrieves the value of the leaf PoolName from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PoolName is set, it can
// safely use t.GetPoolName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PoolName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetPoolName() bool {
	if t == nil || t.PoolName == nil {
		return false
	}
	return *t.PoolName
}

// GetPortId retrieves the value of the leaf PortId from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortId is set, it can
// safely use t.GetPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetPortId() bool {
	if t == nil || t.PortId == nil {
		return false
	}
	return *t.PortId
}

// GetServiceId retrieves the value of the leaf ServiceId from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceId is set, it can
// safely use t.GetServiceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetServiceId() bool {
	if t == nil || t.ServiceId == nil {
		return false
	}
	return *t.ServiceId
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// GetSystemId retrieves the value of the leaf SystemId from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemId is set, it can
// safely use t.GetSystemId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) GetSystemId() bool {
	if t == nil || t.SystemId == nil {
		return false
	}
	return *t.SystemId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ClientMacAddress == nil {
		var v bool = false
		t.ClientMacAddress = &v
	}
	if t.PoolName == nil {
		var v bool = false
		t.PoolName = &v
	}
	if t.PortId == nil {
		var v bool = false
		t.PortId = &v
	}
	if t.ServiceId == nil {
		var v bool = false
		t.ServiceId = &v
	}
	if t.SystemId == nil {
		var v bool = false
		t.SystemId = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp represents the /nokia-conf/configure/groups/group/router/interface/ipv4/icmp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp struct {
	MaskReply    *bool                                                                     `path:"mask-reply" module:"nokia-conf"`
	ParamProblem *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_ParamProblem `path:"param-problem" module:"nokia-conf"`
	Redirects    *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Redirects    `path:"redirects" module:"nokia-conf"`
	TtlExpired   *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_TtlExpired   `path:"ttl-expired" module:"nokia-conf"`
	Unreachables *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Unreachables `path:"unreachables" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp) IsYANGGoStruct() {}

// GetOrCreateParamProblem retrieves the value of the ParamProblem field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp) GetOrCreateParamProblem() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_ParamProblem {
	if t.ParamProblem != nil {
		return t.ParamProblem
	}
	t.ParamProblem = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_ParamProblem{}
	return t.ParamProblem
}

// GetOrCreateRedirects retrieves the value of the Redirects field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp) GetOrCreateRedirects() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Redirects {
	if t.Redirects != nil {
		return t.Redirects
	}
	t.Redirects = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Redirects{}
	return t.Redirects
}

// GetOrCreateTtlExpired retrieves the value of the TtlExpired field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp) GetOrCreateTtlExpired() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_TtlExpired {
	if t.TtlExpired != nil {
		return t.TtlExpired
	}
	t.TtlExpired = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_TtlExpired{}
	return t.TtlExpired
}

// GetOrCreateUnreachables retrieves the value of the Unreachables field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp) GetOrCreateUnreachables() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Unreachables {
	if t.Unreachables != nil {
		return t.Unreachables
	}
	t.Unreachables = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Unreachables{}
	return t.Unreachables
}

// GetParamProblem returns the value of the ParamProblem struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp. If the receiver or the field ParamProblem is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp) GetParamProblem() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_ParamProblem {
	if t != nil && t.ParamProblem != nil {
		return t.ParamProblem
	}
	return nil
}

// GetRedirects returns the value of the Redirects struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp. If the receiver or the field Redirects is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp) GetRedirects() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Redirects {
	if t != nil && t.Redirects != nil {
		return t.Redirects
	}
	return nil
}

// GetTtlExpired returns the value of the TtlExpired struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp. If the receiver or the field TtlExpired is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp) GetTtlExpired() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_TtlExpired {
	if t != nil && t.TtlExpired != nil {
		return t.TtlExpired
	}
	return nil
}

// GetUnreachables returns the value of the Unreachables struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp. If the receiver or the field Unreachables is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp) GetUnreachables() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Unreachables {
	if t != nil && t.Unreachables != nil {
		return t.Unreachables
	}
	return nil
}

// GetMaskReply retrieves the value of the leaf MaskReply from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaskReply is set, it can
// safely use t.GetMaskReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaskReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp) GetMaskReply() bool {
	if t == nil || t.MaskReply == nil {
		return true
	}
	return *t.MaskReply
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaskReply == nil {
		var v bool = true
		t.MaskReply = &v
	}
	t.ParamProblem.PopulateDefaults()
	t.Redirects.PopulateDefaults()
	t.TtlExpired.PopulateDefaults()
	t.Unreachables.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_ParamProblem represents the /nokia-conf/configure/groups/group/router/interface/ipv4/icmp/param-problem YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_ParamProblem struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint32                     `path:"number" module:"nokia-conf"`
	Seconds    *uint32                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_ParamProblem implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_ParamProblem) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_ParamProblem
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_ParamProblem) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_ParamProblem
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_ParamProblem) GetNumber() uint32 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_ParamProblem
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_ParamProblem) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_ParamProblem
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_ParamProblem) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint32 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint32 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_ParamProblem) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_ParamProblem"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_ParamProblem) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_ParamProblem) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_ParamProblem.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_ParamProblem) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Redirects represents the /nokia-conf/configure/groups/group/router/interface/ipv4/icmp/redirects YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Redirects struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Redirects implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Redirects) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Redirects
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Redirects) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Redirects
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Redirects) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Redirects
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Redirects) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Redirects
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Redirects) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Redirects) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Redirects"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Redirects) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Redirects) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Redirects.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Redirects) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_TtlExpired represents the /nokia-conf/configure/groups/group/router/interface/ipv4/icmp/ttl-expired YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_TtlExpired struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_TtlExpired implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_TtlExpired) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_TtlExpired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_TtlExpired) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_TtlExpired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_TtlExpired) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_TtlExpired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_TtlExpired) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_TtlExpired
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_TtlExpired) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_TtlExpired) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_TtlExpired"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_TtlExpired) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_TtlExpired) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_TtlExpired.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_TtlExpired) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Unreachables represents the /nokia-conf/configure/groups/group/router/interface/ipv4/icmp/unreachables YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Unreachables struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Unreachables implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Unreachables) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Unreachables
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Unreachables) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Unreachables
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Unreachables) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Unreachables
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Unreachables) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Unreachables
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Unreachables) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Unreachables) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Unreachables"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Unreachables) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Unreachables) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Unreachables.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Icmp_Unreachables) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery represents the /nokia-conf/configure/groups/group/router/interface/ipv4/neighbor-discovery YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery struct {
	LearnUnsolicited         *bool                                                                                               `path:"learn-unsolicited" module:"nokia-conf"`
	Limit                    *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_Limit                     `path:"limit" module:"nokia-conf"`
	LocalProxyArp            *bool                                                                                               `path:"local-proxy-arp" module:"nokia-conf"`
	ProactiveRefresh         *bool                                                                                               `path:"proactive-refresh" module:"nokia-conf"`
	ProxyArpPolicy           []string                                                                                            `path:"proxy-arp-policy" module:"nokia-conf"`
	RemoteProxyArp           *bool                                                                                               `path:"remote-proxy-arp" module:"nokia-conf"`
	RetryTimer               *uint32                                                                                             `path:"retry-timer" module:"nokia-conf"`
	StaticNeighbor           map[string]*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighbor `path:"static-neighbor" module:"nokia-conf"`
	StaticNeighborUnnumbered *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered  `path:"static-neighbor-unnumbered" module:"nokia-conf" yangPresence:"true"`
	Timeout                  *uint32                                                                                             `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery) IsYANGGoStruct() {}

// NewStaticNeighbor creates a new entry in the StaticNeighbor list of the
// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery) NewStaticNeighbor(Ipv4Address string) (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticNeighbor == nil {
		t.StaticNeighbor = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighbor)
	}

	key := Ipv4Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StaticNeighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StaticNeighbor", key)
	}

	t.StaticNeighbor[key] = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighbor{
		Ipv4Address: &Ipv4Address,
	}

	return t.StaticNeighbor[key], nil
}

// RenameStaticNeighbor renames an entry in the list StaticNeighbor within
// the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery) RenameStaticNeighbor(oldK, newK string) error {
	if _, ok := t.StaticNeighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in StaticNeighbor", newK)
	}

	e, ok := t.StaticNeighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in StaticNeighbor", oldK)
	}
	e.Ipv4Address = &newK

	t.StaticNeighbor[newK] = e
	delete(t.StaticNeighbor, oldK)
	return nil
}

// GetOrCreateStaticNeighbor retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery) GetOrCreateStaticNeighbor(Ipv4Address string) *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighbor {

	key := Ipv4Address

	if v, ok := t.StaticNeighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStaticNeighbor(Ipv4Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStaticNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetStaticNeighbor retrieves the value with the specified key from
// the StaticNeighbor map field of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery) GetStaticNeighbor(Ipv4Address string) *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighbor {

	if t == nil {
		return nil
	}

	key := Ipv4Address

	if lm, ok := t.StaticNeighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteStaticNeighbor deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery) DeleteStaticNeighbor(Ipv4Address string) {
	key := Ipv4Address

	delete(t.StaticNeighbor, key)
}

// AppendStaticNeighbor appends the supplied NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighbor struct to the
// list StaticNeighbor of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighbor already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery) AppendStaticNeighbor(v *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) error {
	if v.Ipv4Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv4Address")
	}

	key := *v.Ipv4Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticNeighbor == nil {
		t.StaticNeighbor = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighbor)
	}

	if _, ok := t.StaticNeighbor[key]; ok {
		return fmt.Errorf("duplicate key for list StaticNeighbor %v", key)
	}

	t.StaticNeighbor[key] = v
	return nil
}

// GetOrCreateLimit retrieves the value of the Limit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery) GetOrCreateLimit() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_Limit {
	if t.Limit != nil {
		return t.Limit
	}
	t.Limit = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_Limit{}
	return t.Limit
}

// GetOrCreateStaticNeighborUnnumbered retrieves the value of the StaticNeighborUnnumbered field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery) GetOrCreateStaticNeighborUnnumbered() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered {
	if t.StaticNeighborUnnumbered != nil {
		return t.StaticNeighborUnnumbered
	}
	t.StaticNeighborUnnumbered = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered{}
	return t.StaticNeighborUnnumbered
}

// GetLimit returns the value of the Limit struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery. If the receiver or the field Limit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery) GetLimit() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_Limit {
	if t != nil && t.Limit != nil {
		return t.Limit
	}
	return nil
}

// GetStaticNeighborUnnumbered returns the value of the StaticNeighborUnnumbered struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery. If the receiver or the field StaticNeighborUnnumbered is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery) GetStaticNeighborUnnumbered() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered {
	if t != nil && t.StaticNeighborUnnumbered != nil {
		return t.StaticNeighborUnnumbered
	}
	return nil
}

// GetLearnUnsolicited retrieves the value of the leaf LearnUnsolicited from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LearnUnsolicited is set, it can
// safely use t.GetLearnUnsolicited() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LearnUnsolicited == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery) GetLearnUnsolicited() bool {
	if t == nil || t.LearnUnsolicited == nil {
		return false
	}
	return *t.LearnUnsolicited
}

// GetLocalProxyArp retrieves the value of the leaf LocalProxyArp from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalProxyArp is set, it can
// safely use t.GetLocalProxyArp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalProxyArp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery) GetLocalProxyArp() bool {
	if t == nil || t.LocalProxyArp == nil {
		return false
	}
	return *t.LocalProxyArp
}

// GetProactiveRefresh retrieves the value of the leaf ProactiveRefresh from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProactiveRefresh is set, it can
// safely use t.GetProactiveRefresh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProactiveRefresh == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery) GetProactiveRefresh() bool {
	if t == nil || t.ProactiveRefresh == nil {
		return false
	}
	return *t.ProactiveRefresh
}

// GetProxyArpPolicy retrieves the value of the leaf ProxyArpPolicy from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProxyArpPolicy is set, it can
// safely use t.GetProxyArpPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProxyArpPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery) GetProxyArpPolicy() []string {
	if t == nil || t.ProxyArpPolicy == nil {
		return nil
	}
	return t.ProxyArpPolicy
}

// GetRemoteProxyArp retrieves the value of the leaf RemoteProxyArp from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteProxyArp is set, it can
// safely use t.GetRemoteProxyArp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteProxyArp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery) GetRemoteProxyArp() bool {
	if t == nil || t.RemoteProxyArp == nil {
		return false
	}
	return *t.RemoteProxyArp
}

// GetRetryTimer retrieves the value of the leaf RetryTimer from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetryTimer is set, it can
// safely use t.GetRetryTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetryTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery) GetRetryTimer() uint32 {
	if t == nil || t.RetryTimer == nil {
		return 50
	}
	return *t.RetryTimer
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 14400
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LearnUnsolicited == nil {
		var v bool = false
		t.LearnUnsolicited = &v
	}
	if t.ProactiveRefresh == nil {
		var v bool = false
		t.ProactiveRefresh = &v
	}
	if t.RemoteProxyArp == nil {
		var v bool = false
		t.RemoteProxyArp = &v
	}
	if t.RetryTimer == nil {
		var v uint32 = 50
		t.RetryTimer = &v
	}
	if t.Timeout == nil {
		var v uint32 = 14400
		t.Timeout = &v
	}
	t.Limit.PopulateDefaults()
	t.StaticNeighborUnnumbered.PopulateDefaults()
	for _, e := range t.StaticNeighbor {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_Limit represents the /nokia-conf/configure/groups/group/router/interface/ipv4/neighbor-discovery/limit YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_Limit struct {
	LogOnly    *bool   `path:"log-only" module:"nokia-conf"`
	MaxEntries *int32  `path:"max-entries" module:"nokia-conf"`
	Threshold  *uint32 `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_Limit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_Limit) IsYANGGoStruct() {
}

// GetLogOnly retrieves the value of the leaf LogOnly from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_Limit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogOnly is set, it can
// safely use t.GetLogOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_Limit) GetLogOnly() bool {
	if t == nil || t.LogOnly == nil {
		return false
	}
	return *t.LogOnly
}

// GetMaxEntries retrieves the value of the leaf MaxEntries from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_Limit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxEntries is set, it can
// safely use t.GetMaxEntries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxEntries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_Limit) GetMaxEntries() int32 {
	if t == nil || t.MaxEntries == nil {
		return 0
	}
	return *t.MaxEntries
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_Limit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_Limit) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 90
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_Limit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_Limit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LogOnly == nil {
		var v bool = false
		t.LogOnly = &v
	}
	if t.Threshold == nil {
		var v uint32 = 90
		t.Threshold = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_Limit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_Limit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_Limit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_Limit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_Limit.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_Limit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighbor represents the /nokia-conf/configure/groups/group/router/interface/ipv4/neighbor-discovery/static-neighbor YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighbor struct {
	Ipv4Address *string `path:"ipv4-address" module:"nokia-conf"`
	MacAddress  *string `path:"mac-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) IsYANGGoStruct() {
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) GetIpv4Address() string {
	if t == nil || t.Ipv4Address == nil {
		return ""
	}
	return *t.Ipv4Address
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighbor struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Address")
	}

	return map[string]interface{}{
		"ipv4-address": *t.Ipv4Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighbor.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered represents the /nokia-conf/configure/groups/group/router/interface/ipv4/neighbor-discovery/static-neighbor-unnumbered YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered struct {
	MacAddress *string `path:"mac-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered) IsYANGGoStruct() {
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_NeighborDiscovery_StaticNeighborUnnumbered) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Primary represents the /nokia-conf/configure/groups/group/router/interface/ipv4/primary YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Primary struct {
	Address        *string                                     `path:"address" module:"nokia-conf"`
	Broadcast      E_NokiaTypesServices_BroadcastAddressFormat `path:"broadcast" module:"nokia-conf"`
	GreTermination *bool                                       `path:"gre-termination" module:"nokia-conf"`
	PrefixLength   *uint32                                     `path:"prefix-length" module:"nokia-conf"`
	TrackSrrp      *uint32                                     `path:"track-srrp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Primary implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Primary) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Primary) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetBroadcast retrieves the value of the leaf Broadcast from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Broadcast is set, it can
// safely use t.GetBroadcast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Broadcast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Primary) GetBroadcast() E_NokiaTypesServices_BroadcastAddressFormat {
	if t == nil || t.Broadcast == 0 {
		return NokiaTypesServices_BroadcastAddressFormat_host_ones
	}
	return t.Broadcast
}

// GetGreTermination retrieves the value of the leaf GreTermination from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GreTermination is set, it can
// safely use t.GetGreTermination() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GreTermination == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Primary) GetGreTermination() bool {
	if t == nil || t.GreTermination == nil {
		return false
	}
	return *t.GreTermination
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Primary) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// GetTrackSrrp retrieves the value of the leaf TrackSrrp from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrackSrrp is set, it can
// safely use t.GetTrackSrrp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrackSrrp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Primary) GetTrackSrrp() uint32 {
	if t == nil || t.TrackSrrp == nil {
		return 0
	}
	return *t.TrackSrrp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Primary
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Primary) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Broadcast == 0 {
		t.Broadcast = NokiaTypesServices_BroadcastAddressFormat_host_ones
	}
	if t.GreTermination == nil {
		var v bool = false
		t.GreTermination = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Primary) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Primary"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Primary) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Primary) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Primary.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Primary) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Secondary represents the /nokia-conf/configure/groups/group/router/interface/ipv4/secondary YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Secondary struct {
	Address      *string                                     `path:"address" module:"nokia-conf"`
	Broadcast    E_NokiaTypesServices_BroadcastAddressFormat `path:"broadcast" module:"nokia-conf"`
	IgpInhibit   *bool                                       `path:"igp-inhibit" module:"nokia-conf"`
	PrefixLength *uint32                                     `path:"prefix-length" module:"nokia-conf"`
	TrackSrrp    *uint32                                     `path:"track-srrp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Secondary implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Secondary) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Secondary) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetBroadcast retrieves the value of the leaf Broadcast from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Broadcast is set, it can
// safely use t.GetBroadcast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Broadcast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Secondary) GetBroadcast() E_NokiaTypesServices_BroadcastAddressFormat {
	if t == nil || t.Broadcast == 0 {
		return NokiaTypesServices_BroadcastAddressFormat_host_ones
	}
	return t.Broadcast
}

// GetIgpInhibit retrieves the value of the leaf IgpInhibit from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgpInhibit is set, it can
// safely use t.GetIgpInhibit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgpInhibit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Secondary) GetIgpInhibit() bool {
	if t == nil || t.IgpInhibit == nil {
		return false
	}
	return *t.IgpInhibit
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Secondary) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// GetTrackSrrp retrieves the value of the leaf TrackSrrp from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrackSrrp is set, it can
// safely use t.GetTrackSrrp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrackSrrp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Secondary) GetTrackSrrp() uint32 {
	if t == nil || t.TrackSrrp == nil {
		return 0
	}
	return *t.TrackSrrp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Secondary
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Secondary) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Broadcast == 0 {
		t.Broadcast = NokiaTypesServices_BroadcastAddressFormat_host_ones
	}
	if t.IgpInhibit == nil {
		var v bool = false
		t.IgpInhibit = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Secondary struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Secondary) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Secondary) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Secondary"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Secondary) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Secondary) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Secondary.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Secondary) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Unnumbered represents the /nokia-conf/configure/groups/group/router/interface/ipv4/unnumbered YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Unnumbered struct {
	IpAddress *string   `path:"ip-address" module:"nokia-conf"`
	IpIntName *string   `path:"ip-int-name" module:"nokia-conf"`
	System    YANGEmpty `path:"system" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Unnumbered implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Unnumbered) IsYANGGoStruct() {}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Unnumbered
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Unnumbered) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetIpIntName retrieves the value of the leaf IpIntName from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Unnumbered
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpIntName is set, it can
// safely use t.GetIpIntName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpIntName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Unnumbered) GetIpIntName() string {
	if t == nil || t.IpIntName == nil {
		return ""
	}
	return *t.IpIntName
}

// GetSystem retrieves the value of the leaf System from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Unnumbered
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if System is set, it can
// safely use t.GetSystem() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.System == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Unnumbered) GetSystem() YANGEmpty {
	if t == nil || t.System == false {
		return false
	}
	return t.System
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Unnumbered
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Unnumbered) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Unnumbered) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Unnumbered"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Unnumbered) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Unnumbered) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Unnumbered.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Unnumbered) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_UrpfCheck represents the /nokia-conf/configure/groups/group/router/interface/ipv4/urpf-check YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_UrpfCheck struct {
	IgnoreDefault *bool                            `path:"ignore-default" module:"nokia-conf"`
	Mode          E_NokiaTypesRouter_UrpfCheckMode `path:"mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_UrpfCheck implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_UrpfCheck) IsYANGGoStruct() {}

// GetIgnoreDefault retrieves the value of the leaf IgnoreDefault from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_UrpfCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreDefault is set, it can
// safely use t.GetIgnoreDefault() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreDefault == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_UrpfCheck) GetIgnoreDefault() bool {
	if t == nil || t.IgnoreDefault == nil {
		return false
	}
	return *t.IgnoreDefault
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_UrpfCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_UrpfCheck) GetMode() E_NokiaTypesRouter_UrpfCheckMode {
	if t == nil || t.Mode == 0 {
		return NokiaTypesRouter_UrpfCheckMode_strict
	}
	return t.Mode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_UrpfCheck
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_UrpfCheck) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IgnoreDefault == nil {
		var v bool = false
		t.IgnoreDefault = &v
	}
	if t.Mode == 0 {
		t.Mode = NokiaTypesRouter_UrpfCheckMode_strict
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_UrpfCheck) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_UrpfCheck"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_UrpfCheck) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_UrpfCheck) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_UrpfCheck.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_UrpfCheck) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp represents the /nokia-conf/configure/groups/group/router/interface/ipv4/vrrp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp struct {
	AdminState        E_NokiaTypesSros_AdminState                                                       `path:"admin-state" module:"nokia-conf"`
	AuthenticationKey *string                                                                           `path:"authentication-key" module:"nokia-conf"`
	Backup            []string                                                                          `path:"backup" module:"nokia-conf"`
	BfdLiveness       *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp_BfdLiveness          `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	InitDelay         *uint32                                                                           `path:"init-delay" module:"nokia-conf"`
	Mac               *string                                                                           `path:"mac" module:"nokia-conf"`
	MasterIntInherit  *bool                                                                             `path:"master-int-inherit" module:"nokia-conf"`
	MessageInterval   *uint32                                                                           `path:"message-interval" module:"nokia-conf"`
	MonitorOperGroup  *string                                                                           `path:"monitor-oper-group" module:"nokia-conf"`
	NtpReply          *bool                                                                             `path:"ntp-reply" module:"nokia-conf"`
	OperGroup         *string                                                                           `path:"oper-group" module:"nokia-conf"`
	Owner             *bool                                                                             `path:"owner" module:"nokia-conf"`
	Passive           *bool                                                                             `path:"passive" module:"nokia-conf"`
	PingReply         *bool                                                                             `path:"ping-reply" module:"nokia-conf"`
	Policy            *uint32                                                                           `path:"policy" module:"nokia-conf"`
	Preempt           *bool                                                                             `path:"preempt" module:"nokia-conf"`
	Priority          *uint32                                                                           `path:"priority" module:"nokia-conf"`
	SshReply          *bool                                                                             `path:"ssh-reply" module:"nokia-conf"`
	StandbyForwarding *bool                                                                             `path:"standby-forwarding" module:"nokia-conf"`
	TelnetReply       *bool                                                                             `path:"telnet-reply" module:"nokia-conf"`
	TracerouteReply   *bool                                                                             `path:"traceroute-reply" module:"nokia-conf"`
	VirtualRouterId   NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp_VirtualRouterId_Union `path:"virtual-router-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp) IsYANGGoStruct() {}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp) GetOrCreateBfdLiveness() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp_BfdLiveness{}
	return t.BfdLiveness
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp) GetBfdLiveness() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetBackup retrieves the value of the leaf Backup from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Backup is set, it can
// safely use t.GetBackup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Backup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp) GetBackup() []string {
	if t == nil || t.Backup == nil {
		return nil
	}
	return t.Backup
}

// GetInitDelay retrieves the value of the leaf InitDelay from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitDelay is set, it can
// safely use t.GetInitDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp) GetInitDelay() uint32 {
	if t == nil || t.InitDelay == nil {
		return 0
	}
	return *t.InitDelay
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// GetMasterIntInherit retrieves the value of the leaf MasterIntInherit from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MasterIntInherit is set, it can
// safely use t.GetMasterIntInherit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MasterIntInherit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp) GetMasterIntInherit() bool {
	if t == nil || t.MasterIntInherit == nil {
		return false
	}
	return *t.MasterIntInherit
}

// GetMessageInterval retrieves the value of the leaf MessageInterval from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageInterval is set, it can
// safely use t.GetMessageInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp) GetMessageInterval() uint32 {
	if t == nil || t.MessageInterval == nil {
		return 10
	}
	return *t.MessageInterval
}

// GetMonitorOperGroup retrieves the value of the leaf MonitorOperGroup from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorOperGroup is set, it can
// safely use t.GetMonitorOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorOperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp) GetMonitorOperGroup() string {
	if t == nil || t.MonitorOperGroup == nil {
		return ""
	}
	return *t.MonitorOperGroup
}

// GetNtpReply retrieves the value of the leaf NtpReply from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NtpReply is set, it can
// safely use t.GetNtpReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NtpReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp) GetNtpReply() bool {
	if t == nil || t.NtpReply == nil {
		return false
	}
	return *t.NtpReply
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// GetOwner retrieves the value of the leaf Owner from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Owner is set, it can
// safely use t.GetOwner() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Owner == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp) GetOwner() bool {
	if t == nil || t.Owner == nil {
		return false
	}
	return *t.Owner
}

// GetPassive retrieves the value of the leaf Passive from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Passive is set, it can
// safely use t.GetPassive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Passive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp) GetPassive() bool {
	if t == nil || t.Passive == nil {
		return false
	}
	return *t.Passive
}

// GetPingReply retrieves the value of the leaf PingReply from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PingReply is set, it can
// safely use t.GetPingReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PingReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp) GetPingReply() bool {
	if t == nil || t.PingReply == nil {
		return false
	}
	return *t.PingReply
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp) GetPolicy() uint32 {
	if t == nil || t.Policy == nil {
		return 0
	}
	return *t.Policy
}

// GetPreempt retrieves the value of the leaf Preempt from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preempt is set, it can
// safely use t.GetPreempt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preempt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp) GetPreempt() bool {
	if t == nil || t.Preempt == nil {
		return true
	}
	return *t.Preempt
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp) GetPriority() uint32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetSshReply retrieves the value of the leaf SshReply from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SshReply is set, it can
// safely use t.GetSshReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SshReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp) GetSshReply() bool {
	if t == nil || t.SshReply == nil {
		return false
	}
	return *t.SshReply
}

// GetStandbyForwarding retrieves the value of the leaf StandbyForwarding from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StandbyForwarding is set, it can
// safely use t.GetStandbyForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StandbyForwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp) GetStandbyForwarding() bool {
	if t == nil || t.StandbyForwarding == nil {
		return false
	}
	return *t.StandbyForwarding
}

// GetTelnetReply retrieves the value of the leaf TelnetReply from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TelnetReply is set, it can
// safely use t.GetTelnetReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TelnetReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp) GetTelnetReply() bool {
	if t == nil || t.TelnetReply == nil {
		return false
	}
	return *t.TelnetReply
}

// GetTracerouteReply retrieves the value of the leaf TracerouteReply from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TracerouteReply is set, it can
// safely use t.GetTracerouteReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TracerouteReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp) GetTracerouteReply() bool {
	if t == nil || t.TracerouteReply == nil {
		return false
	}
	return *t.TracerouteReply
}

// GetVirtualRouterId retrieves the value of the leaf VirtualRouterId from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VirtualRouterId is set, it can
// safely use t.GetVirtualRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VirtualRouterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp) GetVirtualRouterId() NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp_VirtualRouterId_Union {
	if t == nil || t.VirtualRouterId == nil {
		return nil
	}
	return t.VirtualRouterId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.MessageInterval == nil {
		var v uint32 = 10
		t.MessageInterval = &v
	}
	if t.NtpReply == nil {
		var v bool = false
		t.NtpReply = &v
	}
	if t.Owner == nil {
		var v bool = false
		t.Owner = &v
	}
	if t.Passive == nil {
		var v bool = false
		t.Passive = &v
	}
	if t.PingReply == nil {
		var v bool = false
		t.PingReply = &v
	}
	if t.Preempt == nil {
		var v bool = true
		t.Preempt = &v
	}
	if t.SshReply == nil {
		var v bool = false
		t.SshReply = &v
	}
	if t.StandbyForwarding == nil {
		var v bool = false
		t.StandbyForwarding = &v
	}
	if t.TelnetReply == nil {
		var v bool = false
		t.TelnetReply = &v
	}
	if t.TracerouteReply == nil {
		var v bool = false
		t.TracerouteReply = &v
	}
	t.BfdLiveness.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"virtual-router-id": t.VirtualRouterId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp_BfdLiveness represents the /nokia-conf/configure/groups/group/router/interface/ipv4/vrrp/bfd-liveness YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp_BfdLiveness struct {
	DestIp        *string `path:"dest-ip" module:"nokia-conf"`
	InterfaceName *string `path:"interface-name" module:"nokia-conf"`
	ServiceName   *string `path:"service-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp_BfdLiveness) IsYANGGoStruct() {}

// GetDestIp retrieves the value of the leaf DestIp from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestIp is set, it can
// safely use t.GetDestIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp_BfdLiveness) GetDestIp() string {
	if t == nil || t.DestIp == nil {
		return ""
	}
	return *t.DestIp
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp_BfdLiveness) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp_BfdLiveness) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp_BfdLiveness.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv4_Vrrp_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6 represents the /nokia-conf/configure/groups/group/router/interface/ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6 struct {
	Address                   map[string]*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Address                                                                         `path:"address" module:"nokia-conf"`
	Bfd                       *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Bfd                                                                                        `path:"bfd" module:"nokia-conf"`
	DuplicateAddressDetection *bool                                                                                                                                              `path:"duplicate-address-detection" module:"nokia-conf"`
	ForwardIpv4Packets        *bool                                                                                                                                              `path:"forward-ipv4-packets" module:"nokia-conf"`
	Icmp6                     *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6                                                                                      `path:"icmp6" module:"nokia-conf"`
	LinkLocalAddress          *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_LinkLocalAddress                                                                           `path:"link-local-address" module:"nokia-conf"`
	LocalDhcpServer           *string                                                                                                                                            `path:"local-dhcp-server" module:"nokia-conf"`
	NeighborDiscovery         *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery                                                                          `path:"neighbor-discovery" module:"nokia-conf"`
	QosRouteLookup            E_NokiaTypesRouter_QosRouteLookup                                                                                                                  `path:"qos-route-lookup" module:"nokia-conf"`
	TcpMss                    *uint32                                                                                                                                            `path:"tcp-mss" module:"nokia-conf"`
	UrpfCheck                 *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_UrpfCheck                                                                                  `path:"urpf-check" module:"nokia-conf" yangPresence:"true"`
	Vrrp                      map[NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp_VirtualRouterId_Union]*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp `path:"vrrp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6) NewAddress(Ipv6Address string) (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Address, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Address)
	}

	key := Ipv6Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Address{
		Ipv6Address: &Ipv6Address,
	}

	return t.Address[key], nil
}

// RenameAddress renames an entry in the list Address within
// the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6) RenameAddress(oldK, newK string) error {
	if _, ok := t.Address[newK]; ok {
		return fmt.Errorf("key %v already exists in Address", newK)
	}

	e, ok := t.Address[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Address", oldK)
	}
	e.Ipv6Address = &newK

	t.Address[newK] = e
	delete(t.Address, oldK)
	return nil
}

// GetOrCreateAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6) GetOrCreateAddress(Ipv6Address string) *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Address {

	key := Ipv6Address

	if v, ok := t.Address[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddress(Ipv6Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddress got unexpected error: %v", err))
	}
	return v
}

// GetAddress retrieves the value with the specified key from
// the Address map field of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6) GetAddress(Ipv6Address string) *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Address {

	if t == nil {
		return nil
	}

	key := Ipv6Address

	if lm, ok := t.Address[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6) DeleteAddress(Ipv6Address string) {
	key := Ipv6Address

	delete(t.Address, key)
}

// AppendAddress appends the supplied NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Address struct to the
// list Address of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Address already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6) AppendAddress(v *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Address) error {
	if v.Ipv6Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Address")
	}

	key := *v.Ipv6Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Address)
	}

	if _, ok := t.Address[key]; ok {
		return fmt.Errorf("duplicate key for list Address %v", key)
	}

	t.Address[key] = v
	return nil
}

// NewVrrp creates a new entry in the Vrrp list of the
// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6) NewVrrp(VirtualRouterId NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp_VirtualRouterId_Union) (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vrrp == nil {
		t.Vrrp = make(map[NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp_VirtualRouterId_Union]*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp)
	}

	key := VirtualRouterId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vrrp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vrrp", key)
	}

	t.Vrrp[key] = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp{
		VirtualRouterId: VirtualRouterId,
	}

	return t.Vrrp[key], nil
}

// RenameVrrp renames an entry in the list Vrrp within
// the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6) RenameVrrp(oldK, newK NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp_VirtualRouterId_Union) error {
	if _, ok := t.Vrrp[newK]; ok {
		return fmt.Errorf("key %v already exists in Vrrp", newK)
	}

	e, ok := t.Vrrp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Vrrp", oldK)
	}
	e.VirtualRouterId = newK

	t.Vrrp[newK] = e
	delete(t.Vrrp, oldK)
	return nil
}

// GetOrCreateVrrp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6) GetOrCreateVrrp(VirtualRouterId NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp_VirtualRouterId_Union) *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp {

	key := VirtualRouterId

	if v, ok := t.Vrrp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVrrp(VirtualRouterId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVrrp got unexpected error: %v", err))
	}
	return v
}

// GetVrrp retrieves the value with the specified key from
// the Vrrp map field of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6) GetVrrp(VirtualRouterId NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp_VirtualRouterId_Union) *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp {

	if t == nil {
		return nil
	}

	key := VirtualRouterId

	if lm, ok := t.Vrrp[key]; ok {
		return lm
	}
	return nil
}

// DeleteVrrp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6) DeleteVrrp(VirtualRouterId NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp_VirtualRouterId_Union) {
	key := VirtualRouterId

	delete(t.Vrrp, key)
}

// AppendVrrp appends the supplied NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp struct to the
// list Vrrp of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6) AppendVrrp(v *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp) error {
	key := v.VirtualRouterId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vrrp == nil {
		t.Vrrp = make(map[NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp_VirtualRouterId_Union]*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp)
	}

	if _, ok := t.Vrrp[key]; ok {
		return fmt.Errorf("duplicate key for list Vrrp %v", key)
	}

	t.Vrrp[key] = v
	return nil
}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6) GetOrCreateBfd() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Bfd{}
	return t.Bfd
}

// GetOrCreateIcmp6 retrieves the value of the Icmp6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6) GetOrCreateIcmp6() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6 {
	if t.Icmp6 != nil {
		return t.Icmp6
	}
	t.Icmp6 = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6{}
	return t.Icmp6
}

// GetOrCreateLinkLocalAddress retrieves the value of the LinkLocalAddress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6) GetOrCreateLinkLocalAddress() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_LinkLocalAddress {
	if t.LinkLocalAddress != nil {
		return t.LinkLocalAddress
	}
	t.LinkLocalAddress = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_LinkLocalAddress{}
	return t.LinkLocalAddress
}

// GetOrCreateNeighborDiscovery retrieves the value of the NeighborDiscovery field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6) GetOrCreateNeighborDiscovery() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery {
	if t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	t.NeighborDiscovery = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery{}
	return t.NeighborDiscovery
}

// GetOrCreateUrpfCheck retrieves the value of the UrpfCheck field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6) GetOrCreateUrpfCheck() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_UrpfCheck {
	if t.UrpfCheck != nil {
		return t.UrpfCheck
	}
	t.UrpfCheck = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_UrpfCheck{}
	return t.UrpfCheck
}

// GetBfd returns the value of the Bfd struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6) GetBfd() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetIcmp6 returns the value of the Icmp6 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6. If the receiver or the field Icmp6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6) GetIcmp6() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6 {
	if t != nil && t.Icmp6 != nil {
		return t.Icmp6
	}
	return nil
}

// GetLinkLocalAddress returns the value of the LinkLocalAddress struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6. If the receiver or the field LinkLocalAddress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6) GetLinkLocalAddress() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_LinkLocalAddress {
	if t != nil && t.LinkLocalAddress != nil {
		return t.LinkLocalAddress
	}
	return nil
}

// GetNeighborDiscovery returns the value of the NeighborDiscovery struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6. If the receiver or the field NeighborDiscovery is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6) GetNeighborDiscovery() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery {
	if t != nil && t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	return nil
}

// GetUrpfCheck returns the value of the UrpfCheck struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6. If the receiver or the field UrpfCheck is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6) GetUrpfCheck() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_UrpfCheck {
	if t != nil && t.UrpfCheck != nil {
		return t.UrpfCheck
	}
	return nil
}

// GetDuplicateAddressDetection retrieves the value of the leaf DuplicateAddressDetection from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DuplicateAddressDetection is set, it can
// safely use t.GetDuplicateAddressDetection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DuplicateAddressDetection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6) GetDuplicateAddressDetection() bool {
	if t == nil || t.DuplicateAddressDetection == nil {
		return true
	}
	return *t.DuplicateAddressDetection
}

// GetForwardIpv4Packets retrieves the value of the leaf ForwardIpv4Packets from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardIpv4Packets is set, it can
// safely use t.GetForwardIpv4Packets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardIpv4Packets == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6) GetForwardIpv4Packets() bool {
	if t == nil || t.ForwardIpv4Packets == nil {
		return false
	}
	return *t.ForwardIpv4Packets
}

// GetLocalDhcpServer retrieves the value of the leaf LocalDhcpServer from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalDhcpServer is set, it can
// safely use t.GetLocalDhcpServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalDhcpServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6) GetLocalDhcpServer() string {
	if t == nil || t.LocalDhcpServer == nil {
		return ""
	}
	return *t.LocalDhcpServer
}

// GetQosRouteLookup retrieves the value of the leaf QosRouteLookup from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QosRouteLookup is set, it can
// safely use t.GetQosRouteLookup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QosRouteLookup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6) GetQosRouteLookup() E_NokiaTypesRouter_QosRouteLookup {
	if t == nil || t.QosRouteLookup == 0 {
		return 0
	}
	return t.QosRouteLookup
}

// GetTcpMss retrieves the value of the leaf TcpMss from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpMss is set, it can
// safely use t.GetTcpMss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpMss == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6) GetTcpMss() uint32 {
	if t == nil || t.TcpMss == nil {
		return 0
	}
	return *t.TcpMss
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DuplicateAddressDetection == nil {
		var v bool = true
		t.DuplicateAddressDetection = &v
	}
	if t.ForwardIpv4Packets == nil {
		var v bool = false
		t.ForwardIpv4Packets = &v
	}
	t.Bfd.PopulateDefaults()
	t.Icmp6.PopulateDefaults()
	t.LinkLocalAddress.PopulateDefaults()
	t.NeighborDiscovery.PopulateDefaults()
	t.UrpfCheck.PopulateDefaults()
	for _, e := range t.Address {
		e.PopulateDefaults()
	}
	for _, e := range t.Vrrp {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Address represents the /nokia-conf/configure/groups/group/router/interface/ipv6/address YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Address struct {
	DuplicateAddressDetection *bool   `path:"duplicate-address-detection" module:"nokia-conf"`
	Eui_64                    *bool   `path:"eui-64" module:"nokia-conf"`
	Ipv6Address               *string `path:"ipv6-address" module:"nokia-conf"`
	PrefixLength              *uint32 `path:"prefix-length" module:"nokia-conf"`
	PrimaryPreference         *uint32 `path:"primary-preference" module:"nokia-conf"`
	TrackSrrp                 *uint32 `path:"track-srrp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Address) IsYANGGoStruct() {}

// GetDuplicateAddressDetection retrieves the value of the leaf DuplicateAddressDetection from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DuplicateAddressDetection is set, it can
// safely use t.GetDuplicateAddressDetection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DuplicateAddressDetection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Address) GetDuplicateAddressDetection() bool {
	if t == nil || t.DuplicateAddressDetection == nil {
		return true
	}
	return *t.DuplicateAddressDetection
}

// GetEui_64 retrieves the value of the leaf Eui_64 from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eui_64 is set, it can
// safely use t.GetEui_64() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eui_64 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Address) GetEui_64() bool {
	if t == nil || t.Eui_64 == nil {
		return false
	}
	return *t.Eui_64
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Address) GetIpv6Address() string {
	if t == nil || t.Ipv6Address == nil {
		return ""
	}
	return *t.Ipv6Address
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Address) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// GetPrimaryPreference retrieves the value of the leaf PrimaryPreference from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrimaryPreference is set, it can
// safely use t.GetPrimaryPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrimaryPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Address) GetPrimaryPreference() uint32 {
	if t == nil || t.PrimaryPreference == nil {
		return 0
	}
	return *t.PrimaryPreference
}

// GetTrackSrrp retrieves the value of the leaf TrackSrrp from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrackSrrp is set, it can
// safely use t.GetTrackSrrp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrackSrrp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Address) GetTrackSrrp() uint32 {
	if t == nil || t.TrackSrrp == nil {
		return 0
	}
	return *t.TrackSrrp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Address
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Address) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DuplicateAddressDetection == nil {
		var v bool = true
		t.DuplicateAddressDetection = &v
	}
	if t.Eui_64 == nil {
		var v bool = false
		t.Eui_64 = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Address struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Address")
	}

	return map[string]interface{}{
		"ipv6-address": *t.Ipv6Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Address) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Address) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Address.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Address) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Bfd represents the /nokia-conf/configure/groups/group/router/interface/ipv6/bfd YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Bfd struct {
	AdminState       E_NokiaTypesSros_AdminState                                       `path:"admin-state" module:"nokia-conf"`
	EchoReceive      *uint32                                                           `path:"echo-receive" module:"nokia-conf"`
	Multiplier       *uint32                                                           `path:"multiplier" module:"nokia-conf"`
	Receive          *uint32                                                           `path:"receive" module:"nokia-conf"`
	TransmitInterval *uint32                                                           `path:"transmit-interval" module:"nokia-conf"`
	Type             E_NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Bfd_Type `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Bfd) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Bfd) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetEchoReceive retrieves the value of the leaf EchoReceive from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EchoReceive is set, it can
// safely use t.GetEchoReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EchoReceive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Bfd) GetEchoReceive() uint32 {
	if t == nil || t.EchoReceive == nil {
		return 0
	}
	return *t.EchoReceive
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Bfd) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 3
	}
	return *t.Multiplier
}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Bfd) GetReceive() uint32 {
	if t == nil || t.Receive == nil {
		return 100
	}
	return *t.Receive
}

// GetTransmitInterval retrieves the value of the leaf TransmitInterval from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitInterval is set, it can
// safely use t.GetTransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Bfd) GetTransmitInterval() uint32 {
	if t == nil || t.TransmitInterval == nil {
		return 100
	}
	return *t.TransmitInterval
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Bfd) GetType() E_NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Bfd_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Bfd_Type_auto
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Bfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Bfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Multiplier == nil {
		var v uint32 = 3
		t.Multiplier = &v
	}
	if t.Receive == nil {
		var v uint32 = 100
		t.Receive = &v
	}
	if t.TransmitInterval == nil {
		var v uint32 = 100
		t.TransmitInterval = &v
	}
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Bfd_Type_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Bfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Bfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Bfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Bfd.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Bfd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6 represents the /nokia-conf/configure/groups/group/router/interface/ipv6/icmp6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6 struct {
	PacketTooBig *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_PacketTooBig `path:"packet-too-big" module:"nokia-conf"`
	ParamProblem *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_ParamProblem `path:"param-problem" module:"nokia-conf"`
	Redirects    *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Redirects    `path:"redirects" module:"nokia-conf"`
	TimeExceeded *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_TimeExceeded `path:"time-exceeded" module:"nokia-conf"`
	Unreachables *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Unreachables `path:"unreachables" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6) IsYANGGoStruct() {}

// GetOrCreatePacketTooBig retrieves the value of the PacketTooBig field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6) GetOrCreatePacketTooBig() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_PacketTooBig {
	if t.PacketTooBig != nil {
		return t.PacketTooBig
	}
	t.PacketTooBig = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_PacketTooBig{}
	return t.PacketTooBig
}

// GetOrCreateParamProblem retrieves the value of the ParamProblem field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6) GetOrCreateParamProblem() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_ParamProblem {
	if t.ParamProblem != nil {
		return t.ParamProblem
	}
	t.ParamProblem = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_ParamProblem{}
	return t.ParamProblem
}

// GetOrCreateRedirects retrieves the value of the Redirects field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6) GetOrCreateRedirects() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Redirects {
	if t.Redirects != nil {
		return t.Redirects
	}
	t.Redirects = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Redirects{}
	return t.Redirects
}

// GetOrCreateTimeExceeded retrieves the value of the TimeExceeded field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6) GetOrCreateTimeExceeded() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_TimeExceeded {
	if t.TimeExceeded != nil {
		return t.TimeExceeded
	}
	t.TimeExceeded = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_TimeExceeded{}
	return t.TimeExceeded
}

// GetOrCreateUnreachables retrieves the value of the Unreachables field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6) GetOrCreateUnreachables() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Unreachables {
	if t.Unreachables != nil {
		return t.Unreachables
	}
	t.Unreachables = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Unreachables{}
	return t.Unreachables
}

// GetPacketTooBig returns the value of the PacketTooBig struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6. If the receiver or the field PacketTooBig is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6) GetPacketTooBig() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_PacketTooBig {
	if t != nil && t.PacketTooBig != nil {
		return t.PacketTooBig
	}
	return nil
}

// GetParamProblem returns the value of the ParamProblem struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6. If the receiver or the field ParamProblem is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6) GetParamProblem() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_ParamProblem {
	if t != nil && t.ParamProblem != nil {
		return t.ParamProblem
	}
	return nil
}

// GetRedirects returns the value of the Redirects struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6. If the receiver or the field Redirects is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6) GetRedirects() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Redirects {
	if t != nil && t.Redirects != nil {
		return t.Redirects
	}
	return nil
}

// GetTimeExceeded returns the value of the TimeExceeded struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6. If the receiver or the field TimeExceeded is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6) GetTimeExceeded() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_TimeExceeded {
	if t != nil && t.TimeExceeded != nil {
		return t.TimeExceeded
	}
	return nil
}

// GetUnreachables returns the value of the Unreachables struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6. If the receiver or the field Unreachables is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6) GetUnreachables() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Unreachables {
	if t != nil && t.Unreachables != nil {
		return t.Unreachables
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PacketTooBig.PopulateDefaults()
	t.ParamProblem.PopulateDefaults()
	t.Redirects.PopulateDefaults()
	t.TimeExceeded.PopulateDefaults()
	t.Unreachables.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_PacketTooBig represents the /nokia-conf/configure/groups/group/router/interface/ipv6/icmp6/packet-too-big YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_PacketTooBig struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_PacketTooBig implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_PacketTooBig) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_PacketTooBig
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_PacketTooBig) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_PacketTooBig
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_PacketTooBig) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_PacketTooBig
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_PacketTooBig) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_PacketTooBig
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_PacketTooBig) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_PacketTooBig) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_PacketTooBig"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_PacketTooBig) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_PacketTooBig) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_PacketTooBig.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_PacketTooBig) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_ParamProblem represents the /nokia-conf/configure/groups/group/router/interface/ipv6/icmp6/param-problem YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_ParamProblem struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_ParamProblem implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_ParamProblem) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_ParamProblem
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_ParamProblem) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_ParamProblem
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_ParamProblem) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_ParamProblem
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_ParamProblem) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_ParamProblem
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_ParamProblem) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_ParamProblem) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_ParamProblem"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_ParamProblem) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_ParamProblem) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_ParamProblem.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_ParamProblem) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Redirects represents the /nokia-conf/configure/groups/group/router/interface/ipv6/icmp6/redirects YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Redirects struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Redirects implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Redirects) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Redirects
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Redirects) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Redirects
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Redirects) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Redirects
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Redirects) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Redirects
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Redirects) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Redirects) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Redirects"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Redirects) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Redirects) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Redirects.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Redirects) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_TimeExceeded represents the /nokia-conf/configure/groups/group/router/interface/ipv6/icmp6/time-exceeded YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_TimeExceeded struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_TimeExceeded implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_TimeExceeded) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_TimeExceeded
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_TimeExceeded) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_TimeExceeded
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_TimeExceeded) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_TimeExceeded
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_TimeExceeded) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_TimeExceeded
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_TimeExceeded) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_TimeExceeded) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_TimeExceeded"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_TimeExceeded) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_TimeExceeded) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_TimeExceeded.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_TimeExceeded) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Unreachables represents the /nokia-conf/configure/groups/group/router/interface/ipv6/icmp6/unreachables YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Unreachables struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Number     *uint16                     `path:"number" module:"nokia-conf"`
	Seconds    *uint16                     `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Unreachables implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Unreachables) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Unreachables
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Unreachables) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Unreachables
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Unreachables) GetNumber() uint16 {
	if t == nil || t.Number == nil {
		return 100
	}
	return *t.Number
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Unreachables
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Unreachables) GetSeconds() uint16 {
	if t == nil || t.Seconds == nil {
		return 10
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Unreachables
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Unreachables) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Number == nil {
		var v uint16 = 100
		t.Number = &v
	}
	if t.Seconds == nil {
		var v uint16 = 10
		t.Seconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Unreachables) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Unreachables"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Unreachables) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Unreachables) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Unreachables.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Icmp6_Unreachables) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_LinkLocalAddress represents the /nokia-conf/configure/groups/group/router/interface/ipv6/link-local-address YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_LinkLocalAddress struct {
	Address                   *string `path:"address" module:"nokia-conf"`
	DuplicateAddressDetection *bool   `path:"duplicate-address-detection" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_LinkLocalAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_LinkLocalAddress) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_LinkLocalAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_LinkLocalAddress) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetDuplicateAddressDetection retrieves the value of the leaf DuplicateAddressDetection from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_LinkLocalAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DuplicateAddressDetection is set, it can
// safely use t.GetDuplicateAddressDetection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DuplicateAddressDetection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_LinkLocalAddress) GetDuplicateAddressDetection() bool {
	if t == nil || t.DuplicateAddressDetection == nil {
		return true
	}
	return *t.DuplicateAddressDetection
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_LinkLocalAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_LinkLocalAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DuplicateAddressDetection == nil {
		var v bool = true
		t.DuplicateAddressDetection = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_LinkLocalAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_LinkLocalAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_LinkLocalAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_LinkLocalAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_LinkLocalAddress.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_LinkLocalAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery represents the /nokia-conf/configure/groups/group/router/interface/ipv6/neighbor-discovery YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery struct {
	LearnUnsolicited E_NokiaTypesRouter_Ipv6AddressTypeSelection                                                         `path:"learn-unsolicited" module:"nokia-conf"`
	Limit            *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_Limit                     `path:"limit" module:"nokia-conf"`
	LocalProxyNd     *bool                                                                                               `path:"local-proxy-nd" module:"nokia-conf"`
	ProactiveRefresh E_NokiaTypesRouter_Ipv6AddressTypeSelection                                                         `path:"proactive-refresh" module:"nokia-conf"`
	ProxyNdPolicy    []string                                                                                            `path:"proxy-nd-policy" module:"nokia-conf"`
	ReachableTime    *uint32                                                                                             `path:"reachable-time" module:"nokia-conf"`
	SecureNd         *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_SecureNd                  `path:"secure-nd" module:"nokia-conf"`
	StaleTime        *uint32                                                                                             `path:"stale-time" module:"nokia-conf"`
	StaticNeighbor   map[string]*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_StaticNeighbor `path:"static-neighbor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery) IsYANGGoStruct() {}

// NewStaticNeighbor creates a new entry in the StaticNeighbor list of the
// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery) NewStaticNeighbor(Ipv6Address string) (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_StaticNeighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticNeighbor == nil {
		t.StaticNeighbor = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_StaticNeighbor)
	}

	key := Ipv6Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StaticNeighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StaticNeighbor", key)
	}

	t.StaticNeighbor[key] = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_StaticNeighbor{
		Ipv6Address: &Ipv6Address,
	}

	return t.StaticNeighbor[key], nil
}

// RenameStaticNeighbor renames an entry in the list StaticNeighbor within
// the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery) RenameStaticNeighbor(oldK, newK string) error {
	if _, ok := t.StaticNeighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in StaticNeighbor", newK)
	}

	e, ok := t.StaticNeighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in StaticNeighbor", oldK)
	}
	e.Ipv6Address = &newK

	t.StaticNeighbor[newK] = e
	delete(t.StaticNeighbor, oldK)
	return nil
}

// GetOrCreateStaticNeighbor retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery) GetOrCreateStaticNeighbor(Ipv6Address string) *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_StaticNeighbor {

	key := Ipv6Address

	if v, ok := t.StaticNeighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStaticNeighbor(Ipv6Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStaticNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetStaticNeighbor retrieves the value with the specified key from
// the StaticNeighbor map field of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery) GetStaticNeighbor(Ipv6Address string) *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_StaticNeighbor {

	if t == nil {
		return nil
	}

	key := Ipv6Address

	if lm, ok := t.StaticNeighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteStaticNeighbor deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery) DeleteStaticNeighbor(Ipv6Address string) {
	key := Ipv6Address

	delete(t.StaticNeighbor, key)
}

// AppendStaticNeighbor appends the supplied NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_StaticNeighbor struct to the
// list StaticNeighbor of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_StaticNeighbor already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery) AppendStaticNeighbor(v *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) error {
	if v.Ipv6Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Address")
	}

	key := *v.Ipv6Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticNeighbor == nil {
		t.StaticNeighbor = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_StaticNeighbor)
	}

	if _, ok := t.StaticNeighbor[key]; ok {
		return fmt.Errorf("duplicate key for list StaticNeighbor %v", key)
	}

	t.StaticNeighbor[key] = v
	return nil
}

// GetOrCreateLimit retrieves the value of the Limit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery) GetOrCreateLimit() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_Limit {
	if t.Limit != nil {
		return t.Limit
	}
	t.Limit = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_Limit{}
	return t.Limit
}

// GetOrCreateSecureNd retrieves the value of the SecureNd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery) GetOrCreateSecureNd() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_SecureNd {
	if t.SecureNd != nil {
		return t.SecureNd
	}
	t.SecureNd = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_SecureNd{}
	return t.SecureNd
}

// GetLimit returns the value of the Limit struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery. If the receiver or the field Limit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery) GetLimit() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_Limit {
	if t != nil && t.Limit != nil {
		return t.Limit
	}
	return nil
}

// GetSecureNd returns the value of the SecureNd struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery. If the receiver or the field SecureNd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery) GetSecureNd() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_SecureNd {
	if t != nil && t.SecureNd != nil {
		return t.SecureNd
	}
	return nil
}

// GetLearnUnsolicited retrieves the value of the leaf LearnUnsolicited from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LearnUnsolicited is set, it can
// safely use t.GetLearnUnsolicited() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LearnUnsolicited == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery) GetLearnUnsolicited() E_NokiaTypesRouter_Ipv6AddressTypeSelection {
	if t == nil || t.LearnUnsolicited == 0 {
		return 0
	}
	return t.LearnUnsolicited
}

// GetLocalProxyNd retrieves the value of the leaf LocalProxyNd from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalProxyNd is set, it can
// safely use t.GetLocalProxyNd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalProxyNd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery) GetLocalProxyNd() bool {
	if t == nil || t.LocalProxyNd == nil {
		return false
	}
	return *t.LocalProxyNd
}

// GetProactiveRefresh retrieves the value of the leaf ProactiveRefresh from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProactiveRefresh is set, it can
// safely use t.GetProactiveRefresh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProactiveRefresh == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery) GetProactiveRefresh() E_NokiaTypesRouter_Ipv6AddressTypeSelection {
	if t == nil || t.ProactiveRefresh == 0 {
		return 0
	}
	return t.ProactiveRefresh
}

// GetProxyNdPolicy retrieves the value of the leaf ProxyNdPolicy from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProxyNdPolicy is set, it can
// safely use t.GetProxyNdPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProxyNdPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery) GetProxyNdPolicy() []string {
	if t == nil || t.ProxyNdPolicy == nil {
		return nil
	}
	return t.ProxyNdPolicy
}

// GetReachableTime retrieves the value of the leaf ReachableTime from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReachableTime is set, it can
// safely use t.GetReachableTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReachableTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery) GetReachableTime() uint32 {
	if t == nil || t.ReachableTime == nil {
		return 0
	}
	return *t.ReachableTime
}

// GetStaleTime retrieves the value of the leaf StaleTime from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaleTime is set, it can
// safely use t.GetStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery) GetStaleTime() uint32 {
	if t == nil || t.StaleTime == nil {
		return 0
	}
	return *t.StaleTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LocalProxyNd == nil {
		var v bool = false
		t.LocalProxyNd = &v
	}
	t.Limit.PopulateDefaults()
	t.SecureNd.PopulateDefaults()
	for _, e := range t.StaticNeighbor {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_Limit represents the /nokia-conf/configure/groups/group/router/interface/ipv6/neighbor-discovery/limit YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_Limit struct {
	LogOnly    *bool   `path:"log-only" module:"nokia-conf"`
	MaxEntries *int32  `path:"max-entries" module:"nokia-conf"`
	Threshold  *uint32 `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_Limit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_Limit) IsYANGGoStruct() {
}

// GetLogOnly retrieves the value of the leaf LogOnly from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_Limit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogOnly is set, it can
// safely use t.GetLogOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_Limit) GetLogOnly() bool {
	if t == nil || t.LogOnly == nil {
		return false
	}
	return *t.LogOnly
}

// GetMaxEntries retrieves the value of the leaf MaxEntries from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_Limit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxEntries is set, it can
// safely use t.GetMaxEntries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxEntries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_Limit) GetMaxEntries() int32 {
	if t == nil || t.MaxEntries == nil {
		return 0
	}
	return *t.MaxEntries
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_Limit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_Limit) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 90
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_Limit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_Limit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LogOnly == nil {
		var v bool = false
		t.LogOnly = &v
	}
	if t.Threshold == nil {
		var v uint32 = 90
		t.Threshold = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_Limit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_Limit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_Limit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_Limit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_Limit.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_Limit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_SecureNd represents the /nokia-conf/configure/groups/group/router/interface/ipv6/neighbor-discovery/secure-nd YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_SecureNd struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	AllowUnsecuredMsgs *bool                       `path:"allow-unsecured-msgs" module:"nokia-conf"`
	PublicKeyMinBits   *uint32                     `path:"public-key-min-bits" module:"nokia-conf"`
	SecurityParameter  *uint32                     `path:"security-parameter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_SecureNd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_SecureNd) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_SecureNd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_SecureNd) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAllowUnsecuredMsgs retrieves the value of the leaf AllowUnsecuredMsgs from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_SecureNd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowUnsecuredMsgs is set, it can
// safely use t.GetAllowUnsecuredMsgs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowUnsecuredMsgs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_SecureNd) GetAllowUnsecuredMsgs() bool {
	if t == nil || t.AllowUnsecuredMsgs == nil {
		return true
	}
	return *t.AllowUnsecuredMsgs
}

// GetPublicKeyMinBits retrieves the value of the leaf PublicKeyMinBits from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_SecureNd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PublicKeyMinBits is set, it can
// safely use t.GetPublicKeyMinBits() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PublicKeyMinBits == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_SecureNd) GetPublicKeyMinBits() uint32 {
	if t == nil || t.PublicKeyMinBits == nil {
		return 1024
	}
	return *t.PublicKeyMinBits
}

// GetSecurityParameter retrieves the value of the leaf SecurityParameter from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_SecureNd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecurityParameter is set, it can
// safely use t.GetSecurityParameter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecurityParameter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_SecureNd) GetSecurityParameter() uint32 {
	if t == nil || t.SecurityParameter == nil {
		return 1
	}
	return *t.SecurityParameter
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_SecureNd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_SecureNd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AllowUnsecuredMsgs == nil {
		var v bool = true
		t.AllowUnsecuredMsgs = &v
	}
	if t.PublicKeyMinBits == nil {
		var v uint32 = 1024
		t.PublicKeyMinBits = &v
	}
	if t.SecurityParameter == nil {
		var v uint32 = 1
		t.SecurityParameter = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_SecureNd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_SecureNd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_SecureNd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_SecureNd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_SecureNd.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_SecureNd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_StaticNeighbor represents the /nokia-conf/configure/groups/group/router/interface/ipv6/neighbor-discovery/static-neighbor YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_StaticNeighbor struct {
	Ipv6Address *string `path:"ipv6-address" module:"nokia-conf"`
	MacAddress  *string `path:"mac-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_StaticNeighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) IsYANGGoStruct() {
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_StaticNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) GetIpv6Address() string {
	if t == nil || t.Ipv6Address == nil {
		return ""
	}
	return *t.Ipv6Address
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_StaticNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_StaticNeighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_StaticNeighbor struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Address")
	}

	return map[string]interface{}{
		"ipv6-address": *t.Ipv6Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_StaticNeighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_StaticNeighbor.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_NeighborDiscovery_StaticNeighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_UrpfCheck represents the /nokia-conf/configure/groups/group/router/interface/ipv6/urpf-check YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_UrpfCheck struct {
	IgnoreDefault *bool                            `path:"ignore-default" module:"nokia-conf"`
	Mode          E_NokiaTypesRouter_UrpfCheckMode `path:"mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_UrpfCheck implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_UrpfCheck) IsYANGGoStruct() {}

// GetIgnoreDefault retrieves the value of the leaf IgnoreDefault from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_UrpfCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreDefault is set, it can
// safely use t.GetIgnoreDefault() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreDefault == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_UrpfCheck) GetIgnoreDefault() bool {
	if t == nil || t.IgnoreDefault == nil {
		return false
	}
	return *t.IgnoreDefault
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_UrpfCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_UrpfCheck) GetMode() E_NokiaTypesRouter_UrpfCheckMode {
	if t == nil || t.Mode == 0 {
		return NokiaTypesRouter_UrpfCheckMode_strict
	}
	return t.Mode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_UrpfCheck
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_UrpfCheck) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IgnoreDefault == nil {
		var v bool = false
		t.IgnoreDefault = &v
	}
	if t.Mode == 0 {
		t.Mode = NokiaTypesRouter_UrpfCheckMode_strict
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_UrpfCheck) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_UrpfCheck"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_UrpfCheck) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_UrpfCheck) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_UrpfCheck.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_UrpfCheck) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp represents the /nokia-conf/configure/groups/group/router/interface/ipv6/vrrp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp struct {
	AdminState        E_NokiaTypesSros_AdminState                                                       `path:"admin-state" module:"nokia-conf"`
	Backup            []string                                                                          `path:"backup" module:"nokia-conf"`
	BfdLiveness       *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp_BfdLiveness          `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	InitDelay         *uint32                                                                           `path:"init-delay" module:"nokia-conf"`
	Mac               *string                                                                           `path:"mac" module:"nokia-conf"`
	MasterIntInherit  *bool                                                                             `path:"master-int-inherit" module:"nokia-conf"`
	MessageInterval   *uint32                                                                           `path:"message-interval" module:"nokia-conf"`
	MonitorOperGroup  *string                                                                           `path:"monitor-oper-group" module:"nokia-conf"`
	NtpReply          *bool                                                                             `path:"ntp-reply" module:"nokia-conf"`
	OperGroup         *string                                                                           `path:"oper-group" module:"nokia-conf"`
	Owner             *bool                                                                             `path:"owner" module:"nokia-conf"`
	Passive           *bool                                                                             `path:"passive" module:"nokia-conf"`
	PingReply         *bool                                                                             `path:"ping-reply" module:"nokia-conf"`
	Policy            *uint32                                                                           `path:"policy" module:"nokia-conf"`
	Preempt           *bool                                                                             `path:"preempt" module:"nokia-conf"`
	Priority          *uint32                                                                           `path:"priority" module:"nokia-conf"`
	StandbyForwarding *bool                                                                             `path:"standby-forwarding" module:"nokia-conf"`
	TelnetReply       *bool                                                                             `path:"telnet-reply" module:"nokia-conf"`
	TracerouteReply   *bool                                                                             `path:"traceroute-reply" module:"nokia-conf"`
	VirtualRouterId   NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp_VirtualRouterId_Union `path:"virtual-router-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp) IsYANGGoStruct() {}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp) GetOrCreateBfdLiveness() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp_BfdLiveness{}
	return t.BfdLiveness
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp) GetBfdLiveness() *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetBackup retrieves the value of the leaf Backup from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Backup is set, it can
// safely use t.GetBackup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Backup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp) GetBackup() []string {
	if t == nil || t.Backup == nil {
		return nil
	}
	return t.Backup
}

// GetInitDelay retrieves the value of the leaf InitDelay from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitDelay is set, it can
// safely use t.GetInitDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp) GetInitDelay() uint32 {
	if t == nil || t.InitDelay == nil {
		return 0
	}
	return *t.InitDelay
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// GetMasterIntInherit retrieves the value of the leaf MasterIntInherit from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MasterIntInherit is set, it can
// safely use t.GetMasterIntInherit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MasterIntInherit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp) GetMasterIntInherit() bool {
	if t == nil || t.MasterIntInherit == nil {
		return false
	}
	return *t.MasterIntInherit
}

// GetMessageInterval retrieves the value of the leaf MessageInterval from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageInterval is set, it can
// safely use t.GetMessageInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp) GetMessageInterval() uint32 {
	if t == nil || t.MessageInterval == nil {
		return 100
	}
	return *t.MessageInterval
}

// GetMonitorOperGroup retrieves the value of the leaf MonitorOperGroup from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorOperGroup is set, it can
// safely use t.GetMonitorOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorOperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp) GetMonitorOperGroup() string {
	if t == nil || t.MonitorOperGroup == nil {
		return ""
	}
	return *t.MonitorOperGroup
}

// GetNtpReply retrieves the value of the leaf NtpReply from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NtpReply is set, it can
// safely use t.GetNtpReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NtpReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp) GetNtpReply() bool {
	if t == nil || t.NtpReply == nil {
		return false
	}
	return *t.NtpReply
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// GetOwner retrieves the value of the leaf Owner from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Owner is set, it can
// safely use t.GetOwner() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Owner == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp) GetOwner() bool {
	if t == nil || t.Owner == nil {
		return false
	}
	return *t.Owner
}

// GetPassive retrieves the value of the leaf Passive from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Passive is set, it can
// safely use t.GetPassive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Passive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp) GetPassive() bool {
	if t == nil || t.Passive == nil {
		return false
	}
	return *t.Passive
}

// GetPingReply retrieves the value of the leaf PingReply from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PingReply is set, it can
// safely use t.GetPingReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PingReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp) GetPingReply() bool {
	if t == nil || t.PingReply == nil {
		return false
	}
	return *t.PingReply
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp) GetPolicy() uint32 {
	if t == nil || t.Policy == nil {
		return 0
	}
	return *t.Policy
}

// GetPreempt retrieves the value of the leaf Preempt from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preempt is set, it can
// safely use t.GetPreempt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preempt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp) GetPreempt() bool {
	if t == nil || t.Preempt == nil {
		return true
	}
	return *t.Preempt
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp) GetPriority() uint32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetStandbyForwarding retrieves the value of the leaf StandbyForwarding from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StandbyForwarding is set, it can
// safely use t.GetStandbyForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StandbyForwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp) GetStandbyForwarding() bool {
	if t == nil || t.StandbyForwarding == nil {
		return false
	}
	return *t.StandbyForwarding
}

// GetTelnetReply retrieves the value of the leaf TelnetReply from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TelnetReply is set, it can
// safely use t.GetTelnetReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TelnetReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp) GetTelnetReply() bool {
	if t == nil || t.TelnetReply == nil {
		return false
	}
	return *t.TelnetReply
}

// GetTracerouteReply retrieves the value of the leaf TracerouteReply from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TracerouteReply is set, it can
// safely use t.GetTracerouteReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TracerouteReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp) GetTracerouteReply() bool {
	if t == nil || t.TracerouteReply == nil {
		return false
	}
	return *t.TracerouteReply
}

// GetVirtualRouterId retrieves the value of the leaf VirtualRouterId from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VirtualRouterId is set, it can
// safely use t.GetVirtualRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VirtualRouterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp) GetVirtualRouterId() NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp_VirtualRouterId_Union {
	if t == nil || t.VirtualRouterId == nil {
		return nil
	}
	return t.VirtualRouterId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.MessageInterval == nil {
		var v uint32 = 100
		t.MessageInterval = &v
	}
	if t.NtpReply == nil {
		var v bool = false
		t.NtpReply = &v
	}
	if t.Owner == nil {
		var v bool = false
		t.Owner = &v
	}
	if t.Passive == nil {
		var v bool = false
		t.Passive = &v
	}
	if t.PingReply == nil {
		var v bool = false
		t.PingReply = &v
	}
	if t.Preempt == nil {
		var v bool = true
		t.Preempt = &v
	}
	if t.StandbyForwarding == nil {
		var v bool = false
		t.StandbyForwarding = &v
	}
	if t.TelnetReply == nil {
		var v bool = false
		t.TelnetReply = &v
	}
	if t.TracerouteReply == nil {
		var v bool = false
		t.TracerouteReply = &v
	}
	t.BfdLiveness.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"virtual-router-id": t.VirtualRouterId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp_BfdLiveness represents the /nokia-conf/configure/groups/group/router/interface/ipv6/vrrp/bfd-liveness YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp_BfdLiveness struct {
	DestIp        *string `path:"dest-ip" module:"nokia-conf"`
	InterfaceName *string `path:"interface-name" module:"nokia-conf"`
	ServiceName   *string `path:"service-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp_BfdLiveness) IsYANGGoStruct() {}

// GetDestIp retrieves the value of the leaf DestIp from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestIp is set, it can
// safely use t.GetDestIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp_BfdLiveness) GetDestIp() string {
	if t == nil || t.DestIp == nil {
		return ""
	}
	return *t.DestIp
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp_BfdLiveness) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp_BfdLiveness) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp_BfdLiveness.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Ipv6_Vrrp_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Lag represents the /nokia-conf/configure/groups/group/router/interface/lag YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Lag struct {
	LinkMapProfile *int32                                                             `path:"link-map-profile" module:"nokia-conf"`
	PerLinkHash    *NokiaConf_Configure_Groups_Group_Router_Interface_Lag_PerLinkHash `path:"per-link-hash" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Lag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Lag) IsYANGGoStruct() {}

// GetOrCreatePerLinkHash retrieves the value of the PerLinkHash field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Lag) GetOrCreatePerLinkHash() *NokiaConf_Configure_Groups_Group_Router_Interface_Lag_PerLinkHash {
	if t.PerLinkHash != nil {
		return t.PerLinkHash
	}
	t.PerLinkHash = &NokiaConf_Configure_Groups_Group_Router_Interface_Lag_PerLinkHash{}
	return t.PerLinkHash
}

// GetPerLinkHash returns the value of the PerLinkHash struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Interface_Lag. If the receiver or the field PerLinkHash is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Lag) GetPerLinkHash() *NokiaConf_Configure_Groups_Group_Router_Interface_Lag_PerLinkHash {
	if t != nil && t.PerLinkHash != nil {
		return t.PerLinkHash
	}
	return nil
}

// GetLinkMapProfile retrieves the value of the leaf LinkMapProfile from the NokiaConf_Configure_Groups_Group_Router_Interface_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkMapProfile is set, it can
// safely use t.GetLinkMapProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkMapProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Lag) GetLinkMapProfile() int32 {
	if t == nil || t.LinkMapProfile == nil {
		return 0
	}
	return *t.LinkMapProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Lag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Lag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PerLinkHash.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Lag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Lag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Lag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Lag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Lag.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Lag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Lag_PerLinkHash represents the /nokia-conf/configure/groups/group/router/interface/lag/per-link-hash YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Lag_PerLinkHash struct {
	Class  *int32 `path:"class" module:"nokia-conf"`
	Weight *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Lag_PerLinkHash implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Lag_PerLinkHash) IsYANGGoStruct() {}

// GetClass retrieves the value of the leaf Class from the NokiaConf_Configure_Groups_Group_Router_Interface_Lag_PerLinkHash
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Class is set, it can
// safely use t.GetClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Class == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Lag_PerLinkHash) GetClass() int32 {
	if t == nil || t.Class == nil {
		return 1
	}
	return *t.Class
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Router_Interface_Lag_PerLinkHash
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Lag_PerLinkHash) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Lag_PerLinkHash
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Lag_PerLinkHash) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Class == nil {
		var v int32 = 1
		t.Class = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Lag_PerLinkHash) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Lag_PerLinkHash"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Lag_PerLinkHash) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Lag_PerLinkHash) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Lag_PerLinkHash.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Lag_PerLinkHash) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_LdpSyncTimer represents the /nokia-conf/configure/groups/group/router/interface/ldp-sync-timer YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_LdpSyncTimer struct {
	EndOfLib *bool   `path:"end-of-lib" module:"nokia-conf"`
	Seconds  *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_LdpSyncTimer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_LdpSyncTimer) IsYANGGoStruct() {}

// GetEndOfLib retrieves the value of the leaf EndOfLib from the NokiaConf_Configure_Groups_Group_Router_Interface_LdpSyncTimer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndOfLib is set, it can
// safely use t.GetEndOfLib() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndOfLib == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_LdpSyncTimer) GetEndOfLib() bool {
	if t == nil || t.EndOfLib == nil {
		return false
	}
	return *t.EndOfLib
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Router_Interface_LdpSyncTimer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_LdpSyncTimer) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_LdpSyncTimer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_LdpSyncTimer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EndOfLib == nil {
		var v bool = false
		t.EndOfLib = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_LdpSyncTimer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_LdpSyncTimer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_LdpSyncTimer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_LdpSyncTimer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_LdpSyncTimer.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_LdpSyncTimer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_LoadBalancing represents the /nokia-conf/configure/groups/group/router/interface/load-balancing YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_LoadBalancing struct {
	FlowLabelLoadBalancing *bool                               `path:"flow-label-load-balancing" module:"nokia-conf"`
	IpLoadBalancing        E_NokiaTypesRouter_IpLoadBalancing  `path:"ip-load-balancing" module:"nokia-conf"`
	LsrLoadBalancing       E_NokiaTypesRouter_LsrLoadBalancing `path:"lsr-load-balancing" module:"nokia-conf"`
	SpiLoadBalancing       *bool                               `path:"spi-load-balancing" module:"nokia-conf"`
	TeidLoadBalancing      *bool                               `path:"teid-load-balancing" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_LoadBalancing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_LoadBalancing) IsYANGGoStruct() {}

// GetFlowLabelLoadBalancing retrieves the value of the leaf FlowLabelLoadBalancing from the NokiaConf_Configure_Groups_Group_Router_Interface_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowLabelLoadBalancing is set, it can
// safely use t.GetFlowLabelLoadBalancing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowLabelLoadBalancing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_LoadBalancing) GetFlowLabelLoadBalancing() bool {
	if t == nil || t.FlowLabelLoadBalancing == nil {
		return false
	}
	return *t.FlowLabelLoadBalancing
}

// GetIpLoadBalancing retrieves the value of the leaf IpLoadBalancing from the NokiaConf_Configure_Groups_Group_Router_Interface_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpLoadBalancing is set, it can
// safely use t.GetIpLoadBalancing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpLoadBalancing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_LoadBalancing) GetIpLoadBalancing() E_NokiaTypesRouter_IpLoadBalancing {
	if t == nil || t.IpLoadBalancing == 0 {
		return NokiaTypesRouter_IpLoadBalancing_both
	}
	return t.IpLoadBalancing
}

// GetLsrLoadBalancing retrieves the value of the leaf LsrLoadBalancing from the NokiaConf_Configure_Groups_Group_Router_Interface_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsrLoadBalancing is set, it can
// safely use t.GetLsrLoadBalancing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsrLoadBalancing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_LoadBalancing) GetLsrLoadBalancing() E_NokiaTypesRouter_LsrLoadBalancing {
	if t == nil || t.LsrLoadBalancing == 0 {
		return 0
	}
	return t.LsrLoadBalancing
}

// GetSpiLoadBalancing retrieves the value of the leaf SpiLoadBalancing from the NokiaConf_Configure_Groups_Group_Router_Interface_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpiLoadBalancing is set, it can
// safely use t.GetSpiLoadBalancing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpiLoadBalancing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_LoadBalancing) GetSpiLoadBalancing() bool {
	if t == nil || t.SpiLoadBalancing == nil {
		return false
	}
	return *t.SpiLoadBalancing
}

// GetTeidLoadBalancing retrieves the value of the leaf TeidLoadBalancing from the NokiaConf_Configure_Groups_Group_Router_Interface_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TeidLoadBalancing is set, it can
// safely use t.GetTeidLoadBalancing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TeidLoadBalancing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_LoadBalancing) GetTeidLoadBalancing() bool {
	if t == nil || t.TeidLoadBalancing == nil {
		return false
	}
	return *t.TeidLoadBalancing
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_LoadBalancing
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_LoadBalancing) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FlowLabelLoadBalancing == nil {
		var v bool = false
		t.FlowLabelLoadBalancing = &v
	}
	if t.IpLoadBalancing == 0 {
		t.IpLoadBalancing = NokiaTypesRouter_IpLoadBalancing_both
	}
	if t.SpiLoadBalancing == nil {
		var v bool = false
		t.SpiLoadBalancing = &v
	}
	if t.TeidLoadBalancing == nil {
		var v bool = false
		t.TeidLoadBalancing = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_LoadBalancing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_LoadBalancing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_LoadBalancing) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_LoadBalancing) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_LoadBalancing.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_LoadBalancing) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains represents the /nokia-conf/configure/groups/group/router/interface/network-domains YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains struct {
	NetworkDomain map[string]*NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains_NetworkDomain `path:"network-domain" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains) IsYANGGoStruct() {}

// NewNetworkDomain creates a new entry in the NetworkDomain list of the
// NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains) NewNetworkDomain(DomainName string) (*NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains_NetworkDomain, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkDomain == nil {
		t.NetworkDomain = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains_NetworkDomain)
	}

	key := DomainName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NetworkDomain[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NetworkDomain", key)
	}

	t.NetworkDomain[key] = &NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains_NetworkDomain{
		DomainName: &DomainName,
	}

	return t.NetworkDomain[key], nil
}

// RenameNetworkDomain renames an entry in the list NetworkDomain within
// the NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains) RenameNetworkDomain(oldK, newK string) error {
	if _, ok := t.NetworkDomain[newK]; ok {
		return fmt.Errorf("key %v already exists in NetworkDomain", newK)
	}

	e, ok := t.NetworkDomain[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NetworkDomain", oldK)
	}
	e.DomainName = &newK

	t.NetworkDomain[newK] = e
	delete(t.NetworkDomain, oldK)
	return nil
}

// GetOrCreateNetworkDomain retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains) GetOrCreateNetworkDomain(DomainName string) *NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains_NetworkDomain {

	key := DomainName

	if v, ok := t.NetworkDomain[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNetworkDomain(DomainName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNetworkDomain got unexpected error: %v", err))
	}
	return v
}

// GetNetworkDomain retrieves the value with the specified key from
// the NetworkDomain map field of NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains) GetNetworkDomain(DomainName string) *NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains_NetworkDomain {

	if t == nil {
		return nil
	}

	key := DomainName

	if lm, ok := t.NetworkDomain[key]; ok {
		return lm
	}
	return nil
}

// DeleteNetworkDomain deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains) DeleteNetworkDomain(DomainName string) {
	key := DomainName

	delete(t.NetworkDomain, key)
}

// AppendNetworkDomain appends the supplied NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains_NetworkDomain struct to the
// list NetworkDomain of NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains_NetworkDomain already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains) AppendNetworkDomain(v *NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains_NetworkDomain) error {
	if v.DomainName == nil {
		return fmt.Errorf("invalid nil key received for DomainName")
	}

	key := *v.DomainName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkDomain == nil {
		t.NetworkDomain = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains_NetworkDomain)
	}

	if _, ok := t.NetworkDomain[key]; ok {
		return fmt.Errorf("duplicate key for list NetworkDomain %v", key)
	}

	t.NetworkDomain[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.NetworkDomain {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains_NetworkDomain represents the /nokia-conf/configure/groups/group/router/interface/network-domains/network-domain YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains_NetworkDomain struct {
	DomainName *string `path:"domain-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains_NetworkDomain implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains_NetworkDomain) IsYANGGoStruct() {
}

// GetDomainName retrieves the value of the leaf DomainName from the NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains_NetworkDomain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainName is set, it can
// safely use t.GetDomainName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains_NetworkDomain) GetDomainName() string {
	if t == nil || t.DomainName == nil {
		return ""
	}
	return *t.DomainName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains_NetworkDomain
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains_NetworkDomain) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains_NetworkDomain struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains_NetworkDomain) ΛListKeyMap() (map[string]interface{}, error) {
	if t.DomainName == nil {
		return nil, fmt.Errorf("nil value for key DomainName")
	}

	return map[string]interface{}{
		"domain-name": *t.DomainName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains_NetworkDomain) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains_NetworkDomain"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains_NetworkDomain) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains_NetworkDomain) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains_NetworkDomain.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_NetworkDomains_NetworkDomain) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_PtpHwAssist represents the /nokia-conf/configure/groups/group/router/interface/ptp-hw-assist YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_PtpHwAssist struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_PtpHwAssist implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_PtpHwAssist) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Interface_PtpHwAssist
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_PtpHwAssist) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_PtpHwAssist
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_PtpHwAssist) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_PtpHwAssist) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_PtpHwAssist"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_PtpHwAssist) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_PtpHwAssist) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_PtpHwAssist.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_PtpHwAssist) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Qos represents the /nokia-conf/configure/groups/group/router/interface/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Qos struct {
	EgressInstance          *uint32 `path:"egress-instance" module:"nokia-conf"`
	EgressPortRedirectGroup *string `path:"egress-port-redirect-group" module:"nokia-conf"`
	IngressFpRedirectGroup  *string `path:"ingress-fp-redirect-group" module:"nokia-conf"`
	IngressInstance         *uint32 `path:"ingress-instance" module:"nokia-conf"`
	NetworkPolicy           *string `path:"network-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Qos) IsYANGGoStruct() {}

// GetEgressInstance retrieves the value of the leaf EgressInstance from the NokiaConf_Configure_Groups_Group_Router_Interface_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EgressInstance is set, it can
// safely use t.GetEgressInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EgressInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Qos) GetEgressInstance() uint32 {
	if t == nil || t.EgressInstance == nil {
		return 0
	}
	return *t.EgressInstance
}

// GetEgressPortRedirectGroup retrieves the value of the leaf EgressPortRedirectGroup from the NokiaConf_Configure_Groups_Group_Router_Interface_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EgressPortRedirectGroup is set, it can
// safely use t.GetEgressPortRedirectGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EgressPortRedirectGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Qos) GetEgressPortRedirectGroup() string {
	if t == nil || t.EgressPortRedirectGroup == nil {
		return ""
	}
	return *t.EgressPortRedirectGroup
}

// GetIngressFpRedirectGroup retrieves the value of the leaf IngressFpRedirectGroup from the NokiaConf_Configure_Groups_Group_Router_Interface_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressFpRedirectGroup is set, it can
// safely use t.GetIngressFpRedirectGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressFpRedirectGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Qos) GetIngressFpRedirectGroup() string {
	if t == nil || t.IngressFpRedirectGroup == nil {
		return ""
	}
	return *t.IngressFpRedirectGroup
}

// GetIngressInstance retrieves the value of the leaf IngressInstance from the NokiaConf_Configure_Groups_Group_Router_Interface_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressInstance is set, it can
// safely use t.GetIngressInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Qos) GetIngressInstance() uint32 {
	if t == nil || t.IngressInstance == nil {
		return 0
	}
	return *t.IngressInstance
}

// GetNetworkPolicy retrieves the value of the leaf NetworkPolicy from the NokiaConf_Configure_Groups_Group_Router_Interface_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkPolicy is set, it can
// safely use t.GetNetworkPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Qos) GetNetworkPolicy() string {
	if t == nil || t.NetworkPolicy == nil {
		return ""
	}
	return *t.NetworkPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Qos.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Interface_Untrusted represents the /nokia-conf/configure/groups/group/router/interface/untrusted YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Interface_Untrusted struct {
	DefaultForwarding E_NokiaTypesRouter_SelectiveIlmDefaultForwarding `path:"default-forwarding" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Interface_Untrusted implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Untrusted) IsYANGGoStruct() {}

// GetDefaultForwarding retrieves the value of the leaf DefaultForwarding from the NokiaConf_Configure_Groups_Group_Router_Interface_Untrusted
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultForwarding is set, it can
// safely use t.GetDefaultForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultForwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Untrusted) GetDefaultForwarding() E_NokiaTypesRouter_SelectiveIlmDefaultForwarding {
	if t == nil || t.DefaultForwarding == 0 {
		return NokiaTypesRouter_SelectiveIlmDefaultForwarding_forward
	}
	return t.DefaultForwarding
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Interface_Untrusted
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Untrusted) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultForwarding == 0 {
		t.DefaultForwarding = NokiaTypesRouter_SelectiveIlmDefaultForwarding_forward
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Untrusted) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Interface_Untrusted"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Untrusted) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Interface_Untrusted) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Interface_Untrusted.
func (*NokiaConf_Configure_Groups_Group_Router_Interface_Untrusted) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ipv6 represents the /nokia-conf/configure/groups/group/router/ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ipv6 struct {
	NeighborDiscovery   *NokiaConf_Configure_Groups_Group_Router_Ipv6_NeighborDiscovery   `path:"neighbor-discovery" module:"nokia-conf"`
	RouterAdvertisement *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement `path:"router-advertisement" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ipv6) IsYANGGoStruct() {}

// GetOrCreateNeighborDiscovery retrieves the value of the NeighborDiscovery field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6) GetOrCreateNeighborDiscovery() *NokiaConf_Configure_Groups_Group_Router_Ipv6_NeighborDiscovery {
	if t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	t.NeighborDiscovery = &NokiaConf_Configure_Groups_Group_Router_Ipv6_NeighborDiscovery{}
	return t.NeighborDiscovery
}

// GetOrCreateRouterAdvertisement retrieves the value of the RouterAdvertisement field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6) GetOrCreateRouterAdvertisement() *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement {
	if t.RouterAdvertisement != nil {
		return t.RouterAdvertisement
	}
	t.RouterAdvertisement = &NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement{}
	return t.RouterAdvertisement
}

// GetNeighborDiscovery returns the value of the NeighborDiscovery struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ipv6. If the receiver or the field NeighborDiscovery is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6) GetNeighborDiscovery() *NokiaConf_Configure_Groups_Group_Router_Ipv6_NeighborDiscovery {
	if t != nil && t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	return nil
}

// GetRouterAdvertisement returns the value of the RouterAdvertisement struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ipv6. If the receiver or the field RouterAdvertisement is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6) GetRouterAdvertisement() *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement {
	if t != nil && t.RouterAdvertisement != nil {
		return t.RouterAdvertisement
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.NeighborDiscovery.PopulateDefaults()
	t.RouterAdvertisement.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ipv6.
func (*NokiaConf_Configure_Groups_Group_Router_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ipv6TeRouterId represents the /nokia-conf/configure/groups/group/router/ipv6-te-router-id YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ipv6TeRouterId struct {
	Interface *string `path:"interface" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ipv6TeRouterId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ipv6TeRouterId) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the NokiaConf_Configure_Groups_Group_Router_Ipv6TeRouterId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6TeRouterId) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ipv6TeRouterId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6TeRouterId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6TeRouterId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ipv6TeRouterId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6TeRouterId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6TeRouterId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ipv6TeRouterId.
func (*NokiaConf_Configure_Groups_Group_Router_Ipv6TeRouterId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ipv6_NeighborDiscovery represents the /nokia-conf/configure/groups/group/router/ipv6/neighbor-discovery YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ipv6_NeighborDiscovery struct {
	ReachableTime *uint32 `path:"reachable-time" module:"nokia-conf"`
	StaleTime     *uint32 `path:"stale-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ipv6_NeighborDiscovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ipv6_NeighborDiscovery) IsYANGGoStruct() {}

// GetReachableTime retrieves the value of the leaf ReachableTime from the NokiaConf_Configure_Groups_Group_Router_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReachableTime is set, it can
// safely use t.GetReachableTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReachableTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_NeighborDiscovery) GetReachableTime() uint32 {
	if t == nil || t.ReachableTime == nil {
		return 30
	}
	return *t.ReachableTime
}

// GetStaleTime retrieves the value of the leaf StaleTime from the NokiaConf_Configure_Groups_Group_Router_Ipv6_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaleTime is set, it can
// safely use t.GetStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_NeighborDiscovery) GetStaleTime() uint32 {
	if t == nil || t.StaleTime == nil {
		return 14400
	}
	return *t.StaleTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ipv6_NeighborDiscovery
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_NeighborDiscovery) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ReachableTime == nil {
		var v uint32 = 30
		t.ReachableTime = &v
	}
	if t.StaleTime == nil {
		var v uint32 = 14400
		t.StaleTime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_NeighborDiscovery) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ipv6_NeighborDiscovery"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_NeighborDiscovery) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_NeighborDiscovery) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ipv6_NeighborDiscovery.
func (*NokiaConf_Configure_Groups_Group_Router_Ipv6_NeighborDiscovery) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement represents the /nokia-conf/configure/groups/group/router/ipv6/router-advertisement YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement struct {
	DnsOptions *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_DnsOptions           `path:"dns-options" module:"nokia-conf" yangPresence:"true"`
	Interface  map[string]*NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface `path:"interface" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement) NewInterface(IpIntName string) (*NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface)
	}

	key := IpIntName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface{
		IpIntName: &IpIntName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.IpIntName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement) GetOrCreateInterface(IpIntName string) *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface {

	key := IpIntName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(IpIntName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement) GetInterface(IpIntName string) *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface {

	if t == nil {
		return nil
	}

	key := IpIntName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement) DeleteInterface(IpIntName string) {
	key := IpIntName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface struct to the
// list Interface of NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement) AppendInterface(v *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface) error {
	if v.IpIntName == nil {
		return fmt.Errorf("invalid nil key received for IpIntName")
	}

	key := *v.IpIntName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateDnsOptions retrieves the value of the DnsOptions field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement) GetOrCreateDnsOptions() *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_DnsOptions {
	if t.DnsOptions != nil {
		return t.DnsOptions
	}
	t.DnsOptions = &NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_DnsOptions{}
	return t.DnsOptions
}

// GetDnsOptions returns the value of the DnsOptions struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement. If the receiver or the field DnsOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement) GetDnsOptions() *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_DnsOptions {
	if t != nil && t.DnsOptions != nil {
		return t.DnsOptions
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DnsOptions.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement.
func (*NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_DnsOptions represents the /nokia-conf/configure/groups/group/router/ipv6/router-advertisement/dns-options YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_DnsOptions struct {
	RdnssLifetime NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_DnsOptions_RdnssLifetime_Union `path:"rdnss-lifetime" module:"nokia-conf"`
	Server        []string                                                                                        `path:"server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_DnsOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_DnsOptions) IsYANGGoStruct() {
}

// GetRdnssLifetime retrieves the value of the leaf RdnssLifetime from the NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_DnsOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RdnssLifetime is set, it can
// safely use t.GetRdnssLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RdnssLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_DnsOptions) GetRdnssLifetime() NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_DnsOptions_RdnssLifetime_Union {
	if t == nil || t.RdnssLifetime == nil {
		return NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_DnsOptions_RdnssLifetime_Enum_infinite
	}
	return t.RdnssLifetime
}

// GetServer retrieves the value of the leaf Server from the NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_DnsOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Server is set, it can
// safely use t.GetServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Server == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_DnsOptions) GetServer() []string {
	if t == nil || t.Server == nil {
		return nil
	}
	return t.Server
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_DnsOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_DnsOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RdnssLifetime == nil {
		t.RdnssLifetime = NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_DnsOptions_RdnssLifetime_Enum_infinite
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_DnsOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_DnsOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_DnsOptions) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_DnsOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_DnsOptions.
func (*NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_DnsOptions) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface represents the /nokia-conf/configure/groups/group/router/ipv6/router-advertisement/interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface struct {
	AdminState                 E_NokiaTypesSros_AdminState                                                                   `path:"admin-state" module:"nokia-conf"`
	CurrentHopLimit            *uint16                                                                                       `path:"current-hop-limit" module:"nokia-conf"`
	DnsOptions                 *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_DnsOptions        `path:"dns-options" module:"nokia-conf" yangPresence:"true"`
	IpIntName                  *string                                                                                       `path:"ip-int-name" module:"nokia-conf"`
	ManagedConfiguration       *bool                                                                                         `path:"managed-configuration" module:"nokia-conf"`
	MaxAdvertisementInterval   *uint32                                                                                       `path:"max-advertisement-interval" module:"nokia-conf"`
	MinAdvertisementInterval   *uint32                                                                                       `path:"min-advertisement-interval" module:"nokia-conf"`
	Mtu                        *uint32                                                                                       `path:"mtu" module:"nokia-conf"`
	OtherStatefulConfiguration *bool                                                                                         `path:"other-stateful-configuration" module:"nokia-conf"`
	Prefix                     map[string]*NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix `path:"prefix" module:"nokia-conf"`
	ReachableTime              *uint32                                                                                       `path:"reachable-time" module:"nokia-conf"`
	RetransmitTime             *uint32                                                                                       `path:"retransmit-time" module:"nokia-conf"`
	RouterLifetime             *uint32                                                                                       `path:"router-lifetime" module:"nokia-conf"`
	UseVirtualMac              *bool                                                                                         `path:"use-virtual-mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface) NewPrefix(Ipv6Prefix string) (*NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix)
	}

	key := Ipv6Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix{
		Ipv6Prefix: &Ipv6Prefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.Ipv6Prefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface) GetOrCreatePrefix(Ipv6Prefix string) *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix {

	key := Ipv6Prefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(Ipv6Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface) GetPrefix(Ipv6Prefix string) *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix {

	if t == nil {
		return nil
	}

	key := Ipv6Prefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface) DeletePrefix(Ipv6Prefix string) {
	key := Ipv6Prefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix struct to the
// list Prefix of NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface) AppendPrefix(v *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix) error {
	if v.Ipv6Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Prefix")
	}

	key := *v.Ipv6Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// GetOrCreateDnsOptions retrieves the value of the DnsOptions field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface) GetOrCreateDnsOptions() *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_DnsOptions {
	if t.DnsOptions != nil {
		return t.DnsOptions
	}
	t.DnsOptions = &NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_DnsOptions{}
	return t.DnsOptions
}

// GetDnsOptions returns the value of the DnsOptions struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface. If the receiver or the field DnsOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface) GetDnsOptions() *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_DnsOptions {
	if t != nil && t.DnsOptions != nil {
		return t.DnsOptions
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCurrentHopLimit retrieves the value of the leaf CurrentHopLimit from the NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CurrentHopLimit is set, it can
// safely use t.GetCurrentHopLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CurrentHopLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface) GetCurrentHopLimit() uint16 {
	if t == nil || t.CurrentHopLimit == nil {
		return 64
	}
	return *t.CurrentHopLimit
}

// GetIpIntName retrieves the value of the leaf IpIntName from the NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpIntName is set, it can
// safely use t.GetIpIntName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpIntName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface) GetIpIntName() string {
	if t == nil || t.IpIntName == nil {
		return ""
	}
	return *t.IpIntName
}

// GetManagedConfiguration retrieves the value of the leaf ManagedConfiguration from the NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ManagedConfiguration is set, it can
// safely use t.GetManagedConfiguration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ManagedConfiguration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface) GetManagedConfiguration() bool {
	if t == nil || t.ManagedConfiguration == nil {
		return false
	}
	return *t.ManagedConfiguration
}

// GetMaxAdvertisementInterval retrieves the value of the leaf MaxAdvertisementInterval from the NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxAdvertisementInterval is set, it can
// safely use t.GetMaxAdvertisementInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxAdvertisementInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface) GetMaxAdvertisementInterval() uint32 {
	if t == nil || t.MaxAdvertisementInterval == nil {
		return 600
	}
	return *t.MaxAdvertisementInterval
}

// GetMinAdvertisementInterval retrieves the value of the leaf MinAdvertisementInterval from the NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinAdvertisementInterval is set, it can
// safely use t.GetMinAdvertisementInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinAdvertisementInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface) GetMinAdvertisementInterval() uint32 {
	if t == nil || t.MinAdvertisementInterval == nil {
		return 200
	}
	return *t.MinAdvertisementInterval
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// GetOtherStatefulConfiguration retrieves the value of the leaf OtherStatefulConfiguration from the NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OtherStatefulConfiguration is set, it can
// safely use t.GetOtherStatefulConfiguration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OtherStatefulConfiguration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface) GetOtherStatefulConfiguration() bool {
	if t == nil || t.OtherStatefulConfiguration == nil {
		return false
	}
	return *t.OtherStatefulConfiguration
}

// GetReachableTime retrieves the value of the leaf ReachableTime from the NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReachableTime is set, it can
// safely use t.GetReachableTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReachableTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface) GetReachableTime() uint32 {
	if t == nil || t.ReachableTime == nil {
		return 0
	}
	return *t.ReachableTime
}

// GetRetransmitTime retrieves the value of the leaf RetransmitTime from the NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetransmitTime is set, it can
// safely use t.GetRetransmitTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetransmitTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface) GetRetransmitTime() uint32 {
	if t == nil || t.RetransmitTime == nil {
		return 0
	}
	return *t.RetransmitTime
}

// GetRouterLifetime retrieves the value of the leaf RouterLifetime from the NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterLifetime is set, it can
// safely use t.GetRouterLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface) GetRouterLifetime() uint32 {
	if t == nil || t.RouterLifetime == nil {
		return 1800
	}
	return *t.RouterLifetime
}

// GetUseVirtualMac retrieves the value of the leaf UseVirtualMac from the NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseVirtualMac is set, it can
// safely use t.GetUseVirtualMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseVirtualMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface) GetUseVirtualMac() bool {
	if t == nil || t.UseVirtualMac == nil {
		return false
	}
	return *t.UseVirtualMac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.CurrentHopLimit == nil {
		var v uint16 = 64
		t.CurrentHopLimit = &v
	}
	if t.ManagedConfiguration == nil {
		var v bool = false
		t.ManagedConfiguration = &v
	}
	if t.MaxAdvertisementInterval == nil {
		var v uint32 = 600
		t.MaxAdvertisementInterval = &v
	}
	if t.MinAdvertisementInterval == nil {
		var v uint32 = 200
		t.MinAdvertisementInterval = &v
	}
	if t.OtherStatefulConfiguration == nil {
		var v bool = false
		t.OtherStatefulConfiguration = &v
	}
	if t.ReachableTime == nil {
		var v uint32 = 0
		t.ReachableTime = &v
	}
	if t.RetransmitTime == nil {
		var v uint32 = 0
		t.RetransmitTime = &v
	}
	if t.RouterLifetime == nil {
		var v uint32 = 1800
		t.RouterLifetime = &v
	}
	if t.UseVirtualMac == nil {
		var v bool = false
		t.UseVirtualMac = &v
	}
	t.DnsOptions.PopulateDefaults()
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpIntName == nil {
		return nil, fmt.Errorf("nil value for key IpIntName")
	}

	return map[string]interface{}{
		"ip-int-name": *t.IpIntName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface.
func (*NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_DnsOptions represents the /nokia-conf/configure/groups/group/router/ipv6/router-advertisement/interface/dns-options YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_DnsOptions struct {
	IncludeRdnss  *bool                                                                                                     `path:"include-rdnss" module:"nokia-conf"`
	RdnssLifetime NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_DnsOptions_RdnssLifetime_Union `path:"rdnss-lifetime" module:"nokia-conf"`
	Server        []string                                                                                                  `path:"server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_DnsOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_DnsOptions) IsYANGGoStruct() {
}

// GetIncludeRdnss retrieves the value of the leaf IncludeRdnss from the NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_DnsOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncludeRdnss is set, it can
// safely use t.GetIncludeRdnss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncludeRdnss == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_DnsOptions) GetIncludeRdnss() bool {
	if t == nil || t.IncludeRdnss == nil {
		return true
	}
	return *t.IncludeRdnss
}

// GetRdnssLifetime retrieves the value of the leaf RdnssLifetime from the NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_DnsOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RdnssLifetime is set, it can
// safely use t.GetRdnssLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RdnssLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_DnsOptions) GetRdnssLifetime() NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_DnsOptions_RdnssLifetime_Union {
	if t == nil || t.RdnssLifetime == nil {
		return nil
	}
	return t.RdnssLifetime
}

// GetServer retrieves the value of the leaf Server from the NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_DnsOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Server is set, it can
// safely use t.GetServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Server == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_DnsOptions) GetServer() []string {
	if t == nil || t.Server == nil {
		return nil
	}
	return t.Server
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_DnsOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_DnsOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IncludeRdnss == nil {
		var v bool = true
		t.IncludeRdnss = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_DnsOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_DnsOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_DnsOptions) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_DnsOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_DnsOptions.
func (*NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_DnsOptions) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix represents the /nokia-conf/configure/groups/group/router/ipv6/router-advertisement/interface/prefix YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix struct {
	Autonomous        *bool                                                                                                     `path:"autonomous" module:"nokia-conf"`
	Ipv6Prefix        *string                                                                                                   `path:"ipv6-prefix" module:"nokia-conf"`
	OnLink            *bool                                                                                                     `path:"on-link" module:"nokia-conf"`
	PreferredLifetime NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix_PreferredLifetime_Union `path:"preferred-lifetime" module:"nokia-conf"`
	ValidLifetime     NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix_ValidLifetime_Union     `path:"valid-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix) IsYANGGoStruct() {
}

// GetAutonomous retrieves the value of the leaf Autonomous from the NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Autonomous is set, it can
// safely use t.GetAutonomous() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Autonomous == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix) GetAutonomous() bool {
	if t == nil || t.Autonomous == nil {
		return true
	}
	return *t.Autonomous
}

// GetIpv6Prefix retrieves the value of the leaf Ipv6Prefix from the NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Prefix is set, it can
// safely use t.GetIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix) GetIpv6Prefix() string {
	if t == nil || t.Ipv6Prefix == nil {
		return ""
	}
	return *t.Ipv6Prefix
}

// GetOnLink retrieves the value of the leaf OnLink from the NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OnLink is set, it can
// safely use t.GetOnLink() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OnLink == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix) GetOnLink() bool {
	if t == nil || t.OnLink == nil {
		return true
	}
	return *t.OnLink
}

// GetPreferredLifetime retrieves the value of the leaf PreferredLifetime from the NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferredLifetime is set, it can
// safely use t.GetPreferredLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferredLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix) GetPreferredLifetime() NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix_PreferredLifetime_Union {
	if t == nil || t.PreferredLifetime == nil {
		return UnionUint32(604800)
	}
	return t.PreferredLifetime
}

// GetValidLifetime retrieves the value of the leaf ValidLifetime from the NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidLifetime is set, it can
// safely use t.GetValidLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix) GetValidLifetime() NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix_ValidLifetime_Union {
	if t == nil || t.ValidLifetime == nil {
		return UnionUint32(2592000)
	}
	return t.ValidLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Autonomous == nil {
		var v bool = true
		t.Autonomous = &v
	}
	if t.OnLink == nil {
		var v bool = true
		t.OnLink = &v
	}
	if t.PreferredLifetime == nil {
		t.PreferredLifetime = UnionUint32(604800)
	}
	if t.ValidLifetime == nil {
		t.ValidLifetime = UnionUint32(2592000)
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Prefix")
	}

	return map[string]interface{}{
		"ipv6-prefix": *t.Ipv6Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix.
func (*NokiaConf_Configure_Groups_Group_Router_Ipv6_RouterAdvertisement_Interface_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining represents the /nokia-conf/configure/groups/group/router/isa-service-chaining YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining struct {
	NatGroup       map[NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_NatGroup_Id_Union]*NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_NatGroup `path:"nat-group" module:"nokia-conf"`
	VxlanVtepRange *NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_VxlanVtepRange                                                                            `path:"vxlan-vtep-range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining) IsYANGGoStruct() {}

// NewNatGroup creates a new entry in the NatGroup list of the
// NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining) NewNatGroup(Id NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_NatGroup_Id_Union) (*NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_NatGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NatGroup == nil {
		t.NatGroup = make(map[NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_NatGroup_Id_Union]*NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_NatGroup)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NatGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NatGroup", key)
	}

	t.NatGroup[key] = &NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_NatGroup{
		Id: Id,
	}

	return t.NatGroup[key], nil
}

// RenameNatGroup renames an entry in the list NatGroup within
// the NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining) RenameNatGroup(oldK, newK NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_NatGroup_Id_Union) error {
	if _, ok := t.NatGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in NatGroup", newK)
	}

	e, ok := t.NatGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NatGroup", oldK)
	}
	e.Id = newK

	t.NatGroup[newK] = e
	delete(t.NatGroup, oldK)
	return nil
}

// GetOrCreateNatGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining) GetOrCreateNatGroup(Id NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_NatGroup_Id_Union) *NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_NatGroup {

	key := Id

	if v, ok := t.NatGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNatGroup(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNatGroup got unexpected error: %v", err))
	}
	return v
}

// GetNatGroup retrieves the value with the specified key from
// the NatGroup map field of NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining) GetNatGroup(Id NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_NatGroup_Id_Union) *NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_NatGroup {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.NatGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteNatGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining) DeleteNatGroup(Id NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_NatGroup_Id_Union) {
	key := Id

	delete(t.NatGroup, key)
}

// AppendNatGroup appends the supplied NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_NatGroup struct to the
// list NatGroup of NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_NatGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining) AppendNatGroup(v *NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_NatGroup) error {
	key := v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NatGroup == nil {
		t.NatGroup = make(map[NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_NatGroup_Id_Union]*NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_NatGroup)
	}

	if _, ok := t.NatGroup[key]; ok {
		return fmt.Errorf("duplicate key for list NatGroup %v", key)
	}

	t.NatGroup[key] = v
	return nil
}

// GetOrCreateVxlanVtepRange retrieves the value of the VxlanVtepRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining) GetOrCreateVxlanVtepRange() *NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_VxlanVtepRange {
	if t.VxlanVtepRange != nil {
		return t.VxlanVtepRange
	}
	t.VxlanVtepRange = &NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_VxlanVtepRange{}
	return t.VxlanVtepRange
}

// GetVxlanVtepRange returns the value of the VxlanVtepRange struct pointer
// from NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining. If the receiver or the field VxlanVtepRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining) GetVxlanVtepRange() *NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_VxlanVtepRange {
	if t != nil && t.VxlanVtepRange != nil {
		return t.VxlanVtepRange
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.VxlanVtepRange.PopulateDefaults()
	for _, e := range t.NatGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining.
func (*NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_NatGroup represents the /nokia-conf/configure/groups/group/router/isa-service-chaining/nat-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_NatGroup struct {
	Id NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_NatGroup_Id_Union `path:"id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_NatGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_NatGroup) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_NatGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_NatGroup) GetId() NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_NatGroup_Id_Union {
	if t == nil || t.Id == nil {
		return nil
	}
	return t.Id
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_NatGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_NatGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_NatGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_NatGroup) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"id": t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_NatGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_NatGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_NatGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_NatGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_NatGroup.
func (*NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_NatGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_VxlanVtepRange represents the /nokia-conf/configure/groups/group/router/isa-service-chaining/vxlan-vtep-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_VxlanVtepRange struct {
	End   *string `path:"end" module:"nokia-conf"`
	Start *string `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_VxlanVtepRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_VxlanVtepRange) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_VxlanVtepRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_VxlanVtepRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_VxlanVtepRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_VxlanVtepRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_VxlanVtepRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_VxlanVtepRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_VxlanVtepRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_VxlanVtepRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_VxlanVtepRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_VxlanVtepRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_VxlanVtepRange.
func (*NokiaConf_Configure_Groups_Group_Router_IsaServiceChaining_VxlanVtepRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis represents the /nokia-conf/configure/groups/group/router/isis YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis struct {
	AdminState                  E_NokiaTypesSros_AdminState                                                                                                  `path:"admin-state" module:"nokia-conf"`
	AdvertisePassiveOnly        *bool                                                                                                                        `path:"advertise-passive-only" module:"nokia-conf"`
	AdvertiseRouterCapability   E_NokiaConf_Configure_Groups_Group_Router_Isis_AdvertiseRouterCapability                                                     `path:"advertise-router-capability" module:"nokia-conf"`
	AdvertiseTunnelLink         *bool                                                                                                                        `path:"advertise-tunnel-link" module:"nokia-conf"`
	AllL1Isis                   *string                                                                                                                      `path:"all-l1isis" module:"nokia-conf"`
	AllL2Isis                   *string                                                                                                                      `path:"all-l2isis" module:"nokia-conf"`
	AreaAddress                 []string                                                                                                                     `path:"area-address" module:"nokia-conf"`
	AuthenticationCheck         *bool                                                                                                                        `path:"authentication-check" module:"nokia-conf"`
	AuthenticationKey           *string                                                                                                                      `path:"authentication-key" module:"nokia-conf"`
	AuthenticationKeychain      *string                                                                                                                      `path:"authentication-keychain" module:"nokia-conf"`
	AuthenticationType          E_NokiaTypesIsis_AuthType                                                                                                    `path:"authentication-type" module:"nokia-conf"`
	CsnpAuthentication          *bool                                                                                                                        `path:"csnp-authentication" module:"nokia-conf"`
	DatabaseExport              *NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport                                                                 `path:"database-export" module:"nokia-conf" yangPresence:"true"`
	DefaultRouteTag             *uint32                                                                                                                      `path:"default-route-tag" module:"nokia-conf"`
	EntropyLabel                *NokiaConf_Configure_Groups_Group_Router_Isis_EntropyLabel                                                                   `path:"entropy-label" module:"nokia-conf"`
	ExportLimit                 *NokiaConf_Configure_Groups_Group_Router_Isis_ExportLimit                                                                    `path:"export-limit" module:"nokia-conf" yangPresence:"true"`
	ExportPolicy                []string                                                                                                                     `path:"export-policy" module:"nokia-conf"`
	FlexibleAlgorithms          *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms                                                             `path:"flexible-algorithms" module:"nokia-conf"`
	GracefulRestart             *NokiaConf_Configure_Groups_Group_Router_Isis_GracefulRestart                                                                `path:"graceful-restart" module:"nokia-conf" yangPresence:"true"`
	HelloAuthentication         *bool                                                                                                                        `path:"hello-authentication" module:"nokia-conf"`
	HelloPadding                E_NokiaTypesIsis_HelloPaddingType                                                                                            `path:"hello-padding" module:"nokia-conf"`
	IgnoreAttachedBit           *bool                                                                                                                        `path:"ignore-attached-bit" module:"nokia-conf"`
	IgnoreLspErrors             *bool                                                                                                                        `path:"ignore-lsp-errors" module:"nokia-conf"`
	IgnoreNarrowMetric          *bool                                                                                                                        `path:"ignore-narrow-metric" module:"nokia-conf"`
	IgpShortcut                 *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut                                                                    `path:"igp-shortcut" module:"nokia-conf" yangPresence:"true"`
	IidTlv                      *bool                                                                                                                        `path:"iid-tlv" module:"nokia-conf"`
	ImportPolicy                []string                                                                                                                     `path:"import-policy" module:"nokia-conf"`
	Interface                   map[string]*NokiaConf_Configure_Groups_Group_Router_Isis_Interface                                                           `path:"interface" module:"nokia-conf"`
	Ipv4MulticastRouting        E_NokiaTypesIsis_RoutingTopology                                                                                             `path:"ipv4-multicast-routing" module:"nokia-conf"`
	Ipv4Routing                 *bool                                                                                                                        `path:"ipv4-routing" module:"nokia-conf"`
	Ipv6MulticastRouting        E_NokiaTypesIsis_RoutingTopology                                                                                             `path:"ipv6-multicast-routing" module:"nokia-conf"`
	Ipv6Routing                 E_NokiaTypesIsis_RoutingTopology                                                                                             `path:"ipv6-routing" module:"nokia-conf"`
	IsisInstance                NokiaConf_Configure_Groups_Group_Router_Isis_IsisInstance_Union                                                              `path:"isis-instance" module:"nokia-conf"`
	LdpOverRsvp                 *bool                                                                                                                        `path:"ldp-over-rsvp" module:"nokia-conf"`
	LdpSync                     *bool                                                                                                                        `path:"ldp-sync" module:"nokia-conf"`
	Level                       map[NokiaConf_Configure_Groups_Group_Router_Isis_Level_LevelNumber_Union]*NokiaConf_Configure_Groups_Group_Router_Isis_Level `path:"level" module:"nokia-conf"`
	LevelCapability             E_NokiaTypesIsis_Level                                                                                                       `path:"level-capability" module:"nokia-conf"`
	LinkGroup                   map[string]*NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup                                                           `path:"link-group" module:"nokia-conf"`
	LoopfreeAlternate           *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate                                                              `path:"loopfree-alternate" module:"nokia-conf" yangPresence:"true"`
	LspLifetime                 *uint32                                                                                                                      `path:"lsp-lifetime" module:"nokia-conf"`
	LspMinimumRemainingLifetime *uint32                                                                                                                      `path:"lsp-minimum-remaining-lifetime" module:"nokia-conf"`
	LspMtuSize                  *int32                                                                                                                       `path:"lsp-mtu-size" module:"nokia-conf"`
	LspRefresh                  *NokiaConf_Configure_Groups_Group_Router_Isis_LspRefresh                                                                     `path:"lsp-refresh" module:"nokia-conf"`
	MruMismatchDetection        *bool                                                                                                                        `path:"mru-mismatch-detection" module:"nokia-conf"`
	MultiTopology               *NokiaConf_Configure_Groups_Group_Router_Isis_MultiTopology                                                                  `path:"multi-topology" module:"nokia-conf" yangPresence:"true"`
	MulticastImport             *NokiaConf_Configure_Groups_Group_Router_Isis_MulticastImport                                                                `path:"multicast-import" module:"nokia-conf"`
	Overload                    *NokiaConf_Configure_Groups_Group_Router_Isis_Overload                                                                       `path:"overload" module:"nokia-conf" yangPresence:"true"`
	OverloadExportExternal      *bool                                                                                                                        `path:"overload-export-external" module:"nokia-conf"`
	OverloadExportInterlevel    *bool                                                                                                                        `path:"overload-export-interlevel" module:"nokia-conf"`
	OverloadOnBoot              *NokiaConf_Configure_Groups_Group_Router_Isis_OverloadOnBoot                                                                 `path:"overload-on-boot" module:"nokia-conf" yangPresence:"true"`
	PoiTlv                      *bool                                                                                                                        `path:"poi-tlv" module:"nokia-conf"`
	PrefixAttributesTlv         *bool                                                                                                                        `path:"prefix-attributes-tlv" module:"nokia-conf"`
	PrefixLimit                 *NokiaConf_Configure_Groups_Group_Router_Isis_PrefixLimit                                                                    `path:"prefix-limit" module:"nokia-conf" yangPresence:"true"`
	PsnpAuthentication          *bool                                                                                                                        `path:"psnp-authentication" module:"nokia-conf"`
	ReferenceBandwidth          *uint64                                                                                                                      `path:"reference-bandwidth" module:"nokia-conf"`
	RibPriority                 *NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority                                                                    `path:"rib-priority" module:"nokia-conf"`
	RouterId                    *string                                                                                                                      `path:"router-id" module:"nokia-conf"`
	SegmentRouting              *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting                                                                 `path:"segment-routing" module:"nokia-conf" yangPresence:"true"`
	SegmentRoutingV6            *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6                                                               `path:"segment-routing-v6" module:"nokia-conf" yangPresence:"true"`
	StandardMultiInstance       *bool                                                                                                                        `path:"standard-multi-instance" module:"nokia-conf"`
	StrictAdjacencyCheck        *bool                                                                                                                        `path:"strict-adjacency-check" module:"nokia-conf"`
	SummaryAddress              map[string]*NokiaConf_Configure_Groups_Group_Router_Isis_SummaryAddress                                                      `path:"summary-address" module:"nokia-conf"`
	SuppressAttachedBit         *bool                                                                                                                        `path:"suppress-attached-bit" module:"nokia-conf"`
	SystemId                    *string                                                                                                                      `path:"system-id" module:"nokia-conf"`
	Timers                      *NokiaConf_Configure_Groups_Group_Router_Isis_Timers                                                                         `path:"timers" module:"nokia-conf"`
	TrafficEngineering          *bool                                                                                                                        `path:"traffic-engineering" module:"nokia-conf"`
	TrafficEngineeringOptions   *NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions                                                      `path:"traffic-engineering-options" module:"nokia-conf"`
	UnicastImport               *NokiaConf_Configure_Groups_Group_Router_Isis_UnicastImport                                                                  `path:"unicast-import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Groups_Group_Router_Isis struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) NewInterface(InterfaceName string) (*NokiaConf_Configure_Groups_Group_Router_Isis_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Isis_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Groups_Group_Router_Isis_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Groups_Group_Router_Isis struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Isis. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetOrCreateInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Router_Isis_Interface {

	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Groups_Group_Router_Isis. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Router_Isis_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Isis. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Groups_Group_Router_Isis_Interface struct to the
// list Interface of NokiaConf_Configure_Groups_Group_Router_Isis. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Isis_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) AppendInterface(v *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Isis_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Groups_Group_Router_Isis struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) NewLevel(LevelNumber NokiaConf_Configure_Groups_Group_Router_Isis_Level_LevelNumber_Union) (*NokiaConf_Configure_Groups_Group_Router_Isis_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Router_Isis_Level_LevelNumber_Union]*NokiaConf_Configure_Groups_Group_Router_Isis_Level)
	}

	key := LevelNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Groups_Group_Router_Isis_Level{
		LevelNumber: LevelNumber,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Groups_Group_Router_Isis struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) RenameLevel(oldK, newK NokiaConf_Configure_Groups_Group_Router_Isis_Level_LevelNumber_Union) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.LevelNumber = newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Isis. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetOrCreateLevel(LevelNumber NokiaConf_Configure_Groups_Group_Router_Isis_Level_LevelNumber_Union) *NokiaConf_Configure_Groups_Group_Router_Isis_Level {

	key := LevelNumber

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(LevelNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Groups_Group_Router_Isis. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetLevel(LevelNumber NokiaConf_Configure_Groups_Group_Router_Isis_Level_LevelNumber_Union) *NokiaConf_Configure_Groups_Group_Router_Isis_Level {

	if t == nil {
		return nil
	}

	key := LevelNumber

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Isis. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) DeleteLevel(LevelNumber NokiaConf_Configure_Groups_Group_Router_Isis_Level_LevelNumber_Union) {
	key := LevelNumber

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Groups_Group_Router_Isis_Level struct to the
// list Level of NokiaConf_Configure_Groups_Group_Router_Isis. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Isis_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) AppendLevel(v *NokiaConf_Configure_Groups_Group_Router_Isis_Level) error {
	key := v.LevelNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Router_Isis_Level_LevelNumber_Union]*NokiaConf_Configure_Groups_Group_Router_Isis_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// NewLinkGroup creates a new entry in the LinkGroup list of the
// NokiaConf_Configure_Groups_Group_Router_Isis struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) NewLinkGroup(LinkGroupName string) (*NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LinkGroup == nil {
		t.LinkGroup = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup)
	}

	key := LinkGroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LinkGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LinkGroup", key)
	}

	t.LinkGroup[key] = &NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup{
		LinkGroupName: &LinkGroupName,
	}

	return t.LinkGroup[key], nil
}

// RenameLinkGroup renames an entry in the list LinkGroup within
// the NokiaConf_Configure_Groups_Group_Router_Isis struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) RenameLinkGroup(oldK, newK string) error {
	if _, ok := t.LinkGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in LinkGroup", newK)
	}

	e, ok := t.LinkGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LinkGroup", oldK)
	}
	e.LinkGroupName = &newK

	t.LinkGroup[newK] = e
	delete(t.LinkGroup, oldK)
	return nil
}

// GetOrCreateLinkGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Isis. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetOrCreateLinkGroup(LinkGroupName string) *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup {

	key := LinkGroupName

	if v, ok := t.LinkGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLinkGroup(LinkGroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLinkGroup got unexpected error: %v", err))
	}
	return v
}

// GetLinkGroup retrieves the value with the specified key from
// the LinkGroup map field of NokiaConf_Configure_Groups_Group_Router_Isis. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetLinkGroup(LinkGroupName string) *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup {

	if t == nil {
		return nil
	}

	key := LinkGroupName

	if lm, ok := t.LinkGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteLinkGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Isis. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) DeleteLinkGroup(LinkGroupName string) {
	key := LinkGroupName

	delete(t.LinkGroup, key)
}

// AppendLinkGroup appends the supplied NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup struct to the
// list LinkGroup of NokiaConf_Configure_Groups_Group_Router_Isis. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) AppendLinkGroup(v *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup) error {
	if v.LinkGroupName == nil {
		return fmt.Errorf("invalid nil key received for LinkGroupName")
	}

	key := *v.LinkGroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LinkGroup == nil {
		t.LinkGroup = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup)
	}

	if _, ok := t.LinkGroup[key]; ok {
		return fmt.Errorf("duplicate key for list LinkGroup %v", key)
	}

	t.LinkGroup[key] = v
	return nil
}

// NewSummaryAddress creates a new entry in the SummaryAddress list of the
// NokiaConf_Configure_Groups_Group_Router_Isis struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) NewSummaryAddress(IpPrefix string) (*NokiaConf_Configure_Groups_Group_Router_Isis_SummaryAddress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SummaryAddress == nil {
		t.SummaryAddress = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Isis_SummaryAddress)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SummaryAddress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SummaryAddress", key)
	}

	t.SummaryAddress[key] = &NokiaConf_Configure_Groups_Group_Router_Isis_SummaryAddress{
		IpPrefix: &IpPrefix,
	}

	return t.SummaryAddress[key], nil
}

// RenameSummaryAddress renames an entry in the list SummaryAddress within
// the NokiaConf_Configure_Groups_Group_Router_Isis struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) RenameSummaryAddress(oldK, newK string) error {
	if _, ok := t.SummaryAddress[newK]; ok {
		return fmt.Errorf("key %v already exists in SummaryAddress", newK)
	}

	e, ok := t.SummaryAddress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SummaryAddress", oldK)
	}
	e.IpPrefix = &newK

	t.SummaryAddress[newK] = e
	delete(t.SummaryAddress, oldK)
	return nil
}

// GetOrCreateSummaryAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Isis. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetOrCreateSummaryAddress(IpPrefix string) *NokiaConf_Configure_Groups_Group_Router_Isis_SummaryAddress {

	key := IpPrefix

	if v, ok := t.SummaryAddress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSummaryAddress(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSummaryAddress got unexpected error: %v", err))
	}
	return v
}

// GetSummaryAddress retrieves the value with the specified key from
// the SummaryAddress map field of NokiaConf_Configure_Groups_Group_Router_Isis. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetSummaryAddress(IpPrefix string) *NokiaConf_Configure_Groups_Group_Router_Isis_SummaryAddress {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.SummaryAddress[key]; ok {
		return lm
	}
	return nil
}

// DeleteSummaryAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Isis. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) DeleteSummaryAddress(IpPrefix string) {
	key := IpPrefix

	delete(t.SummaryAddress, key)
}

// AppendSummaryAddress appends the supplied NokiaConf_Configure_Groups_Group_Router_Isis_SummaryAddress struct to the
// list SummaryAddress of NokiaConf_Configure_Groups_Group_Router_Isis. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Isis_SummaryAddress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) AppendSummaryAddress(v *NokiaConf_Configure_Groups_Group_Router_Isis_SummaryAddress) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SummaryAddress == nil {
		t.SummaryAddress = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Isis_SummaryAddress)
	}

	if _, ok := t.SummaryAddress[key]; ok {
		return fmt.Errorf("duplicate key for list SummaryAddress %v", key)
	}

	t.SummaryAddress[key] = v
	return nil
}

// GetOrCreateDatabaseExport retrieves the value of the DatabaseExport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetOrCreateDatabaseExport() *NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport {
	if t.DatabaseExport != nil {
		return t.DatabaseExport
	}
	t.DatabaseExport = &NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport{}
	return t.DatabaseExport
}

// GetOrCreateEntropyLabel retrieves the value of the EntropyLabel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetOrCreateEntropyLabel() *NokiaConf_Configure_Groups_Group_Router_Isis_EntropyLabel {
	if t.EntropyLabel != nil {
		return t.EntropyLabel
	}
	t.EntropyLabel = &NokiaConf_Configure_Groups_Group_Router_Isis_EntropyLabel{}
	return t.EntropyLabel
}

// GetOrCreateExportLimit retrieves the value of the ExportLimit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetOrCreateExportLimit() *NokiaConf_Configure_Groups_Group_Router_Isis_ExportLimit {
	if t.ExportLimit != nil {
		return t.ExportLimit
	}
	t.ExportLimit = &NokiaConf_Configure_Groups_Group_Router_Isis_ExportLimit{}
	return t.ExportLimit
}

// GetOrCreateFlexibleAlgorithms retrieves the value of the FlexibleAlgorithms field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetOrCreateFlexibleAlgorithms() *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms {
	if t.FlexibleAlgorithms != nil {
		return t.FlexibleAlgorithms
	}
	t.FlexibleAlgorithms = &NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms{}
	return t.FlexibleAlgorithms
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetOrCreateGracefulRestart() *NokiaConf_Configure_Groups_Group_Router_Isis_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &NokiaConf_Configure_Groups_Group_Router_Isis_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateIgpShortcut retrieves the value of the IgpShortcut field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetOrCreateIgpShortcut() *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut {
	if t.IgpShortcut != nil {
		return t.IgpShortcut
	}
	t.IgpShortcut = &NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut{}
	return t.IgpShortcut
}

// GetOrCreateLoopfreeAlternate retrieves the value of the LoopfreeAlternate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetOrCreateLoopfreeAlternate() *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate {
	if t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	t.LoopfreeAlternate = &NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate{}
	return t.LoopfreeAlternate
}

// GetOrCreateLspRefresh retrieves the value of the LspRefresh field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetOrCreateLspRefresh() *NokiaConf_Configure_Groups_Group_Router_Isis_LspRefresh {
	if t.LspRefresh != nil {
		return t.LspRefresh
	}
	t.LspRefresh = &NokiaConf_Configure_Groups_Group_Router_Isis_LspRefresh{}
	return t.LspRefresh
}

// GetOrCreateMultiTopology retrieves the value of the MultiTopology field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetOrCreateMultiTopology() *NokiaConf_Configure_Groups_Group_Router_Isis_MultiTopology {
	if t.MultiTopology != nil {
		return t.MultiTopology
	}
	t.MultiTopology = &NokiaConf_Configure_Groups_Group_Router_Isis_MultiTopology{}
	return t.MultiTopology
}

// GetOrCreateMulticastImport retrieves the value of the MulticastImport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetOrCreateMulticastImport() *NokiaConf_Configure_Groups_Group_Router_Isis_MulticastImport {
	if t.MulticastImport != nil {
		return t.MulticastImport
	}
	t.MulticastImport = &NokiaConf_Configure_Groups_Group_Router_Isis_MulticastImport{}
	return t.MulticastImport
}

// GetOrCreateOverload retrieves the value of the Overload field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetOrCreateOverload() *NokiaConf_Configure_Groups_Group_Router_Isis_Overload {
	if t.Overload != nil {
		return t.Overload
	}
	t.Overload = &NokiaConf_Configure_Groups_Group_Router_Isis_Overload{}
	return t.Overload
}

// GetOrCreateOverloadOnBoot retrieves the value of the OverloadOnBoot field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetOrCreateOverloadOnBoot() *NokiaConf_Configure_Groups_Group_Router_Isis_OverloadOnBoot {
	if t.OverloadOnBoot != nil {
		return t.OverloadOnBoot
	}
	t.OverloadOnBoot = &NokiaConf_Configure_Groups_Group_Router_Isis_OverloadOnBoot{}
	return t.OverloadOnBoot
}

// GetOrCreatePrefixLimit retrieves the value of the PrefixLimit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetOrCreatePrefixLimit() *NokiaConf_Configure_Groups_Group_Router_Isis_PrefixLimit {
	if t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	t.PrefixLimit = &NokiaConf_Configure_Groups_Group_Router_Isis_PrefixLimit{}
	return t.PrefixLimit
}

// GetOrCreateRibPriority retrieves the value of the RibPriority field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetOrCreateRibPriority() *NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority {
	if t.RibPriority != nil {
		return t.RibPriority
	}
	t.RibPriority = &NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority{}
	return t.RibPriority
}

// GetOrCreateSegmentRouting retrieves the value of the SegmentRouting field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetOrCreateSegmentRouting() *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting {
	if t.SegmentRouting != nil {
		return t.SegmentRouting
	}
	t.SegmentRouting = &NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting{}
	return t.SegmentRouting
}

// GetOrCreateSegmentRoutingV6 retrieves the value of the SegmentRoutingV6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetOrCreateSegmentRoutingV6() *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6 {
	if t.SegmentRoutingV6 != nil {
		return t.SegmentRoutingV6
	}
	t.SegmentRoutingV6 = &NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6{}
	return t.SegmentRoutingV6
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetOrCreateTimers() *NokiaConf_Configure_Groups_Group_Router_Isis_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &NokiaConf_Configure_Groups_Group_Router_Isis_Timers{}
	return t.Timers
}

// GetOrCreateTrafficEngineeringOptions retrieves the value of the TrafficEngineeringOptions field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetOrCreateTrafficEngineeringOptions() *NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions {
	if t.TrafficEngineeringOptions != nil {
		return t.TrafficEngineeringOptions
	}
	t.TrafficEngineeringOptions = &NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions{}
	return t.TrafficEngineeringOptions
}

// GetOrCreateUnicastImport retrieves the value of the UnicastImport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetOrCreateUnicastImport() *NokiaConf_Configure_Groups_Group_Router_Isis_UnicastImport {
	if t.UnicastImport != nil {
		return t.UnicastImport
	}
	t.UnicastImport = &NokiaConf_Configure_Groups_Group_Router_Isis_UnicastImport{}
	return t.UnicastImport
}

// GetDatabaseExport returns the value of the DatabaseExport struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis. If the receiver or the field DatabaseExport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetDatabaseExport() *NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport {
	if t != nil && t.DatabaseExport != nil {
		return t.DatabaseExport
	}
	return nil
}

// GetEntropyLabel returns the value of the EntropyLabel struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis. If the receiver or the field EntropyLabel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetEntropyLabel() *NokiaConf_Configure_Groups_Group_Router_Isis_EntropyLabel {
	if t != nil && t.EntropyLabel != nil {
		return t.EntropyLabel
	}
	return nil
}

// GetExportLimit returns the value of the ExportLimit struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis. If the receiver or the field ExportLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetExportLimit() *NokiaConf_Configure_Groups_Group_Router_Isis_ExportLimit {
	if t != nil && t.ExportLimit != nil {
		return t.ExportLimit
	}
	return nil
}

// GetFlexibleAlgorithms returns the value of the FlexibleAlgorithms struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis. If the receiver or the field FlexibleAlgorithms is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetFlexibleAlgorithms() *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms {
	if t != nil && t.FlexibleAlgorithms != nil {
		return t.FlexibleAlgorithms
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetGracefulRestart() *NokiaConf_Configure_Groups_Group_Router_Isis_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetIgpShortcut returns the value of the IgpShortcut struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis. If the receiver or the field IgpShortcut is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetIgpShortcut() *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut {
	if t != nil && t.IgpShortcut != nil {
		return t.IgpShortcut
	}
	return nil
}

// GetLoopfreeAlternate returns the value of the LoopfreeAlternate struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis. If the receiver or the field LoopfreeAlternate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetLoopfreeAlternate() *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate {
	if t != nil && t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	return nil
}

// GetLspRefresh returns the value of the LspRefresh struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis. If the receiver or the field LspRefresh is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetLspRefresh() *NokiaConf_Configure_Groups_Group_Router_Isis_LspRefresh {
	if t != nil && t.LspRefresh != nil {
		return t.LspRefresh
	}
	return nil
}

// GetMultiTopology returns the value of the MultiTopology struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis. If the receiver or the field MultiTopology is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetMultiTopology() *NokiaConf_Configure_Groups_Group_Router_Isis_MultiTopology {
	if t != nil && t.MultiTopology != nil {
		return t.MultiTopology
	}
	return nil
}

// GetMulticastImport returns the value of the MulticastImport struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis. If the receiver or the field MulticastImport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetMulticastImport() *NokiaConf_Configure_Groups_Group_Router_Isis_MulticastImport {
	if t != nil && t.MulticastImport != nil {
		return t.MulticastImport
	}
	return nil
}

// GetOverload returns the value of the Overload struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis. If the receiver or the field Overload is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetOverload() *NokiaConf_Configure_Groups_Group_Router_Isis_Overload {
	if t != nil && t.Overload != nil {
		return t.Overload
	}
	return nil
}

// GetOverloadOnBoot returns the value of the OverloadOnBoot struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis. If the receiver or the field OverloadOnBoot is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetOverloadOnBoot() *NokiaConf_Configure_Groups_Group_Router_Isis_OverloadOnBoot {
	if t != nil && t.OverloadOnBoot != nil {
		return t.OverloadOnBoot
	}
	return nil
}

// GetPrefixLimit returns the value of the PrefixLimit struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis. If the receiver or the field PrefixLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetPrefixLimit() *NokiaConf_Configure_Groups_Group_Router_Isis_PrefixLimit {
	if t != nil && t.PrefixLimit != nil {
		return t.PrefixLimit
	}
	return nil
}

// GetRibPriority returns the value of the RibPriority struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis. If the receiver or the field RibPriority is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetRibPriority() *NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority {
	if t != nil && t.RibPriority != nil {
		return t.RibPriority
	}
	return nil
}

// GetSegmentRouting returns the value of the SegmentRouting struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis. If the receiver or the field SegmentRouting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetSegmentRouting() *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting {
	if t != nil && t.SegmentRouting != nil {
		return t.SegmentRouting
	}
	return nil
}

// GetSegmentRoutingV6 returns the value of the SegmentRoutingV6 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis. If the receiver or the field SegmentRoutingV6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetSegmentRoutingV6() *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6 {
	if t != nil && t.SegmentRoutingV6 != nil {
		return t.SegmentRoutingV6
	}
	return nil
}

// GetTimers returns the value of the Timers struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetTimers() *NokiaConf_Configure_Groups_Group_Router_Isis_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetTrafficEngineeringOptions returns the value of the TrafficEngineeringOptions struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis. If the receiver or the field TrafficEngineeringOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetTrafficEngineeringOptions() *NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions {
	if t != nil && t.TrafficEngineeringOptions != nil {
		return t.TrafficEngineeringOptions
	}
	return nil
}

// GetUnicastImport returns the value of the UnicastImport struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis. If the receiver or the field UnicastImport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetUnicastImport() *NokiaConf_Configure_Groups_Group_Router_Isis_UnicastImport {
	if t != nil && t.UnicastImport != nil {
		return t.UnicastImport
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAdvertisePassiveOnly retrieves the value of the leaf AdvertisePassiveOnly from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisePassiveOnly is set, it can
// safely use t.GetAdvertisePassiveOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisePassiveOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetAdvertisePassiveOnly() bool {
	if t == nil || t.AdvertisePassiveOnly == nil {
		return false
	}
	return *t.AdvertisePassiveOnly
}

// GetAdvertiseRouterCapability retrieves the value of the leaf AdvertiseRouterCapability from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseRouterCapability is set, it can
// safely use t.GetAdvertiseRouterCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseRouterCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetAdvertiseRouterCapability() E_NokiaConf_Configure_Groups_Group_Router_Isis_AdvertiseRouterCapability {
	if t == nil || t.AdvertiseRouterCapability == 0 {
		return 0
	}
	return t.AdvertiseRouterCapability
}

// GetAdvertiseTunnelLink retrieves the value of the leaf AdvertiseTunnelLink from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseTunnelLink is set, it can
// safely use t.GetAdvertiseTunnelLink() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseTunnelLink == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetAdvertiseTunnelLink() bool {
	if t == nil || t.AdvertiseTunnelLink == nil {
		return false
	}
	return *t.AdvertiseTunnelLink
}

// GetAllL1Isis retrieves the value of the leaf AllL1Isis from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllL1Isis is set, it can
// safely use t.GetAllL1Isis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllL1Isis == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetAllL1Isis() string {
	if t == nil || t.AllL1Isis == nil {
		return "01:80:C2:00:00:14"
	}
	return *t.AllL1Isis
}

// GetAllL2Isis retrieves the value of the leaf AllL2Isis from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllL2Isis is set, it can
// safely use t.GetAllL2Isis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllL2Isis == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetAllL2Isis() string {
	if t == nil || t.AllL2Isis == nil {
		return "01:80:C2:00:00:15"
	}
	return *t.AllL2Isis
}

// GetAreaAddress retrieves the value of the leaf AreaAddress from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AreaAddress is set, it can
// safely use t.GetAreaAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AreaAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetAreaAddress() []string {
	if t == nil || t.AreaAddress == nil {
		return nil
	}
	return t.AreaAddress
}

// GetAuthenticationCheck retrieves the value of the leaf AuthenticationCheck from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationCheck is set, it can
// safely use t.GetAuthenticationCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetAuthenticationCheck() bool {
	if t == nil || t.AuthenticationCheck == nil {
		return true
	}
	return *t.AuthenticationCheck
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationKeychain retrieves the value of the leaf AuthenticationKeychain from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKeychain is set, it can
// safely use t.GetAuthenticationKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKeychain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetAuthenticationKeychain() string {
	if t == nil || t.AuthenticationKeychain == nil {
		return ""
	}
	return *t.AuthenticationKeychain
}

// GetAuthenticationType retrieves the value of the leaf AuthenticationType from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationType is set, it can
// safely use t.GetAuthenticationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetAuthenticationType() E_NokiaTypesIsis_AuthType {
	if t == nil || t.AuthenticationType == 0 {
		return 0
	}
	return t.AuthenticationType
}

// GetCsnpAuthentication retrieves the value of the leaf CsnpAuthentication from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CsnpAuthentication is set, it can
// safely use t.GetCsnpAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CsnpAuthentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetCsnpAuthentication() bool {
	if t == nil || t.CsnpAuthentication == nil {
		return true
	}
	return *t.CsnpAuthentication
}

// GetDefaultRouteTag retrieves the value of the leaf DefaultRouteTag from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultRouteTag is set, it can
// safely use t.GetDefaultRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultRouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetDefaultRouteTag() uint32 {
	if t == nil || t.DefaultRouteTag == nil {
		return 0
	}
	return *t.DefaultRouteTag
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetHelloAuthentication retrieves the value of the leaf HelloAuthentication from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloAuthentication is set, it can
// safely use t.GetHelloAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloAuthentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetHelloAuthentication() bool {
	if t == nil || t.HelloAuthentication == nil {
		return true
	}
	return *t.HelloAuthentication
}

// GetHelloPadding retrieves the value of the leaf HelloPadding from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloPadding is set, it can
// safely use t.GetHelloPadding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloPadding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetHelloPadding() E_NokiaTypesIsis_HelloPaddingType {
	if t == nil || t.HelloPadding == 0 {
		return 0
	}
	return t.HelloPadding
}

// GetIgnoreAttachedBit retrieves the value of the leaf IgnoreAttachedBit from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreAttachedBit is set, it can
// safely use t.GetIgnoreAttachedBit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreAttachedBit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetIgnoreAttachedBit() bool {
	if t == nil || t.IgnoreAttachedBit == nil {
		return false
	}
	return *t.IgnoreAttachedBit
}

// GetIgnoreLspErrors retrieves the value of the leaf IgnoreLspErrors from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreLspErrors is set, it can
// safely use t.GetIgnoreLspErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreLspErrors == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetIgnoreLspErrors() bool {
	if t == nil || t.IgnoreLspErrors == nil {
		return false
	}
	return *t.IgnoreLspErrors
}

// GetIgnoreNarrowMetric retrieves the value of the leaf IgnoreNarrowMetric from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreNarrowMetric is set, it can
// safely use t.GetIgnoreNarrowMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreNarrowMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetIgnoreNarrowMetric() bool {
	if t == nil || t.IgnoreNarrowMetric == nil {
		return false
	}
	return *t.IgnoreNarrowMetric
}

// GetIidTlv retrieves the value of the leaf IidTlv from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IidTlv is set, it can
// safely use t.GetIidTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IidTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetIidTlv() bool {
	if t == nil || t.IidTlv == nil {
		return false
	}
	return *t.IidTlv
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetIpv4MulticastRouting retrieves the value of the leaf Ipv4MulticastRouting from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4MulticastRouting is set, it can
// safely use t.GetIpv4MulticastRouting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4MulticastRouting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetIpv4MulticastRouting() E_NokiaTypesIsis_RoutingTopology {
	if t == nil || t.Ipv4MulticastRouting == 0 {
		return NokiaTypesIsis_RoutingTopology_native
	}
	return t.Ipv4MulticastRouting
}

// GetIpv4Routing retrieves the value of the leaf Ipv4Routing from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Routing is set, it can
// safely use t.GetIpv4Routing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Routing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetIpv4Routing() bool {
	if t == nil || t.Ipv4Routing == nil {
		return true
	}
	return *t.Ipv4Routing
}

// GetIpv6MulticastRouting retrieves the value of the leaf Ipv6MulticastRouting from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6MulticastRouting is set, it can
// safely use t.GetIpv6MulticastRouting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6MulticastRouting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetIpv6MulticastRouting() E_NokiaTypesIsis_RoutingTopology {
	if t == nil || t.Ipv6MulticastRouting == 0 {
		return 0
	}
	return t.Ipv6MulticastRouting
}

// GetIpv6Routing retrieves the value of the leaf Ipv6Routing from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Routing is set, it can
// safely use t.GetIpv6Routing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Routing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetIpv6Routing() E_NokiaTypesIsis_RoutingTopology {
	if t == nil || t.Ipv6Routing == 0 {
		return NokiaTypesIsis_RoutingTopology_false
	}
	return t.Ipv6Routing
}

// GetIsisInstance retrieves the value of the leaf IsisInstance from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IsisInstance is set, it can
// safely use t.GetIsisInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IsisInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetIsisInstance() NokiaConf_Configure_Groups_Group_Router_Isis_IsisInstance_Union {
	if t == nil || t.IsisInstance == nil {
		return nil
	}
	return t.IsisInstance
}

// GetLdpOverRsvp retrieves the value of the leaf LdpOverRsvp from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LdpOverRsvp is set, it can
// safely use t.GetLdpOverRsvp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LdpOverRsvp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetLdpOverRsvp() bool {
	if t == nil || t.LdpOverRsvp == nil {
		return false
	}
	return *t.LdpOverRsvp
}

// GetLdpSync retrieves the value of the leaf LdpSync from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LdpSync is set, it can
// safely use t.GetLdpSync() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LdpSync == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetLdpSync() bool {
	if t == nil || t.LdpSync == nil {
		return true
	}
	return *t.LdpSync
}

// GetLevelCapability retrieves the value of the leaf LevelCapability from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelCapability is set, it can
// safely use t.GetLevelCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetLevelCapability() E_NokiaTypesIsis_Level {
	if t == nil || t.LevelCapability == 0 {
		return NokiaTypesIsis_Level_1_2
	}
	return t.LevelCapability
}

// GetLspLifetime retrieves the value of the leaf LspLifetime from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspLifetime is set, it can
// safely use t.GetLspLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetLspLifetime() uint32 {
	if t == nil || t.LspLifetime == nil {
		return 1200
	}
	return *t.LspLifetime
}

// GetLspMinimumRemainingLifetime retrieves the value of the leaf LspMinimumRemainingLifetime from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspMinimumRemainingLifetime is set, it can
// safely use t.GetLspMinimumRemainingLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspMinimumRemainingLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetLspMinimumRemainingLifetime() uint32 {
	if t == nil || t.LspMinimumRemainingLifetime == nil {
		return 0
	}
	return *t.LspMinimumRemainingLifetime
}

// GetLspMtuSize retrieves the value of the leaf LspMtuSize from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspMtuSize is set, it can
// safely use t.GetLspMtuSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspMtuSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetLspMtuSize() int32 {
	if t == nil || t.LspMtuSize == nil {
		return 1492
	}
	return *t.LspMtuSize
}

// GetMruMismatchDetection retrieves the value of the leaf MruMismatchDetection from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MruMismatchDetection is set, it can
// safely use t.GetMruMismatchDetection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MruMismatchDetection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetMruMismatchDetection() bool {
	if t == nil || t.MruMismatchDetection == nil {
		return false
	}
	return *t.MruMismatchDetection
}

// GetOverloadExportExternal retrieves the value of the leaf OverloadExportExternal from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverloadExportExternal is set, it can
// safely use t.GetOverloadExportExternal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverloadExportExternal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetOverloadExportExternal() bool {
	if t == nil || t.OverloadExportExternal == nil {
		return false
	}
	return *t.OverloadExportExternal
}

// GetOverloadExportInterlevel retrieves the value of the leaf OverloadExportInterlevel from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverloadExportInterlevel is set, it can
// safely use t.GetOverloadExportInterlevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverloadExportInterlevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetOverloadExportInterlevel() bool {
	if t == nil || t.OverloadExportInterlevel == nil {
		return false
	}
	return *t.OverloadExportInterlevel
}

// GetPoiTlv retrieves the value of the leaf PoiTlv from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PoiTlv is set, it can
// safely use t.GetPoiTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PoiTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetPoiTlv() bool {
	if t == nil || t.PoiTlv == nil {
		return false
	}
	return *t.PoiTlv
}

// GetPrefixAttributesTlv retrieves the value of the leaf PrefixAttributesTlv from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixAttributesTlv is set, it can
// safely use t.GetPrefixAttributesTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixAttributesTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetPrefixAttributesTlv() bool {
	if t == nil || t.PrefixAttributesTlv == nil {
		return false
	}
	return *t.PrefixAttributesTlv
}

// GetPsnpAuthentication retrieves the value of the leaf PsnpAuthentication from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PsnpAuthentication is set, it can
// safely use t.GetPsnpAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PsnpAuthentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetPsnpAuthentication() bool {
	if t == nil || t.PsnpAuthentication == nil {
		return true
	}
	return *t.PsnpAuthentication
}

// GetReferenceBandwidth retrieves the value of the leaf ReferenceBandwidth from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReferenceBandwidth is set, it can
// safely use t.GetReferenceBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReferenceBandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetReferenceBandwidth() uint64 {
	if t == nil || t.ReferenceBandwidth == nil {
		return 0
	}
	return *t.ReferenceBandwidth
}

// GetRouterId retrieves the value of the leaf RouterId from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterId is set, it can
// safely use t.GetRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetRouterId() string {
	if t == nil || t.RouterId == nil {
		return ""
	}
	return *t.RouterId
}

// GetStandardMultiInstance retrieves the value of the leaf StandardMultiInstance from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StandardMultiInstance is set, it can
// safely use t.GetStandardMultiInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StandardMultiInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetStandardMultiInstance() bool {
	if t == nil || t.StandardMultiInstance == nil {
		return false
	}
	return *t.StandardMultiInstance
}

// GetStrictAdjacencyCheck retrieves the value of the leaf StrictAdjacencyCheck from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StrictAdjacencyCheck is set, it can
// safely use t.GetStrictAdjacencyCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StrictAdjacencyCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetStrictAdjacencyCheck() bool {
	if t == nil || t.StrictAdjacencyCheck == nil {
		return false
	}
	return *t.StrictAdjacencyCheck
}

// GetSuppressAttachedBit retrieves the value of the leaf SuppressAttachedBit from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SuppressAttachedBit is set, it can
// safely use t.GetSuppressAttachedBit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SuppressAttachedBit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetSuppressAttachedBit() bool {
	if t == nil || t.SuppressAttachedBit == nil {
		return false
	}
	return *t.SuppressAttachedBit
}

// GetSystemId retrieves the value of the leaf SystemId from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemId is set, it can
// safely use t.GetSystemId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetSystemId() string {
	if t == nil || t.SystemId == nil {
		return "0000.0000.0000"
	}
	return *t.SystemId
}

// GetTrafficEngineering retrieves the value of the leaf TrafficEngineering from the NokiaConf_Configure_Groups_Group_Router_Isis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrafficEngineering is set, it can
// safely use t.GetTrafficEngineering() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrafficEngineering == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) GetTrafficEngineering() bool {
	if t == nil || t.TrafficEngineering == nil {
		return false
	}
	return *t.TrafficEngineering
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AdvertisePassiveOnly == nil {
		var v bool = false
		t.AdvertisePassiveOnly = &v
	}
	if t.AdvertiseTunnelLink == nil {
		var v bool = false
		t.AdvertiseTunnelLink = &v
	}
	if t.AllL1Isis == nil {
		var v string = "01:80:C2:00:00:14"
		t.AllL1Isis = &v
	}
	if t.AllL2Isis == nil {
		var v string = "01:80:C2:00:00:15"
		t.AllL2Isis = &v
	}
	if t.AuthenticationCheck == nil {
		var v bool = true
		t.AuthenticationCheck = &v
	}
	if t.CsnpAuthentication == nil {
		var v bool = true
		t.CsnpAuthentication = &v
	}
	if t.HelloAuthentication == nil {
		var v bool = true
		t.HelloAuthentication = &v
	}
	if t.IgnoreAttachedBit == nil {
		var v bool = false
		t.IgnoreAttachedBit = &v
	}
	if t.IgnoreLspErrors == nil {
		var v bool = false
		t.IgnoreLspErrors = &v
	}
	if t.IgnoreNarrowMetric == nil {
		var v bool = false
		t.IgnoreNarrowMetric = &v
	}
	if t.IidTlv == nil {
		var v bool = false
		t.IidTlv = &v
	}
	if t.Ipv4MulticastRouting == 0 {
		t.Ipv4MulticastRouting = NokiaTypesIsis_RoutingTopology_native
	}
	if t.Ipv4Routing == nil {
		var v bool = true
		t.Ipv4Routing = &v
	}
	if t.Ipv6Routing == 0 {
		t.Ipv6Routing = NokiaTypesIsis_RoutingTopology_false
	}
	if t.LdpOverRsvp == nil {
		var v bool = false
		t.LdpOverRsvp = &v
	}
	if t.LdpSync == nil {
		var v bool = true
		t.LdpSync = &v
	}
	if t.LevelCapability == 0 {
		t.LevelCapability = NokiaTypesIsis_Level_1_2
	}
	if t.LspLifetime == nil {
		var v uint32 = 1200
		t.LspLifetime = &v
	}
	if t.LspMtuSize == nil {
		var v int32 = 1492
		t.LspMtuSize = &v
	}
	if t.MruMismatchDetection == nil {
		var v bool = false
		t.MruMismatchDetection = &v
	}
	if t.OverloadExportExternal == nil {
		var v bool = false
		t.OverloadExportExternal = &v
	}
	if t.OverloadExportInterlevel == nil {
		var v bool = false
		t.OverloadExportInterlevel = &v
	}
	if t.PoiTlv == nil {
		var v bool = false
		t.PoiTlv = &v
	}
	if t.PrefixAttributesTlv == nil {
		var v bool = false
		t.PrefixAttributesTlv = &v
	}
	if t.PsnpAuthentication == nil {
		var v bool = true
		t.PsnpAuthentication = &v
	}
	if t.StandardMultiInstance == nil {
		var v bool = false
		t.StandardMultiInstance = &v
	}
	if t.StrictAdjacencyCheck == nil {
		var v bool = false
		t.StrictAdjacencyCheck = &v
	}
	if t.SuppressAttachedBit == nil {
		var v bool = false
		t.SuppressAttachedBit = &v
	}
	if t.SystemId == nil {
		var v string = "0000.0000.0000"
		t.SystemId = &v
	}
	if t.TrafficEngineering == nil {
		var v bool = false
		t.TrafficEngineering = &v
	}
	t.DatabaseExport.PopulateDefaults()
	t.EntropyLabel.PopulateDefaults()
	t.ExportLimit.PopulateDefaults()
	t.FlexibleAlgorithms.PopulateDefaults()
	t.GracefulRestart.PopulateDefaults()
	t.IgpShortcut.PopulateDefaults()
	t.LoopfreeAlternate.PopulateDefaults()
	t.LspRefresh.PopulateDefaults()
	t.MultiTopology.PopulateDefaults()
	t.MulticastImport.PopulateDefaults()
	t.Overload.PopulateDefaults()
	t.OverloadOnBoot.PopulateDefaults()
	t.PrefixLimit.PopulateDefaults()
	t.RibPriority.PopulateDefaults()
	t.SegmentRouting.PopulateDefaults()
	t.SegmentRoutingV6.PopulateDefaults()
	t.Timers.PopulateDefaults()
	t.TrafficEngineeringOptions.PopulateDefaults()
	t.UnicastImport.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
	for _, e := range t.LinkGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.SummaryAddress {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Isis struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"isis-instance": t.IsisInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis.
func (*NokiaConf_Configure_Groups_Group_Router_Isis) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport represents the /nokia-conf/configure/groups/group/router/isis/database-export YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport struct {
	BgpLsIdentifier *NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport_BgpLsIdentifier `path:"bgp-ls-identifier" module:"nokia-conf" yangPresence:"true"`
	IgpIdentifier   *uint64                                                                      `path:"igp-identifier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport) IsYANGGoStruct() {}

// GetOrCreateBgpLsIdentifier retrieves the value of the BgpLsIdentifier field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport) GetOrCreateBgpLsIdentifier() *NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport_BgpLsIdentifier {
	if t.BgpLsIdentifier != nil {
		return t.BgpLsIdentifier
	}
	t.BgpLsIdentifier = &NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport_BgpLsIdentifier{}
	return t.BgpLsIdentifier
}

// GetBgpLsIdentifier returns the value of the BgpLsIdentifier struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport. If the receiver or the field BgpLsIdentifier is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport) GetBgpLsIdentifier() *NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport_BgpLsIdentifier {
	if t != nil && t.BgpLsIdentifier != nil {
		return t.BgpLsIdentifier
	}
	return nil
}

// GetIgpIdentifier retrieves the value of the leaf IgpIdentifier from the NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgpIdentifier is set, it can
// safely use t.GetIgpIdentifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgpIdentifier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport) GetIgpIdentifier() uint64 {
	if t == nil || t.IgpIdentifier == nil {
		return 0
	}
	return *t.IgpIdentifier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BgpLsIdentifier.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport_BgpLsIdentifier represents the /nokia-conf/configure/groups/group/router/isis/database-export/bgp-ls-identifier YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport_BgpLsIdentifier struct {
	Value *uint32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport_BgpLsIdentifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport_BgpLsIdentifier) IsYANGGoStruct() {
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport_BgpLsIdentifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport_BgpLsIdentifier) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport_BgpLsIdentifier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport_BgpLsIdentifier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Value == nil {
		var v uint32 = 0
		t.Value = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport_BgpLsIdentifier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport_BgpLsIdentifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport_BgpLsIdentifier) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport_BgpLsIdentifier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport_BgpLsIdentifier.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_DatabaseExport_BgpLsIdentifier) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_EntropyLabel represents the /nokia-conf/configure/groups/group/router/isis/entropy-label YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_EntropyLabel struct {
	OverrideTunnelElc *bool `path:"override-tunnel-elc" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_EntropyLabel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_EntropyLabel) IsYANGGoStruct() {}

// GetOverrideTunnelElc retrieves the value of the leaf OverrideTunnelElc from the NokiaConf_Configure_Groups_Group_Router_Isis_EntropyLabel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverrideTunnelElc is set, it can
// safely use t.GetOverrideTunnelElc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverrideTunnelElc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_EntropyLabel) GetOverrideTunnelElc() bool {
	if t == nil || t.OverrideTunnelElc == nil {
		return false
	}
	return *t.OverrideTunnelElc
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_EntropyLabel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_EntropyLabel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.OverrideTunnelElc == nil {
		var v bool = false
		t.OverrideTunnelElc = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_EntropyLabel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_EntropyLabel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_EntropyLabel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_EntropyLabel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_EntropyLabel.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_EntropyLabel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_ExportLimit represents the /nokia-conf/configure/groups/group/router/isis/export-limit YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_ExportLimit struct {
	LogPercent *uint32 `path:"log-percent" module:"nokia-conf"`
	Number     *uint32 `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_ExportLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_ExportLimit) IsYANGGoStruct() {}

// GetLogPercent retrieves the value of the leaf LogPercent from the NokiaConf_Configure_Groups_Group_Router_Isis_ExportLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogPercent is set, it can
// safely use t.GetLogPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogPercent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_ExportLimit) GetLogPercent() uint32 {
	if t == nil || t.LogPercent == nil {
		return 0
	}
	return *t.LogPercent
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Router_Isis_ExportLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_ExportLimit) GetNumber() uint32 {
	if t == nil || t.Number == nil {
		return 0
	}
	return *t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_ExportLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_ExportLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_ExportLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_ExportLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_ExportLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_ExportLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_ExportLimit.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_ExportLimit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms represents the /nokia-conf/configure/groups/group/router/isis/flexible-algorithms YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms struct {
	AdminState E_NokiaTypesSros_AdminState                                                                                                                                             `path:"admin-state" module:"nokia-conf"`
	FlexAlgo   map[NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_FlexAlgoId_Union]*NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo `path:"flex-algo" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms) IsYANGGoStruct() {}

// NewFlexAlgo creates a new entry in the FlexAlgo list of the
// NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms) NewFlexAlgo(FlexAlgoId NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_FlexAlgoId_Union) (*NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FlexAlgo == nil {
		t.FlexAlgo = make(map[NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_FlexAlgoId_Union]*NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo)
	}

	key := FlexAlgoId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FlexAlgo[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FlexAlgo", key)
	}

	t.FlexAlgo[key] = &NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo{
		FlexAlgoId: FlexAlgoId,
	}

	return t.FlexAlgo[key], nil
}

// RenameFlexAlgo renames an entry in the list FlexAlgo within
// the NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms) RenameFlexAlgo(oldK, newK NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_FlexAlgoId_Union) error {
	if _, ok := t.FlexAlgo[newK]; ok {
		return fmt.Errorf("key %v already exists in FlexAlgo", newK)
	}

	e, ok := t.FlexAlgo[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FlexAlgo", oldK)
	}
	e.FlexAlgoId = newK

	t.FlexAlgo[newK] = e
	delete(t.FlexAlgo, oldK)
	return nil
}

// GetOrCreateFlexAlgo retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms) GetOrCreateFlexAlgo(FlexAlgoId NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_FlexAlgoId_Union) *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo {

	key := FlexAlgoId

	if v, ok := t.FlexAlgo[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFlexAlgo(FlexAlgoId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFlexAlgo got unexpected error: %v", err))
	}
	return v
}

// GetFlexAlgo retrieves the value with the specified key from
// the FlexAlgo map field of NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms) GetFlexAlgo(FlexAlgoId NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_FlexAlgoId_Union) *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo {

	if t == nil {
		return nil
	}

	key := FlexAlgoId

	if lm, ok := t.FlexAlgo[key]; ok {
		return lm
	}
	return nil
}

// DeleteFlexAlgo deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms) DeleteFlexAlgo(FlexAlgoId NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_FlexAlgoId_Union) {
	key := FlexAlgoId

	delete(t.FlexAlgo, key)
}

// AppendFlexAlgo appends the supplied NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo struct to the
// list FlexAlgo of NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms) AppendFlexAlgo(v *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo) error {
	key := v.FlexAlgoId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FlexAlgo == nil {
		t.FlexAlgo = make(map[NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_FlexAlgoId_Union]*NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo)
	}

	if _, ok := t.FlexAlgo[key]; ok {
		return fmt.Errorf("duplicate key for list FlexAlgo %v", key)
	}

	t.FlexAlgo[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.FlexAlgo {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo represents the /nokia-conf/configure/groups/group/router/isis/flexible-algorithms/flex-algo YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo struct {
	Advertise          *string                                                                                      `path:"advertise" module:"nokia-conf"`
	FlexAlgoId         NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_FlexAlgoId_Union    `path:"flex-algo-id" module:"nokia-conf"`
	LoopfreeAlternate  *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate  `path:"loopfree-alternate" module:"nokia-conf" yangPresence:"true"`
	MicroLoopAvoidance *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_MicroLoopAvoidance `path:"micro-loop-avoidance" module:"nokia-conf" yangPresence:"true"`
	Participate        *bool                                                                                        `path:"participate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo) IsYANGGoStruct() {}

// GetOrCreateLoopfreeAlternate retrieves the value of the LoopfreeAlternate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo) GetOrCreateLoopfreeAlternate() *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate {
	if t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	t.LoopfreeAlternate = &NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate{}
	return t.LoopfreeAlternate
}

// GetOrCreateMicroLoopAvoidance retrieves the value of the MicroLoopAvoidance field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo) GetOrCreateMicroLoopAvoidance() *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_MicroLoopAvoidance {
	if t.MicroLoopAvoidance != nil {
		return t.MicroLoopAvoidance
	}
	t.MicroLoopAvoidance = &NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_MicroLoopAvoidance{}
	return t.MicroLoopAvoidance
}

// GetLoopfreeAlternate returns the value of the LoopfreeAlternate struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo. If the receiver or the field LoopfreeAlternate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo) GetLoopfreeAlternate() *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate {
	if t != nil && t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	return nil
}

// GetMicroLoopAvoidance returns the value of the MicroLoopAvoidance struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo. If the receiver or the field MicroLoopAvoidance is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo) GetMicroLoopAvoidance() *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_MicroLoopAvoidance {
	if t != nil && t.MicroLoopAvoidance != nil {
		return t.MicroLoopAvoidance
	}
	return nil
}

// GetAdvertise retrieves the value of the leaf Advertise from the NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertise is set, it can
// safely use t.GetAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertise == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo) GetAdvertise() string {
	if t == nil || t.Advertise == nil {
		return ""
	}
	return *t.Advertise
}

// GetFlexAlgoId retrieves the value of the leaf FlexAlgoId from the NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlexAlgoId is set, it can
// safely use t.GetFlexAlgoId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlexAlgoId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo) GetFlexAlgoId() NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_FlexAlgoId_Union {
	if t == nil || t.FlexAlgoId == nil {
		return nil
	}
	return t.FlexAlgoId
}

// GetParticipate retrieves the value of the leaf Participate from the NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Participate is set, it can
// safely use t.GetParticipate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Participate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo) GetParticipate() bool {
	if t == nil || t.Participate == nil {
		return false
	}
	return *t.Participate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Participate == nil {
		var v bool = false
		t.Participate = &v
	}
	t.LoopfreeAlternate.PopulateDefaults()
	t.MicroLoopAvoidance.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"flex-algo-id": t.FlexAlgoId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate represents the /nokia-conf/configure/groups/group/router/isis/flexible-algorithms/flex-algo/loopfree-alternate YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate struct {
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate) IsYANGGoStruct() {
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_MicroLoopAvoidance represents the /nokia-conf/configure/groups/group/router/isis/flexible-algorithms/flex-algo/micro-loop-avoidance YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_MicroLoopAvoidance struct {
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_MicroLoopAvoidance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_MicroLoopAvoidance) IsYANGGoStruct() {
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_MicroLoopAvoidance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_MicroLoopAvoidance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_MicroLoopAvoidance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_MicroLoopAvoidance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_MicroLoopAvoidance) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_MicroLoopAvoidance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_MicroLoopAvoidance.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_FlexibleAlgorithms_FlexAlgo_MicroLoopAvoidance) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_GracefulRestart represents the /nokia-conf/configure/groups/group/router/isis/graceful-restart YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_GracefulRestart struct {
	HelperMode *bool `path:"helper-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_GracefulRestart) IsYANGGoStruct() {}

// GetHelperMode retrieves the value of the leaf HelperMode from the NokiaConf_Configure_Groups_Group_Router_Isis_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperMode is set, it can
// safely use t.GetHelperMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_GracefulRestart) GetHelperMode() bool {
	if t == nil || t.HelperMode == nil {
		return true
	}
	return *t.HelperMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_GracefulRestart
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_GracefulRestart) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HelperMode == nil {
		var v bool = true
		t.HelperMode = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_GracefulRestart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_GracefulRestart) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_GracefulRestart.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_GracefulRestart) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut represents the /nokia-conf/configure/groups/group/router/isis/igp-shortcut YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut struct {
	AdminState    E_NokiaTypesSros_AdminState                                             `path:"admin-state" module:"nokia-conf"`
	TunnelNextHop *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop `path:"tunnel-next-hop" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut) IsYANGGoStruct() {}

// GetOrCreateTunnelNextHop retrieves the value of the TunnelNextHop field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut) GetOrCreateTunnelNextHop() *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop {
	if t.TunnelNextHop != nil {
		return t.TunnelNextHop
	}
	t.TunnelNextHop = &NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop{}
	return t.TunnelNextHop
}

// GetTunnelNextHop returns the value of the TunnelNextHop struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut. If the receiver or the field TunnelNextHop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut) GetTunnelNextHop() *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop {
	if t != nil && t.TunnelNextHop != nil {
		return t.TunnelNextHop
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.TunnelNextHop.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop represents the /nokia-conf/configure/groups/group/router/isis/igp-shortcut/tunnel-next-hop YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop struct {
	Family map[NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family `path:"family" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop) IsYANGGoStruct() {}

// NewFamily creates a new entry in the Family list of the
// NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop) NewFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family_FamilyType_Union) (*NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family)
	}

	key := FamilyType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Family[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Family", key)
	}

	t.Family[key] = &NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family{
		FamilyType: FamilyType,
	}

	return t.Family[key], nil
}

// RenameFamily renames an entry in the list Family within
// the NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop) RenameFamily(oldK, newK NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family_FamilyType_Union) error {
	if _, ok := t.Family[newK]; ok {
		return fmt.Errorf("key %v already exists in Family", newK)
	}

	e, ok := t.Family[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Family", oldK)
	}
	e.FamilyType = newK

	t.Family[newK] = e
	delete(t.Family, oldK)
	return nil
}

// GetOrCreateFamily retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop) GetOrCreateFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family_FamilyType_Union) *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family {

	key := FamilyType

	if v, ok := t.Family[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFamily(FamilyType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFamily got unexpected error: %v", err))
	}
	return v
}

// GetFamily retrieves the value with the specified key from
// the Family map field of NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop) GetFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family_FamilyType_Union) *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family {

	if t == nil {
		return nil
	}

	key := FamilyType

	if lm, ok := t.Family[key]; ok {
		return lm
	}
	return nil
}

// DeleteFamily deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop) DeleteFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family_FamilyType_Union) {
	key := FamilyType

	delete(t.Family, key)
}

// AppendFamily appends the supplied NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family struct to the
// list Family of NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop) AppendFamily(v *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family) error {
	key := v.FamilyType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family)
	}

	if _, ok := t.Family[key]; ok {
		return fmt.Errorf("duplicate key for list Family %v", key)
	}

	t.Family[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Family {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family represents the /nokia-conf/configure/groups/group/router/isis/igp-shortcut/tunnel-next-hop/family YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family struct {
	FamilyType       NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family_FamilyType_Union  `path:"family-type" module:"nokia-conf"`
	Resolution       E_NokiaTypesSros_ResolutionType                                                                 `path:"resolution" module:"nokia-conf"`
	ResolutionFilter *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family_ResolutionFilter `path:"resolution-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family) IsYANGGoStruct() {
}

// GetOrCreateResolutionFilter retrieves the value of the ResolutionFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family) GetOrCreateResolutionFilter() *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family_ResolutionFilter {
	if t.ResolutionFilter != nil {
		return t.ResolutionFilter
	}
	t.ResolutionFilter = &NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family_ResolutionFilter{}
	return t.ResolutionFilter
}

// GetResolutionFilter returns the value of the ResolutionFilter struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family. If the receiver or the field ResolutionFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family) GetResolutionFilter() *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family_ResolutionFilter {
	if t != nil && t.ResolutionFilter != nil {
		return t.ResolutionFilter
	}
	return nil
}

// GetFamilyType retrieves the value of the leaf FamilyType from the NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FamilyType is set, it can
// safely use t.GetFamilyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FamilyType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family) GetFamilyType() NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family_FamilyType_Union {
	if t == nil || t.FamilyType == nil {
		return nil
	}
	return t.FamilyType
}

// GetResolution retrieves the value of the leaf Resolution from the NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Resolution is set, it can
// safely use t.GetResolution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Resolution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family) GetResolution() E_NokiaTypesSros_ResolutionType {
	if t == nil || t.Resolution == 0 {
		return NokiaTypesSros_ResolutionType_none
	}
	return t.Resolution
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Resolution == 0 {
		t.Resolution = NokiaTypesSros_ResolutionType_none
	}
	t.ResolutionFilter.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"family-type": t.FamilyType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family_ResolutionFilter represents the /nokia-conf/configure/groups/group/router/isis/igp-shortcut/tunnel-next-hop/family/resolution-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family_ResolutionFilter struct {
	Rsvp *bool `path:"rsvp" module:"nokia-conf"`
	SrTe *bool `path:"sr-te" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family_ResolutionFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family_ResolutionFilter) IsYANGGoStruct() {
}

// GetRsvp retrieves the value of the leaf Rsvp from the NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rsvp is set, it can
// safely use t.GetRsvp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rsvp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family_ResolutionFilter) GetRsvp() bool {
	if t == nil || t.Rsvp == nil {
		return false
	}
	return *t.Rsvp
}

// GetSrTe retrieves the value of the leaf SrTe from the NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrTe is set, it can
// safely use t.GetSrTe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrTe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family_ResolutionFilter) GetSrTe() bool {
	if t == nil || t.SrTe == nil {
		return false
	}
	return *t.SrTe
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family_ResolutionFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family_ResolutionFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Rsvp == nil {
		var v bool = false
		t.Rsvp = &v
	}
	if t.SrTe == nil {
		var v bool = false
		t.SrTe = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family_ResolutionFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family_ResolutionFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family_ResolutionFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family_ResolutionFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family_ResolutionFilter.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_IgpShortcut_TunnelNextHop_Family_ResolutionFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_Interface represents the /nokia-conf/configure/groups/group/router/isis/interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_Interface struct {
	AdjacencySet                map[NokiaConf_Configure_Groups_Group_Router_Isis_Interface_AdjacencySet_Id_Union]*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_AdjacencySet `path:"adjacency-set" module:"nokia-conf"`
	AdminState                  E_NokiaTypesSros_AdminState                                                                                                                           `path:"admin-state" module:"nokia-conf"`
	BfdLiveness                 *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness                                                                                   `path:"bfd-liveness" module:"nokia-conf"`
	CsnpInterval                *uint32                                                                                                                                               `path:"csnp-interval" module:"nokia-conf"`
	DefaultInstance             *bool                                                                                                                                                 `path:"default-instance" module:"nokia-conf"`
	FlexAlgo                    map[NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_FlexAlgoId_Union]*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo `path:"flex-algo" module:"nokia-conf"`
	HelloAuthentication         *bool                                                                                                                                                 `path:"hello-authentication" module:"nokia-conf"`
	HelloAuthenticationKey      *string                                                                                                                                               `path:"hello-authentication-key" module:"nokia-conf"`
	HelloAuthenticationKeychain *string                                                                                                                                               `path:"hello-authentication-keychain" module:"nokia-conf"`
	HelloAuthenticationType     E_NokiaTypesIsis_AuthType                                                                                                                             `path:"hello-authentication-type" module:"nokia-conf"`
	HelloPadding                E_NokiaTypesIsis_HelloPaddingType                                                                                                                     `path:"hello-padding" module:"nokia-conf"`
	InterfaceName               *string                                                                                                                                               `path:"interface-name" module:"nokia-conf"`
	InterfaceType               E_NokiaTypesIsis_InterfaceType                                                                                                                        `path:"interface-type" module:"nokia-conf"`
	Ipv4AdjacencySid            *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4AdjacencySid                                                                              `path:"ipv4-adjacency-sid" module:"nokia-conf" yangPresence:"true"`
	Ipv4Multicast               *bool                                                                                                                                                 `path:"ipv4-multicast" module:"nokia-conf"`
	Ipv4NodeSid                 *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4NodeSid                                                                                   `path:"ipv4-node-sid" module:"nokia-conf" yangPresence:"true"`
	Ipv6AdjacencySid            *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6AdjacencySid                                                                              `path:"ipv6-adjacency-sid" module:"nokia-conf" yangPresence:"true"`
	Ipv6Multicast               *bool                                                                                                                                                 `path:"ipv6-multicast" module:"nokia-conf"`
	Ipv6NodeSid                 *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6NodeSid                                                                                   `path:"ipv6-node-sid" module:"nokia-conf" yangPresence:"true"`
	Ipv6Unicast                 *bool                                                                                                                                                 `path:"ipv6-unicast" module:"nokia-conf"`
	Level                       map[NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level_LevelNumber_Union]*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level      `path:"level" module:"nokia-conf"`
	LevelCapability             E_NokiaTypesIsis_Level                                                                                                                                `path:"level-capability" module:"nokia-conf"`
	LoadBalancingWeight         *uint32                                                                                                                                               `path:"load-balancing-weight" module:"nokia-conf"`
	LoopfreeAlternate           *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate                                                                             `path:"loopfree-alternate" module:"nokia-conf"`
	LspPacingInterval           *uint32                                                                                                                                               `path:"lsp-pacing-interval" module:"nokia-conf"`
	MeshGroup                   *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_MeshGroup                                                                                     `path:"mesh-group" module:"nokia-conf" yangPresence:"true"`
	Passive                     *bool                                                                                                                                                 `path:"passive" module:"nokia-conf"`
	RetransmitInterval          *uint32                                                                                                                                               `path:"retransmit-interval" module:"nokia-conf"`
	SidProtection               *bool                                                                                                                                                 `path:"sid-protection" module:"nokia-conf"`
	Tag                         *uint32                                                                                                                                               `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Interface) IsYANGGoStruct() {}

// NewAdjacencySet creates a new entry in the AdjacencySet list of the
// NokiaConf_Configure_Groups_Group_Router_Isis_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) NewAdjacencySet(Id NokiaConf_Configure_Groups_Group_Router_Isis_Interface_AdjacencySet_Id_Union) (*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_AdjacencySet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdjacencySet == nil {
		t.AdjacencySet = make(map[NokiaConf_Configure_Groups_Group_Router_Isis_Interface_AdjacencySet_Id_Union]*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_AdjacencySet)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AdjacencySet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AdjacencySet", key)
	}

	t.AdjacencySet[key] = &NokiaConf_Configure_Groups_Group_Router_Isis_Interface_AdjacencySet{
		Id: Id,
	}

	return t.AdjacencySet[key], nil
}

// RenameAdjacencySet renames an entry in the list AdjacencySet within
// the NokiaConf_Configure_Groups_Group_Router_Isis_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) RenameAdjacencySet(oldK, newK NokiaConf_Configure_Groups_Group_Router_Isis_Interface_AdjacencySet_Id_Union) error {
	if _, ok := t.AdjacencySet[newK]; ok {
		return fmt.Errorf("key %v already exists in AdjacencySet", newK)
	}

	e, ok := t.AdjacencySet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AdjacencySet", oldK)
	}
	e.Id = newK

	t.AdjacencySet[newK] = e
	delete(t.AdjacencySet, oldK)
	return nil
}

// GetOrCreateAdjacencySet retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Isis_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetOrCreateAdjacencySet(Id NokiaConf_Configure_Groups_Group_Router_Isis_Interface_AdjacencySet_Id_Union) *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_AdjacencySet {

	key := Id

	if v, ok := t.AdjacencySet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAdjacencySet(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAdjacencySet got unexpected error: %v", err))
	}
	return v
}

// GetAdjacencySet retrieves the value with the specified key from
// the AdjacencySet map field of NokiaConf_Configure_Groups_Group_Router_Isis_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetAdjacencySet(Id NokiaConf_Configure_Groups_Group_Router_Isis_Interface_AdjacencySet_Id_Union) *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_AdjacencySet {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.AdjacencySet[key]; ok {
		return lm
	}
	return nil
}

// DeleteAdjacencySet deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Isis_Interface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) DeleteAdjacencySet(Id NokiaConf_Configure_Groups_Group_Router_Isis_Interface_AdjacencySet_Id_Union) {
	key := Id

	delete(t.AdjacencySet, key)
}

// AppendAdjacencySet appends the supplied NokiaConf_Configure_Groups_Group_Router_Isis_Interface_AdjacencySet struct to the
// list AdjacencySet of NokiaConf_Configure_Groups_Group_Router_Isis_Interface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Isis_Interface_AdjacencySet already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) AppendAdjacencySet(v *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_AdjacencySet) error {
	key := v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdjacencySet == nil {
		t.AdjacencySet = make(map[NokiaConf_Configure_Groups_Group_Router_Isis_Interface_AdjacencySet_Id_Union]*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_AdjacencySet)
	}

	if _, ok := t.AdjacencySet[key]; ok {
		return fmt.Errorf("duplicate key for list AdjacencySet %v", key)
	}

	t.AdjacencySet[key] = v
	return nil
}

// NewFlexAlgo creates a new entry in the FlexAlgo list of the
// NokiaConf_Configure_Groups_Group_Router_Isis_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) NewFlexAlgo(FlexAlgoId NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_FlexAlgoId_Union) (*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FlexAlgo == nil {
		t.FlexAlgo = make(map[NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_FlexAlgoId_Union]*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo)
	}

	key := FlexAlgoId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FlexAlgo[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FlexAlgo", key)
	}

	t.FlexAlgo[key] = &NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo{
		FlexAlgoId: FlexAlgoId,
	}

	return t.FlexAlgo[key], nil
}

// RenameFlexAlgo renames an entry in the list FlexAlgo within
// the NokiaConf_Configure_Groups_Group_Router_Isis_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) RenameFlexAlgo(oldK, newK NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_FlexAlgoId_Union) error {
	if _, ok := t.FlexAlgo[newK]; ok {
		return fmt.Errorf("key %v already exists in FlexAlgo", newK)
	}

	e, ok := t.FlexAlgo[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FlexAlgo", oldK)
	}
	e.FlexAlgoId = newK

	t.FlexAlgo[newK] = e
	delete(t.FlexAlgo, oldK)
	return nil
}

// GetOrCreateFlexAlgo retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Isis_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetOrCreateFlexAlgo(FlexAlgoId NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_FlexAlgoId_Union) *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo {

	key := FlexAlgoId

	if v, ok := t.FlexAlgo[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFlexAlgo(FlexAlgoId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFlexAlgo got unexpected error: %v", err))
	}
	return v
}

// GetFlexAlgo retrieves the value with the specified key from
// the FlexAlgo map field of NokiaConf_Configure_Groups_Group_Router_Isis_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetFlexAlgo(FlexAlgoId NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_FlexAlgoId_Union) *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo {

	if t == nil {
		return nil
	}

	key := FlexAlgoId

	if lm, ok := t.FlexAlgo[key]; ok {
		return lm
	}
	return nil
}

// DeleteFlexAlgo deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Isis_Interface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) DeleteFlexAlgo(FlexAlgoId NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_FlexAlgoId_Union) {
	key := FlexAlgoId

	delete(t.FlexAlgo, key)
}

// AppendFlexAlgo appends the supplied NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo struct to the
// list FlexAlgo of NokiaConf_Configure_Groups_Group_Router_Isis_Interface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) AppendFlexAlgo(v *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo) error {
	key := v.FlexAlgoId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FlexAlgo == nil {
		t.FlexAlgo = make(map[NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_FlexAlgoId_Union]*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo)
	}

	if _, ok := t.FlexAlgo[key]; ok {
		return fmt.Errorf("duplicate key for list FlexAlgo %v", key)
	}

	t.FlexAlgo[key] = v
	return nil
}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Groups_Group_Router_Isis_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) NewLevel(LevelNumber NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level_LevelNumber_Union) (*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level_LevelNumber_Union]*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level)
	}

	key := LevelNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level{
		LevelNumber: LevelNumber,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Groups_Group_Router_Isis_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) RenameLevel(oldK, newK NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level_LevelNumber_Union) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.LevelNumber = newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Isis_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetOrCreateLevel(LevelNumber NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level_LevelNumber_Union) *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level {

	key := LevelNumber

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(LevelNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Groups_Group_Router_Isis_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetLevel(LevelNumber NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level_LevelNumber_Union) *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level {

	if t == nil {
		return nil
	}

	key := LevelNumber

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Isis_Interface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) DeleteLevel(LevelNumber NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level_LevelNumber_Union) {
	key := LevelNumber

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level struct to the
// list Level of NokiaConf_Configure_Groups_Group_Router_Isis_Interface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) AppendLevel(v *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level) error {
	key := v.LevelNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level_LevelNumber_Union]*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetOrCreateBfdLiveness() *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness{}
	return t.BfdLiveness
}

// GetOrCreateIpv4AdjacencySid retrieves the value of the Ipv4AdjacencySid field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetOrCreateIpv4AdjacencySid() *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4AdjacencySid {
	if t.Ipv4AdjacencySid != nil {
		return t.Ipv4AdjacencySid
	}
	t.Ipv4AdjacencySid = &NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4AdjacencySid{}
	return t.Ipv4AdjacencySid
}

// GetOrCreateIpv4NodeSid retrieves the value of the Ipv4NodeSid field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetOrCreateIpv4NodeSid() *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4NodeSid {
	if t.Ipv4NodeSid != nil {
		return t.Ipv4NodeSid
	}
	t.Ipv4NodeSid = &NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4NodeSid{}
	return t.Ipv4NodeSid
}

// GetOrCreateIpv6AdjacencySid retrieves the value of the Ipv6AdjacencySid field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetOrCreateIpv6AdjacencySid() *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6AdjacencySid {
	if t.Ipv6AdjacencySid != nil {
		return t.Ipv6AdjacencySid
	}
	t.Ipv6AdjacencySid = &NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6AdjacencySid{}
	return t.Ipv6AdjacencySid
}

// GetOrCreateIpv6NodeSid retrieves the value of the Ipv6NodeSid field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetOrCreateIpv6NodeSid() *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6NodeSid {
	if t.Ipv6NodeSid != nil {
		return t.Ipv6NodeSid
	}
	t.Ipv6NodeSid = &NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6NodeSid{}
	return t.Ipv6NodeSid
}

// GetOrCreateLoopfreeAlternate retrieves the value of the LoopfreeAlternate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetOrCreateLoopfreeAlternate() *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate {
	if t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	t.LoopfreeAlternate = &NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate{}
	return t.LoopfreeAlternate
}

// GetOrCreateMeshGroup retrieves the value of the MeshGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetOrCreateMeshGroup() *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_MeshGroup {
	if t.MeshGroup != nil {
		return t.MeshGroup
	}
	t.MeshGroup = &NokiaConf_Configure_Groups_Group_Router_Isis_Interface_MeshGroup{}
	return t.MeshGroup
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis_Interface. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetBfdLiveness() *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetIpv4AdjacencySid returns the value of the Ipv4AdjacencySid struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis_Interface. If the receiver or the field Ipv4AdjacencySid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetIpv4AdjacencySid() *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4AdjacencySid {
	if t != nil && t.Ipv4AdjacencySid != nil {
		return t.Ipv4AdjacencySid
	}
	return nil
}

// GetIpv4NodeSid returns the value of the Ipv4NodeSid struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis_Interface. If the receiver or the field Ipv4NodeSid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetIpv4NodeSid() *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4NodeSid {
	if t != nil && t.Ipv4NodeSid != nil {
		return t.Ipv4NodeSid
	}
	return nil
}

// GetIpv6AdjacencySid returns the value of the Ipv6AdjacencySid struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis_Interface. If the receiver or the field Ipv6AdjacencySid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetIpv6AdjacencySid() *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6AdjacencySid {
	if t != nil && t.Ipv6AdjacencySid != nil {
		return t.Ipv6AdjacencySid
	}
	return nil
}

// GetIpv6NodeSid returns the value of the Ipv6NodeSid struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis_Interface. If the receiver or the field Ipv6NodeSid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetIpv6NodeSid() *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6NodeSid {
	if t != nil && t.Ipv6NodeSid != nil {
		return t.Ipv6NodeSid
	}
	return nil
}

// GetLoopfreeAlternate returns the value of the LoopfreeAlternate struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis_Interface. If the receiver or the field LoopfreeAlternate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetLoopfreeAlternate() *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate {
	if t != nil && t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	return nil
}

// GetMeshGroup returns the value of the MeshGroup struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis_Interface. If the receiver or the field MeshGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetMeshGroup() *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_MeshGroup {
	if t != nil && t.MeshGroup != nil {
		return t.MeshGroup
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetCsnpInterval retrieves the value of the leaf CsnpInterval from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CsnpInterval is set, it can
// safely use t.GetCsnpInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CsnpInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetCsnpInterval() uint32 {
	if t == nil || t.CsnpInterval == nil {
		return 10
	}
	return *t.CsnpInterval
}

// GetDefaultInstance retrieves the value of the leaf DefaultInstance from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultInstance is set, it can
// safely use t.GetDefaultInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetDefaultInstance() bool {
	if t == nil || t.DefaultInstance == nil {
		return false
	}
	return *t.DefaultInstance
}

// GetHelloAuthentication retrieves the value of the leaf HelloAuthentication from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloAuthentication is set, it can
// safely use t.GetHelloAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloAuthentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetHelloAuthentication() bool {
	if t == nil || t.HelloAuthentication == nil {
		return true
	}
	return *t.HelloAuthentication
}

// GetHelloAuthenticationKey retrieves the value of the leaf HelloAuthenticationKey from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloAuthenticationKey is set, it can
// safely use t.GetHelloAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloAuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetHelloAuthenticationKey() string {
	if t == nil || t.HelloAuthenticationKey == nil {
		return ""
	}
	return *t.HelloAuthenticationKey
}

// GetHelloAuthenticationKeychain retrieves the value of the leaf HelloAuthenticationKeychain from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloAuthenticationKeychain is set, it can
// safely use t.GetHelloAuthenticationKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloAuthenticationKeychain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetHelloAuthenticationKeychain() string {
	if t == nil || t.HelloAuthenticationKeychain == nil {
		return ""
	}
	return *t.HelloAuthenticationKeychain
}

// GetHelloAuthenticationType retrieves the value of the leaf HelloAuthenticationType from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloAuthenticationType is set, it can
// safely use t.GetHelloAuthenticationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloAuthenticationType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetHelloAuthenticationType() E_NokiaTypesIsis_AuthType {
	if t == nil || t.HelloAuthenticationType == 0 {
		return 0
	}
	return t.HelloAuthenticationType
}

// GetHelloPadding retrieves the value of the leaf HelloPadding from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloPadding is set, it can
// safely use t.GetHelloPadding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloPadding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetHelloPadding() E_NokiaTypesIsis_HelloPaddingType {
	if t == nil || t.HelloPadding == 0 {
		return 0
	}
	return t.HelloPadding
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetInterfaceType retrieves the value of the leaf InterfaceType from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceType is set, it can
// safely use t.GetInterfaceType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetInterfaceType() E_NokiaTypesIsis_InterfaceType {
	if t == nil || t.InterfaceType == 0 {
		return 0
	}
	return t.InterfaceType
}

// GetIpv4Multicast retrieves the value of the leaf Ipv4Multicast from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Multicast is set, it can
// safely use t.GetIpv4Multicast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Multicast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetIpv4Multicast() bool {
	if t == nil || t.Ipv4Multicast == nil {
		return true
	}
	return *t.Ipv4Multicast
}

// GetIpv6Multicast retrieves the value of the leaf Ipv6Multicast from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Multicast is set, it can
// safely use t.GetIpv6Multicast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Multicast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetIpv6Multicast() bool {
	if t == nil || t.Ipv6Multicast == nil {
		return true
	}
	return *t.Ipv6Multicast
}

// GetIpv6Unicast retrieves the value of the leaf Ipv6Unicast from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Unicast is set, it can
// safely use t.GetIpv6Unicast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Unicast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetIpv6Unicast() bool {
	if t == nil || t.Ipv6Unicast == nil {
		return true
	}
	return *t.Ipv6Unicast
}

// GetLevelCapability retrieves the value of the leaf LevelCapability from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelCapability is set, it can
// safely use t.GetLevelCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetLevelCapability() E_NokiaTypesIsis_Level {
	if t == nil || t.LevelCapability == 0 {
		return NokiaTypesIsis_Level_1_2
	}
	return t.LevelCapability
}

// GetLoadBalancingWeight retrieves the value of the leaf LoadBalancingWeight from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadBalancingWeight is set, it can
// safely use t.GetLoadBalancingWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadBalancingWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetLoadBalancingWeight() uint32 {
	if t == nil || t.LoadBalancingWeight == nil {
		return 0
	}
	return *t.LoadBalancingWeight
}

// GetLspPacingInterval retrieves the value of the leaf LspPacingInterval from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspPacingInterval is set, it can
// safely use t.GetLspPacingInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspPacingInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetLspPacingInterval() uint32 {
	if t == nil || t.LspPacingInterval == nil {
		return 100
	}
	return *t.LspPacingInterval
}

// GetPassive retrieves the value of the leaf Passive from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Passive is set, it can
// safely use t.GetPassive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Passive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetPassive() bool {
	if t == nil || t.Passive == nil {
		return false
	}
	return *t.Passive
}

// GetRetransmitInterval retrieves the value of the leaf RetransmitInterval from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetransmitInterval is set, it can
// safely use t.GetRetransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetRetransmitInterval() uint32 {
	if t == nil || t.RetransmitInterval == nil {
		return 5
	}
	return *t.RetransmitInterval
}

// GetSidProtection retrieves the value of the leaf SidProtection from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SidProtection is set, it can
// safely use t.GetSidProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SidProtection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetSidProtection() bool {
	if t == nil || t.SidProtection == nil {
		return true
	}
	return *t.SidProtection
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) GetTag() uint32 {
	if t == nil || t.Tag == nil {
		return 0
	}
	return *t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.CsnpInterval == nil {
		var v uint32 = 10
		t.CsnpInterval = &v
	}
	if t.DefaultInstance == nil {
		var v bool = false
		t.DefaultInstance = &v
	}
	if t.HelloAuthentication == nil {
		var v bool = true
		t.HelloAuthentication = &v
	}
	if t.Ipv4Multicast == nil {
		var v bool = true
		t.Ipv4Multicast = &v
	}
	if t.Ipv6Multicast == nil {
		var v bool = true
		t.Ipv6Multicast = &v
	}
	if t.Ipv6Unicast == nil {
		var v bool = true
		t.Ipv6Unicast = &v
	}
	if t.LevelCapability == 0 {
		t.LevelCapability = NokiaTypesIsis_Level_1_2
	}
	if t.LspPacingInterval == nil {
		var v uint32 = 100
		t.LspPacingInterval = &v
	}
	if t.Passive == nil {
		var v bool = false
		t.Passive = &v
	}
	if t.RetransmitInterval == nil {
		var v uint32 = 5
		t.RetransmitInterval = &v
	}
	if t.SidProtection == nil {
		var v bool = true
		t.SidProtection = &v
	}
	t.BfdLiveness.PopulateDefaults()
	t.Ipv4AdjacencySid.PopulateDefaults()
	t.Ipv4NodeSid.PopulateDefaults()
	t.Ipv6AdjacencySid.PopulateDefaults()
	t.Ipv6NodeSid.PopulateDefaults()
	t.LoopfreeAlternate.PopulateDefaults()
	t.MeshGroup.PopulateDefaults()
	for _, e := range t.AdjacencySet {
		e.PopulateDefaults()
	}
	for _, e := range t.FlexAlgo {
		e.PopulateDefaults()
	}
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Isis_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_Interface.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_Interface_AdjacencySet represents the /nokia-conf/configure/groups/group/router/isis/interface/adjacency-set YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_Interface_AdjacencySet struct {
	Id NokiaConf_Configure_Groups_Group_Router_Isis_Interface_AdjacencySet_Id_Union `path:"id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_Interface_AdjacencySet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_AdjacencySet) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_AdjacencySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_AdjacencySet) GetId() NokiaConf_Configure_Groups_Group_Router_Isis_Interface_AdjacencySet_Id_Union {
	if t == nil || t.Id == nil {
		return nil
	}
	return t.Id
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_AdjacencySet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_AdjacencySet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_AdjacencySet struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_AdjacencySet) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"id": t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_AdjacencySet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_Interface_AdjacencySet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_AdjacencySet) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_AdjacencySet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_Interface_AdjacencySet.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_AdjacencySet) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness represents the /nokia-conf/configure/groups/group/router/isis/interface/bfd-liveness YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness struct {
	Ipv4 *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness_Ipv4 `path:"ipv4" module:"nokia-conf" yangPresence:"true"`
	Ipv6 *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness_Ipv6 `path:"ipv6" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness) GetOrCreateIpv6() *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness_Ipv6{}
	return t.Ipv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness) GetIpv4() *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness) GetIpv6() *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness_Ipv4 represents the /nokia-conf/configure/groups/group/router/isis/interface/bfd-liveness/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness_Ipv4 struct {
	IncludeBfdTlv *bool `path:"include-bfd-tlv" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness_Ipv4) IsYANGGoStruct() {}

// GetIncludeBfdTlv retrieves the value of the leaf IncludeBfdTlv from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncludeBfdTlv is set, it can
// safely use t.GetIncludeBfdTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncludeBfdTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness_Ipv4) GetIncludeBfdTlv() bool {
	if t == nil || t.IncludeBfdTlv == nil {
		return false
	}
	return *t.IncludeBfdTlv
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IncludeBfdTlv == nil {
		var v bool = false
		t.IncludeBfdTlv = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness_Ipv4.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness_Ipv6 represents the /nokia-conf/configure/groups/group/router/isis/interface/bfd-liveness/ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness_Ipv6 struct {
	IncludeBfdTlv *bool `path:"include-bfd-tlv" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness_Ipv6) IsYANGGoStruct() {}

// GetIncludeBfdTlv retrieves the value of the leaf IncludeBfdTlv from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncludeBfdTlv is set, it can
// safely use t.GetIncludeBfdTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncludeBfdTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness_Ipv6) GetIncludeBfdTlv() bool {
	if t == nil || t.IncludeBfdTlv == nil {
		return false
	}
	return *t.IncludeBfdTlv
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IncludeBfdTlv == nil {
		var v bool = false
		t.IncludeBfdTlv = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness_Ipv6.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_BfdLiveness_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo represents the /nokia-conf/configure/groups/group/router/isis/interface/flex-algo YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo struct {
	FlexAlgoId  NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_FlexAlgoId_Union `path:"flex-algo-id" module:"nokia-conf"`
	Ipv4NodeSid *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv4NodeSid     `path:"ipv4-node-sid" module:"nokia-conf" yangPresence:"true"`
	Ipv6NodeSid *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv6NodeSid     `path:"ipv6-node-sid" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo) IsYANGGoStruct() {}

// GetOrCreateIpv4NodeSid retrieves the value of the Ipv4NodeSid field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo) GetOrCreateIpv4NodeSid() *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv4NodeSid {
	if t.Ipv4NodeSid != nil {
		return t.Ipv4NodeSid
	}
	t.Ipv4NodeSid = &NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv4NodeSid{}
	return t.Ipv4NodeSid
}

// GetOrCreateIpv6NodeSid retrieves the value of the Ipv6NodeSid field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo) GetOrCreateIpv6NodeSid() *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv6NodeSid {
	if t.Ipv6NodeSid != nil {
		return t.Ipv6NodeSid
	}
	t.Ipv6NodeSid = &NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv6NodeSid{}
	return t.Ipv6NodeSid
}

// GetIpv4NodeSid returns the value of the Ipv4NodeSid struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo. If the receiver or the field Ipv4NodeSid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo) GetIpv4NodeSid() *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv4NodeSid {
	if t != nil && t.Ipv4NodeSid != nil {
		return t.Ipv4NodeSid
	}
	return nil
}

// GetIpv6NodeSid returns the value of the Ipv6NodeSid struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo. If the receiver or the field Ipv6NodeSid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo) GetIpv6NodeSid() *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv6NodeSid {
	if t != nil && t.Ipv6NodeSid != nil {
		return t.Ipv6NodeSid
	}
	return nil
}

// GetFlexAlgoId retrieves the value of the leaf FlexAlgoId from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlexAlgoId is set, it can
// safely use t.GetFlexAlgoId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlexAlgoId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo) GetFlexAlgoId() NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_FlexAlgoId_Union {
	if t == nil || t.FlexAlgoId == nil {
		return nil
	}
	return t.FlexAlgoId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4NodeSid.PopulateDefaults()
	t.Ipv6NodeSid.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"flex-algo-id": t.FlexAlgoId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv4NodeSid represents the /nokia-conf/configure/groups/group/router/isis/interface/flex-algo/ipv4-node-sid YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv4NodeSid struct {
	Index *int64 `path:"index" module:"nokia-conf"`
	Label *int64 `path:"label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv4NodeSid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv4NodeSid) IsYANGGoStruct() {
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv4NodeSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv4NodeSid) GetIndex() int64 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetLabel retrieves the value of the leaf Label from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv4NodeSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Label is set, it can
// safely use t.GetLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Label == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv4NodeSid) GetLabel() int64 {
	if t == nil || t.Label == nil {
		return 0
	}
	return *t.Label
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv4NodeSid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv4NodeSid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv4NodeSid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv4NodeSid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv4NodeSid) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv4NodeSid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv4NodeSid.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv4NodeSid) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv6NodeSid represents the /nokia-conf/configure/groups/group/router/isis/interface/flex-algo/ipv6-node-sid YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv6NodeSid struct {
	Index *int64 `path:"index" module:"nokia-conf"`
	Label *int64 `path:"label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv6NodeSid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv6NodeSid) IsYANGGoStruct() {
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv6NodeSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv6NodeSid) GetIndex() int64 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetLabel retrieves the value of the leaf Label from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv6NodeSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Label is set, it can
// safely use t.GetLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Label == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv6NodeSid) GetLabel() int64 {
	if t == nil || t.Label == nil {
		return 0
	}
	return *t.Label
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv6NodeSid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv6NodeSid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv6NodeSid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv6NodeSid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv6NodeSid) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv6NodeSid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv6NodeSid.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_FlexAlgo_Ipv6NodeSid) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4AdjacencySid represents the /nokia-conf/configure/groups/group/router/isis/interface/ipv4-adjacency-sid YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4AdjacencySid struct {
	Label *int64 `path:"label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4AdjacencySid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4AdjacencySid) IsYANGGoStruct() {}

// GetLabel retrieves the value of the leaf Label from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4AdjacencySid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Label is set, it can
// safely use t.GetLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Label == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4AdjacencySid) GetLabel() int64 {
	if t == nil || t.Label == nil {
		return 0
	}
	return *t.Label
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4AdjacencySid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4AdjacencySid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4AdjacencySid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4AdjacencySid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4AdjacencySid) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4AdjacencySid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4AdjacencySid.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4AdjacencySid) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4NodeSid represents the /nokia-conf/configure/groups/group/router/isis/interface/ipv4-node-sid YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4NodeSid struct {
	ClearNFlag *bool  `path:"clear-n-flag" module:"nokia-conf"`
	Index      *int64 `path:"index" module:"nokia-conf"`
	Label      *int64 `path:"label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4NodeSid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4NodeSid) IsYANGGoStruct() {}

// GetClearNFlag retrieves the value of the leaf ClearNFlag from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4NodeSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClearNFlag is set, it can
// safely use t.GetClearNFlag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClearNFlag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4NodeSid) GetClearNFlag() bool {
	if t == nil || t.ClearNFlag == nil {
		return false
	}
	return *t.ClearNFlag
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4NodeSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4NodeSid) GetIndex() int64 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetLabel retrieves the value of the leaf Label from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4NodeSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Label is set, it can
// safely use t.GetLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Label == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4NodeSid) GetLabel() int64 {
	if t == nil || t.Label == nil {
		return 0
	}
	return *t.Label
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4NodeSid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4NodeSid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ClearNFlag == nil {
		var v bool = false
		t.ClearNFlag = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4NodeSid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4NodeSid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4NodeSid) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4NodeSid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4NodeSid.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv4NodeSid) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6AdjacencySid represents the /nokia-conf/configure/groups/group/router/isis/interface/ipv6-adjacency-sid YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6AdjacencySid struct {
	Label *int64 `path:"label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6AdjacencySid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6AdjacencySid) IsYANGGoStruct() {}

// GetLabel retrieves the value of the leaf Label from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6AdjacencySid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Label is set, it can
// safely use t.GetLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Label == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6AdjacencySid) GetLabel() int64 {
	if t == nil || t.Label == nil {
		return 0
	}
	return *t.Label
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6AdjacencySid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6AdjacencySid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6AdjacencySid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6AdjacencySid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6AdjacencySid) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6AdjacencySid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6AdjacencySid.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6AdjacencySid) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6NodeSid represents the /nokia-conf/configure/groups/group/router/isis/interface/ipv6-node-sid YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6NodeSid struct {
	ClearNFlag *bool  `path:"clear-n-flag" module:"nokia-conf"`
	Index      *int64 `path:"index" module:"nokia-conf"`
	Label      *int64 `path:"label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6NodeSid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6NodeSid) IsYANGGoStruct() {}

// GetClearNFlag retrieves the value of the leaf ClearNFlag from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6NodeSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClearNFlag is set, it can
// safely use t.GetClearNFlag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClearNFlag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6NodeSid) GetClearNFlag() bool {
	if t == nil || t.ClearNFlag == nil {
		return false
	}
	return *t.ClearNFlag
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6NodeSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6NodeSid) GetIndex() int64 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetLabel retrieves the value of the leaf Label from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6NodeSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Label is set, it can
// safely use t.GetLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Label == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6NodeSid) GetLabel() int64 {
	if t == nil || t.Label == nil {
		return 0
	}
	return *t.Label
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6NodeSid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6NodeSid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ClearNFlag == nil {
		var v bool = false
		t.ClearNFlag = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6NodeSid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6NodeSid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6NodeSid) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6NodeSid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6NodeSid.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Ipv6NodeSid) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level represents the /nokia-conf/configure/groups/group/router/isis/interface/level YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level struct {
	HelloAuthenticationKey      *string                                                                        `path:"hello-authentication-key" module:"nokia-conf"`
	HelloAuthenticationKeychain *string                                                                        `path:"hello-authentication-keychain" module:"nokia-conf"`
	HelloAuthenticationType     E_NokiaTypesIsis_AuthType                                                      `path:"hello-authentication-type" module:"nokia-conf"`
	HelloInterval               *uint32                                                                        `path:"hello-interval" module:"nokia-conf"`
	HelloMultiplier             *int32                                                                         `path:"hello-multiplier" module:"nokia-conf"`
	HelloPadding                E_NokiaTypesIsis_HelloPaddingType                                              `path:"hello-padding" module:"nokia-conf"`
	Ipv4MulticastMetric         *uint32                                                                        `path:"ipv4-multicast-metric" module:"nokia-conf"`
	Ipv6MulticastMetric         *uint32                                                                        `path:"ipv6-multicast-metric" module:"nokia-conf"`
	Ipv6UnicastMetric           *uint32                                                                        `path:"ipv6-unicast-metric" module:"nokia-conf"`
	LevelNumber                 NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level_LevelNumber_Union `path:"level-number" module:"nokia-conf"`
	Metric                      *uint32                                                                        `path:"metric" module:"nokia-conf"`
	Passive                     *bool                                                                          `path:"passive" module:"nokia-conf"`
	Priority                    *uint32                                                                        `path:"priority" module:"nokia-conf"`
	SdOffset                    *uint32                                                                        `path:"sd-offset" module:"nokia-conf"`
	SfOffset                    *uint32                                                                        `path:"sf-offset" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level) IsYANGGoStruct() {}

// GetHelloAuthenticationKey retrieves the value of the leaf HelloAuthenticationKey from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloAuthenticationKey is set, it can
// safely use t.GetHelloAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloAuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level) GetHelloAuthenticationKey() string {
	if t == nil || t.HelloAuthenticationKey == nil {
		return ""
	}
	return *t.HelloAuthenticationKey
}

// GetHelloAuthenticationKeychain retrieves the value of the leaf HelloAuthenticationKeychain from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloAuthenticationKeychain is set, it can
// safely use t.GetHelloAuthenticationKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloAuthenticationKeychain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level) GetHelloAuthenticationKeychain() string {
	if t == nil || t.HelloAuthenticationKeychain == nil {
		return ""
	}
	return *t.HelloAuthenticationKeychain
}

// GetHelloAuthenticationType retrieves the value of the leaf HelloAuthenticationType from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloAuthenticationType is set, it can
// safely use t.GetHelloAuthenticationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloAuthenticationType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level) GetHelloAuthenticationType() E_NokiaTypesIsis_AuthType {
	if t == nil || t.HelloAuthenticationType == 0 {
		return 0
	}
	return t.HelloAuthenticationType
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level) GetHelloInterval() uint32 {
	if t == nil || t.HelloInterval == nil {
		return 9
	}
	return *t.HelloInterval
}

// GetHelloMultiplier retrieves the value of the leaf HelloMultiplier from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloMultiplier is set, it can
// safely use t.GetHelloMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloMultiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level) GetHelloMultiplier() int32 {
	if t == nil || t.HelloMultiplier == nil {
		return 3
	}
	return *t.HelloMultiplier
}

// GetHelloPadding retrieves the value of the leaf HelloPadding from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloPadding is set, it can
// safely use t.GetHelloPadding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloPadding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level) GetHelloPadding() E_NokiaTypesIsis_HelloPaddingType {
	if t == nil || t.HelloPadding == 0 {
		return 0
	}
	return t.HelloPadding
}

// GetIpv4MulticastMetric retrieves the value of the leaf Ipv4MulticastMetric from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4MulticastMetric is set, it can
// safely use t.GetIpv4MulticastMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4MulticastMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level) GetIpv4MulticastMetric() uint32 {
	if t == nil || t.Ipv4MulticastMetric == nil {
		return 0
	}
	return *t.Ipv4MulticastMetric
}

// GetIpv6MulticastMetric retrieves the value of the leaf Ipv6MulticastMetric from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6MulticastMetric is set, it can
// safely use t.GetIpv6MulticastMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6MulticastMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level) GetIpv6MulticastMetric() uint32 {
	if t == nil || t.Ipv6MulticastMetric == nil {
		return 0
	}
	return *t.Ipv6MulticastMetric
}

// GetIpv6UnicastMetric retrieves the value of the leaf Ipv6UnicastMetric from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6UnicastMetric is set, it can
// safely use t.GetIpv6UnicastMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6UnicastMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level) GetIpv6UnicastMetric() uint32 {
	if t == nil || t.Ipv6UnicastMetric == nil {
		return 0
	}
	return *t.Ipv6UnicastMetric
}

// GetLevelNumber retrieves the value of the leaf LevelNumber from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelNumber is set, it can
// safely use t.GetLevelNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level) GetLevelNumber() NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level_LevelNumber_Union {
	if t == nil || t.LevelNumber == nil {
		return nil
	}
	return t.LevelNumber
}

// GetMetric retrieves the value of the leaf Metric from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetPassive retrieves the value of the leaf Passive from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Passive is set, it can
// safely use t.GetPassive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Passive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level) GetPassive() bool {
	if t == nil || t.Passive == nil {
		return false
	}
	return *t.Passive
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level) GetPriority() uint32 {
	if t == nil || t.Priority == nil {
		return 64
	}
	return *t.Priority
}

// GetSdOffset retrieves the value of the leaf SdOffset from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdOffset is set, it can
// safely use t.GetSdOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level) GetSdOffset() uint32 {
	if t == nil || t.SdOffset == nil {
		return 0
	}
	return *t.SdOffset
}

// GetSfOffset retrieves the value of the leaf SfOffset from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SfOffset is set, it can
// safely use t.GetSfOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SfOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level) GetSfOffset() uint32 {
	if t == nil || t.SfOffset == nil {
		return 0
	}
	return *t.SfOffset
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HelloInterval == nil {
		var v uint32 = 9
		t.HelloInterval = &v
	}
	if t.HelloMultiplier == nil {
		var v int32 = 3
		t.HelloMultiplier = &v
	}
	if t.Passive == nil {
		var v bool = false
		t.Passive = &v
	}
	if t.Priority == nil {
		var v uint32 = 64
		t.Priority = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"level-number": t.LevelNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate represents the /nokia-conf/configure/groups/group/router/isis/interface/loopfree-alternate YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate struct {
	Exclude   *bool                                                                               `path:"exclude" module:"nokia-conf"`
	PolicyMap *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate_PolicyMap `path:"policy-map" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate) IsYANGGoStruct() {}

// GetOrCreatePolicyMap retrieves the value of the PolicyMap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate) GetOrCreatePolicyMap() *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate_PolicyMap {
	if t.PolicyMap != nil {
		return t.PolicyMap
	}
	t.PolicyMap = &NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate_PolicyMap{}
	return t.PolicyMap
}

// GetPolicyMap returns the value of the PolicyMap struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate. If the receiver or the field PolicyMap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate) GetPolicyMap() *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate_PolicyMap {
	if t != nil && t.PolicyMap != nil {
		return t.PolicyMap
	}
	return nil
}

// GetExclude retrieves the value of the leaf Exclude from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Exclude is set, it can
// safely use t.GetExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Exclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate) GetExclude() bool {
	if t == nil || t.Exclude == nil {
		return false
	}
	return *t.Exclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Exclude == nil {
		var v bool = false
		t.Exclude = &v
	}
	t.PolicyMap.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate_PolicyMap represents the /nokia-conf/configure/groups/group/router/isis/interface/loopfree-alternate/policy-map YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate_PolicyMap struct {
	RouteNhTemplate *string `path:"route-nh-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate_PolicyMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate_PolicyMap) IsYANGGoStruct() {
}

// GetRouteNhTemplate retrieves the value of the leaf RouteNhTemplate from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate_PolicyMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteNhTemplate is set, it can
// safely use t.GetRouteNhTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteNhTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate_PolicyMap) GetRouteNhTemplate() string {
	if t == nil || t.RouteNhTemplate == nil {
		return ""
	}
	return *t.RouteNhTemplate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate_PolicyMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate_PolicyMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate_PolicyMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate_PolicyMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate_PolicyMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate_PolicyMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate_PolicyMap.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_LoopfreeAlternate_PolicyMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_Interface_MeshGroup represents the /nokia-conf/configure/groups/group/router/isis/interface/mesh-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_Interface_MeshGroup struct {
	Blocked YANGEmpty `path:"blocked" module:"nokia-conf"`
	Value   *int32    `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_Interface_MeshGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_MeshGroup) IsYANGGoStruct() {}

// GetBlocked retrieves the value of the leaf Blocked from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_MeshGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Blocked is set, it can
// safely use t.GetBlocked() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Blocked == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_MeshGroup) GetBlocked() YANGEmpty {
	if t == nil || t.Blocked == false {
		return false
	}
	return t.Blocked
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_MeshGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_MeshGroup) GetValue() int32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_Interface_MeshGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_MeshGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_MeshGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_Interface_MeshGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_MeshGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Interface_MeshGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_Interface_MeshGroup.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Interface_MeshGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_Level represents the /nokia-conf/configure/groups/group/router/isis/level YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_Level struct {
	AdvertiseRouterCapability  *bool                                                                `path:"advertise-router-capability" module:"nokia-conf"`
	AuthenticationKey          *string                                                              `path:"authentication-key" module:"nokia-conf"`
	AuthenticationKeychain     *string                                                              `path:"authentication-keychain" module:"nokia-conf"`
	AuthenticationType         E_NokiaTypesIsis_AuthType                                            `path:"authentication-type" module:"nokia-conf"`
	Bier                       *NokiaConf_Configure_Groups_Group_Router_Isis_Level_Bier             `path:"bier" module:"nokia-conf"`
	CsnpAuthentication         *bool                                                                `path:"csnp-authentication" module:"nokia-conf"`
	DatabaseExportExclude      *bool                                                                `path:"database-export-exclude" module:"nokia-conf"`
	DefaultIpv4MulticastMetric *uint32                                                              `path:"default-ipv4-multicast-metric" module:"nokia-conf"`
	DefaultIpv6MulticastMetric *uint32                                                              `path:"default-ipv6-multicast-metric" module:"nokia-conf"`
	DefaultIpv6UnicastMetric   *uint32                                                              `path:"default-ipv6-unicast-metric" module:"nokia-conf"`
	DefaultMetric              *uint32                                                              `path:"default-metric" module:"nokia-conf"`
	ExternalPreference         *uint32                                                              `path:"external-preference" module:"nokia-conf"`
	HelloAuthentication        *bool                                                                `path:"hello-authentication" module:"nokia-conf"`
	HelloPadding               E_NokiaTypesIsis_HelloPaddingType                                    `path:"hello-padding" module:"nokia-conf"`
	LevelNumber                NokiaConf_Configure_Groups_Group_Router_Isis_Level_LevelNumber_Union `path:"level-number" module:"nokia-conf"`
	LoopfreeAlternateExclude   *bool                                                                `path:"loopfree-alternate-exclude" module:"nokia-conf"`
	LspMtuSize                 *int32                                                               `path:"lsp-mtu-size" module:"nokia-conf"`
	Preference                 *uint32                                                              `path:"preference" module:"nokia-conf"`
	PsnpAuthentication         *bool                                                                `path:"psnp-authentication" module:"nokia-conf"`
	WideMetricsOnly            *bool                                                                `path:"wide-metrics-only" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Level) IsYANGGoStruct() {}

// GetOrCreateBier retrieves the value of the Bier field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Level) GetOrCreateBier() *NokiaConf_Configure_Groups_Group_Router_Isis_Level_Bier {
	if t.Bier != nil {
		return t.Bier
	}
	t.Bier = &NokiaConf_Configure_Groups_Group_Router_Isis_Level_Bier{}
	return t.Bier
}

// GetBier returns the value of the Bier struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis_Level. If the receiver or the field Bier is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Level) GetBier() *NokiaConf_Configure_Groups_Group_Router_Isis_Level_Bier {
	if t != nil && t.Bier != nil {
		return t.Bier
	}
	return nil
}

// GetAdvertiseRouterCapability retrieves the value of the leaf AdvertiseRouterCapability from the NokiaConf_Configure_Groups_Group_Router_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseRouterCapability is set, it can
// safely use t.GetAdvertiseRouterCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseRouterCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Level) GetAdvertiseRouterCapability() bool {
	if t == nil || t.AdvertiseRouterCapability == nil {
		return true
	}
	return *t.AdvertiseRouterCapability
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Groups_Group_Router_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Level) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationKeychain retrieves the value of the leaf AuthenticationKeychain from the NokiaConf_Configure_Groups_Group_Router_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKeychain is set, it can
// safely use t.GetAuthenticationKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKeychain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Level) GetAuthenticationKeychain() string {
	if t == nil || t.AuthenticationKeychain == nil {
		return ""
	}
	return *t.AuthenticationKeychain
}

// GetAuthenticationType retrieves the value of the leaf AuthenticationType from the NokiaConf_Configure_Groups_Group_Router_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationType is set, it can
// safely use t.GetAuthenticationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Level) GetAuthenticationType() E_NokiaTypesIsis_AuthType {
	if t == nil || t.AuthenticationType == 0 {
		return 0
	}
	return t.AuthenticationType
}

// GetCsnpAuthentication retrieves the value of the leaf CsnpAuthentication from the NokiaConf_Configure_Groups_Group_Router_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CsnpAuthentication is set, it can
// safely use t.GetCsnpAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CsnpAuthentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Level) GetCsnpAuthentication() bool {
	if t == nil || t.CsnpAuthentication == nil {
		return true
	}
	return *t.CsnpAuthentication
}

// GetDatabaseExportExclude retrieves the value of the leaf DatabaseExportExclude from the NokiaConf_Configure_Groups_Group_Router_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DatabaseExportExclude is set, it can
// safely use t.GetDatabaseExportExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DatabaseExportExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Level) GetDatabaseExportExclude() bool {
	if t == nil || t.DatabaseExportExclude == nil {
		return false
	}
	return *t.DatabaseExportExclude
}

// GetDefaultIpv4MulticastMetric retrieves the value of the leaf DefaultIpv4MulticastMetric from the NokiaConf_Configure_Groups_Group_Router_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultIpv4MulticastMetric is set, it can
// safely use t.GetDefaultIpv4MulticastMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultIpv4MulticastMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Level) GetDefaultIpv4MulticastMetric() uint32 {
	if t == nil || t.DefaultIpv4MulticastMetric == nil {
		return 10
	}
	return *t.DefaultIpv4MulticastMetric
}

// GetDefaultIpv6MulticastMetric retrieves the value of the leaf DefaultIpv6MulticastMetric from the NokiaConf_Configure_Groups_Group_Router_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultIpv6MulticastMetric is set, it can
// safely use t.GetDefaultIpv6MulticastMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultIpv6MulticastMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Level) GetDefaultIpv6MulticastMetric() uint32 {
	if t == nil || t.DefaultIpv6MulticastMetric == nil {
		return 10
	}
	return *t.DefaultIpv6MulticastMetric
}

// GetDefaultIpv6UnicastMetric retrieves the value of the leaf DefaultIpv6UnicastMetric from the NokiaConf_Configure_Groups_Group_Router_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultIpv6UnicastMetric is set, it can
// safely use t.GetDefaultIpv6UnicastMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultIpv6UnicastMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Level) GetDefaultIpv6UnicastMetric() uint32 {
	if t == nil || t.DefaultIpv6UnicastMetric == nil {
		return 10
	}
	return *t.DefaultIpv6UnicastMetric
}

// GetDefaultMetric retrieves the value of the leaf DefaultMetric from the NokiaConf_Configure_Groups_Group_Router_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultMetric is set, it can
// safely use t.GetDefaultMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Level) GetDefaultMetric() uint32 {
	if t == nil || t.DefaultMetric == nil {
		return 10
	}
	return *t.DefaultMetric
}

// GetExternalPreference retrieves the value of the leaf ExternalPreference from the NokiaConf_Configure_Groups_Group_Router_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExternalPreference is set, it can
// safely use t.GetExternalPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExternalPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Level) GetExternalPreference() uint32 {
	if t == nil || t.ExternalPreference == nil {
		return 0
	}
	return *t.ExternalPreference
}

// GetHelloAuthentication retrieves the value of the leaf HelloAuthentication from the NokiaConf_Configure_Groups_Group_Router_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloAuthentication is set, it can
// safely use t.GetHelloAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloAuthentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Level) GetHelloAuthentication() bool {
	if t == nil || t.HelloAuthentication == nil {
		return true
	}
	return *t.HelloAuthentication
}

// GetHelloPadding retrieves the value of the leaf HelloPadding from the NokiaConf_Configure_Groups_Group_Router_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloPadding is set, it can
// safely use t.GetHelloPadding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloPadding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Level) GetHelloPadding() E_NokiaTypesIsis_HelloPaddingType {
	if t == nil || t.HelloPadding == 0 {
		return 0
	}
	return t.HelloPadding
}

// GetLevelNumber retrieves the value of the leaf LevelNumber from the NokiaConf_Configure_Groups_Group_Router_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelNumber is set, it can
// safely use t.GetLevelNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Level) GetLevelNumber() NokiaConf_Configure_Groups_Group_Router_Isis_Level_LevelNumber_Union {
	if t == nil || t.LevelNumber == nil {
		return nil
	}
	return t.LevelNumber
}

// GetLoopfreeAlternateExclude retrieves the value of the leaf LoopfreeAlternateExclude from the NokiaConf_Configure_Groups_Group_Router_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopfreeAlternateExclude is set, it can
// safely use t.GetLoopfreeAlternateExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopfreeAlternateExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Level) GetLoopfreeAlternateExclude() bool {
	if t == nil || t.LoopfreeAlternateExclude == nil {
		return false
	}
	return *t.LoopfreeAlternateExclude
}

// GetLspMtuSize retrieves the value of the leaf LspMtuSize from the NokiaConf_Configure_Groups_Group_Router_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspMtuSize is set, it can
// safely use t.GetLspMtuSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspMtuSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Level) GetLspMtuSize() int32 {
	if t == nil || t.LspMtuSize == nil {
		return 1492
	}
	return *t.LspMtuSize
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Groups_Group_Router_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Level) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetPsnpAuthentication retrieves the value of the leaf PsnpAuthentication from the NokiaConf_Configure_Groups_Group_Router_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PsnpAuthentication is set, it can
// safely use t.GetPsnpAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PsnpAuthentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Level) GetPsnpAuthentication() bool {
	if t == nil || t.PsnpAuthentication == nil {
		return true
	}
	return *t.PsnpAuthentication
}

// GetWideMetricsOnly retrieves the value of the leaf WideMetricsOnly from the NokiaConf_Configure_Groups_Group_Router_Isis_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WideMetricsOnly is set, it can
// safely use t.GetWideMetricsOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WideMetricsOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Level) GetWideMetricsOnly() bool {
	if t == nil || t.WideMetricsOnly == nil {
		return false
	}
	return *t.WideMetricsOnly
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertiseRouterCapability == nil {
		var v bool = true
		t.AdvertiseRouterCapability = &v
	}
	if t.CsnpAuthentication == nil {
		var v bool = true
		t.CsnpAuthentication = &v
	}
	if t.DatabaseExportExclude == nil {
		var v bool = false
		t.DatabaseExportExclude = &v
	}
	if t.DefaultIpv4MulticastMetric == nil {
		var v uint32 = 10
		t.DefaultIpv4MulticastMetric = &v
	}
	if t.DefaultIpv6MulticastMetric == nil {
		var v uint32 = 10
		t.DefaultIpv6MulticastMetric = &v
	}
	if t.DefaultIpv6UnicastMetric == nil {
		var v uint32 = 10
		t.DefaultIpv6UnicastMetric = &v
	}
	if t.DefaultMetric == nil {
		var v uint32 = 10
		t.DefaultMetric = &v
	}
	if t.HelloAuthentication == nil {
		var v bool = true
		t.HelloAuthentication = &v
	}
	if t.LoopfreeAlternateExclude == nil {
		var v bool = false
		t.LoopfreeAlternateExclude = &v
	}
	if t.LspMtuSize == nil {
		var v int32 = 1492
		t.LspMtuSize = &v
	}
	if t.PsnpAuthentication == nil {
		var v bool = true
		t.PsnpAuthentication = &v
	}
	if t.WideMetricsOnly == nil {
		var v bool = false
		t.WideMetricsOnly = &v
	}
	t.Bier.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Isis_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Level) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"level-number": t.LevelNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_Level.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_Level_Bier represents the /nokia-conf/configure/groups/group/router/isis/level/bier YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_Level_Bier struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Template   *string                     `path:"template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_Level_Bier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Level_Bier) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Isis_Level_Bier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Level_Bier) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetTemplate retrieves the value of the leaf Template from the NokiaConf_Configure_Groups_Group_Router_Isis_Level_Bier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Template is set, it can
// safely use t.GetTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Template == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Level_Bier) GetTemplate() string {
	if t == nil || t.Template == nil {
		return ""
	}
	return *t.Template
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_Level_Bier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Level_Bier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Level_Bier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_Level_Bier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Level_Bier) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Level_Bier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_Level_Bier.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Level_Bier) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup represents the /nokia-conf/configure/groups/group/router/isis/link-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup struct {
	Description   *string                                                                                                                                          `path:"description" module:"nokia-conf"`
	Level         map[NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level_LevelNumber_Union]*NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level `path:"level" module:"nokia-conf"`
	LinkGroupName *string                                                                                                                                          `path:"link-group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup) IsYANGGoStruct() {}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup) NewLevel(LevelNumber NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level_LevelNumber_Union) (*NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level_LevelNumber_Union]*NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level)
	}

	key := LevelNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level{
		LevelNumber: LevelNumber,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup) RenameLevel(oldK, newK NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level_LevelNumber_Union) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.LevelNumber = newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup) GetOrCreateLevel(LevelNumber NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level_LevelNumber_Union) *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level {

	key := LevelNumber

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(LevelNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup) GetLevel(LevelNumber NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level_LevelNumber_Union) *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level {

	if t == nil {
		return nil
	}

	key := LevelNumber

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup) DeleteLevel(LevelNumber NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level_LevelNumber_Union) {
	key := LevelNumber

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level struct to the
// list Level of NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup) AppendLevel(v *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level) error {
	key := v.LevelNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level_LevelNumber_Union]*NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLinkGroupName retrieves the value of the leaf LinkGroupName from the NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkGroupName is set, it can
// safely use t.GetLinkGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup) GetLinkGroupName() string {
	if t == nil || t.LinkGroupName == nil {
		return ""
	}
	return *t.LinkGroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LinkGroupName == nil {
		return nil, fmt.Errorf("nil value for key LinkGroupName")
	}

	return map[string]interface{}{
		"link-group-name": *t.LinkGroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level represents the /nokia-conf/configure/groups/group/router/isis/link-group/level YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level struct {
	Ipv4MulticastMetricOffset *uint32                                                                         `path:"ipv4-multicast-metric-offset" module:"nokia-conf"`
	Ipv4UnicastMetricOffset   *uint32                                                                         `path:"ipv4-unicast-metric-offset" module:"nokia-conf"`
	Ipv6MulticastMetricOffset *uint32                                                                         `path:"ipv6-multicast-metric-offset" module:"nokia-conf"`
	Ipv6UnicastMetricOffset   *uint32                                                                         `path:"ipv6-unicast-metric-offset" module:"nokia-conf"`
	LevelNumber               NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level_LevelNumber_Union  `path:"level-number" module:"nokia-conf"`
	Member                    map[string]*NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level_Member `path:"member" module:"nokia-conf"`
	OperMembers               *uint32                                                                         `path:"oper-members" module:"nokia-conf"`
	RevertMembers             *uint32                                                                         `path:"revert-members" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level) IsYANGGoStruct() {}

// NewMember creates a new entry in the Member list of the
// NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level) NewMember(InterfaceName string) (*NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level_Member, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Member == nil {
		t.Member = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level_Member)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Member[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Member", key)
	}

	t.Member[key] = &NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level_Member{
		InterfaceName: &InterfaceName,
	}

	return t.Member[key], nil
}

// RenameMember renames an entry in the list Member within
// the NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level) RenameMember(oldK, newK string) error {
	if _, ok := t.Member[newK]; ok {
		return fmt.Errorf("key %v already exists in Member", newK)
	}

	e, ok := t.Member[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Member", oldK)
	}
	e.InterfaceName = &newK

	t.Member[newK] = e
	delete(t.Member, oldK)
	return nil
}

// GetOrCreateMember retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level) GetOrCreateMember(InterfaceName string) *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level_Member {

	key := InterfaceName

	if v, ok := t.Member[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMember(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMember got unexpected error: %v", err))
	}
	return v
}

// GetMember retrieves the value with the specified key from
// the Member map field of NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level) GetMember(InterfaceName string) *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level_Member {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Member[key]; ok {
		return lm
	}
	return nil
}

// DeleteMember deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level) DeleteMember(InterfaceName string) {
	key := InterfaceName

	delete(t.Member, key)
}

// AppendMember appends the supplied NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level_Member struct to the
// list Member of NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level_Member already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level) AppendMember(v *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level_Member) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Member == nil {
		t.Member = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level_Member)
	}

	if _, ok := t.Member[key]; ok {
		return fmt.Errorf("duplicate key for list Member %v", key)
	}

	t.Member[key] = v
	return nil
}

// GetIpv4MulticastMetricOffset retrieves the value of the leaf Ipv4MulticastMetricOffset from the NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4MulticastMetricOffset is set, it can
// safely use t.GetIpv4MulticastMetricOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4MulticastMetricOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level) GetIpv4MulticastMetricOffset() uint32 {
	if t == nil || t.Ipv4MulticastMetricOffset == nil {
		return 0
	}
	return *t.Ipv4MulticastMetricOffset
}

// GetIpv4UnicastMetricOffset retrieves the value of the leaf Ipv4UnicastMetricOffset from the NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4UnicastMetricOffset is set, it can
// safely use t.GetIpv4UnicastMetricOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4UnicastMetricOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level) GetIpv4UnicastMetricOffset() uint32 {
	if t == nil || t.Ipv4UnicastMetricOffset == nil {
		return 0
	}
	return *t.Ipv4UnicastMetricOffset
}

// GetIpv6MulticastMetricOffset retrieves the value of the leaf Ipv6MulticastMetricOffset from the NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6MulticastMetricOffset is set, it can
// safely use t.GetIpv6MulticastMetricOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6MulticastMetricOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level) GetIpv6MulticastMetricOffset() uint32 {
	if t == nil || t.Ipv6MulticastMetricOffset == nil {
		return 0
	}
	return *t.Ipv6MulticastMetricOffset
}

// GetIpv6UnicastMetricOffset retrieves the value of the leaf Ipv6UnicastMetricOffset from the NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6UnicastMetricOffset is set, it can
// safely use t.GetIpv6UnicastMetricOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6UnicastMetricOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level) GetIpv6UnicastMetricOffset() uint32 {
	if t == nil || t.Ipv6UnicastMetricOffset == nil {
		return 0
	}
	return *t.Ipv6UnicastMetricOffset
}

// GetLevelNumber retrieves the value of the leaf LevelNumber from the NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelNumber is set, it can
// safely use t.GetLevelNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level) GetLevelNumber() NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level_LevelNumber_Union {
	if t == nil || t.LevelNumber == nil {
		return nil
	}
	return t.LevelNumber
}

// GetOperMembers retrieves the value of the leaf OperMembers from the NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperMembers is set, it can
// safely use t.GetOperMembers() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperMembers == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level) GetOperMembers() uint32 {
	if t == nil || t.OperMembers == nil {
		return 0
	}
	return *t.OperMembers
}

// GetRevertMembers retrieves the value of the leaf RevertMembers from the NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RevertMembers is set, it can
// safely use t.GetRevertMembers() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RevertMembers == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level) GetRevertMembers() uint32 {
	if t == nil || t.RevertMembers == nil {
		return 0
	}
	return *t.RevertMembers
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Member {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"level-number": t.LevelNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level_Member represents the /nokia-conf/configure/groups/group/router/isis/link-group/level/member YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level_Member struct {
	InterfaceName *string `path:"interface-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level_Member implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level_Member) IsYANGGoStruct() {}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level_Member
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level_Member) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level_Member
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level_Member) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level_Member struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level_Member) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level_Member) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level_Member"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level_Member) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level_Member) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level_Member.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_LinkGroup_Level_Member) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate represents the /nokia-conf/configure/groups/group/router/isis/loopfree-alternate YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate struct {
	AugmentRouteTable *bool                                                                     `path:"augment-route-table" module:"nokia-conf"`
	Exclude           *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_Exclude   `path:"exclude" module:"nokia-conf"`
	RemoteLfa         *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa `path:"remote-lfa" module:"nokia-conf" yangPresence:"true"`
	TiLfa             *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_TiLfa     `path:"ti-lfa" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate) IsYANGGoStruct() {}

// GetOrCreateExclude retrieves the value of the Exclude field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate) GetOrCreateExclude() *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_Exclude {
	if t.Exclude != nil {
		return t.Exclude
	}
	t.Exclude = &NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_Exclude{}
	return t.Exclude
}

// GetOrCreateRemoteLfa retrieves the value of the RemoteLfa field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate) GetOrCreateRemoteLfa() *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa {
	if t.RemoteLfa != nil {
		return t.RemoteLfa
	}
	t.RemoteLfa = &NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa{}
	return t.RemoteLfa
}

// GetOrCreateTiLfa retrieves the value of the TiLfa field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate) GetOrCreateTiLfa() *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_TiLfa {
	if t.TiLfa != nil {
		return t.TiLfa
	}
	t.TiLfa = &NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_TiLfa{}
	return t.TiLfa
}

// GetExclude returns the value of the Exclude struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate. If the receiver or the field Exclude is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate) GetExclude() *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_Exclude {
	if t != nil && t.Exclude != nil {
		return t.Exclude
	}
	return nil
}

// GetRemoteLfa returns the value of the RemoteLfa struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate. If the receiver or the field RemoteLfa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate) GetRemoteLfa() *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa {
	if t != nil && t.RemoteLfa != nil {
		return t.RemoteLfa
	}
	return nil
}

// GetTiLfa returns the value of the TiLfa struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate. If the receiver or the field TiLfa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate) GetTiLfa() *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_TiLfa {
	if t != nil && t.TiLfa != nil {
		return t.TiLfa
	}
	return nil
}

// GetAugmentRouteTable retrieves the value of the leaf AugmentRouteTable from the NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AugmentRouteTable is set, it can
// safely use t.GetAugmentRouteTable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AugmentRouteTable == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate) GetAugmentRouteTable() bool {
	if t == nil || t.AugmentRouteTable == nil {
		return false
	}
	return *t.AugmentRouteTable
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AugmentRouteTable == nil {
		var v bool = false
		t.AugmentRouteTable = &v
	}
	t.Exclude.PopulateDefaults()
	t.RemoteLfa.PopulateDefaults()
	t.TiLfa.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_Exclude represents the /nokia-conf/configure/groups/group/router/isis/loopfree-alternate/exclude YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_Exclude struct {
	PrefixPolicy []string `path:"prefix-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_Exclude implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_Exclude) IsYANGGoStruct() {}

// GetPrefixPolicy retrieves the value of the leaf PrefixPolicy from the NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_Exclude
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixPolicy is set, it can
// safely use t.GetPrefixPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_Exclude) GetPrefixPolicy() []string {
	if t == nil || t.PrefixPolicy == nil {
		return nil
	}
	return t.PrefixPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_Exclude
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_Exclude) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_Exclude) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_Exclude"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_Exclude) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_Exclude) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_Exclude.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_Exclude) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa represents the /nokia-conf/configure/groups/group/router/isis/loopfree-alternate/remote-lfa YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa struct {
	MaxPqCost   *uint32                                                                               `path:"max-pq-cost" module:"nokia-conf"`
	NodeProtect *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa_NodeProtect `path:"node-protect" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa) IsYANGGoStruct() {}

// GetOrCreateNodeProtect retrieves the value of the NodeProtect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa) GetOrCreateNodeProtect() *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa_NodeProtect {
	if t.NodeProtect != nil {
		return t.NodeProtect
	}
	t.NodeProtect = &NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa_NodeProtect{}
	return t.NodeProtect
}

// GetNodeProtect returns the value of the NodeProtect struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa. If the receiver or the field NodeProtect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa) GetNodeProtect() *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa_NodeProtect {
	if t != nil && t.NodeProtect != nil {
		return t.NodeProtect
	}
	return nil
}

// GetMaxPqCost retrieves the value of the leaf MaxPqCost from the NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPqCost is set, it can
// safely use t.GetMaxPqCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPqCost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa) GetMaxPqCost() uint32 {
	if t == nil || t.MaxPqCost == nil {
		return 4261412864
	}
	return *t.MaxPqCost
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxPqCost == nil {
		var v uint32 = 4261412864
		t.MaxPqCost = &v
	}
	t.NodeProtect.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa_NodeProtect represents the /nokia-conf/configure/groups/group/router/isis/loopfree-alternate/remote-lfa/node-protect YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa_NodeProtect struct {
	MaxPqNodes *uint32 `path:"max-pq-nodes" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa_NodeProtect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa_NodeProtect) IsYANGGoStruct() {
}

// GetMaxPqNodes retrieves the value of the leaf MaxPqNodes from the NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa_NodeProtect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPqNodes is set, it can
// safely use t.GetMaxPqNodes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPqNodes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa_NodeProtect) GetMaxPqNodes() uint32 {
	if t == nil || t.MaxPqNodes == nil {
		return 16
	}
	return *t.MaxPqNodes
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa_NodeProtect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa_NodeProtect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxPqNodes == nil {
		var v uint32 = 16
		t.MaxPqNodes = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa_NodeProtect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa_NodeProtect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa_NodeProtect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa_NodeProtect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa_NodeProtect.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_RemoteLfa_NodeProtect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_TiLfa represents the /nokia-conf/configure/groups/group/router/isis/loopfree-alternate/ti-lfa YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_TiLfa struct {
	MaxSrFrrLabels *uint32                                                                           `path:"max-sr-frr-labels" module:"nokia-conf"`
	NodeProtect    *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_TiLfa_NodeProtect `path:"node-protect" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_TiLfa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_TiLfa) IsYANGGoStruct() {}

// GetOrCreateNodeProtect retrieves the value of the NodeProtect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_TiLfa) GetOrCreateNodeProtect() *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_TiLfa_NodeProtect {
	if t.NodeProtect != nil {
		return t.NodeProtect
	}
	t.NodeProtect = &NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_TiLfa_NodeProtect{}
	return t.NodeProtect
}

// GetNodeProtect returns the value of the NodeProtect struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_TiLfa. If the receiver or the field NodeProtect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_TiLfa) GetNodeProtect() *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_TiLfa_NodeProtect {
	if t != nil && t.NodeProtect != nil {
		return t.NodeProtect
	}
	return nil
}

// GetMaxSrFrrLabels retrieves the value of the leaf MaxSrFrrLabels from the NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_TiLfa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxSrFrrLabels is set, it can
// safely use t.GetMaxSrFrrLabels() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxSrFrrLabels == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_TiLfa) GetMaxSrFrrLabels() uint32 {
	if t == nil || t.MaxSrFrrLabels == nil {
		return 2
	}
	return *t.MaxSrFrrLabels
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_TiLfa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_TiLfa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxSrFrrLabels == nil {
		var v uint32 = 2
		t.MaxSrFrrLabels = &v
	}
	t.NodeProtect.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_TiLfa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_TiLfa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_TiLfa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_TiLfa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_TiLfa.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_TiLfa) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_TiLfa_NodeProtect represents the /nokia-conf/configure/groups/group/router/isis/loopfree-alternate/ti-lfa/node-protect YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_TiLfa_NodeProtect struct {
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_TiLfa_NodeProtect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_TiLfa_NodeProtect) IsYANGGoStruct() {
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_TiLfa_NodeProtect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_TiLfa_NodeProtect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_TiLfa_NodeProtect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_TiLfa_NodeProtect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_TiLfa_NodeProtect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_TiLfa_NodeProtect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_TiLfa_NodeProtect.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_LoopfreeAlternate_TiLfa_NodeProtect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_LspRefresh represents the /nokia-conf/configure/groups/group/router/isis/lsp-refresh YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_LspRefresh struct {
	HalfLifetime *bool   `path:"half-lifetime" module:"nokia-conf"`
	Interval     *uint32 `path:"interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_LspRefresh implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_LspRefresh) IsYANGGoStruct() {}

// GetHalfLifetime retrieves the value of the leaf HalfLifetime from the NokiaConf_Configure_Groups_Group_Router_Isis_LspRefresh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HalfLifetime is set, it can
// safely use t.GetHalfLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HalfLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LspRefresh) GetHalfLifetime() bool {
	if t == nil || t.HalfLifetime == nil {
		return true
	}
	return *t.HalfLifetime
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_Router_Isis_LspRefresh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LspRefresh) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 600
	}
	return *t.Interval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_LspRefresh
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LspRefresh) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HalfLifetime == nil {
		var v bool = true
		t.HalfLifetime = &v
	}
	if t.Interval == nil {
		var v uint32 = 600
		t.Interval = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LspRefresh) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_LspRefresh"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LspRefresh) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_LspRefresh) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_LspRefresh.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_LspRefresh) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_MultiTopology represents the /nokia-conf/configure/groups/group/router/isis/multi-topology YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_MultiTopology struct {
	Ipv4Multicast *bool `path:"ipv4-multicast" module:"nokia-conf"`
	Ipv6Multicast *bool `path:"ipv6-multicast" module:"nokia-conf"`
	Ipv6Unicast   *bool `path:"ipv6-unicast" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_MultiTopology implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_MultiTopology) IsYANGGoStruct() {}

// GetIpv4Multicast retrieves the value of the leaf Ipv4Multicast from the NokiaConf_Configure_Groups_Group_Router_Isis_MultiTopology
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Multicast is set, it can
// safely use t.GetIpv4Multicast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Multicast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_MultiTopology) GetIpv4Multicast() bool {
	if t == nil || t.Ipv4Multicast == nil {
		return false
	}
	return *t.Ipv4Multicast
}

// GetIpv6Multicast retrieves the value of the leaf Ipv6Multicast from the NokiaConf_Configure_Groups_Group_Router_Isis_MultiTopology
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Multicast is set, it can
// safely use t.GetIpv6Multicast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Multicast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_MultiTopology) GetIpv6Multicast() bool {
	if t == nil || t.Ipv6Multicast == nil {
		return false
	}
	return *t.Ipv6Multicast
}

// GetIpv6Unicast retrieves the value of the leaf Ipv6Unicast from the NokiaConf_Configure_Groups_Group_Router_Isis_MultiTopology
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Unicast is set, it can
// safely use t.GetIpv6Unicast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Unicast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_MultiTopology) GetIpv6Unicast() bool {
	if t == nil || t.Ipv6Unicast == nil {
		return false
	}
	return *t.Ipv6Unicast
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_MultiTopology
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_MultiTopology) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4Multicast == nil {
		var v bool = false
		t.Ipv4Multicast = &v
	}
	if t.Ipv6Multicast == nil {
		var v bool = false
		t.Ipv6Multicast = &v
	}
	if t.Ipv6Unicast == nil {
		var v bool = false
		t.Ipv6Unicast = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_MultiTopology) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_MultiTopology"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_MultiTopology) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_MultiTopology) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_MultiTopology.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_MultiTopology) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_MulticastImport represents the /nokia-conf/configure/groups/group/router/isis/multicast-import YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_MulticastImport struct {
	Ipv4 *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6 *bool `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_MulticastImport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_MulticastImport) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Router_Isis_MulticastImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_MulticastImport) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Router_Isis_MulticastImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_MulticastImport) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_MulticastImport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_MulticastImport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_MulticastImport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_MulticastImport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_MulticastImport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_MulticastImport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_MulticastImport.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_MulticastImport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_Overload represents the /nokia-conf/configure/groups/group/router/isis/overload YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_Overload struct {
	MaxMetric *bool `path:"max-metric" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_Overload implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Overload) IsYANGGoStruct() {}

// GetMaxMetric retrieves the value of the leaf MaxMetric from the NokiaConf_Configure_Groups_Group_Router_Isis_Overload
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxMetric is set, it can
// safely use t.GetMaxMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Overload) GetMaxMetric() bool {
	if t == nil || t.MaxMetric == nil {
		return false
	}
	return *t.MaxMetric
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_Overload
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Overload) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxMetric == nil {
		var v bool = false
		t.MaxMetric = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Overload) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_Overload"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Overload) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Overload) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_Overload.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Overload) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_OverloadOnBoot represents the /nokia-conf/configure/groups/group/router/isis/overload-on-boot YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_OverloadOnBoot struct {
	MaxMetric *bool   `path:"max-metric" module:"nokia-conf"`
	Timeout   *uint32 `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_OverloadOnBoot implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_OverloadOnBoot) IsYANGGoStruct() {}

// GetMaxMetric retrieves the value of the leaf MaxMetric from the NokiaConf_Configure_Groups_Group_Router_Isis_OverloadOnBoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxMetric is set, it can
// safely use t.GetMaxMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_OverloadOnBoot) GetMaxMetric() bool {
	if t == nil || t.MaxMetric == nil {
		return false
	}
	return *t.MaxMetric
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_Router_Isis_OverloadOnBoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_OverloadOnBoot) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_OverloadOnBoot
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_OverloadOnBoot) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxMetric == nil {
		var v bool = false
		t.MaxMetric = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_OverloadOnBoot) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_OverloadOnBoot"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_OverloadOnBoot) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_OverloadOnBoot) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_OverloadOnBoot.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_OverloadOnBoot) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_PrefixLimit represents the /nokia-conf/configure/groups/group/router/isis/prefix-limit YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_PrefixLimit struct {
	Limit            *uint32                                                                        `path:"limit" module:"nokia-conf"`
	LogOnly          *bool                                                                          `path:"log-only" module:"nokia-conf"`
	OverloadTimeout  NokiaConf_Configure_Groups_Group_Router_Isis_PrefixLimit_OverloadTimeout_Union `path:"overload-timeout" module:"nokia-conf"`
	WarningThreshold *uint32                                                                        `path:"warning-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_PrefixLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_PrefixLimit) IsYANGGoStruct() {}

// GetLimit retrieves the value of the leaf Limit from the NokiaConf_Configure_Groups_Group_Router_Isis_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Limit is set, it can
// safely use t.GetLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Limit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_PrefixLimit) GetLimit() uint32 {
	if t == nil || t.Limit == nil {
		return 0
	}
	return *t.Limit
}

// GetLogOnly retrieves the value of the leaf LogOnly from the NokiaConf_Configure_Groups_Group_Router_Isis_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogOnly is set, it can
// safely use t.GetLogOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_PrefixLimit) GetLogOnly() bool {
	if t == nil || t.LogOnly == nil {
		return false
	}
	return *t.LogOnly
}

// GetOverloadTimeout retrieves the value of the leaf OverloadTimeout from the NokiaConf_Configure_Groups_Group_Router_Isis_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverloadTimeout is set, it can
// safely use t.GetOverloadTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverloadTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_PrefixLimit) GetOverloadTimeout() NokiaConf_Configure_Groups_Group_Router_Isis_PrefixLimit_OverloadTimeout_Union {
	if t == nil || t.OverloadTimeout == nil {
		return NokiaTypesIgp_OverloadTimeout_Enum_forever
	}
	return t.OverloadTimeout
}

// GetWarningThreshold retrieves the value of the leaf WarningThreshold from the NokiaConf_Configure_Groups_Group_Router_Isis_PrefixLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WarningThreshold is set, it can
// safely use t.GetWarningThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WarningThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_PrefixLimit) GetWarningThreshold() uint32 {
	if t == nil || t.WarningThreshold == nil {
		return 0
	}
	return *t.WarningThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_PrefixLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_PrefixLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LogOnly == nil {
		var v bool = false
		t.LogOnly = &v
	}
	if t.OverloadTimeout == nil {
		t.OverloadTimeout = NokiaTypesIgp_OverloadTimeout_Enum_forever
	}
	if t.WarningThreshold == nil {
		var v uint32 = 0
		t.WarningThreshold = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_PrefixLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_PrefixLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_PrefixLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_PrefixLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_PrefixLimit.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_PrefixLimit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority represents the /nokia-conf/configure/groups/group/router/isis/rib-priority YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority struct {
	High *NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority_High `path:"high" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority) IsYANGGoStruct() {}

// GetOrCreateHigh retrieves the value of the High field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority) GetOrCreateHigh() *NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority_High {
	if t.High != nil {
		return t.High
	}
	t.High = &NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority_High{}
	return t.High
}

// GetHigh returns the value of the High struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority. If the receiver or the field High is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority) GetHigh() *NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority_High {
	if t != nil && t.High != nil {
		return t.High
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.High.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority_High represents the /nokia-conf/configure/groups/group/router/isis/rib-priority/high YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority_High struct {
	PrefixList *string `path:"prefix-list" module:"nokia-conf"`
	Tag        *uint32 `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority_High implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority_High) IsYANGGoStruct() {}

// GetPrefixList retrieves the value of the leaf PrefixList from the NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority_High
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixList is set, it can
// safely use t.GetPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority_High) GetPrefixList() string {
	if t == nil || t.PrefixList == nil {
		return ""
	}
	return *t.PrefixList
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority_High
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority_High) GetTag() uint32 {
	if t == nil || t.Tag == nil {
		return 0
	}
	return *t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority_High
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority_High) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority_High) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority_High"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority_High) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority_High) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority_High.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_RibPriority_High) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting represents the /nokia-conf/configure/groups/group/router/isis/segment-routing YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting struct {
	AdjSidHold         NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjSidHold_Union                                                                                    `path:"adj-sid-hold" module:"nokia-conf"`
	AdjacencySet       map[NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet_Id_Union]*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet `path:"adjacency-set" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState                                                                                                                                     `path:"admin-state" module:"nokia-conf"`
	ClassForwarding    *bool                                                                                                                                                           `path:"class-forwarding" module:"nokia-conf"`
	EgressStatistics   *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_EgressStatistics                                                                                   `path:"egress-statistics" module:"nokia-conf"`
	EntropyLabel       *bool                                                                                                                                                           `path:"entropy-label" module:"nokia-conf"`
	ExportTunnelTable  E_NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_ExportTunnelTable                                                                                 `path:"export-tunnel-table" module:"nokia-conf"`
	IngressStatistics  *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_IngressStatistics                                                                                  `path:"ingress-statistics" module:"nokia-conf"`
	MappingServer      *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer                                                                                      `path:"mapping-server" module:"nokia-conf"`
	MaximumSidDepth    *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MaximumSidDepth                                                                                    `path:"maximum-sid-depth" module:"nokia-conf"`
	MicroLoopAvoidance *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MicroLoopAvoidance                                                                                 `path:"micro-loop-avoidance" module:"nokia-conf" yangPresence:"true"`
	PrefixSidRange     *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_PrefixSidRange                                                                                     `path:"prefix-sid-range" module:"nokia-conf" yangPresence:"true"`
	Srlb               *string                                                                                                                                                         `path:"srlb" module:"nokia-conf"`
	TunnelMtu          *uint32                                                                                                                                                         `path:"tunnel-mtu" module:"nokia-conf"`
	TunnelTablePref    *uint32                                                                                                                                                         `path:"tunnel-table-pref" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting) IsYANGGoStruct() {}

// NewAdjacencySet creates a new entry in the AdjacencySet list of the
// NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting) NewAdjacencySet(Id NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet_Id_Union) (*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdjacencySet == nil {
		t.AdjacencySet = make(map[NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet_Id_Union]*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AdjacencySet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AdjacencySet", key)
	}

	t.AdjacencySet[key] = &NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet{
		Id: Id,
	}

	return t.AdjacencySet[key], nil
}

// RenameAdjacencySet renames an entry in the list AdjacencySet within
// the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting) RenameAdjacencySet(oldK, newK NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet_Id_Union) error {
	if _, ok := t.AdjacencySet[newK]; ok {
		return fmt.Errorf("key %v already exists in AdjacencySet", newK)
	}

	e, ok := t.AdjacencySet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AdjacencySet", oldK)
	}
	e.Id = newK

	t.AdjacencySet[newK] = e
	delete(t.AdjacencySet, oldK)
	return nil
}

// GetOrCreateAdjacencySet retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting) GetOrCreateAdjacencySet(Id NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet_Id_Union) *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet {

	key := Id

	if v, ok := t.AdjacencySet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAdjacencySet(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAdjacencySet got unexpected error: %v", err))
	}
	return v
}

// GetAdjacencySet retrieves the value with the specified key from
// the AdjacencySet map field of NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting) GetAdjacencySet(Id NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet_Id_Union) *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.AdjacencySet[key]; ok {
		return lm
	}
	return nil
}

// DeleteAdjacencySet deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting) DeleteAdjacencySet(Id NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet_Id_Union) {
	key := Id

	delete(t.AdjacencySet, key)
}

// AppendAdjacencySet appends the supplied NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet struct to the
// list AdjacencySet of NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting) AppendAdjacencySet(v *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet) error {
	key := v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdjacencySet == nil {
		t.AdjacencySet = make(map[NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet_Id_Union]*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet)
	}

	if _, ok := t.AdjacencySet[key]; ok {
		return fmt.Errorf("duplicate key for list AdjacencySet %v", key)
	}

	t.AdjacencySet[key] = v
	return nil
}

// GetOrCreateEgressStatistics retrieves the value of the EgressStatistics field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting) GetOrCreateEgressStatistics() *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_EgressStatistics {
	if t.EgressStatistics != nil {
		return t.EgressStatistics
	}
	t.EgressStatistics = &NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_EgressStatistics{}
	return t.EgressStatistics
}

// GetOrCreateIngressStatistics retrieves the value of the IngressStatistics field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting) GetOrCreateIngressStatistics() *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_IngressStatistics {
	if t.IngressStatistics != nil {
		return t.IngressStatistics
	}
	t.IngressStatistics = &NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_IngressStatistics{}
	return t.IngressStatistics
}

// GetOrCreateMappingServer retrieves the value of the MappingServer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting) GetOrCreateMappingServer() *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer {
	if t.MappingServer != nil {
		return t.MappingServer
	}
	t.MappingServer = &NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer{}
	return t.MappingServer
}

// GetOrCreateMaximumSidDepth retrieves the value of the MaximumSidDepth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting) GetOrCreateMaximumSidDepth() *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MaximumSidDepth {
	if t.MaximumSidDepth != nil {
		return t.MaximumSidDepth
	}
	t.MaximumSidDepth = &NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MaximumSidDepth{}
	return t.MaximumSidDepth
}

// GetOrCreateMicroLoopAvoidance retrieves the value of the MicroLoopAvoidance field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting) GetOrCreateMicroLoopAvoidance() *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MicroLoopAvoidance {
	if t.MicroLoopAvoidance != nil {
		return t.MicroLoopAvoidance
	}
	t.MicroLoopAvoidance = &NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MicroLoopAvoidance{}
	return t.MicroLoopAvoidance
}

// GetOrCreatePrefixSidRange retrieves the value of the PrefixSidRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting) GetOrCreatePrefixSidRange() *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_PrefixSidRange {
	if t.PrefixSidRange != nil {
		return t.PrefixSidRange
	}
	t.PrefixSidRange = &NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_PrefixSidRange{}
	return t.PrefixSidRange
}

// GetEgressStatistics returns the value of the EgressStatistics struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting. If the receiver or the field EgressStatistics is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting) GetEgressStatistics() *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_EgressStatistics {
	if t != nil && t.EgressStatistics != nil {
		return t.EgressStatistics
	}
	return nil
}

// GetIngressStatistics returns the value of the IngressStatistics struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting. If the receiver or the field IngressStatistics is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting) GetIngressStatistics() *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_IngressStatistics {
	if t != nil && t.IngressStatistics != nil {
		return t.IngressStatistics
	}
	return nil
}

// GetMappingServer returns the value of the MappingServer struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting. If the receiver or the field MappingServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting) GetMappingServer() *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer {
	if t != nil && t.MappingServer != nil {
		return t.MappingServer
	}
	return nil
}

// GetMaximumSidDepth returns the value of the MaximumSidDepth struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting. If the receiver or the field MaximumSidDepth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting) GetMaximumSidDepth() *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MaximumSidDepth {
	if t != nil && t.MaximumSidDepth != nil {
		return t.MaximumSidDepth
	}
	return nil
}

// GetMicroLoopAvoidance returns the value of the MicroLoopAvoidance struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting. If the receiver or the field MicroLoopAvoidance is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting) GetMicroLoopAvoidance() *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MicroLoopAvoidance {
	if t != nil && t.MicroLoopAvoidance != nil {
		return t.MicroLoopAvoidance
	}
	return nil
}

// GetPrefixSidRange returns the value of the PrefixSidRange struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting. If the receiver or the field PrefixSidRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting) GetPrefixSidRange() *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_PrefixSidRange {
	if t != nil && t.PrefixSidRange != nil {
		return t.PrefixSidRange
	}
	return nil
}

// GetAdjSidHold retrieves the value of the leaf AdjSidHold from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdjSidHold is set, it can
// safely use t.GetAdjSidHold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdjSidHold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting) GetAdjSidHold() NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjSidHold_Union {
	if t == nil || t.AdjSidHold == nil {
		return UnionUint32(15)
	}
	return t.AdjSidHold
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetClassForwarding retrieves the value of the leaf ClassForwarding from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassForwarding is set, it can
// safely use t.GetClassForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassForwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting) GetClassForwarding() bool {
	if t == nil || t.ClassForwarding == nil {
		return false
	}
	return *t.ClassForwarding
}

// GetEntropyLabel retrieves the value of the leaf EntropyLabel from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntropyLabel is set, it can
// safely use t.GetEntropyLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntropyLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting) GetEntropyLabel() bool {
	if t == nil || t.EntropyLabel == nil {
		return false
	}
	return *t.EntropyLabel
}

// GetExportTunnelTable retrieves the value of the leaf ExportTunnelTable from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportTunnelTable is set, it can
// safely use t.GetExportTunnelTable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportTunnelTable == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting) GetExportTunnelTable() E_NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_ExportTunnelTable {
	if t == nil || t.ExportTunnelTable == 0 {
		return 0
	}
	return t.ExportTunnelTable
}

// GetSrlb retrieves the value of the leaf Srlb from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Srlb is set, it can
// safely use t.GetSrlb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Srlb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting) GetSrlb() string {
	if t == nil || t.Srlb == nil {
		return ""
	}
	return *t.Srlb
}

// GetTunnelMtu retrieves the value of the leaf TunnelMtu from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelMtu is set, it can
// safely use t.GetTunnelMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting) GetTunnelMtu() uint32 {
	if t == nil || t.TunnelMtu == nil {
		return 0
	}
	return *t.TunnelMtu
}

// GetTunnelTablePref retrieves the value of the leaf TunnelTablePref from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelTablePref is set, it can
// safely use t.GetTunnelTablePref() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelTablePref == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting) GetTunnelTablePref() uint32 {
	if t == nil || t.TunnelTablePref == nil {
		return 11
	}
	return *t.TunnelTablePref
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdjSidHold == nil {
		t.AdjSidHold = UnionUint32(15)
	}
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ClassForwarding == nil {
		var v bool = false
		t.ClassForwarding = &v
	}
	if t.TunnelTablePref == nil {
		var v uint32 = 11
		t.TunnelTablePref = &v
	}
	t.EgressStatistics.PopulateDefaults()
	t.IngressStatistics.PopulateDefaults()
	t.MappingServer.PopulateDefaults()
	t.MaximumSidDepth.PopulateDefaults()
	t.MicroLoopAvoidance.PopulateDefaults()
	t.PrefixSidRange.PopulateDefaults()
	for _, e := range t.AdjacencySet {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6 represents the /nokia-conf/configure/groups/group/router/isis/segment-routing-v6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6 struct {
	AdjSidHold NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_AdjSidHold_Union    `path:"adj-sid-hold" module:"nokia-conf"`
	AdminState E_NokiaTypesSros_AdminState                                                       `path:"admin-state" module:"nokia-conf"`
	Locator    map[string]*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator `path:"locator" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6) IsYANGGoStruct() {}

// NewLocator creates a new entry in the Locator list of the
// NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6) NewLocator(LocatorName string) (*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Locator == nil {
		t.Locator = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator)
	}

	key := LocatorName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Locator[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Locator", key)
	}

	t.Locator[key] = &NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator{
		LocatorName: &LocatorName,
	}

	return t.Locator[key], nil
}

// RenameLocator renames an entry in the list Locator within
// the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6) RenameLocator(oldK, newK string) error {
	if _, ok := t.Locator[newK]; ok {
		return fmt.Errorf("key %v already exists in Locator", newK)
	}

	e, ok := t.Locator[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Locator", oldK)
	}
	e.LocatorName = &newK

	t.Locator[newK] = e
	delete(t.Locator, oldK)
	return nil
}

// GetOrCreateLocator retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6) GetOrCreateLocator(LocatorName string) *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator {

	key := LocatorName

	if v, ok := t.Locator[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLocator(LocatorName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLocator got unexpected error: %v", err))
	}
	return v
}

// GetLocator retrieves the value with the specified key from
// the Locator map field of NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6) GetLocator(LocatorName string) *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator {

	if t == nil {
		return nil
	}

	key := LocatorName

	if lm, ok := t.Locator[key]; ok {
		return lm
	}
	return nil
}

// DeleteLocator deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6) DeleteLocator(LocatorName string) {
	key := LocatorName

	delete(t.Locator, key)
}

// AppendLocator appends the supplied NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator struct to the
// list Locator of NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6) AppendLocator(v *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator) error {
	if v.LocatorName == nil {
		return fmt.Errorf("invalid nil key received for LocatorName")
	}

	key := *v.LocatorName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Locator == nil {
		t.Locator = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator)
	}

	if _, ok := t.Locator[key]; ok {
		return fmt.Errorf("duplicate key for list Locator %v", key)
	}

	t.Locator[key] = v
	return nil
}

// GetAdjSidHold retrieves the value of the leaf AdjSidHold from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdjSidHold is set, it can
// safely use t.GetAdjSidHold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdjSidHold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6) GetAdjSidHold() NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_AdjSidHold_Union {
	if t == nil || t.AdjSidHold == nil {
		return UnionUint32(15)
	}
	return t.AdjSidHold
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdjSidHold == nil {
		t.AdjSidHold = UnionUint32(15)
	}
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Locator {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator represents the /nokia-conf/configure/groups/group/router/isis/segment-routing-v6/locator YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator struct {
	Level           map[NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level_LevelNumber_Union]*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level `path:"level" module:"nokia-conf"`
	LevelCapability E_NokiaTypesIsis_Level                                                                                                                                                         `path:"level-capability" module:"nokia-conf"`
	LocatorName     *string                                                                                                                                                                        `path:"locator-name" module:"nokia-conf"`
	Tag             *uint32                                                                                                                                                                        `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator) IsYANGGoStruct() {}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator) NewLevel(LevelNumber NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level_LevelNumber_Union) (*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level_LevelNumber_Union]*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level)
	}

	key := LevelNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level{
		LevelNumber: LevelNumber,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator) RenameLevel(oldK, newK NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level_LevelNumber_Union) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.LevelNumber = newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator) GetOrCreateLevel(LevelNumber NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level_LevelNumber_Union) *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level {

	key := LevelNumber

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(LevelNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator) GetLevel(LevelNumber NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level_LevelNumber_Union) *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level {

	if t == nil {
		return nil
	}

	key := LevelNumber

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator) DeleteLevel(LevelNumber NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level_LevelNumber_Union) {
	key := LevelNumber

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level struct to the
// list Level of NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator) AppendLevel(v *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level) error {
	key := v.LevelNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level_LevelNumber_Union]*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// GetLevelCapability retrieves the value of the leaf LevelCapability from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelCapability is set, it can
// safely use t.GetLevelCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator) GetLevelCapability() E_NokiaTypesIsis_Level {
	if t == nil || t.LevelCapability == 0 {
		return NokiaTypesIsis_Level_1_2
	}
	return t.LevelCapability
}

// GetLocatorName retrieves the value of the leaf LocatorName from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocatorName is set, it can
// safely use t.GetLocatorName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocatorName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator) GetLocatorName() string {
	if t == nil || t.LocatorName == nil {
		return ""
	}
	return *t.LocatorName
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator) GetTag() uint32 {
	if t == nil || t.Tag == nil {
		return 0
	}
	return *t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LevelCapability == 0 {
		t.LevelCapability = NokiaTypesIsis_Level_1_2
	}
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LocatorName == nil {
		return nil, fmt.Errorf("nil value for key LocatorName")
	}

	return map[string]interface{}{
		"locator-name": *t.LocatorName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level represents the /nokia-conf/configure/groups/group/router/isis/segment-routing-v6/locator/level YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level struct {
	LevelNumber NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level_LevelNumber_Union `path:"level-number" module:"nokia-conf"`
	Metric      *uint32                                                                                       `path:"metric" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level) IsYANGGoStruct() {
}

// GetLevelNumber retrieves the value of the leaf LevelNumber from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelNumber is set, it can
// safely use t.GetLevelNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level) GetLevelNumber() NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level_LevelNumber_Union {
	if t == nil || t.LevelNumber == nil {
		return nil
	}
	return t.LevelNumber
}

// GetMetric retrieves the value of the leaf Metric from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"level-number": t.LevelNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRoutingV6_Locator_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet represents the /nokia-conf/configure/groups/group/router/isis/segment-routing/adjacency-set YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet struct {
	Advertise *bool                                                                             `path:"advertise" module:"nokia-conf"`
	Family    E_NokiaTypesSros_AdjacencySetFamilyType                                           `path:"family" module:"nokia-conf"`
	Id        NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet_Id_Union `path:"id" module:"nokia-conf"`
	Parallel  *bool                                                                             `path:"parallel" module:"nokia-conf"`
	Sid       *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet_Sid     `path:"sid" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet) IsYANGGoStruct() {}

// GetOrCreateSid retrieves the value of the Sid field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet) GetOrCreateSid() *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet_Sid {
	if t.Sid != nil {
		return t.Sid
	}
	t.Sid = &NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet_Sid{}
	return t.Sid
}

// GetSid returns the value of the Sid struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet. If the receiver or the field Sid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet) GetSid() *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet_Sid {
	if t != nil && t.Sid != nil {
		return t.Sid
	}
	return nil
}

// GetAdvertise retrieves the value of the leaf Advertise from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertise is set, it can
// safely use t.GetAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertise == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet) GetAdvertise() bool {
	if t == nil || t.Advertise == nil {
		return true
	}
	return *t.Advertise
}

// GetFamily retrieves the value of the leaf Family from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Family is set, it can
// safely use t.GetFamily() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Family == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet) GetFamily() E_NokiaTypesSros_AdjacencySetFamilyType {
	if t == nil || t.Family == 0 {
		return NokiaTypesSros_AdjacencySetFamilyType_ipv4
	}
	return t.Family
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet) GetId() NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet_Id_Union {
	if t == nil || t.Id == nil {
		return nil
	}
	return t.Id
}

// GetParallel retrieves the value of the leaf Parallel from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Parallel is set, it can
// safely use t.GetParallel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Parallel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet) GetParallel() bool {
	if t == nil || t.Parallel == nil {
		return true
	}
	return *t.Parallel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Advertise == nil {
		var v bool = true
		t.Advertise = &v
	}
	if t.Family == 0 {
		t.Family = NokiaTypesSros_AdjacencySetFamilyType_ipv4
	}
	if t.Parallel == nil {
		var v bool = true
		t.Parallel = &v
	}
	t.Sid.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"id": t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet_Sid represents the /nokia-conf/configure/groups/group/router/isis/segment-routing/adjacency-set/sid YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet_Sid struct {
	Label *int64 `path:"label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet_Sid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet_Sid) IsYANGGoStruct() {
}

// GetLabel retrieves the value of the leaf Label from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet_Sid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Label is set, it can
// safely use t.GetLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Label == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet_Sid) GetLabel() int64 {
	if t == nil || t.Label == nil {
		return 0
	}
	return *t.Label
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet_Sid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet_Sid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet_Sid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet_Sid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet_Sid) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet_Sid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet_Sid.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_AdjacencySet_Sid) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_EgressStatistics represents the /nokia-conf/configure/groups/group/router/isis/segment-routing/egress-statistics YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_EgressStatistics struct {
	AdjSet  *bool `path:"adj-set" module:"nokia-conf"`
	AdjSid  *bool `path:"adj-sid" module:"nokia-conf"`
	NodeSid *bool `path:"node-sid" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_EgressStatistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_EgressStatistics) IsYANGGoStruct() {
}

// GetAdjSet retrieves the value of the leaf AdjSet from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_EgressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdjSet is set, it can
// safely use t.GetAdjSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdjSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_EgressStatistics) GetAdjSet() bool {
	if t == nil || t.AdjSet == nil {
		return false
	}
	return *t.AdjSet
}

// GetAdjSid retrieves the value of the leaf AdjSid from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_EgressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdjSid is set, it can
// safely use t.GetAdjSid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdjSid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_EgressStatistics) GetAdjSid() bool {
	if t == nil || t.AdjSid == nil {
		return false
	}
	return *t.AdjSid
}

// GetNodeSid retrieves the value of the leaf NodeSid from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_EgressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NodeSid is set, it can
// safely use t.GetNodeSid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NodeSid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_EgressStatistics) GetNodeSid() bool {
	if t == nil || t.NodeSid == nil {
		return false
	}
	return *t.NodeSid
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_EgressStatistics
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_EgressStatistics) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdjSet == nil {
		var v bool = false
		t.AdjSet = &v
	}
	if t.AdjSid == nil {
		var v bool = false
		t.AdjSid = &v
	}
	if t.NodeSid == nil {
		var v bool = false
		t.NodeSid = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_EgressStatistics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_EgressStatistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_EgressStatistics) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_EgressStatistics) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_EgressStatistics.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_EgressStatistics) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_IngressStatistics represents the /nokia-conf/configure/groups/group/router/isis/segment-routing/ingress-statistics YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_IngressStatistics struct {
	AdjSet  *bool `path:"adj-set" module:"nokia-conf"`
	AdjSid  *bool `path:"adj-sid" module:"nokia-conf"`
	NodeSid *bool `path:"node-sid" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_IngressStatistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_IngressStatistics) IsYANGGoStruct() {
}

// GetAdjSet retrieves the value of the leaf AdjSet from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_IngressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdjSet is set, it can
// safely use t.GetAdjSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdjSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_IngressStatistics) GetAdjSet() bool {
	if t == nil || t.AdjSet == nil {
		return false
	}
	return *t.AdjSet
}

// GetAdjSid retrieves the value of the leaf AdjSid from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_IngressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdjSid is set, it can
// safely use t.GetAdjSid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdjSid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_IngressStatistics) GetAdjSid() bool {
	if t == nil || t.AdjSid == nil {
		return false
	}
	return *t.AdjSid
}

// GetNodeSid retrieves the value of the leaf NodeSid from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_IngressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NodeSid is set, it can
// safely use t.GetNodeSid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NodeSid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_IngressStatistics) GetNodeSid() bool {
	if t == nil || t.NodeSid == nil {
		return false
	}
	return *t.NodeSid
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_IngressStatistics
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_IngressStatistics) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdjSet == nil {
		var v bool = false
		t.AdjSet = &v
	}
	if t.AdjSid == nil {
		var v bool = false
		t.AdjSid = &v
	}
	if t.NodeSid == nil {
		var v bool = false
		t.NodeSid = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_IngressStatistics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_IngressStatistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_IngressStatistics) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_IngressStatistics) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_IngressStatistics.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_IngressStatistics) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer represents the /nokia-conf/configure/groups/group/router/isis/segment-routing/mapping-server YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer struct {
	AdminState E_NokiaTypesSros_AdminState                                                                                                                                                                   `path:"admin-state" module:"nokia-conf"`
	NodeSidMap map[NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap_SidIndex_Union]*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap `path:"node-sid-map" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer) IsYANGGoStruct() {}

// NewNodeSidMap creates a new entry in the NodeSidMap list of the
// NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer) NewNodeSidMap(SidIndex NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap_SidIndex_Union) (*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NodeSidMap == nil {
		t.NodeSidMap = make(map[NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap_SidIndex_Union]*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap)
	}

	key := SidIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NodeSidMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NodeSidMap", key)
	}

	t.NodeSidMap[key] = &NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap{
		SidIndex: SidIndex,
	}

	return t.NodeSidMap[key], nil
}

// RenameNodeSidMap renames an entry in the list NodeSidMap within
// the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer) RenameNodeSidMap(oldK, newK NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap_SidIndex_Union) error {
	if _, ok := t.NodeSidMap[newK]; ok {
		return fmt.Errorf("key %v already exists in NodeSidMap", newK)
	}

	e, ok := t.NodeSidMap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NodeSidMap", oldK)
	}
	e.SidIndex = newK

	t.NodeSidMap[newK] = e
	delete(t.NodeSidMap, oldK)
	return nil
}

// GetOrCreateNodeSidMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer) GetOrCreateNodeSidMap(SidIndex NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap_SidIndex_Union) *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap {

	key := SidIndex

	if v, ok := t.NodeSidMap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNodeSidMap(SidIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNodeSidMap got unexpected error: %v", err))
	}
	return v
}

// GetNodeSidMap retrieves the value with the specified key from
// the NodeSidMap map field of NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer) GetNodeSidMap(SidIndex NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap_SidIndex_Union) *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap {

	if t == nil {
		return nil
	}

	key := SidIndex

	if lm, ok := t.NodeSidMap[key]; ok {
		return lm
	}
	return nil
}

// DeleteNodeSidMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer) DeleteNodeSidMap(SidIndex NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap_SidIndex_Union) {
	key := SidIndex

	delete(t.NodeSidMap, key)
}

// AppendNodeSidMap appends the supplied NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap struct to the
// list NodeSidMap of NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer) AppendNodeSidMap(v *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap) error {
	key := v.SidIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NodeSidMap == nil {
		t.NodeSidMap = make(map[NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap_SidIndex_Union]*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap)
	}

	if _, ok := t.NodeSidMap[key]; ok {
		return fmt.Errorf("duplicate key for list NodeSidMap %v", key)
	}

	t.NodeSidMap[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.NodeSidMap {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap represents the /nokia-conf/configure/groups/group/router/isis/segment-routing/mapping-server/node-sid-map YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap struct {
	ClearNFlag      *bool                                                                                               `path:"clear-n-flag" module:"nokia-conf"`
	IpPrefix        *string                                                                                             `path:"ip-prefix" module:"nokia-conf"`
	LevelCapability E_NokiaTypesIsis_Level                                                                              `path:"level-capability" module:"nokia-conf"`
	Range           *uint32                                                                                             `path:"range" module:"nokia-conf"`
	SetFlags        *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap_SetFlags      `path:"set-flags" module:"nokia-conf"`
	SidIndex        NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap_SidIndex_Union `path:"sid-index" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap) IsYANGGoStruct() {
}

// GetOrCreateSetFlags retrieves the value of the SetFlags field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap) GetOrCreateSetFlags() *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap_SetFlags {
	if t.SetFlags != nil {
		return t.SetFlags
	}
	t.SetFlags = &NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap_SetFlags{}
	return t.SetFlags
}

// GetSetFlags returns the value of the SetFlags struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap. If the receiver or the field SetFlags is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap) GetSetFlags() *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap_SetFlags {
	if t != nil && t.SetFlags != nil {
		return t.SetFlags
	}
	return nil
}

// GetClearNFlag retrieves the value of the leaf ClearNFlag from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClearNFlag is set, it can
// safely use t.GetClearNFlag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClearNFlag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap) GetClearNFlag() bool {
	if t == nil || t.ClearNFlag == nil {
		return false
	}
	return *t.ClearNFlag
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetLevelCapability retrieves the value of the leaf LevelCapability from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelCapability is set, it can
// safely use t.GetLevelCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap) GetLevelCapability() E_NokiaTypesIsis_Level {
	if t == nil || t.LevelCapability == 0 {
		return NokiaTypesIsis_Level_1_2
	}
	return t.LevelCapability
}

// GetRange retrieves the value of the leaf Range from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Range is set, it can
// safely use t.GetRange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Range == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap) GetRange() uint32 {
	if t == nil || t.Range == nil {
		return 1
	}
	return *t.Range
}

// GetSidIndex retrieves the value of the leaf SidIndex from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SidIndex is set, it can
// safely use t.GetSidIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SidIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap) GetSidIndex() NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap_SidIndex_Union {
	if t == nil || t.SidIndex == nil {
		return nil
	}
	return t.SidIndex
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ClearNFlag == nil {
		var v bool = false
		t.ClearNFlag = &v
	}
	if t.LevelCapability == 0 {
		t.LevelCapability = NokiaTypesIsis_Level_1_2
	}
	if t.Range == nil {
		var v uint32 = 1
		t.Range = &v
	}
	t.SetFlags.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"sid-index": t.SidIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap_SetFlags represents the /nokia-conf/configure/groups/group/router/isis/segment-routing/mapping-server/node-sid-map/set-flags YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap_SetFlags struct {
	BitS *bool `path:"bit-s" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap_SetFlags implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap_SetFlags) IsYANGGoStruct() {
}

// GetBitS retrieves the value of the leaf BitS from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap_SetFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitS is set, it can
// safely use t.GetBitS() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitS == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap_SetFlags) GetBitS() bool {
	if t == nil || t.BitS == nil {
		return false
	}
	return *t.BitS
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap_SetFlags
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap_SetFlags) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BitS == nil {
		var v bool = false
		t.BitS = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap_SetFlags) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap_SetFlags"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap_SetFlags) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap_SetFlags) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap_SetFlags.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MappingServer_NodeSidMap_SetFlags) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MaximumSidDepth represents the /nokia-conf/configure/groups/group/router/isis/segment-routing/maximum-sid-depth YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MaximumSidDepth struct {
	OverrideBmi  *int32 `path:"override-bmi" module:"nokia-conf"`
	OverrideErld *int32 `path:"override-erld" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MaximumSidDepth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MaximumSidDepth) IsYANGGoStruct() {
}

// GetOverrideBmi retrieves the value of the leaf OverrideBmi from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MaximumSidDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverrideBmi is set, it can
// safely use t.GetOverrideBmi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverrideBmi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MaximumSidDepth) GetOverrideBmi() int32 {
	if t == nil || t.OverrideBmi == nil {
		return 0
	}
	return *t.OverrideBmi
}

// GetOverrideErld retrieves the value of the leaf OverrideErld from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MaximumSidDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverrideErld is set, it can
// safely use t.GetOverrideErld() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverrideErld == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MaximumSidDepth) GetOverrideErld() int32 {
	if t == nil || t.OverrideErld == nil {
		return 0
	}
	return *t.OverrideErld
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MaximumSidDepth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MaximumSidDepth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MaximumSidDepth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MaximumSidDepth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MaximumSidDepth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MaximumSidDepth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MaximumSidDepth.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MaximumSidDepth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MicroLoopAvoidance represents the /nokia-conf/configure/groups/group/router/isis/segment-routing/micro-loop-avoidance YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MicroLoopAvoidance struct {
	FibDelay *uint32 `path:"fib-delay" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MicroLoopAvoidance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MicroLoopAvoidance) IsYANGGoStruct() {
}

// GetFibDelay retrieves the value of the leaf FibDelay from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MicroLoopAvoidance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FibDelay is set, it can
// safely use t.GetFibDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FibDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MicroLoopAvoidance) GetFibDelay() uint32 {
	if t == nil || t.FibDelay == nil {
		return 15
	}
	return *t.FibDelay
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MicroLoopAvoidance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MicroLoopAvoidance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FibDelay == nil {
		var v uint32 = 15
		t.FibDelay = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MicroLoopAvoidance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MicroLoopAvoidance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MicroLoopAvoidance) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MicroLoopAvoidance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MicroLoopAvoidance.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_MicroLoopAvoidance) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_PrefixSidRange represents the /nokia-conf/configure/groups/group/router/isis/segment-routing/prefix-sid-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_PrefixSidRange struct {
	Global     YANGEmpty `path:"global" module:"nokia-conf"`
	MaxIndex   *uint32   `path:"max-index" module:"nokia-conf"`
	StartLabel *uint32   `path:"start-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_PrefixSidRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_PrefixSidRange) IsYANGGoStruct() {}

// GetGlobal retrieves the value of the leaf Global from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_PrefixSidRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Global is set, it can
// safely use t.GetGlobal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Global == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_PrefixSidRange) GetGlobal() YANGEmpty {
	if t == nil || t.Global == false {
		return false
	}
	return t.Global
}

// GetMaxIndex retrieves the value of the leaf MaxIndex from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_PrefixSidRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxIndex is set, it can
// safely use t.GetMaxIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_PrefixSidRange) GetMaxIndex() uint32 {
	if t == nil || t.MaxIndex == nil {
		return 1
	}
	return *t.MaxIndex
}

// GetStartLabel retrieves the value of the leaf StartLabel from the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_PrefixSidRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartLabel is set, it can
// safely use t.GetStartLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_PrefixSidRange) GetStartLabel() uint32 {
	if t == nil || t.StartLabel == nil {
		return 0
	}
	return *t.StartLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_PrefixSidRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_PrefixSidRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxIndex == nil {
		var v uint32 = 1
		t.MaxIndex = &v
	}
	if t.StartLabel == nil {
		var v uint32 = 0
		t.StartLabel = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_PrefixSidRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_PrefixSidRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_PrefixSidRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_PrefixSidRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_PrefixSidRange.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_SegmentRouting_PrefixSidRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_SummaryAddress represents the /nokia-conf/configure/groups/group/router/isis/summary-address YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_SummaryAddress struct {
	Algorithm       *int32                 `path:"algorithm" module:"nokia-conf"`
	IpPrefix        *string                `path:"ip-prefix" module:"nokia-conf"`
	LevelCapability E_NokiaTypesIsis_Level `path:"level-capability" module:"nokia-conf"`
	RouteTag        *uint32                `path:"route-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_SummaryAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_SummaryAddress) IsYANGGoStruct() {}

// GetAlgorithm retrieves the value of the leaf Algorithm from the NokiaConf_Configure_Groups_Group_Router_Isis_SummaryAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Algorithm is set, it can
// safely use t.GetAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Algorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SummaryAddress) GetAlgorithm() int32 {
	if t == nil || t.Algorithm == nil {
		return 0
	}
	return *t.Algorithm
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Groups_Group_Router_Isis_SummaryAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SummaryAddress) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetLevelCapability retrieves the value of the leaf LevelCapability from the NokiaConf_Configure_Groups_Group_Router_Isis_SummaryAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelCapability is set, it can
// safely use t.GetLevelCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SummaryAddress) GetLevelCapability() E_NokiaTypesIsis_Level {
	if t == nil || t.LevelCapability == 0 {
		return NokiaTypesIsis_Level_1_2
	}
	return t.LevelCapability
}

// GetRouteTag retrieves the value of the leaf RouteTag from the NokiaConf_Configure_Groups_Group_Router_Isis_SummaryAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTag is set, it can
// safely use t.GetRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SummaryAddress) GetRouteTag() uint32 {
	if t == nil || t.RouteTag == nil {
		return 0
	}
	return *t.RouteTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_SummaryAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SummaryAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LevelCapability == 0 {
		t.LevelCapability = NokiaTypesIsis_Level_1_2
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Isis_SummaryAddress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SummaryAddress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SummaryAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_SummaryAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SummaryAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_SummaryAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_SummaryAddress.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_SummaryAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_Timers represents the /nokia-conf/configure/groups/group/router/isis/timers YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_Timers struct {
	LspWait *NokiaConf_Configure_Groups_Group_Router_Isis_Timers_LspWait `path:"lsp-wait" module:"nokia-conf"`
	SpfWait *NokiaConf_Configure_Groups_Group_Router_Isis_Timers_SpfWait `path:"spf-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Timers) IsYANGGoStruct() {}

// GetOrCreateLspWait retrieves the value of the LspWait field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Timers) GetOrCreateLspWait() *NokiaConf_Configure_Groups_Group_Router_Isis_Timers_LspWait {
	if t.LspWait != nil {
		return t.LspWait
	}
	t.LspWait = &NokiaConf_Configure_Groups_Group_Router_Isis_Timers_LspWait{}
	return t.LspWait
}

// GetOrCreateSpfWait retrieves the value of the SpfWait field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Timers) GetOrCreateSpfWait() *NokiaConf_Configure_Groups_Group_Router_Isis_Timers_SpfWait {
	if t.SpfWait != nil {
		return t.SpfWait
	}
	t.SpfWait = &NokiaConf_Configure_Groups_Group_Router_Isis_Timers_SpfWait{}
	return t.SpfWait
}

// GetLspWait returns the value of the LspWait struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis_Timers. If the receiver or the field LspWait is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Timers) GetLspWait() *NokiaConf_Configure_Groups_Group_Router_Isis_Timers_LspWait {
	if t != nil && t.LspWait != nil {
		return t.LspWait
	}
	return nil
}

// GetSpfWait returns the value of the SpfWait struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis_Timers. If the receiver or the field SpfWait is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Timers) GetSpfWait() *NokiaConf_Configure_Groups_Group_Router_Isis_Timers_SpfWait {
	if t != nil && t.SpfWait != nil {
		return t.SpfWait
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LspWait.PopulateDefaults()
	t.SpfWait.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Timers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_Timers.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Timers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_Timers_LspWait represents the /nokia-conf/configure/groups/group/router/isis/timers/lsp-wait YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_Timers_LspWait struct {
	LspInitialWait *uint32 `path:"lsp-initial-wait" module:"nokia-conf"`
	LspMaxWait     *uint32 `path:"lsp-max-wait" module:"nokia-conf"`
	LspSecondWait  *uint32 `path:"lsp-second-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_Timers_LspWait implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Timers_LspWait) IsYANGGoStruct() {}

// GetLspInitialWait retrieves the value of the leaf LspInitialWait from the NokiaConf_Configure_Groups_Group_Router_Isis_Timers_LspWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspInitialWait is set, it can
// safely use t.GetLspInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspInitialWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Timers_LspWait) GetLspInitialWait() uint32 {
	if t == nil || t.LspInitialWait == nil {
		return 10
	}
	return *t.LspInitialWait
}

// GetLspMaxWait retrieves the value of the leaf LspMaxWait from the NokiaConf_Configure_Groups_Group_Router_Isis_Timers_LspWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspMaxWait is set, it can
// safely use t.GetLspMaxWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspMaxWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Timers_LspWait) GetLspMaxWait() uint32 {
	if t == nil || t.LspMaxWait == nil {
		return 5000
	}
	return *t.LspMaxWait
}

// GetLspSecondWait retrieves the value of the leaf LspSecondWait from the NokiaConf_Configure_Groups_Group_Router_Isis_Timers_LspWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspSecondWait is set, it can
// safely use t.GetLspSecondWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspSecondWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Timers_LspWait) GetLspSecondWait() uint32 {
	if t == nil || t.LspSecondWait == nil {
		return 1000
	}
	return *t.LspSecondWait
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_Timers_LspWait
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Timers_LspWait) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LspInitialWait == nil {
		var v uint32 = 10
		t.LspInitialWait = &v
	}
	if t.LspMaxWait == nil {
		var v uint32 = 5000
		t.LspMaxWait = &v
	}
	if t.LspSecondWait == nil {
		var v uint32 = 1000
		t.LspSecondWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Timers_LspWait) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_Timers_LspWait"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Timers_LspWait) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Timers_LspWait) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_Timers_LspWait.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Timers_LspWait) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_Timers_SpfWait represents the /nokia-conf/configure/groups/group/router/isis/timers/spf-wait YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_Timers_SpfWait struct {
	SpfInitialWait *uint32 `path:"spf-initial-wait" module:"nokia-conf"`
	SpfMaxWait     *uint32 `path:"spf-max-wait" module:"nokia-conf"`
	SpfSecondWait  *uint32 `path:"spf-second-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_Timers_SpfWait implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Timers_SpfWait) IsYANGGoStruct() {}

// GetSpfInitialWait retrieves the value of the leaf SpfInitialWait from the NokiaConf_Configure_Groups_Group_Router_Isis_Timers_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpfInitialWait is set, it can
// safely use t.GetSpfInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpfInitialWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Timers_SpfWait) GetSpfInitialWait() uint32 {
	if t == nil || t.SpfInitialWait == nil {
		return 1000
	}
	return *t.SpfInitialWait
}

// GetSpfMaxWait retrieves the value of the leaf SpfMaxWait from the NokiaConf_Configure_Groups_Group_Router_Isis_Timers_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpfMaxWait is set, it can
// safely use t.GetSpfMaxWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpfMaxWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Timers_SpfWait) GetSpfMaxWait() uint32 {
	if t == nil || t.SpfMaxWait == nil {
		return 10000
	}
	return *t.SpfMaxWait
}

// GetSpfSecondWait retrieves the value of the leaf SpfSecondWait from the NokiaConf_Configure_Groups_Group_Router_Isis_Timers_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpfSecondWait is set, it can
// safely use t.GetSpfSecondWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpfSecondWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Timers_SpfWait) GetSpfSecondWait() uint32 {
	if t == nil || t.SpfSecondWait == nil {
		return 1000
	}
	return *t.SpfSecondWait
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_Timers_SpfWait
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Timers_SpfWait) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SpfInitialWait == nil {
		var v uint32 = 1000
		t.SpfInitialWait = &v
	}
	if t.SpfMaxWait == nil {
		var v uint32 = 10000
		t.SpfMaxWait = &v
	}
	if t.SpfSecondWait == nil {
		var v uint32 = 1000
		t.SpfSecondWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Timers_SpfWait) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_Timers_SpfWait"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Timers_SpfWait) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_Timers_SpfWait) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_Timers_SpfWait.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_Timers_SpfWait) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions represents the /nokia-conf/configure/groups/group/router/isis/traffic-engineering-options YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions struct {
	ApplicationLinkAttributes *NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions_ApplicationLinkAttributes `path:"application-link-attributes" module:"nokia-conf" yangPresence:"true"`
	Ipv6                      *bool                                                                                             `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions) IsYANGGoStruct() {}

// GetOrCreateApplicationLinkAttributes retrieves the value of the ApplicationLinkAttributes field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions) GetOrCreateApplicationLinkAttributes() *NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions_ApplicationLinkAttributes {
	if t.ApplicationLinkAttributes != nil {
		return t.ApplicationLinkAttributes
	}
	t.ApplicationLinkAttributes = &NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions_ApplicationLinkAttributes{}
	return t.ApplicationLinkAttributes
}

// GetApplicationLinkAttributes returns the value of the ApplicationLinkAttributes struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions. If the receiver or the field ApplicationLinkAttributes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions) GetApplicationLinkAttributes() *NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions_ApplicationLinkAttributes {
	if t != nil && t.ApplicationLinkAttributes != nil {
		return t.ApplicationLinkAttributes
	}
	return nil
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
	t.ApplicationLinkAttributes.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions_ApplicationLinkAttributes represents the /nokia-conf/configure/groups/group/router/isis/traffic-engineering-options/application-link-attributes YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions_ApplicationLinkAttributes struct {
	Legacy *bool `path:"legacy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions_ApplicationLinkAttributes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions_ApplicationLinkAttributes) IsYANGGoStruct() {
}

// GetLegacy retrieves the value of the leaf Legacy from the NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions_ApplicationLinkAttributes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Legacy is set, it can
// safely use t.GetLegacy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Legacy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions_ApplicationLinkAttributes) GetLegacy() bool {
	if t == nil || t.Legacy == nil {
		return false
	}
	return *t.Legacy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions_ApplicationLinkAttributes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions_ApplicationLinkAttributes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Legacy == nil {
		var v bool = false
		t.Legacy = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions_ApplicationLinkAttributes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions_ApplicationLinkAttributes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions_ApplicationLinkAttributes) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions_ApplicationLinkAttributes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions_ApplicationLinkAttributes.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_TrafficEngineeringOptions_ApplicationLinkAttributes) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Isis_UnicastImport represents the /nokia-conf/configure/groups/group/router/isis/unicast-import YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Isis_UnicastImport struct {
	Ipv4 *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6 *bool `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Isis_UnicastImport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_UnicastImport) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Router_Isis_UnicastImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_UnicastImport) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return true
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Router_Isis_UnicastImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_UnicastImport) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return true
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Isis_UnicastImport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_UnicastImport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = true
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = true
		t.Ipv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_UnicastImport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Isis_UnicastImport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_UnicastImport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Isis_UnicastImport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Isis_UnicastImport.
func (*NokiaConf_Configure_Groups_Group_Router_Isis_UnicastImport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_L2Tp represents the /nokia-conf/configure/groups/group/router/l2tp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_L2Tp struct {
	AdminState               E_NokiaTypesSros_AdminState                                            `path:"admin-state" module:"nokia-conf"`
	AvpHiding                E_NokiaTypesL2Tp_BaseAvpHiding                                         `path:"avp-hiding" module:"nokia-conf"`
	Challenge                *bool                                                                  `path:"challenge" module:"nokia-conf"`
	DestructTimeout          *uint32                                                                `path:"destruct-timeout" module:"nokia-conf"`
	EthernetTunnel           *NokiaConf_Configure_Groups_Group_Router_L2Tp_EthernetTunnel           `path:"ethernet-tunnel" module:"nokia-conf"`
	ExcludeAvps              *NokiaConf_Configure_Groups_Group_Router_L2Tp_ExcludeAvps              `path:"exclude-avps" module:"nokia-conf"`
	Failover                 *NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover                 `path:"failover" module:"nokia-conf"`
	Group                    map[string]*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group         `path:"group" module:"nokia-conf"`
	GroupSessionLimit        *int32                                                                 `path:"group-session-limit" module:"nokia-conf"`
	HelloInterval            NokiaConf_Configure_Groups_Group_Router_L2Tp_HelloInterval_Union       `path:"hello-interval" module:"nokia-conf"`
	IdleTimeout              NokiaConf_Configure_Groups_Group_Router_L2Tp_IdleTimeout_Union         `path:"idle-timeout" module:"nokia-conf"`
	IgnoreAvps               *NokiaConf_Configure_Groups_Group_Router_L2Tp_IgnoreAvps               `path:"ignore-avps" module:"nokia-conf"`
	L2Tpv3                   *NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3                   `path:"l2tpv3" module:"nokia-conf"`
	Lac                      *NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac                      `path:"lac" module:"nokia-conf"`
	LocalAddress             *string                                                                `path:"local-address" module:"nokia-conf"`
	LocalName                *string                                                                `path:"local-name" module:"nokia-conf"`
	MaxRetriesEstab          *int32                                                                 `path:"max-retries-estab" module:"nokia-conf"`
	MaxRetriesNotEstab       *int32                                                                 `path:"max-retries-not-estab" module:"nokia-conf"`
	NextAttempt              E_NokiaConf_Configure_Groups_Group_Router_L2Tp_NextAttempt             `path:"next-attempt" module:"nokia-conf"`
	Password                 *string                                                                `path:"password" module:"nokia-conf"`
	PeerAddressChangePolicy  E_NokiaTypesL2Tp_PeerAddressChangePolicyOption                         `path:"peer-address-change-policy" module:"nokia-conf"`
	RadiusAccountingPolicy   *string                                                                `path:"radius-accounting-policy" module:"nokia-conf"`
	ReceiveWindowSize        *uint32                                                                `path:"receive-window-size" module:"nokia-conf"`
	ReplaceResultCode        *NokiaConf_Configure_Groups_Group_Router_L2Tp_ReplaceResultCode        `path:"replace-result-code" module:"nokia-conf"`
	RtmDebounceTime          NokiaConf_Configure_Groups_Group_Router_L2Tp_RtmDebounceTime_Union     `path:"rtm-debounce-time" module:"nokia-conf"`
	SessionAssignMethod      E_NokiaTypesL2Tp_BaseSessionAssignMethod                               `path:"session-assign-method" module:"nokia-conf"`
	SessionLimit             *int32                                                                 `path:"session-limit" module:"nokia-conf"`
	TunnelSelectionBlacklist *NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist `path:"tunnel-selection-blacklist" module:"nokia-conf"`
	TunnelSessionLimit       *int32                                                                 `path:"tunnel-session-limit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_L2Tp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Groups_Group_Router_L2Tp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) NewGroup(TunnelGroupName string) (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group)
	}

	key := TunnelGroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Groups_Group_Router_L2Tp_Group{
		TunnelGroupName: &TunnelGroupName,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Groups_Group_Router_L2Tp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.TunnelGroupName = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_L2Tp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetOrCreateGroup(TunnelGroupName string) *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group {

	key := TunnelGroupName

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(TunnelGroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Groups_Group_Router_L2Tp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetGroup(TunnelGroupName string) *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group {

	if t == nil {
		return nil
	}

	key := TunnelGroupName

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_L2Tp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) DeleteGroup(TunnelGroupName string) {
	key := TunnelGroupName

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Groups_Group_Router_L2Tp_Group struct to the
// list Group of NokiaConf_Configure_Groups_Group_Router_L2Tp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_L2Tp_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) AppendGroup(v *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) error {
	if v.TunnelGroupName == nil {
		return fmt.Errorf("invalid nil key received for TunnelGroupName")
	}

	key := *v.TunnelGroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// GetOrCreateEthernetTunnel retrieves the value of the EthernetTunnel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetOrCreateEthernetTunnel() *NokiaConf_Configure_Groups_Group_Router_L2Tp_EthernetTunnel {
	if t.EthernetTunnel != nil {
		return t.EthernetTunnel
	}
	t.EthernetTunnel = &NokiaConf_Configure_Groups_Group_Router_L2Tp_EthernetTunnel{}
	return t.EthernetTunnel
}

// GetOrCreateExcludeAvps retrieves the value of the ExcludeAvps field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetOrCreateExcludeAvps() *NokiaConf_Configure_Groups_Group_Router_L2Tp_ExcludeAvps {
	if t.ExcludeAvps != nil {
		return t.ExcludeAvps
	}
	t.ExcludeAvps = &NokiaConf_Configure_Groups_Group_Router_L2Tp_ExcludeAvps{}
	return t.ExcludeAvps
}

// GetOrCreateFailover retrieves the value of the Failover field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetOrCreateFailover() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover {
	if t.Failover != nil {
		return t.Failover
	}
	t.Failover = &NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover{}
	return t.Failover
}

// GetOrCreateIgnoreAvps retrieves the value of the IgnoreAvps field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetOrCreateIgnoreAvps() *NokiaConf_Configure_Groups_Group_Router_L2Tp_IgnoreAvps {
	if t.IgnoreAvps != nil {
		return t.IgnoreAvps
	}
	t.IgnoreAvps = &NokiaConf_Configure_Groups_Group_Router_L2Tp_IgnoreAvps{}
	return t.IgnoreAvps
}

// GetOrCreateL2Tpv3 retrieves the value of the L2Tpv3 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetOrCreateL2Tpv3() *NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3 {
	if t.L2Tpv3 != nil {
		return t.L2Tpv3
	}
	t.L2Tpv3 = &NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3{}
	return t.L2Tpv3
}

// GetOrCreateLac retrieves the value of the Lac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetOrCreateLac() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac {
	if t.Lac != nil {
		return t.Lac
	}
	t.Lac = &NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac{}
	return t.Lac
}

// GetOrCreateReplaceResultCode retrieves the value of the ReplaceResultCode field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetOrCreateReplaceResultCode() *NokiaConf_Configure_Groups_Group_Router_L2Tp_ReplaceResultCode {
	if t.ReplaceResultCode != nil {
		return t.ReplaceResultCode
	}
	t.ReplaceResultCode = &NokiaConf_Configure_Groups_Group_Router_L2Tp_ReplaceResultCode{}
	return t.ReplaceResultCode
}

// GetOrCreateTunnelSelectionBlacklist retrieves the value of the TunnelSelectionBlacklist field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetOrCreateTunnelSelectionBlacklist() *NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist {
	if t.TunnelSelectionBlacklist != nil {
		return t.TunnelSelectionBlacklist
	}
	t.TunnelSelectionBlacklist = &NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist{}
	return t.TunnelSelectionBlacklist
}

// GetEthernetTunnel returns the value of the EthernetTunnel struct pointer
// from NokiaConf_Configure_Groups_Group_Router_L2Tp. If the receiver or the field EthernetTunnel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetEthernetTunnel() *NokiaConf_Configure_Groups_Group_Router_L2Tp_EthernetTunnel {
	if t != nil && t.EthernetTunnel != nil {
		return t.EthernetTunnel
	}
	return nil
}

// GetExcludeAvps returns the value of the ExcludeAvps struct pointer
// from NokiaConf_Configure_Groups_Group_Router_L2Tp. If the receiver or the field ExcludeAvps is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetExcludeAvps() *NokiaConf_Configure_Groups_Group_Router_L2Tp_ExcludeAvps {
	if t != nil && t.ExcludeAvps != nil {
		return t.ExcludeAvps
	}
	return nil
}

// GetFailover returns the value of the Failover struct pointer
// from NokiaConf_Configure_Groups_Group_Router_L2Tp. If the receiver or the field Failover is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetFailover() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover {
	if t != nil && t.Failover != nil {
		return t.Failover
	}
	return nil
}

// GetIgnoreAvps returns the value of the IgnoreAvps struct pointer
// from NokiaConf_Configure_Groups_Group_Router_L2Tp. If the receiver or the field IgnoreAvps is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetIgnoreAvps() *NokiaConf_Configure_Groups_Group_Router_L2Tp_IgnoreAvps {
	if t != nil && t.IgnoreAvps != nil {
		return t.IgnoreAvps
	}
	return nil
}

// GetL2Tpv3 returns the value of the L2Tpv3 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_L2Tp. If the receiver or the field L2Tpv3 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetL2Tpv3() *NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3 {
	if t != nil && t.L2Tpv3 != nil {
		return t.L2Tpv3
	}
	return nil
}

// GetLac returns the value of the Lac struct pointer
// from NokiaConf_Configure_Groups_Group_Router_L2Tp. If the receiver or the field Lac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetLac() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac {
	if t != nil && t.Lac != nil {
		return t.Lac
	}
	return nil
}

// GetReplaceResultCode returns the value of the ReplaceResultCode struct pointer
// from NokiaConf_Configure_Groups_Group_Router_L2Tp. If the receiver or the field ReplaceResultCode is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetReplaceResultCode() *NokiaConf_Configure_Groups_Group_Router_L2Tp_ReplaceResultCode {
	if t != nil && t.ReplaceResultCode != nil {
		return t.ReplaceResultCode
	}
	return nil
}

// GetTunnelSelectionBlacklist returns the value of the TunnelSelectionBlacklist struct pointer
// from NokiaConf_Configure_Groups_Group_Router_L2Tp. If the receiver or the field TunnelSelectionBlacklist is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetTunnelSelectionBlacklist() *NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist {
	if t != nil && t.TunnelSelectionBlacklist != nil {
		return t.TunnelSelectionBlacklist
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAvpHiding retrieves the value of the leaf AvpHiding from the NokiaConf_Configure_Groups_Group_Router_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AvpHiding is set, it can
// safely use t.GetAvpHiding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AvpHiding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetAvpHiding() E_NokiaTypesL2Tp_BaseAvpHiding {
	if t == nil || t.AvpHiding == 0 {
		return 0
	}
	return t.AvpHiding
}

// GetChallenge retrieves the value of the leaf Challenge from the NokiaConf_Configure_Groups_Group_Router_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Challenge is set, it can
// safely use t.GetChallenge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Challenge == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetChallenge() bool {
	if t == nil || t.Challenge == nil {
		return false
	}
	return *t.Challenge
}

// GetDestructTimeout retrieves the value of the leaf DestructTimeout from the NokiaConf_Configure_Groups_Group_Router_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestructTimeout is set, it can
// safely use t.GetDestructTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestructTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetDestructTimeout() uint32 {
	if t == nil || t.DestructTimeout == nil {
		return 60
	}
	return *t.DestructTimeout
}

// GetGroupSessionLimit retrieves the value of the leaf GroupSessionLimit from the NokiaConf_Configure_Groups_Group_Router_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupSessionLimit is set, it can
// safely use t.GetGroupSessionLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupSessionLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetGroupSessionLimit() int32 {
	if t == nil || t.GroupSessionLimit == nil {
		return 0
	}
	return *t.GroupSessionLimit
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NokiaConf_Configure_Groups_Group_Router_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetHelloInterval() NokiaConf_Configure_Groups_Group_Router_L2Tp_HelloInterval_Union {
	if t == nil || t.HelloInterval == nil {
		return UnionUint32(300)
	}
	return t.HelloInterval
}

// GetIdleTimeout retrieves the value of the leaf IdleTimeout from the NokiaConf_Configure_Groups_Group_Router_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleTimeout is set, it can
// safely use t.GetIdleTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetIdleTimeout() NokiaConf_Configure_Groups_Group_Router_L2Tp_IdleTimeout_Union {
	if t == nil || t.IdleTimeout == nil {
		return NokiaTypesL2Tp_BaseIdleTimeout_Enum_infinite
	}
	return t.IdleTimeout
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Groups_Group_Router_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetLocalName retrieves the value of the leaf LocalName from the NokiaConf_Configure_Groups_Group_Router_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalName is set, it can
// safely use t.GetLocalName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetLocalName() string {
	if t == nil || t.LocalName == nil {
		return ""
	}
	return *t.LocalName
}

// GetMaxRetriesEstab retrieves the value of the leaf MaxRetriesEstab from the NokiaConf_Configure_Groups_Group_Router_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRetriesEstab is set, it can
// safely use t.GetMaxRetriesEstab() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRetriesEstab == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetMaxRetriesEstab() int32 {
	if t == nil || t.MaxRetriesEstab == nil {
		return 5
	}
	return *t.MaxRetriesEstab
}

// GetMaxRetriesNotEstab retrieves the value of the leaf MaxRetriesNotEstab from the NokiaConf_Configure_Groups_Group_Router_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRetriesNotEstab is set, it can
// safely use t.GetMaxRetriesNotEstab() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRetriesNotEstab == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetMaxRetriesNotEstab() int32 {
	if t == nil || t.MaxRetriesNotEstab == nil {
		return 5
	}
	return *t.MaxRetriesNotEstab
}

// GetNextAttempt retrieves the value of the leaf NextAttempt from the NokiaConf_Configure_Groups_Group_Router_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextAttempt is set, it can
// safely use t.GetNextAttempt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextAttempt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetNextAttempt() E_NokiaConf_Configure_Groups_Group_Router_L2Tp_NextAttempt {
	if t == nil || t.NextAttempt == 0 {
		return NokiaConf_Configure_Groups_Group_Router_L2Tp_NextAttempt_next_preference_level
	}
	return t.NextAttempt
}

// GetPassword retrieves the value of the leaf Password from the NokiaConf_Configure_Groups_Group_Router_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetPeerAddressChangePolicy retrieves the value of the leaf PeerAddressChangePolicy from the NokiaConf_Configure_Groups_Group_Router_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerAddressChangePolicy is set, it can
// safely use t.GetPeerAddressChangePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerAddressChangePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetPeerAddressChangePolicy() E_NokiaTypesL2Tp_PeerAddressChangePolicyOption {
	if t == nil || t.PeerAddressChangePolicy == 0 {
		return NokiaTypesL2Tp_PeerAddressChangePolicyOption_reject
	}
	return t.PeerAddressChangePolicy
}

// GetRadiusAccountingPolicy retrieves the value of the leaf RadiusAccountingPolicy from the NokiaConf_Configure_Groups_Group_Router_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusAccountingPolicy is set, it can
// safely use t.GetRadiusAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusAccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetRadiusAccountingPolicy() string {
	if t == nil || t.RadiusAccountingPolicy == nil {
		return ""
	}
	return *t.RadiusAccountingPolicy
}

// GetReceiveWindowSize retrieves the value of the leaf ReceiveWindowSize from the NokiaConf_Configure_Groups_Group_Router_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceiveWindowSize is set, it can
// safely use t.GetReceiveWindowSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceiveWindowSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetReceiveWindowSize() uint32 {
	if t == nil || t.ReceiveWindowSize == nil {
		return 64
	}
	return *t.ReceiveWindowSize
}

// GetRtmDebounceTime retrieves the value of the leaf RtmDebounceTime from the NokiaConf_Configure_Groups_Group_Router_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RtmDebounceTime is set, it can
// safely use t.GetRtmDebounceTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RtmDebounceTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetRtmDebounceTime() NokiaConf_Configure_Groups_Group_Router_L2Tp_RtmDebounceTime_Union {
	if t == nil || t.RtmDebounceTime == nil {
		return NokiaTypesL2Tp_RtmDebounceTime_Enum_infinite
	}
	return t.RtmDebounceTime
}

// GetSessionAssignMethod retrieves the value of the leaf SessionAssignMethod from the NokiaConf_Configure_Groups_Group_Router_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionAssignMethod is set, it can
// safely use t.GetSessionAssignMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionAssignMethod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetSessionAssignMethod() E_NokiaTypesL2Tp_BaseSessionAssignMethod {
	if t == nil || t.SessionAssignMethod == 0 {
		return NokiaTypesL2Tp_BaseSessionAssignMethod_existing_first
	}
	return t.SessionAssignMethod
}

// GetSessionLimit retrieves the value of the leaf SessionLimit from the NokiaConf_Configure_Groups_Group_Router_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionLimit is set, it can
// safely use t.GetSessionLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetSessionLimit() int32 {
	if t == nil || t.SessionLimit == nil {
		return 0
	}
	return *t.SessionLimit
}

// GetTunnelSessionLimit retrieves the value of the leaf TunnelSessionLimit from the NokiaConf_Configure_Groups_Group_Router_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelSessionLimit is set, it can
// safely use t.GetTunnelSessionLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelSessionLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) GetTunnelSessionLimit() int32 {
	if t == nil || t.TunnelSessionLimit == nil {
		return 0
	}
	return *t.TunnelSessionLimit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_L2Tp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Challenge == nil {
		var v bool = false
		t.Challenge = &v
	}
	if t.DestructTimeout == nil {
		var v uint32 = 60
		t.DestructTimeout = &v
	}
	if t.HelloInterval == nil {
		t.HelloInterval = UnionUint32(300)
	}
	if t.IdleTimeout == nil {
		t.IdleTimeout = NokiaTypesL2Tp_BaseIdleTimeout_Enum_infinite
	}
	if t.MaxRetriesEstab == nil {
		var v int32 = 5
		t.MaxRetriesEstab = &v
	}
	if t.MaxRetriesNotEstab == nil {
		var v int32 = 5
		t.MaxRetriesNotEstab = &v
	}
	if t.NextAttempt == 0 {
		t.NextAttempt = NokiaConf_Configure_Groups_Group_Router_L2Tp_NextAttempt_next_preference_level
	}
	if t.PeerAddressChangePolicy == 0 {
		t.PeerAddressChangePolicy = NokiaTypesL2Tp_PeerAddressChangePolicyOption_reject
	}
	if t.ReceiveWindowSize == nil {
		var v uint32 = 64
		t.ReceiveWindowSize = &v
	}
	if t.RtmDebounceTime == nil {
		t.RtmDebounceTime = NokiaTypesL2Tp_RtmDebounceTime_Enum_infinite
	}
	if t.SessionAssignMethod == 0 {
		t.SessionAssignMethod = NokiaTypesL2Tp_BaseSessionAssignMethod_existing_first
	}
	t.EthernetTunnel.PopulateDefaults()
	t.ExcludeAvps.PopulateDefaults()
	t.Failover.PopulateDefaults()
	t.IgnoreAvps.PopulateDefaults()
	t.L2Tpv3.PopulateDefaults()
	t.Lac.PopulateDefaults()
	t.ReplaceResultCode.PopulateDefaults()
	t.TunnelSelectionBlacklist.PopulateDefaults()
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_L2Tp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_L2Tp.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_L2Tp_EthernetTunnel represents the /nokia-conf/configure/groups/group/router/l2tp/ethernet-tunnel YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_L2Tp_EthernetTunnel struct {
	ReconnectTimeout NokiaConf_Configure_Groups_Group_Router_L2Tp_EthernetTunnel_ReconnectTimeout_Union `path:"reconnect-timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_L2Tp_EthernetTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_EthernetTunnel) IsYANGGoStruct() {}

// GetReconnectTimeout retrieves the value of the leaf ReconnectTimeout from the NokiaConf_Configure_Groups_Group_Router_L2Tp_EthernetTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReconnectTimeout is set, it can
// safely use t.GetReconnectTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReconnectTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_EthernetTunnel) GetReconnectTimeout() NokiaConf_Configure_Groups_Group_Router_L2Tp_EthernetTunnel_ReconnectTimeout_Union {
	if t == nil || t.ReconnectTimeout == nil {
		return NokiaTypesL2Tp_BaseV3ReconnectTimeout_Enum_infinite
	}
	return t.ReconnectTimeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_L2Tp_EthernetTunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_EthernetTunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ReconnectTimeout == nil {
		t.ReconnectTimeout = NokiaTypesL2Tp_BaseV3ReconnectTimeout_Enum_infinite
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_EthernetTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_L2Tp_EthernetTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_EthernetTunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_EthernetTunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_L2Tp_EthernetTunnel.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_EthernetTunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_L2Tp_ExcludeAvps represents the /nokia-conf/configure/groups/group/router/l2tp/exclude-avps YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_L2Tp_ExcludeAvps struct {
	CallingNumber       *bool `path:"calling-number" module:"nokia-conf"`
	InitialRxLcpConfReq *bool `path:"initial-rx-lcp-conf-req" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_L2Tp_ExcludeAvps implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_ExcludeAvps) IsYANGGoStruct() {}

// GetCallingNumber retrieves the value of the leaf CallingNumber from the NokiaConf_Configure_Groups_Group_Router_L2Tp_ExcludeAvps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CallingNumber is set, it can
// safely use t.GetCallingNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CallingNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_ExcludeAvps) GetCallingNumber() bool {
	if t == nil || t.CallingNumber == nil {
		return false
	}
	return *t.CallingNumber
}

// GetInitialRxLcpConfReq retrieves the value of the leaf InitialRxLcpConfReq from the NokiaConf_Configure_Groups_Group_Router_L2Tp_ExcludeAvps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialRxLcpConfReq is set, it can
// safely use t.GetInitialRxLcpConfReq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialRxLcpConfReq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_ExcludeAvps) GetInitialRxLcpConfReq() bool {
	if t == nil || t.InitialRxLcpConfReq == nil {
		return false
	}
	return *t.InitialRxLcpConfReq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_L2Tp_ExcludeAvps
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_ExcludeAvps) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CallingNumber == nil {
		var v bool = false
		t.CallingNumber = &v
	}
	if t.InitialRxLcpConfReq == nil {
		var v bool = false
		t.InitialRxLcpConfReq = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_ExcludeAvps) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_L2Tp_ExcludeAvps"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_ExcludeAvps) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_ExcludeAvps) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_L2Tp_ExcludeAvps.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_ExcludeAvps) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover represents the /nokia-conf/configure/groups/group/router/l2tp/failover YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover struct {
	RecoveryMaxSessionLifetime *uint32                                                                                                                                       `path:"recovery-max-session-lifetime" module:"nokia-conf"`
	RecoveryMethod             E_NokiaTypesL2Tp_BaseFailoverRecoveryMethod                                                                                                   `path:"recovery-method" module:"nokia-conf"`
	RecoveryTime               *int32                                                                                                                                        `path:"recovery-time" module:"nokia-conf"`
	TrackSrrp                  map[NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp_Id_Union]*NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp `path:"track-srrp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover) IsYANGGoStruct() {}

// NewTrackSrrp creates a new entry in the TrackSrrp list of the
// NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover) NewTrackSrrp(Id NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp_Id_Union) (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrackSrrp == nil {
		t.TrackSrrp = make(map[NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp_Id_Union]*NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TrackSrrp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TrackSrrp", key)
	}

	t.TrackSrrp[key] = &NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp{
		Id: Id,
	}

	return t.TrackSrrp[key], nil
}

// RenameTrackSrrp renames an entry in the list TrackSrrp within
// the NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover) RenameTrackSrrp(oldK, newK NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp_Id_Union) error {
	if _, ok := t.TrackSrrp[newK]; ok {
		return fmt.Errorf("key %v already exists in TrackSrrp", newK)
	}

	e, ok := t.TrackSrrp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TrackSrrp", oldK)
	}
	e.Id = newK

	t.TrackSrrp[newK] = e
	delete(t.TrackSrrp, oldK)
	return nil
}

// GetOrCreateTrackSrrp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover) GetOrCreateTrackSrrp(Id NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp_Id_Union) *NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp {

	key := Id

	if v, ok := t.TrackSrrp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTrackSrrp(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTrackSrrp got unexpected error: %v", err))
	}
	return v
}

// GetTrackSrrp retrieves the value with the specified key from
// the TrackSrrp map field of NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover) GetTrackSrrp(Id NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp_Id_Union) *NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.TrackSrrp[key]; ok {
		return lm
	}
	return nil
}

// DeleteTrackSrrp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover) DeleteTrackSrrp(Id NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp_Id_Union) {
	key := Id

	delete(t.TrackSrrp, key)
}

// AppendTrackSrrp appends the supplied NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp struct to the
// list TrackSrrp of NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover) AppendTrackSrrp(v *NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp) error {
	key := v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrackSrrp == nil {
		t.TrackSrrp = make(map[NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp_Id_Union]*NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp)
	}

	if _, ok := t.TrackSrrp[key]; ok {
		return fmt.Errorf("duplicate key for list TrackSrrp %v", key)
	}

	t.TrackSrrp[key] = v
	return nil
}

// GetRecoveryMaxSessionLifetime retrieves the value of the leaf RecoveryMaxSessionLifetime from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RecoveryMaxSessionLifetime is set, it can
// safely use t.GetRecoveryMaxSessionLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RecoveryMaxSessionLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover) GetRecoveryMaxSessionLifetime() uint32 {
	if t == nil || t.RecoveryMaxSessionLifetime == nil {
		return 2
	}
	return *t.RecoveryMaxSessionLifetime
}

// GetRecoveryMethod retrieves the value of the leaf RecoveryMethod from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RecoveryMethod is set, it can
// safely use t.GetRecoveryMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RecoveryMethod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover) GetRecoveryMethod() E_NokiaTypesL2Tp_BaseFailoverRecoveryMethod {
	if t == nil || t.RecoveryMethod == 0 {
		return NokiaTypesL2Tp_BaseFailoverRecoveryMethod_mcs
	}
	return t.RecoveryMethod
}

// GetRecoveryTime retrieves the value of the leaf RecoveryTime from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RecoveryTime is set, it can
// safely use t.GetRecoveryTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RecoveryTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover) GetRecoveryTime() int32 {
	if t == nil || t.RecoveryTime == nil {
		return 0
	}
	return *t.RecoveryTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RecoveryMaxSessionLifetime == nil {
		var v uint32 = 2
		t.RecoveryMaxSessionLifetime = &v
	}
	if t.RecoveryMethod == 0 {
		t.RecoveryMethod = NokiaTypesL2Tp_BaseFailoverRecoveryMethod_mcs
	}
	if t.RecoveryTime == nil {
		var v int32 = 0
		t.RecoveryTime = &v
	}
	for _, e := range t.TrackSrrp {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp represents the /nokia-conf/configure/groups/group/router/l2tp/failover/track-srrp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp struct {
	Id      NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp_Id_Union `path:"id" module:"nokia-conf"`
	Peer    *string                                                                  `path:"peer" module:"nokia-conf"`
	SyncTag *string                                                                  `path:"sync-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp) GetId() NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp_Id_Union {
	if t == nil || t.Id == nil {
		return nil
	}
	return t.Id
}

// GetPeer retrieves the value of the leaf Peer from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Peer is set, it can
// safely use t.GetPeer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Peer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp) GetPeer() string {
	if t == nil || t.Peer == nil {
		return ""
	}
	return *t.Peer
}

// GetSyncTag retrieves the value of the leaf SyncTag from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncTag is set, it can
// safely use t.GetSyncTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp) GetSyncTag() string {
	if t == nil || t.SyncTag == nil {
		return ""
	}
	return *t.SyncTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"id": t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Failover_TrackSrrp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_L2Tp_Group represents the /nokia-conf/configure/groups/group/router/l2tp/group YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_L2Tp_Group struct {
	AdminState             E_NokiaTypesSros_AdminState                                            `path:"admin-state" module:"nokia-conf"`
	AvpHiding              E_NokiaTypesL2Tp_ChildAvpHiding                                        `path:"avp-hiding" module:"nokia-conf"`
	Challenge              E_NokiaTypesSros_BoolWithInherit                                       `path:"challenge" module:"nokia-conf"`
	Description            *string                                                                `path:"description" module:"nokia-conf"`
	DestructTimeout        *uint32                                                                `path:"destruct-timeout" module:"nokia-conf"`
	EthernetTunnel         *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_EthernetTunnel     `path:"ethernet-tunnel" module:"nokia-conf"`
	Failover               *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Failover           `path:"failover" module:"nokia-conf"`
	HelloInterval          NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_HelloInterval_Union `path:"hello-interval" module:"nokia-conf"`
	IdleTimeout            NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_IdleTimeout_Union   `path:"idle-timeout" module:"nokia-conf"`
	L2Tpv3                 *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3             `path:"l2tpv3" module:"nokia-conf"`
	Lac                    *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lac                `path:"lac" module:"nokia-conf"`
	Lns                    *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns                `path:"lns" module:"nokia-conf"`
	LocalAddress           *string                                                                `path:"local-address" module:"nokia-conf"`
	LocalName              *string                                                                `path:"local-name" module:"nokia-conf"`
	MaxRetriesEstab        *int32                                                                 `path:"max-retries-estab" module:"nokia-conf"`
	MaxRetriesNotEstab     *int32                                                                 `path:"max-retries-not-estab" module:"nokia-conf"`
	Password               *string                                                                `path:"password" module:"nokia-conf"`
	Protocol               E_NokiaTypesL2Tp_ProtocolVersion                                       `path:"protocol" module:"nokia-conf"`
	RadiusAccountingPolicy *string                                                                `path:"radius-accounting-policy" module:"nokia-conf"`
	ReceiveWindowSize      *uint32                                                                `path:"receive-window-size" module:"nokia-conf"`
	SessionAssignMethod    E_NokiaTypesL2Tp_ChildSessionAssignMethod                              `path:"session-assign-method" module:"nokia-conf"`
	SessionLimit           NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_SessionLimit_Union  `path:"session-limit" module:"nokia-conf"`
	Tunnel                 map[string]*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel  `path:"tunnel" module:"nokia-conf"`
	TunnelGroupName        *string                                                                `path:"tunnel-group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_L2Tp_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) IsYANGGoStruct() {}

// NewTunnel creates a new entry in the Tunnel list of the
// NokiaConf_Configure_Groups_Group_Router_L2Tp_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) NewTunnel(TunnelName string) (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tunnel == nil {
		t.Tunnel = make(map[string]*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel)
	}

	key := TunnelName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Tunnel[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Tunnel", key)
	}

	t.Tunnel[key] = &NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel{
		TunnelName: &TunnelName,
	}

	return t.Tunnel[key], nil
}

// RenameTunnel renames an entry in the list Tunnel within
// the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) RenameTunnel(oldK, newK string) error {
	if _, ok := t.Tunnel[newK]; ok {
		return fmt.Errorf("key %v already exists in Tunnel", newK)
	}

	e, ok := t.Tunnel[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Tunnel", oldK)
	}
	e.TunnelName = &newK

	t.Tunnel[newK] = e
	delete(t.Tunnel, oldK)
	return nil
}

// GetOrCreateTunnel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_L2Tp_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) GetOrCreateTunnel(TunnelName string) *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel {

	key := TunnelName

	if v, ok := t.Tunnel[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTunnel(TunnelName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTunnel got unexpected error: %v", err))
	}
	return v
}

// GetTunnel retrieves the value with the specified key from
// the Tunnel map field of NokiaConf_Configure_Groups_Group_Router_L2Tp_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) GetTunnel(TunnelName string) *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel {

	if t == nil {
		return nil
	}

	key := TunnelName

	if lm, ok := t.Tunnel[key]; ok {
		return lm
	}
	return nil
}

// DeleteTunnel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_L2Tp_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) DeleteTunnel(TunnelName string) {
	key := TunnelName

	delete(t.Tunnel, key)
}

// AppendTunnel appends the supplied NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel struct to the
// list Tunnel of NokiaConf_Configure_Groups_Group_Router_L2Tp_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) AppendTunnel(v *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel) error {
	if v.TunnelName == nil {
		return fmt.Errorf("invalid nil key received for TunnelName")
	}

	key := *v.TunnelName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tunnel == nil {
		t.Tunnel = make(map[string]*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel)
	}

	if _, ok := t.Tunnel[key]; ok {
		return fmt.Errorf("duplicate key for list Tunnel %v", key)
	}

	t.Tunnel[key] = v
	return nil
}

// GetOrCreateEthernetTunnel retrieves the value of the EthernetTunnel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) GetOrCreateEthernetTunnel() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_EthernetTunnel {
	if t.EthernetTunnel != nil {
		return t.EthernetTunnel
	}
	t.EthernetTunnel = &NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_EthernetTunnel{}
	return t.EthernetTunnel
}

// GetOrCreateFailover retrieves the value of the Failover field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) GetOrCreateFailover() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Failover {
	if t.Failover != nil {
		return t.Failover
	}
	t.Failover = &NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Failover{}
	return t.Failover
}

// GetOrCreateL2Tpv3 retrieves the value of the L2Tpv3 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) GetOrCreateL2Tpv3() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3 {
	if t.L2Tpv3 != nil {
		return t.L2Tpv3
	}
	t.L2Tpv3 = &NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3{}
	return t.L2Tpv3
}

// GetOrCreateLac retrieves the value of the Lac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) GetOrCreateLac() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lac {
	if t.Lac != nil {
		return t.Lac
	}
	t.Lac = &NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lac{}
	return t.Lac
}

// GetOrCreateLns retrieves the value of the Lns field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) GetOrCreateLns() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns {
	if t.Lns != nil {
		return t.Lns
	}
	t.Lns = &NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns{}
	return t.Lns
}

// GetEthernetTunnel returns the value of the EthernetTunnel struct pointer
// from NokiaConf_Configure_Groups_Group_Router_L2Tp_Group. If the receiver or the field EthernetTunnel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) GetEthernetTunnel() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_EthernetTunnel {
	if t != nil && t.EthernetTunnel != nil {
		return t.EthernetTunnel
	}
	return nil
}

// GetFailover returns the value of the Failover struct pointer
// from NokiaConf_Configure_Groups_Group_Router_L2Tp_Group. If the receiver or the field Failover is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) GetFailover() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Failover {
	if t != nil && t.Failover != nil {
		return t.Failover
	}
	return nil
}

// GetL2Tpv3 returns the value of the L2Tpv3 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_L2Tp_Group. If the receiver or the field L2Tpv3 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) GetL2Tpv3() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3 {
	if t != nil && t.L2Tpv3 != nil {
		return t.L2Tpv3
	}
	return nil
}

// GetLac returns the value of the Lac struct pointer
// from NokiaConf_Configure_Groups_Group_Router_L2Tp_Group. If the receiver or the field Lac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) GetLac() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lac {
	if t != nil && t.Lac != nil {
		return t.Lac
	}
	return nil
}

// GetLns returns the value of the Lns struct pointer
// from NokiaConf_Configure_Groups_Group_Router_L2Tp_Group. If the receiver or the field Lns is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) GetLns() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns {
	if t != nil && t.Lns != nil {
		return t.Lns
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAvpHiding retrieves the value of the leaf AvpHiding from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AvpHiding is set, it can
// safely use t.GetAvpHiding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AvpHiding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) GetAvpHiding() E_NokiaTypesL2Tp_ChildAvpHiding {
	if t == nil || t.AvpHiding == 0 {
		return 0
	}
	return t.AvpHiding
}

// GetChallenge retrieves the value of the leaf Challenge from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Challenge is set, it can
// safely use t.GetChallenge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Challenge == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) GetChallenge() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.Challenge == 0 {
		return 0
	}
	return t.Challenge
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDestructTimeout retrieves the value of the leaf DestructTimeout from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestructTimeout is set, it can
// safely use t.GetDestructTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestructTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) GetDestructTimeout() uint32 {
	if t == nil || t.DestructTimeout == nil {
		return 0
	}
	return *t.DestructTimeout
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) GetHelloInterval() NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_HelloInterval_Union {
	if t == nil || t.HelloInterval == nil {
		return nil
	}
	return t.HelloInterval
}

// GetIdleTimeout retrieves the value of the leaf IdleTimeout from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleTimeout is set, it can
// safely use t.GetIdleTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) GetIdleTimeout() NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_IdleTimeout_Union {
	if t == nil || t.IdleTimeout == nil {
		return nil
	}
	return t.IdleTimeout
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetLocalName retrieves the value of the leaf LocalName from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalName is set, it can
// safely use t.GetLocalName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) GetLocalName() string {
	if t == nil || t.LocalName == nil {
		return ""
	}
	return *t.LocalName
}

// GetMaxRetriesEstab retrieves the value of the leaf MaxRetriesEstab from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRetriesEstab is set, it can
// safely use t.GetMaxRetriesEstab() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRetriesEstab == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) GetMaxRetriesEstab() int32 {
	if t == nil || t.MaxRetriesEstab == nil {
		return 0
	}
	return *t.MaxRetriesEstab
}

// GetMaxRetriesNotEstab retrieves the value of the leaf MaxRetriesNotEstab from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRetriesNotEstab is set, it can
// safely use t.GetMaxRetriesNotEstab() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRetriesNotEstab == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) GetMaxRetriesNotEstab() int32 {
	if t == nil || t.MaxRetriesNotEstab == nil {
		return 0
	}
	return *t.MaxRetriesNotEstab
}

// GetPassword retrieves the value of the leaf Password from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetProtocol retrieves the value of the leaf Protocol from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) GetProtocol() E_NokiaTypesL2Tp_ProtocolVersion {
	if t == nil || t.Protocol == 0 {
		return NokiaTypesL2Tp_ProtocolVersion_v2
	}
	return t.Protocol
}

// GetRadiusAccountingPolicy retrieves the value of the leaf RadiusAccountingPolicy from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusAccountingPolicy is set, it can
// safely use t.GetRadiusAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusAccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) GetRadiusAccountingPolicy() string {
	if t == nil || t.RadiusAccountingPolicy == nil {
		return ""
	}
	return *t.RadiusAccountingPolicy
}

// GetReceiveWindowSize retrieves the value of the leaf ReceiveWindowSize from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceiveWindowSize is set, it can
// safely use t.GetReceiveWindowSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceiveWindowSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) GetReceiveWindowSize() uint32 {
	if t == nil || t.ReceiveWindowSize == nil {
		return 0
	}
	return *t.ReceiveWindowSize
}

// GetSessionAssignMethod retrieves the value of the leaf SessionAssignMethod from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionAssignMethod is set, it can
// safely use t.GetSessionAssignMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionAssignMethod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) GetSessionAssignMethod() E_NokiaTypesL2Tp_ChildSessionAssignMethod {
	if t == nil || t.SessionAssignMethod == 0 {
		return 0
	}
	return t.SessionAssignMethod
}

// GetSessionLimit retrieves the value of the leaf SessionLimit from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionLimit is set, it can
// safely use t.GetSessionLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) GetSessionLimit() NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_SessionLimit_Union {
	if t == nil || t.SessionLimit == nil {
		return nil
	}
	return t.SessionLimit
}

// GetTunnelGroupName retrieves the value of the leaf TunnelGroupName from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelGroupName is set, it can
// safely use t.GetTunnelGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) GetTunnelGroupName() string {
	if t == nil || t.TunnelGroupName == nil {
		return ""
	}
	return *t.TunnelGroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Protocol == 0 {
		t.Protocol = NokiaTypesL2Tp_ProtocolVersion_v2
	}
	t.EthernetTunnel.PopulateDefaults()
	t.Failover.PopulateDefaults()
	t.L2Tpv3.PopulateDefaults()
	t.Lac.PopulateDefaults()
	t.Lns.PopulateDefaults()
	for _, e := range t.Tunnel {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TunnelGroupName == nil {
		return nil, fmt.Errorf("nil value for key TunnelGroupName")
	}

	return map[string]interface{}{
		"tunnel-group-name": *t.TunnelGroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_L2Tp_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_L2Tp_Group.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_EthernetTunnel represents the /nokia-conf/configure/groups/group/router/l2tp/group/ethernet-tunnel YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_EthernetTunnel struct {
	ReconnectTimeout NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_EthernetTunnel_ReconnectTimeout_Union `path:"reconnect-timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_EthernetTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_EthernetTunnel) IsYANGGoStruct() {}

// GetReconnectTimeout retrieves the value of the leaf ReconnectTimeout from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_EthernetTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReconnectTimeout is set, it can
// safely use t.GetReconnectTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReconnectTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_EthernetTunnel) GetReconnectTimeout() NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_EthernetTunnel_ReconnectTimeout_Union {
	if t == nil || t.ReconnectTimeout == nil {
		return nil
	}
	return t.ReconnectTimeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_EthernetTunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_EthernetTunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_EthernetTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_EthernetTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_EthernetTunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_EthernetTunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_EthernetTunnel.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_EthernetTunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Failover represents the /nokia-conf/configure/groups/group/router/l2tp/group/failover YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Failover struct {
	RecoveryMethod E_NokiaTypesL2Tp_ChildFailoverRecoveryMethod `path:"recovery-method" module:"nokia-conf"`
	RecoveryTime   *int32                                       `path:"recovery-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Failover implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Failover) IsYANGGoStruct() {}

// GetRecoveryMethod retrieves the value of the leaf RecoveryMethod from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RecoveryMethod is set, it can
// safely use t.GetRecoveryMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RecoveryMethod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Failover) GetRecoveryMethod() E_NokiaTypesL2Tp_ChildFailoverRecoveryMethod {
	if t == nil || t.RecoveryMethod == 0 {
		return 0
	}
	return t.RecoveryMethod
}

// GetRecoveryTime retrieves the value of the leaf RecoveryTime from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RecoveryTime is set, it can
// safely use t.GetRecoveryTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RecoveryTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Failover) GetRecoveryTime() int32 {
	if t == nil || t.RecoveryTime == nil {
		return 0
	}
	return *t.RecoveryTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Failover
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Failover) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Failover) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Failover"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Failover) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Failover) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Failover.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Failover) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3 represents the /nokia-conf/configure/groups/group/router/l2tp/group/l2tpv3 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3 struct {
	CookieLength        NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3_CookieLength_Union        `path:"cookie-length" module:"nokia-conf"`
	DigestType          E_NokiaTypesL2Tp_ChildV3DigestType                                                  `path:"digest-type" module:"nokia-conf"`
	NonceLength         *int32                                                                              `path:"nonce-length" module:"nokia-conf"`
	Password            *string                                                                             `path:"password" module:"nokia-conf"`
	PrivateTcpMssAdjust NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3_PrivateTcpMssAdjust_Union `path:"private-tcp-mss-adjust" module:"nokia-conf"`
	PublicTcpMssAdjust  NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3_PublicTcpMssAdjust_Union  `path:"public-tcp-mss-adjust" module:"nokia-conf"`
	PwCapList           *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3_PwCapList                `path:"pw-cap-list" module:"nokia-conf"`
	RemRouterId         *string                                                                             `path:"rem-router-id" module:"nokia-conf"`
	TrackPasswordChange *bool                                                                               `path:"track-password-change" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3) IsYANGGoStruct() {}

// GetOrCreatePwCapList retrieves the value of the PwCapList field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3) GetOrCreatePwCapList() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3_PwCapList {
	if t.PwCapList != nil {
		return t.PwCapList
	}
	t.PwCapList = &NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3_PwCapList{}
	return t.PwCapList
}

// GetPwCapList returns the value of the PwCapList struct pointer
// from NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3. If the receiver or the field PwCapList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3) GetPwCapList() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3_PwCapList {
	if t != nil && t.PwCapList != nil {
		return t.PwCapList
	}
	return nil
}

// GetCookieLength retrieves the value of the leaf CookieLength from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CookieLength is set, it can
// safely use t.GetCookieLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CookieLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3) GetCookieLength() NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3_CookieLength_Union {
	if t == nil || t.CookieLength == nil {
		return nil
	}
	return t.CookieLength
}

// GetDigestType retrieves the value of the leaf DigestType from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DigestType is set, it can
// safely use t.GetDigestType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DigestType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3) GetDigestType() E_NokiaTypesL2Tp_ChildV3DigestType {
	if t == nil || t.DigestType == 0 {
		return 0
	}
	return t.DigestType
}

// GetNonceLength retrieves the value of the leaf NonceLength from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NonceLength is set, it can
// safely use t.GetNonceLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NonceLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3) GetNonceLength() int32 {
	if t == nil || t.NonceLength == nil {
		return 0
	}
	return *t.NonceLength
}

// GetPassword retrieves the value of the leaf Password from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetPrivateTcpMssAdjust retrieves the value of the leaf PrivateTcpMssAdjust from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrivateTcpMssAdjust is set, it can
// safely use t.GetPrivateTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrivateTcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3) GetPrivateTcpMssAdjust() NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3_PrivateTcpMssAdjust_Union {
	if t == nil || t.PrivateTcpMssAdjust == nil {
		return nil
	}
	return t.PrivateTcpMssAdjust
}

// GetPublicTcpMssAdjust retrieves the value of the leaf PublicTcpMssAdjust from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PublicTcpMssAdjust is set, it can
// safely use t.GetPublicTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PublicTcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3) GetPublicTcpMssAdjust() NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3_PublicTcpMssAdjust_Union {
	if t == nil || t.PublicTcpMssAdjust == nil {
		return nil
	}
	return t.PublicTcpMssAdjust
}

// GetRemRouterId retrieves the value of the leaf RemRouterId from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemRouterId is set, it can
// safely use t.GetRemRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemRouterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3) GetRemRouterId() string {
	if t == nil || t.RemRouterId == nil {
		return "0.0.0.0"
	}
	return *t.RemRouterId
}

// GetTrackPasswordChange retrieves the value of the leaf TrackPasswordChange from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrackPasswordChange is set, it can
// safely use t.GetTrackPasswordChange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrackPasswordChange == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3) GetTrackPasswordChange() bool {
	if t == nil || t.TrackPasswordChange == nil {
		return false
	}
	return *t.TrackPasswordChange
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RemRouterId == nil {
		var v string = "0.0.0.0"
		t.RemRouterId = &v
	}
	if t.TrackPasswordChange == nil {
		var v bool = false
		t.TrackPasswordChange = &v
	}
	t.PwCapList.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3_PwCapList represents the /nokia-conf/configure/groups/group/router/l2tp/group/l2tpv3/pw-cap-list YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3_PwCapList struct {
	Ethernet     *bool `path:"ethernet" module:"nokia-conf"`
	EthernetVlan *bool `path:"ethernet-vlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3_PwCapList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3_PwCapList) IsYANGGoStruct() {}

// GetEthernet retrieves the value of the leaf Ethernet from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3_PwCapList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ethernet is set, it can
// safely use t.GetEthernet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ethernet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3_PwCapList) GetEthernet() bool {
	if t == nil || t.Ethernet == nil {
		return false
	}
	return *t.Ethernet
}

// GetEthernetVlan retrieves the value of the leaf EthernetVlan from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3_PwCapList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EthernetVlan is set, it can
// safely use t.GetEthernetVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EthernetVlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3_PwCapList) GetEthernetVlan() bool {
	if t == nil || t.EthernetVlan == nil {
		return false
	}
	return *t.EthernetVlan
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3_PwCapList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3_PwCapList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ethernet == nil {
		var v bool = false
		t.Ethernet = &v
	}
	if t.EthernetVlan == nil {
		var v bool = false
		t.EthernetVlan = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3_PwCapList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3_PwCapList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3_PwCapList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3_PwCapList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3_PwCapList.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_L2Tpv3_PwCapList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lac represents the /nokia-conf/configure/groups/group/router/l2tp/group/lac YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lac struct {
	DfBit E_NokiaTypesSros_BoolWithInherit `path:"df-bit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lac) IsYANGGoStruct() {}

// GetDfBit retrieves the value of the leaf DfBit from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DfBit is set, it can
// safely use t.GetDfBit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DfBit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lac) GetDfBit() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.DfBit == 0 {
		return 0
	}
	return t.DfBit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lac.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns represents the /nokia-conf/configure/groups/group/router/l2tp/group/lns YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns struct {
	LnsGroup          *uint32                                                       `path:"lns-group" module:"nokia-conf"`
	LoadBalanceMethod E_NokiaTypesL2Tp_BaseLoadBalanceMethod                        `path:"load-balance-method" module:"nokia-conf"`
	Mlppp             *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp `path:"mlppp" module:"nokia-conf" yangPresence:"true"`
	Ppp               *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp   `path:"ppp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns) IsYANGGoStruct() {}

// GetOrCreateMlppp retrieves the value of the Mlppp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns) GetOrCreateMlppp() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp {
	if t.Mlppp != nil {
		return t.Mlppp
	}
	t.Mlppp = &NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp{}
	return t.Mlppp
}

// GetOrCreatePpp retrieves the value of the Ppp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns) GetOrCreatePpp() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp {
	if t.Ppp != nil {
		return t.Ppp
	}
	t.Ppp = &NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp{}
	return t.Ppp
}

// GetMlppp returns the value of the Mlppp struct pointer
// from NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns. If the receiver or the field Mlppp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns) GetMlppp() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp {
	if t != nil && t.Mlppp != nil {
		return t.Mlppp
	}
	return nil
}

// GetPpp returns the value of the Ppp struct pointer
// from NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns. If the receiver or the field Ppp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns) GetPpp() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp {
	if t != nil && t.Ppp != nil {
		return t.Ppp
	}
	return nil
}

// GetLnsGroup retrieves the value of the leaf LnsGroup from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LnsGroup is set, it can
// safely use t.GetLnsGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LnsGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns) GetLnsGroup() uint32 {
	if t == nil || t.LnsGroup == nil {
		return 0
	}
	return *t.LnsGroup
}

// GetLoadBalanceMethod retrieves the value of the leaf LoadBalanceMethod from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadBalanceMethod is set, it can
// safely use t.GetLoadBalanceMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadBalanceMethod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns) GetLoadBalanceMethod() E_NokiaTypesL2Tp_BaseLoadBalanceMethod {
	if t == nil || t.LoadBalanceMethod == 0 {
		return NokiaTypesL2Tp_BaseLoadBalanceMethod_per_session
	}
	return t.LoadBalanceMethod
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LoadBalanceMethod == 0 {
		t.LoadBalanceMethod = NokiaTypesL2Tp_BaseLoadBalanceMethod_per_session
	}
	t.Mlppp.PopulateDefaults()
	t.Ppp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns) ΛBelongingModule() string {
	return "nokia-conf"
}
