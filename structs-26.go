/*
Package ygotsros is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.20.0/genutil/names.go
using the following YANG input files:
	- nokia/YANG/nokia-combined/nokia-conf.yang
Imported modules were sourced from:
	- nokia/YANG/...
*/
package ygotsros

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NokiaConf_Configure_Service_Vpls_CaptureSap_RouterSolicit represents the /nokia-conf/configure/service/vpls/capture-sap/router-solicit YANG schema element.
type NokiaConf_Configure_Service_Vpls_CaptureSap_RouterSolicit struct {
	UserDb *string `path:"user-db" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_CaptureSap_RouterSolicit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_CaptureSap_RouterSolicit) IsYANGGoStruct() {}

// GetUserDb retrieves the value of the leaf UserDb from the NokiaConf_Configure_Service_Vpls_CaptureSap_RouterSolicit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserDb is set, it can
// safely use t.GetUserDb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserDb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_RouterSolicit) GetUserDb() string {
	if t == nil || t.UserDb == nil {
		return ""
	}
	return *t.UserDb
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_CaptureSap_RouterSolicit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_RouterSolicit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_RouterSolicit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_CaptureSap_RouterSolicit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_RouterSolicit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_RouterSolicit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_CaptureSap_RouterSolicit.
func (*NokiaConf_Configure_Service_Vpls_CaptureSap_RouterSolicit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_CaptureSap_TriggerPacket represents the /nokia-conf/configure/service/vpls/capture-sap/trigger-packet YANG schema element.
type NokiaConf_Configure_Service_Vpls_CaptureSap_TriggerPacket struct {
	Arp        *bool `path:"arp" module:"nokia-conf"`
	Data       *bool `path:"data" module:"nokia-conf"`
	Dhcp       *bool `path:"dhcp" module:"nokia-conf"`
	Dhcp6      *bool `path:"dhcp6" module:"nokia-conf"`
	Pppoe      *bool `path:"pppoe" module:"nokia-conf"`
	RtrSolicit *bool `path:"rtr-solicit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_CaptureSap_TriggerPacket implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_CaptureSap_TriggerPacket) IsYANGGoStruct() {}

// GetArp retrieves the value of the leaf Arp from the NokiaConf_Configure_Service_Vpls_CaptureSap_TriggerPacket
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Arp is set, it can
// safely use t.GetArp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Arp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_TriggerPacket) GetArp() bool {
	if t == nil || t.Arp == nil {
		return false
	}
	return *t.Arp
}

// GetData retrieves the value of the leaf Data from the NokiaConf_Configure_Service_Vpls_CaptureSap_TriggerPacket
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Data is set, it can
// safely use t.GetData() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Data == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_TriggerPacket) GetData() bool {
	if t == nil || t.Data == nil {
		return false
	}
	return *t.Data
}

// GetDhcp retrieves the value of the leaf Dhcp from the NokiaConf_Configure_Service_Vpls_CaptureSap_TriggerPacket
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcp is set, it can
// safely use t.GetDhcp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_TriggerPacket) GetDhcp() bool {
	if t == nil || t.Dhcp == nil {
		return false
	}
	return *t.Dhcp
}

// GetDhcp6 retrieves the value of the leaf Dhcp6 from the NokiaConf_Configure_Service_Vpls_CaptureSap_TriggerPacket
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcp6 is set, it can
// safely use t.GetDhcp6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcp6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_TriggerPacket) GetDhcp6() bool {
	if t == nil || t.Dhcp6 == nil {
		return false
	}
	return *t.Dhcp6
}

// GetPppoe retrieves the value of the leaf Pppoe from the NokiaConf_Configure_Service_Vpls_CaptureSap_TriggerPacket
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pppoe is set, it can
// safely use t.GetPppoe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pppoe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_TriggerPacket) GetPppoe() bool {
	if t == nil || t.Pppoe == nil {
		return false
	}
	return *t.Pppoe
}

// GetRtrSolicit retrieves the value of the leaf RtrSolicit from the NokiaConf_Configure_Service_Vpls_CaptureSap_TriggerPacket
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RtrSolicit is set, it can
// safely use t.GetRtrSolicit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RtrSolicit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_TriggerPacket) GetRtrSolicit() bool {
	if t == nil || t.RtrSolicit == nil {
		return false
	}
	return *t.RtrSolicit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_CaptureSap_TriggerPacket
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_TriggerPacket) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Arp == nil {
		var v bool = false
		t.Arp = &v
	}
	if t.Data == nil {
		var v bool = false
		t.Data = &v
	}
	if t.Dhcp == nil {
		var v bool = false
		t.Dhcp = &v
	}
	if t.Dhcp6 == nil {
		var v bool = false
		t.Dhcp6 = &v
	}
	if t.Pppoe == nil {
		var v bool = false
		t.Pppoe = &v
	}
	if t.RtrSolicit == nil {
		var v bool = false
		t.RtrSolicit = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_TriggerPacket) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_CaptureSap_TriggerPacket"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_TriggerPacket) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_CaptureSap_TriggerPacket) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_CaptureSap_TriggerPacket.
func (*NokiaConf_Configure_Service_Vpls_CaptureSap_TriggerPacket) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Endpoint represents the /nokia-conf/configure/service/vpls/endpoint YANG schema element.
type NokiaConf_Configure_Service_Vpls_Endpoint struct {
	ApplyGroups              []string                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude       []string                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	BlockOnMeshFailure       *bool                                                      `path:"block-on-mesh-failure" module:"nokia-conf"`
	Description              *string                                                    `path:"description" module:"nokia-conf"`
	Fdb                      *NokiaConf_Configure_Service_Vpls_Endpoint_Fdb             `path:"fdb" module:"nokia-conf"`
	IgnoreStandbySignaling   *bool                                                      `path:"ignore-standby-signaling" module:"nokia-conf"`
	Name                     *string                                                    `path:"name" module:"nokia-conf"`
	RevertTime               NokiaConf_Configure_Service_Vpls_Endpoint_RevertTime_Union `path:"revert-time" module:"nokia-conf"`
	SuppressStandbySignaling *bool                                                      `path:"suppress-standby-signaling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Endpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Endpoint) IsYANGGoStruct() {}

// GetOrCreateFdb retrieves the value of the Fdb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Endpoint) GetOrCreateFdb() *NokiaConf_Configure_Service_Vpls_Endpoint_Fdb {
	if t.Fdb != nil {
		return t.Fdb
	}
	t.Fdb = &NokiaConf_Configure_Service_Vpls_Endpoint_Fdb{}
	return t.Fdb
}

// GetFdb returns the value of the Fdb struct pointer
// from NokiaConf_Configure_Service_Vpls_Endpoint. If the receiver or the field Fdb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Endpoint) GetFdb() *NokiaConf_Configure_Service_Vpls_Endpoint_Fdb {
	if t != nil && t.Fdb != nil {
		return t.Fdb
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Endpoint) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Endpoint) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBlockOnMeshFailure retrieves the value of the leaf BlockOnMeshFailure from the NokiaConf_Configure_Service_Vpls_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockOnMeshFailure is set, it can
// safely use t.GetBlockOnMeshFailure() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockOnMeshFailure == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Endpoint) GetBlockOnMeshFailure() bool {
	if t == nil || t.BlockOnMeshFailure == nil {
		return false
	}
	return *t.BlockOnMeshFailure
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vpls_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Endpoint) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIgnoreStandbySignaling retrieves the value of the leaf IgnoreStandbySignaling from the NokiaConf_Configure_Service_Vpls_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreStandbySignaling is set, it can
// safely use t.GetIgnoreStandbySignaling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreStandbySignaling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Endpoint) GetIgnoreStandbySignaling() bool {
	if t == nil || t.IgnoreStandbySignaling == nil {
		return false
	}
	return *t.IgnoreStandbySignaling
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Vpls_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Endpoint) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRevertTime retrieves the value of the leaf RevertTime from the NokiaConf_Configure_Service_Vpls_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RevertTime is set, it can
// safely use t.GetRevertTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RevertTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Endpoint) GetRevertTime() NokiaConf_Configure_Service_Vpls_Endpoint_RevertTime_Union {
	if t == nil || t.RevertTime == nil {
		return NokiaTypesServices_RevertTime_Enum_immediate
	}
	return t.RevertTime
}

// GetSuppressStandbySignaling retrieves the value of the leaf SuppressStandbySignaling from the NokiaConf_Configure_Service_Vpls_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SuppressStandbySignaling is set, it can
// safely use t.GetSuppressStandbySignaling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SuppressStandbySignaling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Endpoint) GetSuppressStandbySignaling() bool {
	if t == nil || t.SuppressStandbySignaling == nil {
		return true
	}
	return *t.SuppressStandbySignaling
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Endpoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Endpoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BlockOnMeshFailure == nil {
		var v bool = false
		t.BlockOnMeshFailure = &v
	}
	if t.IgnoreStandbySignaling == nil {
		var v bool = false
		t.IgnoreStandbySignaling = &v
	}
	if t.RevertTime == nil {
		t.RevertTime = NokiaTypesServices_RevertTime_Enum_immediate
	}
	if t.SuppressStandbySignaling == nil {
		var v bool = true
		t.SuppressStandbySignaling = &v
	}
	t.Fdb.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Endpoint struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Endpoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Endpoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Endpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Endpoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Endpoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Endpoint.
func (*NokiaConf_Configure_Service_Vpls_Endpoint) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Endpoint_Fdb represents the /nokia-conf/configure/service/vpls/endpoint/fdb YANG schema element.
type NokiaConf_Configure_Service_Vpls_Endpoint_Fdb struct {
	AutoLearnMacProtect            *bool                                                  `path:"auto-learn-mac-protect" module:"nokia-conf"`
	MacPinning                     *bool                                                  `path:"mac-pinning" module:"nokia-conf"`
	MaximumMacAddresses            *int32                                                 `path:"maximum-mac-addresses" module:"nokia-conf"`
	ProtectedSrcMacViolationAction E_NokiaTypesServices_SdpProtectedSrcMacViolationAction `path:"protected-src-mac-violation-action" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Endpoint_Fdb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Endpoint_Fdb) IsYANGGoStruct() {}

// GetAutoLearnMacProtect retrieves the value of the leaf AutoLearnMacProtect from the NokiaConf_Configure_Service_Vpls_Endpoint_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoLearnMacProtect is set, it can
// safely use t.GetAutoLearnMacProtect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoLearnMacProtect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Endpoint_Fdb) GetAutoLearnMacProtect() bool {
	if t == nil || t.AutoLearnMacProtect == nil {
		return false
	}
	return *t.AutoLearnMacProtect
}

// GetMacPinning retrieves the value of the leaf MacPinning from the NokiaConf_Configure_Service_Vpls_Endpoint_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacPinning is set, it can
// safely use t.GetMacPinning() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacPinning == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Endpoint_Fdb) GetMacPinning() bool {
	if t == nil || t.MacPinning == nil {
		return false
	}
	return *t.MacPinning
}

// GetMaximumMacAddresses retrieves the value of the leaf MaximumMacAddresses from the NokiaConf_Configure_Service_Vpls_Endpoint_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumMacAddresses is set, it can
// safely use t.GetMaximumMacAddresses() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumMacAddresses == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Endpoint_Fdb) GetMaximumMacAddresses() int32 {
	if t == nil || t.MaximumMacAddresses == nil {
		return 0
	}
	return *t.MaximumMacAddresses
}

// GetProtectedSrcMacViolationAction retrieves the value of the leaf ProtectedSrcMacViolationAction from the NokiaConf_Configure_Service_Vpls_Endpoint_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtectedSrcMacViolationAction is set, it can
// safely use t.GetProtectedSrcMacViolationAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtectedSrcMacViolationAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Endpoint_Fdb) GetProtectedSrcMacViolationAction() E_NokiaTypesServices_SdpProtectedSrcMacViolationAction {
	if t == nil || t.ProtectedSrcMacViolationAction == 0 {
		return 0
	}
	return t.ProtectedSrcMacViolationAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Endpoint_Fdb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Endpoint_Fdb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AutoLearnMacProtect == nil {
		var v bool = false
		t.AutoLearnMacProtect = &v
	}
	if t.MacPinning == nil {
		var v bool = false
		t.MacPinning = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Endpoint_Fdb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Endpoint_Fdb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Endpoint_Fdb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Endpoint_Fdb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Endpoint_Fdb.
func (*NokiaConf_Configure_Service_Vpls_Endpoint_Fdb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_EthCfm represents the /nokia-conf/configure/service/vpls/eth-cfm YANG schema element.
type NokiaConf_Configure_Service_Vpls_EthCfm struct {
	ApplyGroups        []string                                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	Mep                map[NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Key]*NokiaConf_Configure_Service_Vpls_EthCfm_Mep `path:"mep" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_EthCfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_EthCfm) IsYANGGoStruct() {}

// NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Key represents the key for list Mep of element /nokia-conf/configure/service/vpls/eth-cfm.
type NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Key struct {
	MdAdminName string `path:"md-admin-name"`
	MaAdminName string `path:"ma-admin-name"`
	MepId       uint16 `path:"mep-id"`
}

// NewMep creates a new entry in the Mep list of the
// NokiaConf_Configure_Service_Vpls_EthCfm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm) NewMep(MdAdminName string, MaAdminName string, MepId uint16) (*NokiaConf_Configure_Service_Vpls_EthCfm_Mep, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Key]*NokiaConf_Configure_Service_Vpls_EthCfm_Mep)
	}

	key := NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mep[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mep", key)
	}

	t.Mep[key] = &NokiaConf_Configure_Service_Vpls_EthCfm_Mep{
		MdAdminName: &MdAdminName,
		MaAdminName: &MaAdminName,
		MepId:       &MepId,
	}

	return t.Mep[key], nil
}

// RenameMep renames an entry in the list Mep within
// the NokiaConf_Configure_Service_Vpls_EthCfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm) RenameMep(oldK, newK NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Key) error {
	if _, ok := t.Mep[newK]; ok {
		return fmt.Errorf("key %v already exists in Mep", newK)
	}

	e, ok := t.Mep[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mep", oldK)
	}
	e.MdAdminName = &newK.MdAdminName
	e.MaAdminName = &newK.MaAdminName
	e.MepId = &newK.MepId

	t.Mep[newK] = e
	delete(t.Mep, oldK)
	return nil
}

// GetOrCreateMep retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_EthCfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm) GetOrCreateMep(MdAdminName string, MaAdminName string, MepId uint16) *NokiaConf_Configure_Service_Vpls_EthCfm_Mep {

	key := NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if v, ok := t.Mep[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMep(MdAdminName, MaAdminName, MepId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMep got unexpected error: %v", err))
	}
	return v
}

// GetMep retrieves the value with the specified key from
// the Mep map field of NokiaConf_Configure_Service_Vpls_EthCfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm) GetMep(MdAdminName string, MaAdminName string, MepId uint16) *NokiaConf_Configure_Service_Vpls_EthCfm_Mep {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if lm, ok := t.Mep[key]; ok {
		return lm
	}
	return nil
}

// DeleteMep deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_EthCfm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm) DeleteMep(MdAdminName string, MaAdminName string, MepId uint16) {
	key := NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	delete(t.Mep, key)
}

// AppendMep appends the supplied NokiaConf_Configure_Service_Vpls_EthCfm_Mep struct to the
// list Mep of NokiaConf_Configure_Service_Vpls_EthCfm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_EthCfm_Mep already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm) AppendMep(v *NokiaConf_Configure_Service_Vpls_EthCfm_Mep) error {
	if v.MdAdminName == nil {
		return fmt.Errorf("invalid nil key for MdAdminName")
	}

	if v.MaAdminName == nil {
		return fmt.Errorf("invalid nil key for MaAdminName")
	}

	if v.MepId == nil {
		return fmt.Errorf("invalid nil key for MepId")
	}

	key := NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Key{
		MdAdminName: *v.MdAdminName,
		MaAdminName: *v.MaAdminName,
		MepId:       *v.MepId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Key]*NokiaConf_Configure_Service_Vpls_EthCfm_Mep)
	}

	if _, ok := t.Mep[key]; ok {
		return fmt.Errorf("duplicate key for list Mep %v", key)
	}

	t.Mep[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_EthCfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Mep {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_EthCfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_EthCfm.
func (*NokiaConf_Configure_Service_Vpls_EthCfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_EthCfm_Mep represents the /nokia-conf/configure/service/vpls/eth-cfm/mep YANG schema element.
type NokiaConf_Configure_Service_Vpls_EthCfm_Mep struct {
	AdminState           E_NokiaTypesSros_AdminState                                    `path:"admin-state" module:"nokia-conf"`
	AlarmNotification    *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_AlarmNotification `path:"alarm-notification" module:"nokia-conf"`
	ApplyGroups          []string                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Ccm                  *bool                                                          `path:"ccm" module:"nokia-conf"`
	CcmLtmPriority       *uint8                                                         `path:"ccm-ltm-priority" module:"nokia-conf"`
	CcmPaddingSize       *uint32                                                        `path:"ccm-padding-size" module:"nokia-conf"`
	CfmVlanTag           *string                                                        `path:"cfm-vlan-tag" module:"nokia-conf"`
	Description          *string                                                        `path:"description" module:"nokia-conf"`
	EthTest              *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest           `path:"eth-test" module:"nokia-conf" yangPresence:"true"`
	Grace                *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace             `path:"grace" module:"nokia-conf"`
	LowPriorityDefect    E_NokiaTypesEthCfm_LowestAlarmPriority                         `path:"low-priority-defect" module:"nokia-conf"`
	MaAdminName          *string                                                        `path:"ma-admin-name" module:"nokia-conf"`
	MacAddress           *string                                                        `path:"mac-address" module:"nokia-conf"`
	MdAdminName          *string                                                        `path:"md-admin-name" module:"nokia-conf"`
	MepId                *uint16                                                        `path:"mep-id" module:"nokia-conf"`
	OneWayDelayThreshold *uint32                                                        `path:"one-way-delay-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_EthCfm_Mep implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_EthCfm_Mep) IsYANGGoStruct() {}

// GetOrCreateAlarmNotification retrieves the value of the AlarmNotification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep) GetOrCreateAlarmNotification() *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_AlarmNotification {
	if t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	t.AlarmNotification = &NokiaConf_Configure_Service_Vpls_EthCfm_Mep_AlarmNotification{}
	return t.AlarmNotification
}

// GetOrCreateEthTest retrieves the value of the EthTest field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep) GetOrCreateEthTest() *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest {
	if t.EthTest != nil {
		return t.EthTest
	}
	t.EthTest = &NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest{}
	return t.EthTest
}

// GetOrCreateGrace retrieves the value of the Grace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep) GetOrCreateGrace() *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace {
	if t.Grace != nil {
		return t.Grace
	}
	t.Grace = &NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace{}
	return t.Grace
}

// GetAlarmNotification returns the value of the AlarmNotification struct pointer
// from NokiaConf_Configure_Service_Vpls_EthCfm_Mep. If the receiver or the field AlarmNotification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep) GetAlarmNotification() *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_AlarmNotification {
	if t != nil && t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	return nil
}

// GetEthTest returns the value of the EthTest struct pointer
// from NokiaConf_Configure_Service_Vpls_EthCfm_Mep. If the receiver or the field EthTest is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep) GetEthTest() *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest {
	if t != nil && t.EthTest != nil {
		return t.EthTest
	}
	return nil
}

// GetGrace returns the value of the Grace struct pointer
// from NokiaConf_Configure_Service_Vpls_EthCfm_Mep. If the receiver or the field Grace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep) GetGrace() *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace {
	if t != nil && t.Grace != nil {
		return t.Grace
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCcm retrieves the value of the leaf Ccm from the NokiaConf_Configure_Service_Vpls_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ccm is set, it can
// safely use t.GetCcm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ccm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep) GetCcm() bool {
	if t == nil || t.Ccm == nil {
		return false
	}
	return *t.Ccm
}

// GetCcmLtmPriority retrieves the value of the leaf CcmLtmPriority from the NokiaConf_Configure_Service_Vpls_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmLtmPriority is set, it can
// safely use t.GetCcmLtmPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmLtmPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep) GetCcmLtmPriority() uint8 {
	if t == nil || t.CcmLtmPriority == nil {
		return 7
	}
	return *t.CcmLtmPriority
}

// GetCcmPaddingSize retrieves the value of the leaf CcmPaddingSize from the NokiaConf_Configure_Service_Vpls_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmPaddingSize is set, it can
// safely use t.GetCcmPaddingSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmPaddingSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep) GetCcmPaddingSize() uint32 {
	if t == nil || t.CcmPaddingSize == nil {
		return 0
	}
	return *t.CcmPaddingSize
}

// GetCfmVlanTag retrieves the value of the leaf CfmVlanTag from the NokiaConf_Configure_Service_Vpls_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CfmVlanTag is set, it can
// safely use t.GetCfmVlanTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CfmVlanTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep) GetCfmVlanTag() string {
	if t == nil || t.CfmVlanTag == nil {
		return ""
	}
	return *t.CfmVlanTag
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vpls_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLowPriorityDefect retrieves the value of the leaf LowPriorityDefect from the NokiaConf_Configure_Service_Vpls_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPriorityDefect is set, it can
// safely use t.GetLowPriorityDefect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPriorityDefect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep) GetLowPriorityDefect() E_NokiaTypesEthCfm_LowestAlarmPriority {
	if t == nil || t.LowPriorityDefect == 0 {
		return NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	return t.LowPriorityDefect
}

// GetMaAdminName retrieves the value of the leaf MaAdminName from the NokiaConf_Configure_Service_Vpls_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaAdminName is set, it can
// safely use t.GetMaAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep) GetMaAdminName() string {
	if t == nil || t.MaAdminName == nil {
		return ""
	}
	return *t.MaAdminName
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Service_Vpls_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetMdAdminName retrieves the value of the leaf MdAdminName from the NokiaConf_Configure_Service_Vpls_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdAdminName is set, it can
// safely use t.GetMdAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep) GetMdAdminName() string {
	if t == nil || t.MdAdminName == nil {
		return ""
	}
	return *t.MdAdminName
}

// GetMepId retrieves the value of the leaf MepId from the NokiaConf_Configure_Service_Vpls_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MepId is set, it can
// safely use t.GetMepId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MepId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep) GetMepId() uint16 {
	if t == nil || t.MepId == nil {
		return 0
	}
	return *t.MepId
}

// GetOneWayDelayThreshold retrieves the value of the leaf OneWayDelayThreshold from the NokiaConf_Configure_Service_Vpls_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OneWayDelayThreshold is set, it can
// safely use t.GetOneWayDelayThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OneWayDelayThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep) GetOneWayDelayThreshold() uint32 {
	if t == nil || t.OneWayDelayThreshold == nil {
		return 3
	}
	return *t.OneWayDelayThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_EthCfm_Mep
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Ccm == nil {
		var v bool = false
		t.Ccm = &v
	}
	if t.CcmLtmPriority == nil {
		var v uint8 = 7
		t.CcmLtmPriority = &v
	}
	if t.LowPriorityDefect == 0 {
		t.LowPriorityDefect = NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	if t.OneWayDelayThreshold == nil {
		var v uint32 = 3
		t.OneWayDelayThreshold = &v
	}
	t.AlarmNotification.PopulateDefaults()
	t.EthTest.PopulateDefaults()
	t.Grace.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_EthCfm_Mep struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MaAdminName == nil {
		return nil, fmt.Errorf("nil value for key MaAdminName")
	}

	if t.MdAdminName == nil {
		return nil, fmt.Errorf("nil value for key MdAdminName")
	}

	if t.MepId == nil {
		return nil, fmt.Errorf("nil value for key MepId")
	}

	return map[string]interface{}{
		"ma-admin-name": *t.MaAdminName,
		"md-admin-name": *t.MdAdminName,
		"mep-id":        *t.MepId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_EthCfm_Mep"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_EthCfm_Mep.
func (*NokiaConf_Configure_Service_Vpls_EthCfm_Mep) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_EthCfm_Mep_AlarmNotification represents the /nokia-conf/configure/service/vpls/eth-cfm/mep/alarm-notification YANG schema element.
type NokiaConf_Configure_Service_Vpls_EthCfm_Mep_AlarmNotification struct {
	FngAlarmTime *int32 `path:"fng-alarm-time" module:"nokia-conf"`
	FngResetTime *int32 `path:"fng-reset-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_EthCfm_Mep_AlarmNotification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_EthCfm_Mep_AlarmNotification) IsYANGGoStruct() {}

// GetFngAlarmTime retrieves the value of the leaf FngAlarmTime from the NokiaConf_Configure_Service_Vpls_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngAlarmTime is set, it can
// safely use t.GetFngAlarmTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngAlarmTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_AlarmNotification) GetFngAlarmTime() int32 {
	if t == nil || t.FngAlarmTime == nil {
		return 0
	}
	return *t.FngAlarmTime
}

// GetFngResetTime retrieves the value of the leaf FngResetTime from the NokiaConf_Configure_Service_Vpls_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngResetTime is set, it can
// safely use t.GetFngResetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngResetTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_AlarmNotification) GetFngResetTime() int32 {
	if t == nil || t.FngResetTime == nil {
		return 0
	}
	return *t.FngResetTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_EthCfm_Mep_AlarmNotification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_AlarmNotification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_AlarmNotification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_EthCfm_Mep_AlarmNotification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_AlarmNotification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_AlarmNotification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_EthCfm_Mep_AlarmNotification.
func (*NokiaConf_Configure_Service_Vpls_EthCfm_Mep_AlarmNotification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest represents the /nokia-conf/configure/service/vpls/eth-cfm/mep/eth-test YANG schema element.
type NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest struct {
	BitErrorThreshold *uint32                                                          `path:"bit-error-threshold" module:"nokia-conf"`
	TestPattern       *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest_TestPattern `path:"test-pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest) IsYANGGoStruct() {}

// GetOrCreateTestPattern retrieves the value of the TestPattern field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest) GetOrCreateTestPattern() *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest_TestPattern {
	if t.TestPattern != nil {
		return t.TestPattern
	}
	t.TestPattern = &NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest_TestPattern{}
	return t.TestPattern
}

// GetTestPattern returns the value of the TestPattern struct pointer
// from NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest. If the receiver or the field TestPattern is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest) GetTestPattern() *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest_TestPattern {
	if t != nil && t.TestPattern != nil {
		return t.TestPattern
	}
	return nil
}

// GetBitErrorThreshold retrieves the value of the leaf BitErrorThreshold from the NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitErrorThreshold is set, it can
// safely use t.GetBitErrorThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitErrorThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest) GetBitErrorThreshold() uint32 {
	if t == nil || t.BitErrorThreshold == nil {
		return 1
	}
	return *t.BitErrorThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BitErrorThreshold == nil {
		var v uint32 = 1
		t.BitErrorThreshold = &v
	}
	t.TestPattern.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest.
func (*NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest_TestPattern represents the /nokia-conf/configure/service/vpls/eth-cfm/mep/eth-test/test-pattern YANG schema element.
type NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest_TestPattern struct {
	CrcTlv  *bool                                                                     `path:"crc-tlv" module:"nokia-conf"`
	Pattern E_NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest_TestPattern_Pattern `path:"pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest_TestPattern implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest_TestPattern) IsYANGGoStruct() {}

// GetCrcTlv retrieves the value of the leaf CrcTlv from the NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CrcTlv is set, it can
// safely use t.GetCrcTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CrcTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest_TestPattern) GetCrcTlv() bool {
	if t == nil || t.CrcTlv == nil {
		return false
	}
	return *t.CrcTlv
}

// GetPattern retrieves the value of the leaf Pattern from the NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pattern is set, it can
// safely use t.GetPattern() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pattern == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest_TestPattern) GetPattern() E_NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest_TestPattern_Pattern {
	if t == nil || t.Pattern == 0 {
		return NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
	return t.Pattern
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest_TestPattern
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest_TestPattern) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CrcTlv == nil {
		var v bool = false
		t.CrcTlv = &v
	}
	if t.Pattern == 0 {
		t.Pattern = NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest_TestPattern) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest_TestPattern"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest_TestPattern) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest_TestPattern) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest_TestPattern.
func (*NokiaConf_Configure_Service_Vpls_EthCfm_Mep_EthTest_TestPattern) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace represents the /nokia-conf/configure/service/vpls/eth-cfm/mep/grace YANG schema element.
type NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace struct {
	EthEd       *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthEd       `path:"eth-ed" module:"nokia-conf"`
	EthVsmGrace *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace `path:"eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace) IsYANGGoStruct() {}

// GetOrCreateEthEd retrieves the value of the EthEd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace) GetOrCreateEthEd() *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthEd {
	if t.EthEd != nil {
		return t.EthEd
	}
	t.EthEd = &NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthEd{}
	return t.EthEd
}

// GetOrCreateEthVsmGrace retrieves the value of the EthVsmGrace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace) GetOrCreateEthVsmGrace() *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace {
	if t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	t.EthVsmGrace = &NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace{}
	return t.EthVsmGrace
}

// GetEthEd returns the value of the EthEd struct pointer
// from NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace. If the receiver or the field EthEd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace) GetEthEd() *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthEd {
	if t != nil && t.EthEd != nil {
		return t.EthEd
	}
	return nil
}

// GetEthVsmGrace returns the value of the EthVsmGrace struct pointer
// from NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace. If the receiver or the field EthVsmGrace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace) GetEthVsmGrace() *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace {
	if t != nil && t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthEd.PopulateDefaults()
	t.EthVsmGrace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace.
func (*NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthEd represents the /nokia-conf/configure/service/vpls/eth-cfm/mep/grace/eth-ed YANG schema element.
type NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthEd struct {
	MaxRxDefectWindow *uint32 `path:"max-rx-defect-window" module:"nokia-conf"`
	Priority          *int32  `path:"priority" module:"nokia-conf"`
	RxEthEd           *bool   `path:"rx-eth-ed" module:"nokia-conf"`
	TxEthEd           *bool   `path:"tx-eth-ed" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthEd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthEd) IsYANGGoStruct() {}

// GetMaxRxDefectWindow retrieves the value of the leaf MaxRxDefectWindow from the NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRxDefectWindow is set, it can
// safely use t.GetMaxRxDefectWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRxDefectWindow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthEd) GetMaxRxDefectWindow() uint32 {
	if t == nil || t.MaxRxDefectWindow == nil {
		return 0
	}
	return *t.MaxRxDefectWindow
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthEd) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetRxEthEd retrieves the value of the leaf RxEthEd from the NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthEd is set, it can
// safely use t.GetRxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthEd) GetRxEthEd() bool {
	if t == nil || t.RxEthEd == nil {
		return true
	}
	return *t.RxEthEd
}

// GetTxEthEd retrieves the value of the leaf TxEthEd from the NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthEd is set, it can
// safely use t.GetTxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthEd) GetTxEthEd() bool {
	if t == nil || t.TxEthEd == nil {
		return false
	}
	return *t.TxEthEd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthEd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthEd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthEd == nil {
		var v bool = true
		t.RxEthEd = &v
	}
	if t.TxEthEd == nil {
		var v bool = false
		t.TxEthEd = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthEd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthEd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthEd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthEd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthEd.
func (*NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthEd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace represents the /nokia-conf/configure/service/vpls/eth-cfm/mep/grace/eth-vsm-grace YANG schema element.
type NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace struct {
	RxEthVsmGrace *bool `path:"rx-eth-vsm-grace" module:"nokia-conf"`
	TxEthVsmGrace *bool `path:"tx-eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace) IsYANGGoStruct() {}

// GetRxEthVsmGrace retrieves the value of the leaf RxEthVsmGrace from the NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthVsmGrace is set, it can
// safely use t.GetRxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace) GetRxEthVsmGrace() bool {
	if t == nil || t.RxEthVsmGrace == nil {
		return true
	}
	return *t.RxEthVsmGrace
}

// GetTxEthVsmGrace retrieves the value of the leaf TxEthVsmGrace from the NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthVsmGrace is set, it can
// safely use t.GetTxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace) GetTxEthVsmGrace() bool {
	if t == nil || t.TxEthVsmGrace == nil {
		return true
	}
	return *t.TxEthVsmGrace
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthVsmGrace == nil {
		var v bool = true
		t.RxEthVsmGrace = &v
	}
	if t.TxEthVsmGrace == nil {
		var v bool = true
		t.TxEthVsmGrace = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace.
func (*NokiaConf_Configure_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Fdb represents the /nokia-conf/configure/service/vpls/fdb YANG schema element.
type NokiaConf_Configure_Service_Vpls_Fdb struct {
	DiscardUnknown    *bool                                             `path:"discard-unknown" module:"nokia-conf"`
	MacLearning       *NokiaConf_Configure_Service_Vpls_Fdb_MacLearning `path:"mac-learning" module:"nokia-conf"`
	MacMove           *NokiaConf_Configure_Service_Vpls_Fdb_MacMove     `path:"mac-move" module:"nokia-conf"`
	MacSubnetLength   *int32                                            `path:"mac-subnet-length" module:"nokia-conf"`
	SelectiveLearning *bool                                             `path:"selective-learning" module:"nokia-conf"`
	StaticMac         *NokiaConf_Configure_Service_Vpls_Fdb_StaticMac   `path:"static-mac" module:"nokia-conf"`
	Table             *NokiaConf_Configure_Service_Vpls_Fdb_Table       `path:"table" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Fdb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Fdb) IsYANGGoStruct() {}

// GetOrCreateMacLearning retrieves the value of the MacLearning field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Fdb) GetOrCreateMacLearning() *NokiaConf_Configure_Service_Vpls_Fdb_MacLearning {
	if t.MacLearning != nil {
		return t.MacLearning
	}
	t.MacLearning = &NokiaConf_Configure_Service_Vpls_Fdb_MacLearning{}
	return t.MacLearning
}

// GetOrCreateMacMove retrieves the value of the MacMove field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Fdb) GetOrCreateMacMove() *NokiaConf_Configure_Service_Vpls_Fdb_MacMove {
	if t.MacMove != nil {
		return t.MacMove
	}
	t.MacMove = &NokiaConf_Configure_Service_Vpls_Fdb_MacMove{}
	return t.MacMove
}

// GetOrCreateStaticMac retrieves the value of the StaticMac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Fdb) GetOrCreateStaticMac() *NokiaConf_Configure_Service_Vpls_Fdb_StaticMac {
	if t.StaticMac != nil {
		return t.StaticMac
	}
	t.StaticMac = &NokiaConf_Configure_Service_Vpls_Fdb_StaticMac{}
	return t.StaticMac
}

// GetOrCreateTable retrieves the value of the Table field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Fdb) GetOrCreateTable() *NokiaConf_Configure_Service_Vpls_Fdb_Table {
	if t.Table != nil {
		return t.Table
	}
	t.Table = &NokiaConf_Configure_Service_Vpls_Fdb_Table{}
	return t.Table
}

// GetMacLearning returns the value of the MacLearning struct pointer
// from NokiaConf_Configure_Service_Vpls_Fdb. If the receiver or the field MacLearning is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Fdb) GetMacLearning() *NokiaConf_Configure_Service_Vpls_Fdb_MacLearning {
	if t != nil && t.MacLearning != nil {
		return t.MacLearning
	}
	return nil
}

// GetMacMove returns the value of the MacMove struct pointer
// from NokiaConf_Configure_Service_Vpls_Fdb. If the receiver or the field MacMove is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Fdb) GetMacMove() *NokiaConf_Configure_Service_Vpls_Fdb_MacMove {
	if t != nil && t.MacMove != nil {
		return t.MacMove
	}
	return nil
}

// GetStaticMac returns the value of the StaticMac struct pointer
// from NokiaConf_Configure_Service_Vpls_Fdb. If the receiver or the field StaticMac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Fdb) GetStaticMac() *NokiaConf_Configure_Service_Vpls_Fdb_StaticMac {
	if t != nil && t.StaticMac != nil {
		return t.StaticMac
	}
	return nil
}

// GetTable returns the value of the Table struct pointer
// from NokiaConf_Configure_Service_Vpls_Fdb. If the receiver or the field Table is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Fdb) GetTable() *NokiaConf_Configure_Service_Vpls_Fdb_Table {
	if t != nil && t.Table != nil {
		return t.Table
	}
	return nil
}

// GetDiscardUnknown retrieves the value of the leaf DiscardUnknown from the NokiaConf_Configure_Service_Vpls_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiscardUnknown is set, it can
// safely use t.GetDiscardUnknown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiscardUnknown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Fdb) GetDiscardUnknown() bool {
	if t == nil || t.DiscardUnknown == nil {
		return false
	}
	return *t.DiscardUnknown
}

// GetMacSubnetLength retrieves the value of the leaf MacSubnetLength from the NokiaConf_Configure_Service_Vpls_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacSubnetLength is set, it can
// safely use t.GetMacSubnetLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacSubnetLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Fdb) GetMacSubnetLength() int32 {
	if t == nil || t.MacSubnetLength == nil {
		return 48
	}
	return *t.MacSubnetLength
}

// GetSelectiveLearning retrieves the value of the leaf SelectiveLearning from the NokiaConf_Configure_Service_Vpls_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SelectiveLearning is set, it can
// safely use t.GetSelectiveLearning() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SelectiveLearning == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Fdb) GetSelectiveLearning() bool {
	if t == nil || t.SelectiveLearning == nil {
		return false
	}
	return *t.SelectiveLearning
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Fdb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Fdb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DiscardUnknown == nil {
		var v bool = false
		t.DiscardUnknown = &v
	}
	if t.MacSubnetLength == nil {
		var v int32 = 48
		t.MacSubnetLength = &v
	}
	if t.SelectiveLearning == nil {
		var v bool = false
		t.SelectiveLearning = &v
	}
	t.MacLearning.PopulateDefaults()
	t.MacMove.PopulateDefaults()
	t.StaticMac.PopulateDefaults()
	t.Table.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Fdb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Fdb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Fdb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Fdb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Fdb.
func (*NokiaConf_Configure_Service_Vpls_Fdb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Fdb_MacLearning represents the /nokia-conf/configure/service/vpls/fdb/mac-learning YANG schema element.
type NokiaConf_Configure_Service_Vpls_Fdb_MacLearning struct {
	Aging         *bool  `path:"aging" module:"nokia-conf"`
	Learning      *bool  `path:"learning" module:"nokia-conf"`
	LocalAgeTime  *int32 `path:"local-age-time" module:"nokia-conf"`
	RemoteAgeTime *int32 `path:"remote-age-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Fdb_MacLearning implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Fdb_MacLearning) IsYANGGoStruct() {}

// GetAging retrieves the value of the leaf Aging from the NokiaConf_Configure_Service_Vpls_Fdb_MacLearning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aging is set, it can
// safely use t.GetAging() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aging == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacLearning) GetAging() bool {
	if t == nil || t.Aging == nil {
		return true
	}
	return *t.Aging
}

// GetLearning retrieves the value of the leaf Learning from the NokiaConf_Configure_Service_Vpls_Fdb_MacLearning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Learning is set, it can
// safely use t.GetLearning() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Learning == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacLearning) GetLearning() bool {
	if t == nil || t.Learning == nil {
		return true
	}
	return *t.Learning
}

// GetLocalAgeTime retrieves the value of the leaf LocalAgeTime from the NokiaConf_Configure_Service_Vpls_Fdb_MacLearning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAgeTime is set, it can
// safely use t.GetLocalAgeTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAgeTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacLearning) GetLocalAgeTime() int32 {
	if t == nil || t.LocalAgeTime == nil {
		return 300
	}
	return *t.LocalAgeTime
}

// GetRemoteAgeTime retrieves the value of the leaf RemoteAgeTime from the NokiaConf_Configure_Service_Vpls_Fdb_MacLearning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteAgeTime is set, it can
// safely use t.GetRemoteAgeTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteAgeTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacLearning) GetRemoteAgeTime() int32 {
	if t == nil || t.RemoteAgeTime == nil {
		return 900
	}
	return *t.RemoteAgeTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Fdb_MacLearning
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacLearning) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Aging == nil {
		var v bool = true
		t.Aging = &v
	}
	if t.Learning == nil {
		var v bool = true
		t.Learning = &v
	}
	if t.LocalAgeTime == nil {
		var v int32 = 300
		t.LocalAgeTime = &v
	}
	if t.RemoteAgeTime == nil {
		var v int32 = 900
		t.RemoteAgeTime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacLearning) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Fdb_MacLearning"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacLearning) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacLearning) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Fdb_MacLearning.
func (*NokiaConf_Configure_Service_Vpls_Fdb_MacLearning) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Fdb_MacMove represents the /nokia-conf/configure/service/vpls/fdb/mac-move YANG schema element.
type NokiaConf_Configure_Service_Vpls_Fdb_MacMove struct {
	AdminState                E_NokiaTypesSros_AdminState                                       `path:"admin-state" module:"nokia-conf"`
	HoldDownTime              *uint32                                                           `path:"hold-down-time" module:"nokia-conf"`
	MoveFrequency             *uint32                                                           `path:"move-frequency" module:"nokia-conf"`
	PrimaryCumulativeFactor   *uint32                                                           `path:"primary-cumulative-factor" module:"nokia-conf"`
	RetryCount                NokiaConf_Configure_Service_Vpls_Fdb_MacMove_RetryCount_Union     `path:"retry-count" module:"nokia-conf"`
	Sap                       map[string]*NokiaConf_Configure_Service_Vpls_Fdb_MacMove_Sap      `path:"sap" module:"nokia-conf"`
	SecondaryCumulativeFactor *uint32                                                           `path:"secondary-cumulative-factor" module:"nokia-conf"`
	SpokeSdp                  map[string]*NokiaConf_Configure_Service_Vpls_Fdb_MacMove_SpokeSdp `path:"spoke-sdp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Fdb_MacMove implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Fdb_MacMove) IsYANGGoStruct() {}

// NewSap creates a new entry in the Sap list of the
// NokiaConf_Configure_Service_Vpls_Fdb_MacMove struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove) NewSap(SapId string) (*NokiaConf_Configure_Service_Vpls_Fdb_MacMove_Sap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Service_Vpls_Fdb_MacMove_Sap)
	}

	key := SapId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sap", key)
	}

	t.Sap[key] = &NokiaConf_Configure_Service_Vpls_Fdb_MacMove_Sap{
		SapId: &SapId,
	}

	return t.Sap[key], nil
}

// RenameSap renames an entry in the list Sap within
// the NokiaConf_Configure_Service_Vpls_Fdb_MacMove struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove) RenameSap(oldK, newK string) error {
	if _, ok := t.Sap[newK]; ok {
		return fmt.Errorf("key %v already exists in Sap", newK)
	}

	e, ok := t.Sap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sap", oldK)
	}
	e.SapId = &newK

	t.Sap[newK] = e
	delete(t.Sap, oldK)
	return nil
}

// GetOrCreateSap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Fdb_MacMove. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove) GetOrCreateSap(SapId string) *NokiaConf_Configure_Service_Vpls_Fdb_MacMove_Sap {

	key := SapId

	if v, ok := t.Sap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSap(SapId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSap got unexpected error: %v", err))
	}
	return v
}

// GetSap retrieves the value with the specified key from
// the Sap map field of NokiaConf_Configure_Service_Vpls_Fdb_MacMove. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove) GetSap(SapId string) *NokiaConf_Configure_Service_Vpls_Fdb_MacMove_Sap {

	if t == nil {
		return nil
	}

	key := SapId

	if lm, ok := t.Sap[key]; ok {
		return lm
	}
	return nil
}

// DeleteSap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Fdb_MacMove. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove) DeleteSap(SapId string) {
	key := SapId

	delete(t.Sap, key)
}

// AppendSap appends the supplied NokiaConf_Configure_Service_Vpls_Fdb_MacMove_Sap struct to the
// list Sap of NokiaConf_Configure_Service_Vpls_Fdb_MacMove. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Fdb_MacMove_Sap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove) AppendSap(v *NokiaConf_Configure_Service_Vpls_Fdb_MacMove_Sap) error {
	if v.SapId == nil {
		return fmt.Errorf("invalid nil key received for SapId")
	}

	key := *v.SapId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Service_Vpls_Fdb_MacMove_Sap)
	}

	if _, ok := t.Sap[key]; ok {
		return fmt.Errorf("duplicate key for list Sap %v", key)
	}

	t.Sap[key] = v
	return nil
}

// NewSpokeSdp creates a new entry in the SpokeSdp list of the
// NokiaConf_Configure_Service_Vpls_Fdb_MacMove struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove) NewSpokeSdp(SdpBindId string) (*NokiaConf_Configure_Service_Vpls_Fdb_MacMove_SpokeSdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Service_Vpls_Fdb_MacMove_SpokeSdp)
	}

	key := SdpBindId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SpokeSdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SpokeSdp", key)
	}

	t.SpokeSdp[key] = &NokiaConf_Configure_Service_Vpls_Fdb_MacMove_SpokeSdp{
		SdpBindId: &SdpBindId,
	}

	return t.SpokeSdp[key], nil
}

// RenameSpokeSdp renames an entry in the list SpokeSdp within
// the NokiaConf_Configure_Service_Vpls_Fdb_MacMove struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove) RenameSpokeSdp(oldK, newK string) error {
	if _, ok := t.SpokeSdp[newK]; ok {
		return fmt.Errorf("key %v already exists in SpokeSdp", newK)
	}

	e, ok := t.SpokeSdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SpokeSdp", oldK)
	}
	e.SdpBindId = &newK

	t.SpokeSdp[newK] = e
	delete(t.SpokeSdp, oldK)
	return nil
}

// GetOrCreateSpokeSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Fdb_MacMove. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove) GetOrCreateSpokeSdp(SdpBindId string) *NokiaConf_Configure_Service_Vpls_Fdb_MacMove_SpokeSdp {

	key := SdpBindId

	if v, ok := t.SpokeSdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSpokeSdp(SdpBindId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSpokeSdp got unexpected error: %v", err))
	}
	return v
}

// GetSpokeSdp retrieves the value with the specified key from
// the SpokeSdp map field of NokiaConf_Configure_Service_Vpls_Fdb_MacMove. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove) GetSpokeSdp(SdpBindId string) *NokiaConf_Configure_Service_Vpls_Fdb_MacMove_SpokeSdp {

	if t == nil {
		return nil
	}

	key := SdpBindId

	if lm, ok := t.SpokeSdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteSpokeSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Fdb_MacMove. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove) DeleteSpokeSdp(SdpBindId string) {
	key := SdpBindId

	delete(t.SpokeSdp, key)
}

// AppendSpokeSdp appends the supplied NokiaConf_Configure_Service_Vpls_Fdb_MacMove_SpokeSdp struct to the
// list SpokeSdp of NokiaConf_Configure_Service_Vpls_Fdb_MacMove. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Fdb_MacMove_SpokeSdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove) AppendSpokeSdp(v *NokiaConf_Configure_Service_Vpls_Fdb_MacMove_SpokeSdp) error {
	if v.SdpBindId == nil {
		return fmt.Errorf("invalid nil key received for SdpBindId")
	}

	key := *v.SdpBindId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Service_Vpls_Fdb_MacMove_SpokeSdp)
	}

	if _, ok := t.SpokeSdp[key]; ok {
		return fmt.Errorf("duplicate key for list SpokeSdp %v", key)
	}

	t.SpokeSdp[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_Fdb_MacMove
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetHoldDownTime retrieves the value of the leaf HoldDownTime from the NokiaConf_Configure_Service_Vpls_Fdb_MacMove
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldDownTime is set, it can
// safely use t.GetHoldDownTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldDownTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove) GetHoldDownTime() uint32 {
	if t == nil || t.HoldDownTime == nil {
		return 10
	}
	return *t.HoldDownTime
}

// GetMoveFrequency retrieves the value of the leaf MoveFrequency from the NokiaConf_Configure_Service_Vpls_Fdb_MacMove
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MoveFrequency is set, it can
// safely use t.GetMoveFrequency() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MoveFrequency == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove) GetMoveFrequency() uint32 {
	if t == nil || t.MoveFrequency == nil {
		return 2
	}
	return *t.MoveFrequency
}

// GetPrimaryCumulativeFactor retrieves the value of the leaf PrimaryCumulativeFactor from the NokiaConf_Configure_Service_Vpls_Fdb_MacMove
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrimaryCumulativeFactor is set, it can
// safely use t.GetPrimaryCumulativeFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrimaryCumulativeFactor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove) GetPrimaryCumulativeFactor() uint32 {
	if t == nil || t.PrimaryCumulativeFactor == nil {
		return 3
	}
	return *t.PrimaryCumulativeFactor
}

// GetRetryCount retrieves the value of the leaf RetryCount from the NokiaConf_Configure_Service_Vpls_Fdb_MacMove
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetryCount is set, it can
// safely use t.GetRetryCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetryCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove) GetRetryCount() NokiaConf_Configure_Service_Vpls_Fdb_MacMove_RetryCount_Union {
	if t == nil || t.RetryCount == nil {
		return UnionUint32(3)
	}
	return t.RetryCount
}

// GetSecondaryCumulativeFactor retrieves the value of the leaf SecondaryCumulativeFactor from the NokiaConf_Configure_Service_Vpls_Fdb_MacMove
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondaryCumulativeFactor is set, it can
// safely use t.GetSecondaryCumulativeFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondaryCumulativeFactor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove) GetSecondaryCumulativeFactor() uint32 {
	if t == nil || t.SecondaryCumulativeFactor == nil {
		return 2
	}
	return *t.SecondaryCumulativeFactor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Fdb_MacMove
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.HoldDownTime == nil {
		var v uint32 = 10
		t.HoldDownTime = &v
	}
	if t.MoveFrequency == nil {
		var v uint32 = 2
		t.MoveFrequency = &v
	}
	if t.PrimaryCumulativeFactor == nil {
		var v uint32 = 3
		t.PrimaryCumulativeFactor = &v
	}
	if t.RetryCount == nil {
		t.RetryCount = UnionUint32(3)
	}
	if t.SecondaryCumulativeFactor == nil {
		var v uint32 = 2
		t.SecondaryCumulativeFactor = &v
	}
	for _, e := range t.Sap {
		e.PopulateDefaults()
	}
	for _, e := range t.SpokeSdp {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Fdb_MacMove"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Fdb_MacMove.
func (*NokiaConf_Configure_Service_Vpls_Fdb_MacMove) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Fdb_MacMove_Sap represents the /nokia-conf/configure/service/vpls/fdb/mac-move/sap YANG schema element.
type NokiaConf_Configure_Service_Vpls_Fdb_MacMove_Sap struct {
	ApplyGroups        []string                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Level              E_NokiaConf_Configure_Service_Vpls_Fdb_MacMove_Sap_Level `path:"level" module:"nokia-conf"`
	SapId              *string                                                  `path:"sap-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Fdb_MacMove_Sap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Fdb_MacMove_Sap) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Fdb_MacMove_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove_Sap) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Fdb_MacMove_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove_Sap) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Service_Vpls_Fdb_MacMove_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove_Sap) GetLevel() E_NokiaConf_Configure_Service_Vpls_Fdb_MacMove_Sap_Level {
	if t == nil || t.Level == 0 {
		return 0
	}
	return t.Level
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Service_Vpls_Fdb_MacMove_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove_Sap) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Fdb_MacMove_Sap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove_Sap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Fdb_MacMove_Sap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove_Sap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SapId == nil {
		return nil, fmt.Errorf("nil value for key SapId")
	}

	return map[string]interface{}{
		"sap-id": *t.SapId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove_Sap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Fdb_MacMove_Sap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove_Sap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove_Sap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Fdb_MacMove_Sap.
func (*NokiaConf_Configure_Service_Vpls_Fdb_MacMove_Sap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Fdb_MacMove_SpokeSdp represents the /nokia-conf/configure/service/vpls/fdb/mac-move/spoke-sdp YANG schema element.
type NokiaConf_Configure_Service_Vpls_Fdb_MacMove_SpokeSdp struct {
	ApplyGroups        []string                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Level              E_NokiaConf_Configure_Service_Vpls_Fdb_MacMove_SpokeSdp_Level `path:"level" module:"nokia-conf"`
	SdpBindId          *string                                                       `path:"sdp-bind-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Fdb_MacMove_SpokeSdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Fdb_MacMove_SpokeSdp) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Fdb_MacMove_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove_SpokeSdp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Fdb_MacMove_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove_SpokeSdp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Service_Vpls_Fdb_MacMove_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove_SpokeSdp) GetLevel() E_NokiaConf_Configure_Service_Vpls_Fdb_MacMove_SpokeSdp_Level {
	if t == nil || t.Level == 0 {
		return 0
	}
	return t.Level
}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_Service_Vpls_Fdb_MacMove_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove_SpokeSdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Fdb_MacMove_SpokeSdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove_SpokeSdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Fdb_MacMove_SpokeSdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove_SpokeSdp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SdpBindId == nil {
		return nil, fmt.Errorf("nil value for key SdpBindId")
	}

	return map[string]interface{}{
		"sdp-bind-id": *t.SdpBindId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove_SpokeSdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Fdb_MacMove_SpokeSdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove_SpokeSdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_MacMove_SpokeSdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Fdb_MacMove_SpokeSdp.
func (*NokiaConf_Configure_Service_Vpls_Fdb_MacMove_SpokeSdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Fdb_StaticMac represents the /nokia-conf/configure/service/vpls/fdb/static-mac YANG schema element.
type NokiaConf_Configure_Service_Vpls_Fdb_StaticMac struct {
	Mac map[string]*NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Fdb_StaticMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Fdb_StaticMac) IsYANGGoStruct() {}

// NewMac creates a new entry in the Mac list of the
// NokiaConf_Configure_Service_Vpls_Fdb_StaticMac struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_StaticMac) NewMac(MacAddress string) (*NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[string]*NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac)
	}

	key := MacAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mac[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mac", key)
	}

	t.Mac[key] = &NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac{
		MacAddress: &MacAddress,
	}

	return t.Mac[key], nil
}

// RenameMac renames an entry in the list Mac within
// the NokiaConf_Configure_Service_Vpls_Fdb_StaticMac struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_StaticMac) RenameMac(oldK, newK string) error {
	if _, ok := t.Mac[newK]; ok {
		return fmt.Errorf("key %v already exists in Mac", newK)
	}

	e, ok := t.Mac[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mac", oldK)
	}
	e.MacAddress = &newK

	t.Mac[newK] = e
	delete(t.Mac, oldK)
	return nil
}

// GetOrCreateMac retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Fdb_StaticMac. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_StaticMac) GetOrCreateMac(MacAddress string) *NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac {

	key := MacAddress

	if v, ok := t.Mac[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMac(MacAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMac got unexpected error: %v", err))
	}
	return v
}

// GetMac retrieves the value with the specified key from
// the Mac map field of NokiaConf_Configure_Service_Vpls_Fdb_StaticMac. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_StaticMac) GetMac(MacAddress string) *NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac {

	if t == nil {
		return nil
	}

	key := MacAddress

	if lm, ok := t.Mac[key]; ok {
		return lm
	}
	return nil
}

// DeleteMac deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Fdb_StaticMac. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_StaticMac) DeleteMac(MacAddress string) {
	key := MacAddress

	delete(t.Mac, key)
}

// AppendMac appends the supplied NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac struct to the
// list Mac of NokiaConf_Configure_Service_Vpls_Fdb_StaticMac. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_StaticMac) AppendMac(v *NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac) error {
	if v.MacAddress == nil {
		return fmt.Errorf("invalid nil key received for MacAddress")
	}

	key := *v.MacAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[string]*NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac)
	}

	if _, ok := t.Mac[key]; ok {
		return fmt.Errorf("duplicate key for list Mac %v", key)
	}

	t.Mac[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Fdb_StaticMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_StaticMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Mac {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_StaticMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Fdb_StaticMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_StaticMac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_StaticMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Fdb_StaticMac.
func (*NokiaConf_Configure_Service_Vpls_Fdb_StaticMac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac represents the /nokia-conf/configure/service/vpls/fdb/static-mac/mac YANG schema element.
type NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac struct {
	ApplyGroups        []string                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Blackhole          YANGEmpty                                                    `path:"blackhole" module:"nokia-conf"`
	Endpoint           *string                                                      `path:"endpoint" module:"nokia-conf"`
	MacAddress         *string                                                      `path:"mac-address" module:"nokia-conf"`
	MeshSdp            *string                                                      `path:"mesh-sdp" module:"nokia-conf"`
	Monitor            E_NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac_Monitor `path:"monitor" module:"nokia-conf"`
	Sap                *string                                                      `path:"sap" module:"nokia-conf"`
	SpokeSdp           *string                                                      `path:"spoke-sdp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBlackhole retrieves the value of the leaf Blackhole from the NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Blackhole is set, it can
// safely use t.GetBlackhole() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Blackhole == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac) GetBlackhole() YANGEmpty {
	if t == nil || t.Blackhole == false {
		return false
	}
	return t.Blackhole
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetMeshSdp retrieves the value of the leaf MeshSdp from the NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MeshSdp is set, it can
// safely use t.GetMeshSdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MeshSdp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac) GetMeshSdp() string {
	if t == nil || t.MeshSdp == nil {
		return ""
	}
	return *t.MeshSdp
}

// GetMonitor retrieves the value of the leaf Monitor from the NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Monitor is set, it can
// safely use t.GetMonitor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Monitor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac) GetMonitor() E_NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac_Monitor {
	if t == nil || t.Monitor == 0 {
		return NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac_Monitor_none
	}
	return t.Monitor
}

// GetSap retrieves the value of the leaf Sap from the NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sap is set, it can
// safely use t.GetSap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac) GetSap() string {
	if t == nil || t.Sap == nil {
		return ""
	}
	return *t.Sap
}

// GetSpokeSdp retrieves the value of the leaf SpokeSdp from the NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpokeSdp is set, it can
// safely use t.GetSpokeSdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpokeSdp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac) GetSpokeSdp() string {
	if t == nil || t.SpokeSdp == nil {
		return ""
	}
	return *t.SpokeSdp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Monitor == 0 {
		t.Monitor = NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac_Monitor_none
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MacAddress == nil {
		return nil, fmt.Errorf("nil value for key MacAddress")
	}

	return map[string]interface{}{
		"mac-address": *t.MacAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac.
func (*NokiaConf_Configure_Service_Vpls_Fdb_StaticMac_Mac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Fdb_Table represents the /nokia-conf/configure/service/vpls/fdb/table YANG schema element.
type NokiaConf_Configure_Service_Vpls_Fdb_Table struct {
	HighWmark *int32 `path:"high-wmark" module:"nokia-conf"`
	LowWmark  *int32 `path:"low-wmark" module:"nokia-conf"`
	Size      *int32 `path:"size" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Fdb_Table implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Fdb_Table) IsYANGGoStruct() {}

// GetHighWmark retrieves the value of the leaf HighWmark from the NokiaConf_Configure_Service_Vpls_Fdb_Table
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighWmark is set, it can
// safely use t.GetHighWmark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighWmark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_Table) GetHighWmark() int32 {
	if t == nil || t.HighWmark == nil {
		return 95
	}
	return *t.HighWmark
}

// GetLowWmark retrieves the value of the leaf LowWmark from the NokiaConf_Configure_Service_Vpls_Fdb_Table
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowWmark is set, it can
// safely use t.GetLowWmark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowWmark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_Table) GetLowWmark() int32 {
	if t == nil || t.LowWmark == nil {
		return 90
	}
	return *t.LowWmark
}

// GetSize retrieves the value of the leaf Size from the NokiaConf_Configure_Service_Vpls_Fdb_Table
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Size is set, it can
// safely use t.GetSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Size == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_Table) GetSize() int32 {
	if t == nil || t.Size == nil {
		return 250
	}
	return *t.Size
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Fdb_Table
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_Table) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HighWmark == nil {
		var v int32 = 95
		t.HighWmark = &v
	}
	if t.LowWmark == nil {
		var v int32 = 90
		t.LowWmark = &v
	}
	if t.Size == nil {
		var v int32 = 250
		t.Size = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_Table) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Fdb_Table"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_Table) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Fdb_Table) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Fdb_Table.
func (*NokiaConf_Configure_Service_Vpls_Fdb_Table) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Gsmp represents the /nokia-conf/configure/service/vpls/gsmp YANG schema element.
type NokiaConf_Configure_Service_Vpls_Gsmp struct {
	AdminState         E_NokiaTypesSros_AdminState                             `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	Group              map[string]*NokiaConf_Configure_Service_Vpls_Gsmp_Group `path:"group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Gsmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Gsmp) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Service_Vpls_Gsmp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp) NewGroup(Name string) (*NokiaConf_Configure_Service_Vpls_Gsmp_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Service_Vpls_Gsmp_Group)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Service_Vpls_Gsmp_Group{
		Name: &Name,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Service_Vpls_Gsmp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.Name = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Gsmp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp) GetOrCreateGroup(Name string) *NokiaConf_Configure_Service_Vpls_Gsmp_Group {

	key := Name

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Service_Vpls_Gsmp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp) GetGroup(Name string) *NokiaConf_Configure_Service_Vpls_Gsmp_Group {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Gsmp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp) DeleteGroup(Name string) {
	key := Name

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Service_Vpls_Gsmp_Group struct to the
// list Group of NokiaConf_Configure_Service_Vpls_Gsmp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Gsmp_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp) AppendGroup(v *NokiaConf_Configure_Service_Vpls_Gsmp_Group) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Service_Vpls_Gsmp_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_Gsmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Gsmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Gsmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Gsmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Gsmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Gsmp.
func (*NokiaConf_Configure_Service_Vpls_Gsmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Gsmp_Group represents the /nokia-conf/configure/service/vpls/gsmp/group YANG schema element.
type NokiaConf_Configure_Service_Vpls_Gsmp_Group struct {
	AdminState         E_NokiaTypesSros_AdminState                                      `path:"admin-state" module:"nokia-conf"`
	Ancp               *NokiaConf_Configure_Service_Vpls_Gsmp_Group_Ancp                `path:"ancp" module:"nokia-conf"`
	ApplyGroups        []string                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                          `path:"description" module:"nokia-conf"`
	HoldMultiplier     *uint32                                                          `path:"hold-multiplier" module:"nokia-conf"`
	IdleFilter         *bool                                                            `path:"idle-filter" module:"nokia-conf"`
	Keepalive          *uint32                                                          `path:"keepalive" module:"nokia-conf"`
	Name               *string                                                          `path:"name" module:"nokia-conf"`
	Neighbor           map[string]*NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor `path:"neighbor" module:"nokia-conf"`
	Persistency        *bool                                                            `path:"persistency" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Gsmp_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Gsmp_Group) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// NokiaConf_Configure_Service_Vpls_Gsmp_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group) NewNeighbor(RemoteAddress string) (*NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor)
	}

	key := RemoteAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor{
		RemoteAddress: &RemoteAddress,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the NokiaConf_Configure_Service_Vpls_Gsmp_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.RemoteAddress = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Gsmp_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group) GetOrCreateNeighbor(RemoteAddress string) *NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor {

	key := RemoteAddress

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(RemoteAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of NokiaConf_Configure_Service_Vpls_Gsmp_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group) GetNeighbor(RemoteAddress string) *NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor {

	if t == nil {
		return nil
	}

	key := RemoteAddress

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Gsmp_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group) DeleteNeighbor(RemoteAddress string) {
	key := RemoteAddress

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor struct to the
// list Neighbor of NokiaConf_Configure_Service_Vpls_Gsmp_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group) AppendNeighbor(v *NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor) error {
	if v.RemoteAddress == nil {
		return fmt.Errorf("invalid nil key received for RemoteAddress")
	}

	key := *v.RemoteAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateAncp retrieves the value of the Ancp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group) GetOrCreateAncp() *NokiaConf_Configure_Service_Vpls_Gsmp_Group_Ancp {
	if t.Ancp != nil {
		return t.Ancp
	}
	t.Ancp = &NokiaConf_Configure_Service_Vpls_Gsmp_Group_Ancp{}
	return t.Ancp
}

// GetAncp returns the value of the Ancp struct pointer
// from NokiaConf_Configure_Service_Vpls_Gsmp_Group. If the receiver or the field Ancp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group) GetAncp() *NokiaConf_Configure_Service_Vpls_Gsmp_Group_Ancp {
	if t != nil && t.Ancp != nil {
		return t.Ancp
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_Gsmp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Gsmp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Gsmp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vpls_Gsmp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHoldMultiplier retrieves the value of the leaf HoldMultiplier from the NokiaConf_Configure_Service_Vpls_Gsmp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldMultiplier is set, it can
// safely use t.GetHoldMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldMultiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group) GetHoldMultiplier() uint32 {
	if t == nil || t.HoldMultiplier == nil {
		return 3
	}
	return *t.HoldMultiplier
}

// GetIdleFilter retrieves the value of the leaf IdleFilter from the NokiaConf_Configure_Service_Vpls_Gsmp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleFilter is set, it can
// safely use t.GetIdleFilter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleFilter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group) GetIdleFilter() bool {
	if t == nil || t.IdleFilter == nil {
		return false
	}
	return *t.IdleFilter
}

// GetKeepalive retrieves the value of the leaf Keepalive from the NokiaConf_Configure_Service_Vpls_Gsmp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keepalive is set, it can
// safely use t.GetKeepalive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keepalive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group) GetKeepalive() uint32 {
	if t == nil || t.Keepalive == nil {
		return 10
	}
	return *t.Keepalive
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Vpls_Gsmp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPersistency retrieves the value of the leaf Persistency from the NokiaConf_Configure_Service_Vpls_Gsmp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Persistency is set, it can
// safely use t.GetPersistency() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Persistency == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group) GetPersistency() bool {
	if t == nil || t.Persistency == nil {
		return false
	}
	return *t.Persistency
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Gsmp_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.HoldMultiplier == nil {
		var v uint32 = 3
		t.HoldMultiplier = &v
	}
	if t.IdleFilter == nil {
		var v bool = false
		t.IdleFilter = &v
	}
	if t.Keepalive == nil {
		var v uint32 = 10
		t.Keepalive = &v
	}
	if t.Persistency == nil {
		var v bool = false
		t.Persistency = &v
	}
	t.Ancp.PopulateDefaults()
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Gsmp_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Gsmp_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Gsmp_Group.
func (*NokiaConf_Configure_Service_Vpls_Gsmp_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Gsmp_Group_Ancp represents the /nokia-conf/configure/service/vpls/gsmp/group/ancp YANG schema element.
type NokiaConf_Configure_Service_Vpls_Gsmp_Group_Ancp struct {
	DynamicTopologyDiscovery *bool `path:"dynamic-topology-discovery" module:"nokia-conf"`
	Oam                      *bool `path:"oam" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Gsmp_Group_Ancp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Gsmp_Group_Ancp) IsYANGGoStruct() {}

// GetDynamicTopologyDiscovery retrieves the value of the leaf DynamicTopologyDiscovery from the NokiaConf_Configure_Service_Vpls_Gsmp_Group_Ancp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicTopologyDiscovery is set, it can
// safely use t.GetDynamicTopologyDiscovery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicTopologyDiscovery == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group_Ancp) GetDynamicTopologyDiscovery() bool {
	if t == nil || t.DynamicTopologyDiscovery == nil {
		return true
	}
	return *t.DynamicTopologyDiscovery
}

// GetOam retrieves the value of the leaf Oam from the NokiaConf_Configure_Service_Vpls_Gsmp_Group_Ancp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Oam is set, it can
// safely use t.GetOam() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Oam == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group_Ancp) GetOam() bool {
	if t == nil || t.Oam == nil {
		return false
	}
	return *t.Oam
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Gsmp_Group_Ancp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group_Ancp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DynamicTopologyDiscovery == nil {
		var v bool = true
		t.DynamicTopologyDiscovery = &v
	}
	if t.Oam == nil {
		var v bool = false
		t.Oam = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group_Ancp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Gsmp_Group_Ancp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group_Ancp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group_Ancp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Gsmp_Group_Ancp.
func (*NokiaConf_Configure_Service_Vpls_Gsmp_Group_Ancp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor represents the /nokia-conf/configure/service/vpls/gsmp/group/neighbor YANG schema element.
type NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor struct {
	AdminState         E_NokiaTypesSros_AdminState                                           `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                               `path:"description" module:"nokia-conf"`
	LocalAddress       *string                                                               `path:"local-address" module:"nokia-conf"`
	PriorityMarking    *NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking `path:"priority-marking" module:"nokia-conf"`
	RemoteAddress      *string                                                               `path:"remote-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor) IsYANGGoStruct() {}

// GetOrCreatePriorityMarking retrieves the value of the PriorityMarking field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor) GetOrCreatePriorityMarking() *NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking {
	if t.PriorityMarking != nil {
		return t.PriorityMarking
	}
	t.PriorityMarking = &NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking{}
	return t.PriorityMarking
}

// GetPriorityMarking returns the value of the PriorityMarking struct pointer
// from NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor. If the receiver or the field PriorityMarking is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor) GetPriorityMarking() *NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking {
	if t != nil && t.PriorityMarking != nil {
		return t.PriorityMarking
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetRemoteAddress retrieves the value of the leaf RemoteAddress from the NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteAddress is set, it can
// safely use t.GetRemoteAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor) GetRemoteAddress() string {
	if t == nil || t.RemoteAddress == nil {
		return ""
	}
	return *t.RemoteAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.PriorityMarking.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RemoteAddress == nil {
		return nil, fmt.Errorf("nil value for key RemoteAddress")
	}

	return map[string]interface{}{
		"remote-address": *t.RemoteAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor.
func (*NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking represents the /nokia-conf/configure/service/vpls/gsmp/group/neighbor/priority-marking YANG schema element.
type NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking struct {
	Dscp E_NokiaTypesQos_DscpName `path:"dscp" module:"nokia-conf"`
	Prec *int32                   `path:"prec" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking) IsYANGGoStruct() {}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetPrec retrieves the value of the leaf Prec from the NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prec is set, it can
// safely use t.GetPrec() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prec == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking) GetPrec() int32 {
	if t == nil || t.Prec == nil {
		return 0
	}
	return *t.Prec
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking.
func (*NokiaConf_Configure_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_IgmpHostTracking represents the /nokia-conf/configure/service/vpls/igmp-host-tracking YANG schema element.
type NokiaConf_Configure_Service_Vpls_IgmpHostTracking struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	ExpiryTime         *uint32                     `path:"expiry-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_IgmpHostTracking implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_IgmpHostTracking) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_IgmpHostTracking) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_IgmpHostTracking) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_IgmpHostTracking) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetExpiryTime retrieves the value of the leaf ExpiryTime from the NokiaConf_Configure_Service_Vpls_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExpiryTime is set, it can
// safely use t.GetExpiryTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExpiryTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_IgmpHostTracking) GetExpiryTime() uint32 {
	if t == nil || t.ExpiryTime == nil {
		return 260
	}
	return *t.ExpiryTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_IgmpHostTracking
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_IgmpHostTracking) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ExpiryTime == nil {
		var v uint32 = 260
		t.ExpiryTime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_IgmpHostTracking) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_IgmpHostTracking"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_IgmpHostTracking) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_IgmpHostTracking) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_IgmpHostTracking.
func (*NokiaConf_Configure_Service_Vpls_IgmpHostTracking) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_IgmpSnooping represents the /nokia-conf/configure/service/vpls/igmp-snooping YANG schema element.
type NokiaConf_Configure_Service_Vpls_IgmpSnooping struct {
	AdminState          E_NokiaTypesSros_AdminState                                            `path:"admin-state" module:"nokia-conf"`
	ApplyGroups         []string                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	EvpnProxy           *NokiaConf_Configure_Service_Vpls_IgmpSnooping_EvpnProxy               `path:"evpn-proxy" module:"nokia-conf"`
	Mvr                 *NokiaConf_Configure_Service_Vpls_IgmpSnooping_Mvr                     `path:"mvr" module:"nokia-conf"`
	QueryInterval       *uint32                                                                `path:"query-interval" module:"nokia-conf"`
	QuerySourceAddress  NokiaConf_Configure_Service_Vpls_IgmpSnooping_QuerySourceAddress_Union `path:"query-source-address" module:"nokia-conf"`
	ReportSourceAddress *string                                                                `path:"report-source-address" module:"nokia-conf"`
	RobustCount         *uint32                                                                `path:"robust-count" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_IgmpSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_IgmpSnooping) IsYANGGoStruct() {}

// GetOrCreateEvpnProxy retrieves the value of the EvpnProxy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_IgmpSnooping) GetOrCreateEvpnProxy() *NokiaConf_Configure_Service_Vpls_IgmpSnooping_EvpnProxy {
	if t.EvpnProxy != nil {
		return t.EvpnProxy
	}
	t.EvpnProxy = &NokiaConf_Configure_Service_Vpls_IgmpSnooping_EvpnProxy{}
	return t.EvpnProxy
}

// GetOrCreateMvr retrieves the value of the Mvr field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_IgmpSnooping) GetOrCreateMvr() *NokiaConf_Configure_Service_Vpls_IgmpSnooping_Mvr {
	if t.Mvr != nil {
		return t.Mvr
	}
	t.Mvr = &NokiaConf_Configure_Service_Vpls_IgmpSnooping_Mvr{}
	return t.Mvr
}

// GetEvpnProxy returns the value of the EvpnProxy struct pointer
// from NokiaConf_Configure_Service_Vpls_IgmpSnooping. If the receiver or the field EvpnProxy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_IgmpSnooping) GetEvpnProxy() *NokiaConf_Configure_Service_Vpls_IgmpSnooping_EvpnProxy {
	if t != nil && t.EvpnProxy != nil {
		return t.EvpnProxy
	}
	return nil
}

// GetMvr returns the value of the Mvr struct pointer
// from NokiaConf_Configure_Service_Vpls_IgmpSnooping. If the receiver or the field Mvr is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_IgmpSnooping) GetMvr() *NokiaConf_Configure_Service_Vpls_IgmpSnooping_Mvr {
	if t != nil && t.Mvr != nil {
		return t.Mvr
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_IgmpSnooping) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_IgmpSnooping) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_IgmpSnooping) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Service_Vpls_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_IgmpSnooping) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 125
	}
	return *t.QueryInterval
}

// GetQuerySourceAddress retrieves the value of the leaf QuerySourceAddress from the NokiaConf_Configure_Service_Vpls_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QuerySourceAddress is set, it can
// safely use t.GetQuerySourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QuerySourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_IgmpSnooping) GetQuerySourceAddress() NokiaConf_Configure_Service_Vpls_IgmpSnooping_QuerySourceAddress_Union {
	if t == nil || t.QuerySourceAddress == nil {
		return NokiaConf_Configure_Service_Vpls_IgmpSnooping_QuerySourceAddress_Enum_system
	}
	return t.QuerySourceAddress
}

// GetReportSourceAddress retrieves the value of the leaf ReportSourceAddress from the NokiaConf_Configure_Service_Vpls_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReportSourceAddress is set, it can
// safely use t.GetReportSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReportSourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_IgmpSnooping) GetReportSourceAddress() string {
	if t == nil || t.ReportSourceAddress == nil {
		return ""
	}
	return *t.ReportSourceAddress
}

// GetRobustCount retrieves the value of the leaf RobustCount from the NokiaConf_Configure_Service_Vpls_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RobustCount is set, it can
// safely use t.GetRobustCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RobustCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_IgmpSnooping) GetRobustCount() uint32 {
	if t == nil || t.RobustCount == nil {
		return 2
	}
	return *t.RobustCount
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_IgmpSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_IgmpSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.QueryInterval == nil {
		var v uint32 = 125
		t.QueryInterval = &v
	}
	if t.QuerySourceAddress == nil {
		t.QuerySourceAddress = NokiaConf_Configure_Service_Vpls_IgmpSnooping_QuerySourceAddress_Enum_system
	}
	if t.RobustCount == nil {
		var v uint32 = 2
		t.RobustCount = &v
	}
	t.EvpnProxy.PopulateDefaults()
	t.Mvr.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_IgmpSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_IgmpSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_IgmpSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_IgmpSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_IgmpSnooping.
func (*NokiaConf_Configure_Service_Vpls_IgmpSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_IgmpSnooping_EvpnProxy represents the /nokia-conf/configure/service/vpls/igmp-snooping/evpn-proxy YANG schema element.
type NokiaConf_Configure_Service_Vpls_IgmpSnooping_EvpnProxy struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_IgmpSnooping_EvpnProxy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_IgmpSnooping_EvpnProxy) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_IgmpSnooping_EvpnProxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_IgmpSnooping_EvpnProxy) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_IgmpSnooping_EvpnProxy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_IgmpSnooping_EvpnProxy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_IgmpSnooping_EvpnProxy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_IgmpSnooping_EvpnProxy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_IgmpSnooping_EvpnProxy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_IgmpSnooping_EvpnProxy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_IgmpSnooping_EvpnProxy.
func (*NokiaConf_Configure_Service_Vpls_IgmpSnooping_EvpnProxy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_IgmpSnooping_Mvr represents the /nokia-conf/configure/service/vpls/igmp-snooping/mvr YANG schema element.
type NokiaConf_Configure_Service_Vpls_IgmpSnooping_Mvr struct {
	AdminState  E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Description *string                     `path:"description" module:"nokia-conf"`
	GroupPolicy *string                     `path:"group-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_IgmpSnooping_Mvr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_IgmpSnooping_Mvr) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_IgmpSnooping_Mvr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_IgmpSnooping_Mvr) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vpls_IgmpSnooping_Mvr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_IgmpSnooping_Mvr) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetGroupPolicy retrieves the value of the leaf GroupPolicy from the NokiaConf_Configure_Service_Vpls_IgmpSnooping_Mvr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupPolicy is set, it can
// safely use t.GetGroupPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_IgmpSnooping_Mvr) GetGroupPolicy() string {
	if t == nil || t.GroupPolicy == nil {
		return ""
	}
	return *t.GroupPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_IgmpSnooping_Mvr
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_IgmpSnooping_Mvr) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_IgmpSnooping_Mvr) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_IgmpSnooping_Mvr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_IgmpSnooping_Mvr) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_IgmpSnooping_Mvr) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_IgmpSnooping_Mvr.
func (*NokiaConf_Configure_Service_Vpls_IgmpSnooping_Mvr) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Interface represents the /nokia-conf/configure/service/vpls/interface YANG schema element.
type NokiaConf_Configure_Service_Vpls_Interface struct {
	AdminState         E_NokiaTypesSros_AdminState                          `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                              `path:"description" module:"nokia-conf"`
	HoldTime           *NokiaConf_Configure_Service_Vpls_Interface_HoldTime `path:"hold-time" module:"nokia-conf"`
	InterfaceName      *string                                              `path:"interface-name" module:"nokia-conf"`
	Ipv4               *NokiaConf_Configure_Service_Vpls_Interface_Ipv4     `path:"ipv4" module:"nokia-conf"`
	Mac                *string                                              `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Interface) IsYANGGoStruct() {}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Interface) GetOrCreateHoldTime() *NokiaConf_Configure_Service_Vpls_Interface_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &NokiaConf_Configure_Service_Vpls_Interface_HoldTime{}
	return t.HoldTime
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Interface) GetOrCreateIpv4() *NokiaConf_Configure_Service_Vpls_Interface_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Service_Vpls_Interface_Ipv4{}
	return t.Ipv4
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from NokiaConf_Configure_Service_Vpls_Interface. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Interface) GetHoldTime() *NokiaConf_Configure_Service_Vpls_Interface_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Service_Vpls_Interface. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Interface) GetIpv4() *NokiaConf_Configure_Service_Vpls_Interface_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Interface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Interface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Interface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vpls_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Interface) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Service_Vpls_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Vpls_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Interface) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	t.HoldTime.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Interface.
func (*NokiaConf_Configure_Service_Vpls_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Interface_HoldTime represents the /nokia-conf/configure/service/vpls/interface/hold-time YANG schema element.
type NokiaConf_Configure_Service_Vpls_Interface_HoldTime struct {
	Ipv4 *NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4 `path:"ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Interface_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Interface_HoldTime) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Interface_HoldTime) GetOrCreateIpv4() *NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4{}
	return t.Ipv4
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Service_Vpls_Interface_HoldTime. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Interface_HoldTime) GetIpv4() *NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Interface_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Interface_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Interface_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Interface_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Interface_HoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Interface_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Interface_HoldTime.
func (*NokiaConf_Configure_Service_Vpls_Interface_HoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4 represents the /nokia-conf/configure/service/vpls/interface/hold-time/ipv4 YANG schema element.
type NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4 struct {
	Down *NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Down `path:"down" module:"nokia-conf"`
	Up   *NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Up   `path:"up" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4) IsYANGGoStruct() {}

// GetOrCreateDown retrieves the value of the Down field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4) GetOrCreateDown() *NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Down {
	if t.Down != nil {
		return t.Down
	}
	t.Down = &NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Down{}
	return t.Down
}

// GetOrCreateUp retrieves the value of the Up field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4) GetOrCreateUp() *NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Up {
	if t.Up != nil {
		return t.Up
	}
	t.Up = &NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Up{}
	return t.Up
}

// GetDown returns the value of the Down struct pointer
// from NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4. If the receiver or the field Down is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4) GetDown() *NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Down {
	if t != nil && t.Down != nil {
		return t.Down
	}
	return nil
}

// GetUp returns the value of the Up struct pointer
// from NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4. If the receiver or the field Up is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4) GetUp() *NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Up {
	if t != nil && t.Up != nil {
		return t.Up
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Down.PopulateDefaults()
	t.Up.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4.
func (*NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Down represents the /nokia-conf/configure/service/vpls/interface/hold-time/ipv4/down YANG schema element.
type NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Down struct {
	InitOnly *bool   `path:"init-only" module:"nokia-conf"`
	Seconds  *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Down implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Down) IsYANGGoStruct() {}

// GetInitOnly retrieves the value of the leaf InitOnly from the NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitOnly is set, it can
// safely use t.GetInitOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Down) GetInitOnly() bool {
	if t == nil || t.InitOnly == nil {
		return false
	}
	return *t.InitOnly
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Down) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Down
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Down) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitOnly == nil {
		var v bool = false
		t.InitOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Down) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Down"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Down) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Down) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Down.
func (*NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Down) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Up represents the /nokia-conf/configure/service/vpls/interface/hold-time/ipv4/up YANG schema element.
type NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Up struct {
	Seconds *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Up implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Up) IsYANGGoStruct() {}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Up
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Up) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Up
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Up) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Up) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Up"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Up) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Up) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Up.
func (*NokiaConf_Configure_Service_Vpls_Interface_HoldTime_Ipv4_Up) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Interface_Ipv4 represents the /nokia-conf/configure/service/vpls/interface/ipv4 YANG schema element.
type NokiaConf_Configure_Service_Vpls_Interface_Ipv4 struct {
	NeighborDiscovery *NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery `path:"neighbor-discovery" module:"nokia-conf"`
	Primary           *NokiaConf_Configure_Service_Vpls_Interface_Ipv4_Primary           `path:"primary" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Interface_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Interface_Ipv4) IsYANGGoStruct() {}

// GetOrCreateNeighborDiscovery retrieves the value of the NeighborDiscovery field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Interface_Ipv4) GetOrCreateNeighborDiscovery() *NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery {
	if t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	t.NeighborDiscovery = &NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery{}
	return t.NeighborDiscovery
}

// GetOrCreatePrimary retrieves the value of the Primary field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Interface_Ipv4) GetOrCreatePrimary() *NokiaConf_Configure_Service_Vpls_Interface_Ipv4_Primary {
	if t.Primary != nil {
		return t.Primary
	}
	t.Primary = &NokiaConf_Configure_Service_Vpls_Interface_Ipv4_Primary{}
	return t.Primary
}

// GetNeighborDiscovery returns the value of the NeighborDiscovery struct pointer
// from NokiaConf_Configure_Service_Vpls_Interface_Ipv4. If the receiver or the field NeighborDiscovery is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Interface_Ipv4) GetNeighborDiscovery() *NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery {
	if t != nil && t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	return nil
}

// GetPrimary returns the value of the Primary struct pointer
// from NokiaConf_Configure_Service_Vpls_Interface_Ipv4. If the receiver or the field Primary is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Interface_Ipv4) GetPrimary() *NokiaConf_Configure_Service_Vpls_Interface_Ipv4_Primary {
	if t != nil && t.Primary != nil {
		return t.Primary
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Interface_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Interface_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.NeighborDiscovery.PopulateDefaults()
	t.Primary.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Interface_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Interface_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Interface_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Interface_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Interface_Ipv4.
func (*NokiaConf_Configure_Service_Vpls_Interface_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery represents the /nokia-conf/configure/service/vpls/interface/ipv4/neighbor-discovery YANG schema element.
type NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery struct {
	StaticNeighbor map[string]*NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor `path:"static-neighbor" module:"nokia-conf"`
	Timeout        *uint32                                                                                      `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery) IsYANGGoStruct() {}

// NewStaticNeighbor creates a new entry in the StaticNeighbor list of the
// NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery) NewStaticNeighbor(Ipv4Address string) (*NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticNeighbor == nil {
		t.StaticNeighbor = make(map[string]*NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor)
	}

	key := Ipv4Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StaticNeighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StaticNeighbor", key)
	}

	t.StaticNeighbor[key] = &NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor{
		Ipv4Address: &Ipv4Address,
	}

	return t.StaticNeighbor[key], nil
}

// RenameStaticNeighbor renames an entry in the list StaticNeighbor within
// the NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery) RenameStaticNeighbor(oldK, newK string) error {
	if _, ok := t.StaticNeighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in StaticNeighbor", newK)
	}

	e, ok := t.StaticNeighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in StaticNeighbor", oldK)
	}
	e.Ipv4Address = &newK

	t.StaticNeighbor[newK] = e
	delete(t.StaticNeighbor, oldK)
	return nil
}

// GetOrCreateStaticNeighbor retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery) GetOrCreateStaticNeighbor(Ipv4Address string) *NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor {

	key := Ipv4Address

	if v, ok := t.StaticNeighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStaticNeighbor(Ipv4Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStaticNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetStaticNeighbor retrieves the value with the specified key from
// the StaticNeighbor map field of NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery) GetStaticNeighbor(Ipv4Address string) *NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor {

	if t == nil {
		return nil
	}

	key := Ipv4Address

	if lm, ok := t.StaticNeighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteStaticNeighbor deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery) DeleteStaticNeighbor(Ipv4Address string) {
	key := Ipv4Address

	delete(t.StaticNeighbor, key)
}

// AppendStaticNeighbor appends the supplied NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor struct to the
// list StaticNeighbor of NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery) AppendStaticNeighbor(v *NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) error {
	if v.Ipv4Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv4Address")
	}

	key := *v.Ipv4Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticNeighbor == nil {
		t.StaticNeighbor = make(map[string]*NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor)
	}

	if _, ok := t.StaticNeighbor[key]; ok {
		return fmt.Errorf("duplicate key for list StaticNeighbor %v", key)
	}

	t.StaticNeighbor[key] = v
	return nil
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 14400
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Timeout == nil {
		var v uint32 = 14400
		t.Timeout = &v
	}
	for _, e := range t.StaticNeighbor {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery.
func (*NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor represents the /nokia-conf/configure/service/vpls/interface/ipv4/neighbor-discovery/static-neighbor YANG schema element.
type NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Ipv4Address        *string  `path:"ipv4-address" module:"nokia-conf"`
	MacAddress         *string  `path:"mac-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) GetIpv4Address() string {
	if t == nil || t.Ipv4Address == nil {
		return ""
	}
	return *t.Ipv4Address
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Address")
	}

	return map[string]interface{}{
		"ipv4-address": *t.Ipv4Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor.
func (*NokiaConf_Configure_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Interface_Ipv4_Primary represents the /nokia-conf/configure/service/vpls/interface/ipv4/primary YANG schema element.
type NokiaConf_Configure_Service_Vpls_Interface_Ipv4_Primary struct {
	Address            *string  `path:"address" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	PrefixLength       *uint32  `path:"prefix-length" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Interface_Ipv4_Primary implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Interface_Ipv4_Primary) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vpls_Interface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Interface_Ipv4_Primary) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Interface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Interface_Ipv4_Primary) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Interface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Interface_Ipv4_Primary) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Service_Vpls_Interface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Interface_Ipv4_Primary) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Interface_Ipv4_Primary
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Interface_Ipv4_Primary) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Interface_Ipv4_Primary) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Interface_Ipv4_Primary"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Interface_Ipv4_Primary) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Interface_Ipv4_Primary) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Interface_Ipv4_Primary.
func (*NokiaConf_Configure_Service_Vpls_Interface_Ipv4_Primary) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_IsidPolicy represents the /nokia-conf/configure/service/vpls/isid-policy YANG schema element.
type NokiaConf_Configure_Service_Vpls_IsidPolicy struct {
	Entry map[uint32]*NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_IsidPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_IsidPolicy) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Service_Vpls_IsidPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_IsidPolicy) NewEntry(RangeEntryId uint32) (*NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry)
	}

	key := RangeEntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry{
		RangeEntryId: &RangeEntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Service_Vpls_IsidPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_IsidPolicy) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.RangeEntryId = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_IsidPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_IsidPolicy) GetOrCreateEntry(RangeEntryId uint32) *NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry {

	key := RangeEntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(RangeEntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Service_Vpls_IsidPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_IsidPolicy) GetEntry(RangeEntryId uint32) *NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry {

	if t == nil {
		return nil
	}

	key := RangeEntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_IsidPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_IsidPolicy) DeleteEntry(RangeEntryId uint32) {
	key := RangeEntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry struct to the
// list Entry of NokiaConf_Configure_Service_Vpls_IsidPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_IsidPolicy) AppendEntry(v *NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry) error {
	if v.RangeEntryId == nil {
		return fmt.Errorf("invalid nil key received for RangeEntryId")
	}

	key := *v.RangeEntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_IsidPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_IsidPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_IsidPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_IsidPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_IsidPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_IsidPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_IsidPolicy.
func (*NokiaConf_Configure_Service_Vpls_IsidPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry represents the /nokia-conf/configure/service/vpls/isid-policy/entry YANG schema element.
type NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry struct {
	AdvertiseLocal     *bool                                                    `path:"advertise-local" module:"nokia-conf"`
	ApplyGroups        []string                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Range              *NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry_Range `path:"range" module:"nokia-conf"`
	RangeEntryId       *uint32                                                  `path:"range-entry-id" module:"nokia-conf"`
	UseDefMcast        *bool                                                    `path:"use-def-mcast" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry) GetOrCreateRange() *NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry) GetRange() *NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetAdvertiseLocal retrieves the value of the leaf AdvertiseLocal from the NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseLocal is set, it can
// safely use t.GetAdvertiseLocal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseLocal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry) GetAdvertiseLocal() bool {
	if t == nil || t.AdvertiseLocal == nil {
		return true
	}
	return *t.AdvertiseLocal
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetRangeEntryId retrieves the value of the leaf RangeEntryId from the NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RangeEntryId is set, it can
// safely use t.GetRangeEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RangeEntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry) GetRangeEntryId() uint32 {
	if t == nil || t.RangeEntryId == nil {
		return 0
	}
	return *t.RangeEntryId
}

// GetUseDefMcast retrieves the value of the leaf UseDefMcast from the NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseDefMcast is set, it can
// safely use t.GetUseDefMcast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseDefMcast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry) GetUseDefMcast() bool {
	if t == nil || t.UseDefMcast == nil {
		return false
	}
	return *t.UseDefMcast
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertiseLocal == nil {
		var v bool = true
		t.AdvertiseLocal = &v
	}
	if t.UseDefMcast == nil {
		var v bool = false
		t.UseDefMcast = &v
	}
	t.Range.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RangeEntryId == nil {
		return nil, fmt.Errorf("nil value for key RangeEntryId")
	}

	return map[string]interface{}{
		"range-entry-id": *t.RangeEntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry.
func (*NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry_Range represents the /nokia-conf/configure/service/vpls/isid-policy/entry/range YANG schema element.
type NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry_Range.
func (*NokiaConf_Configure_Service_Vpls_IsidPolicy_Entry_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_LoadBalancing represents the /nokia-conf/configure/service/vpls/load-balancing YANG schema element.
type NokiaConf_Configure_Service_Vpls_LoadBalancing struct {
	LblEthOrIpL4Teid  *bool `path:"lbl-eth-or-ip-l4-teid" module:"nokia-conf"`
	PerServiceHashing *bool `path:"per-service-hashing" module:"nokia-conf"`
	SpiLoadBalancing  *bool `path:"spi-load-balancing" module:"nokia-conf"`
	TeidLoadBalancing *bool `path:"teid-load-balancing" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_LoadBalancing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_LoadBalancing) IsYANGGoStruct() {}

// GetLblEthOrIpL4Teid retrieves the value of the leaf LblEthOrIpL4Teid from the NokiaConf_Configure_Service_Vpls_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LblEthOrIpL4Teid is set, it can
// safely use t.GetLblEthOrIpL4Teid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LblEthOrIpL4Teid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_LoadBalancing) GetLblEthOrIpL4Teid() bool {
	if t == nil || t.LblEthOrIpL4Teid == nil {
		return false
	}
	return *t.LblEthOrIpL4Teid
}

// GetPerServiceHashing retrieves the value of the leaf PerServiceHashing from the NokiaConf_Configure_Service_Vpls_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PerServiceHashing is set, it can
// safely use t.GetPerServiceHashing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PerServiceHashing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_LoadBalancing) GetPerServiceHashing() bool {
	if t == nil || t.PerServiceHashing == nil {
		return false
	}
	return *t.PerServiceHashing
}

// GetSpiLoadBalancing retrieves the value of the leaf SpiLoadBalancing from the NokiaConf_Configure_Service_Vpls_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpiLoadBalancing is set, it can
// safely use t.GetSpiLoadBalancing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpiLoadBalancing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_LoadBalancing) GetSpiLoadBalancing() bool {
	if t == nil || t.SpiLoadBalancing == nil {
		return false
	}
	return *t.SpiLoadBalancing
}

// GetTeidLoadBalancing retrieves the value of the leaf TeidLoadBalancing from the NokiaConf_Configure_Service_Vpls_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TeidLoadBalancing is set, it can
// safely use t.GetTeidLoadBalancing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TeidLoadBalancing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_LoadBalancing) GetTeidLoadBalancing() bool {
	if t == nil || t.TeidLoadBalancing == nil {
		return false
	}
	return *t.TeidLoadBalancing
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_LoadBalancing
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_LoadBalancing) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LblEthOrIpL4Teid == nil {
		var v bool = false
		t.LblEthOrIpL4Teid = &v
	}
	if t.PerServiceHashing == nil {
		var v bool = false
		t.PerServiceHashing = &v
	}
	if t.SpiLoadBalancing == nil {
		var v bool = false
		t.SpiLoadBalancing = &v
	}
	if t.TeidLoadBalancing == nil {
		var v bool = false
		t.TeidLoadBalancing = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_LoadBalancing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_LoadBalancing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_LoadBalancing) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_LoadBalancing) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_LoadBalancing.
func (*NokiaConf_Configure_Service_Vpls_LoadBalancing) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MacFlush represents the /nokia-conf/configure/service/vpls/mac-flush YANG schema element.
type NokiaConf_Configure_Service_Vpls_MacFlush struct {
	Tldp *NokiaConf_Configure_Service_Vpls_MacFlush_Tldp `path:"tldp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MacFlush implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MacFlush) IsYANGGoStruct() {}

// GetOrCreateTldp retrieves the value of the Tldp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MacFlush) GetOrCreateTldp() *NokiaConf_Configure_Service_Vpls_MacFlush_Tldp {
	if t.Tldp != nil {
		return t.Tldp
	}
	t.Tldp = &NokiaConf_Configure_Service_Vpls_MacFlush_Tldp{}
	return t.Tldp
}

// GetTldp returns the value of the Tldp struct pointer
// from NokiaConf_Configure_Service_Vpls_MacFlush. If the receiver or the field Tldp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MacFlush) GetTldp() *NokiaConf_Configure_Service_Vpls_MacFlush_Tldp {
	if t != nil && t.Tldp != nil {
		return t.Tldp
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MacFlush
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MacFlush) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Tldp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MacFlush) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MacFlush"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MacFlush) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MacFlush) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MacFlush.
func (*NokiaConf_Configure_Service_Vpls_MacFlush) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MacFlush_Tldp represents the /nokia-conf/configure/service/vpls/mac-flush/tldp YANG schema element.
type NokiaConf_Configure_Service_Vpls_MacFlush_Tldp struct {
	Propagate     *bool `path:"propagate" module:"nokia-conf"`
	SendOnFailure *bool `path:"send-on-failure" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MacFlush_Tldp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MacFlush_Tldp) IsYANGGoStruct() {}

// GetPropagate retrieves the value of the leaf Propagate from the NokiaConf_Configure_Service_Vpls_MacFlush_Tldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Propagate is set, it can
// safely use t.GetPropagate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Propagate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MacFlush_Tldp) GetPropagate() bool {
	if t == nil || t.Propagate == nil {
		return false
	}
	return *t.Propagate
}

// GetSendOnFailure retrieves the value of the leaf SendOnFailure from the NokiaConf_Configure_Service_Vpls_MacFlush_Tldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendOnFailure is set, it can
// safely use t.GetSendOnFailure() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendOnFailure == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MacFlush_Tldp) GetSendOnFailure() bool {
	if t == nil || t.SendOnFailure == nil {
		return false
	}
	return *t.SendOnFailure
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MacFlush_Tldp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MacFlush_Tldp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Propagate == nil {
		var v bool = false
		t.Propagate = &v
	}
	if t.SendOnFailure == nil {
		var v bool = false
		t.SendOnFailure = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MacFlush_Tldp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MacFlush_Tldp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MacFlush_Tldp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MacFlush_Tldp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MacFlush_Tldp.
func (*NokiaConf_Configure_Service_Vpls_MacFlush_Tldp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MacProtect represents the /nokia-conf/configure/service/vpls/mac-protect YANG schema element.
type NokiaConf_Configure_Service_Vpls_MacProtect struct {
	Mac map[string]*NokiaConf_Configure_Service_Vpls_MacProtect_Mac `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MacProtect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MacProtect) IsYANGGoStruct() {}

// NewMac creates a new entry in the Mac list of the
// NokiaConf_Configure_Service_Vpls_MacProtect struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_MacProtect) NewMac(MacAddress string) (*NokiaConf_Configure_Service_Vpls_MacProtect_Mac, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[string]*NokiaConf_Configure_Service_Vpls_MacProtect_Mac)
	}

	key := MacAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mac[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mac", key)
	}

	t.Mac[key] = &NokiaConf_Configure_Service_Vpls_MacProtect_Mac{
		MacAddress: &MacAddress,
	}

	return t.Mac[key], nil
}

// RenameMac renames an entry in the list Mac within
// the NokiaConf_Configure_Service_Vpls_MacProtect struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_MacProtect) RenameMac(oldK, newK string) error {
	if _, ok := t.Mac[newK]; ok {
		return fmt.Errorf("key %v already exists in Mac", newK)
	}

	e, ok := t.Mac[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mac", oldK)
	}
	e.MacAddress = &newK

	t.Mac[newK] = e
	delete(t.Mac, oldK)
	return nil
}

// GetOrCreateMac retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_MacProtect. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_MacProtect) GetOrCreateMac(MacAddress string) *NokiaConf_Configure_Service_Vpls_MacProtect_Mac {

	key := MacAddress

	if v, ok := t.Mac[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMac(MacAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMac got unexpected error: %v", err))
	}
	return v
}

// GetMac retrieves the value with the specified key from
// the Mac map field of NokiaConf_Configure_Service_Vpls_MacProtect. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MacProtect) GetMac(MacAddress string) *NokiaConf_Configure_Service_Vpls_MacProtect_Mac {

	if t == nil {
		return nil
	}

	key := MacAddress

	if lm, ok := t.Mac[key]; ok {
		return lm
	}
	return nil
}

// DeleteMac deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_MacProtect. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_MacProtect) DeleteMac(MacAddress string) {
	key := MacAddress

	delete(t.Mac, key)
}

// AppendMac appends the supplied NokiaConf_Configure_Service_Vpls_MacProtect_Mac struct to the
// list Mac of NokiaConf_Configure_Service_Vpls_MacProtect. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_MacProtect_Mac already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_MacProtect) AppendMac(v *NokiaConf_Configure_Service_Vpls_MacProtect_Mac) error {
	if v.MacAddress == nil {
		return fmt.Errorf("invalid nil key received for MacAddress")
	}

	key := *v.MacAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[string]*NokiaConf_Configure_Service_Vpls_MacProtect_Mac)
	}

	if _, ok := t.Mac[key]; ok {
		return fmt.Errorf("duplicate key for list Mac %v", key)
	}

	t.Mac[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MacProtect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MacProtect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Mac {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MacProtect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MacProtect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MacProtect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MacProtect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MacProtect.
func (*NokiaConf_Configure_Service_Vpls_MacProtect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MacProtect_Mac represents the /nokia-conf/configure/service/vpls/mac-protect/mac YANG schema element.
type NokiaConf_Configure_Service_Vpls_MacProtect_Mac struct {
	MacAddress *string `path:"mac-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MacProtect_Mac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MacProtect_Mac) IsYANGGoStruct() {}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Service_Vpls_MacProtect_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MacProtect_Mac) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MacProtect_Mac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MacProtect_Mac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_MacProtect_Mac struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_MacProtect_Mac) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MacAddress == nil {
		return nil, fmt.Errorf("nil value for key MacAddress")
	}

	return map[string]interface{}{
		"mac-address": *t.MacAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MacProtect_Mac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MacProtect_Mac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MacProtect_Mac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MacProtect_Mac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MacProtect_Mac.
func (*NokiaConf_Configure_Service_Vpls_MacProtect_Mac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_McrDefaultGtw represents the /nokia-conf/configure/service/vpls/mcr-default-gtw YANG schema element.
type NokiaConf_Configure_Service_Vpls_McrDefaultGtw struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Ip                 *string  `path:"ip" module:"nokia-conf"`
	Mac                *string  `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_McrDefaultGtw implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_McrDefaultGtw) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_McrDefaultGtw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_McrDefaultGtw) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_McrDefaultGtw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_McrDefaultGtw) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Vpls_McrDefaultGtw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_McrDefaultGtw) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Vpls_McrDefaultGtw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_McrDefaultGtw) GetMac() string {
	if t == nil || t.Mac == nil {
		return "00:00:00:00:00:00"
	}
	return *t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_McrDefaultGtw
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_McrDefaultGtw) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mac == nil {
		var v string = "00:00:00:00:00:00"
		t.Mac = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_McrDefaultGtw) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_McrDefaultGtw"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_McrDefaultGtw) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_McrDefaultGtw) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_McrDefaultGtw.
func (*NokiaConf_Configure_Service_Vpls_McrDefaultGtw) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp represents the /nokia-conf/configure/service/vpls/mesh-sdp YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp struct {
	AccountingPolicy   *uint32                                                      `path:"accounting-policy" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState                                  `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Bfd                *NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd                `path:"bfd" module:"nokia-conf"`
	BfdLiveness        *NokiaConf_Configure_Service_Vpls_MeshSdp_BfdLiveness        `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	BfdTemplate        *string                                                      `path:"bfd-template" module:"nokia-conf"`
	CollectStats       *bool                                                        `path:"collect-stats" module:"nokia-conf"`
	ControlWord        *bool                                                        `path:"control-word" module:"nokia-conf"`
	CpuProtection      *NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection      `path:"cpu-protection" module:"nokia-conf"`
	Description        *string                                                      `path:"description" module:"nokia-conf"`
	Dhcp               *NokiaConf_Configure_Service_Vpls_MeshSdp_Dhcp               `path:"dhcp" module:"nokia-conf"`
	Egress             *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress             `path:"egress" module:"nokia-conf"`
	EntropyLabel       YANGEmpty                                                    `path:"entropy-label" module:"nokia-conf"`
	EthCfm             *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm             `path:"eth-cfm" module:"nokia-conf"`
	EtreeLeaf          *bool                                                        `path:"etree-leaf" module:"nokia-conf"`
	EtreeRootLeafTag   *bool                                                        `path:"etree-root-leaf-tag" module:"nokia-conf"`
	Fdb                *NokiaConf_Configure_Service_Vpls_MeshSdp_Fdb                `path:"fdb" module:"nokia-conf"`
	ForceVcForwarding  E_NokiaConf_Configure_Service_Vpls_MeshSdp_ForceVcForwarding `path:"force-vc-forwarding" module:"nokia-conf"`
	HashLabel          *NokiaConf_Configure_Service_Vpls_MeshSdp_HashLabel          `path:"hash-label" module:"nokia-conf" yangPresence:"true"`
	IgmpSnooping       *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping       `path:"igmp-snooping" module:"nokia-conf"`
	Ingress            *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress            `path:"ingress" module:"nokia-conf"`
	MldSnooping        *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping        `path:"mld-snooping" module:"nokia-conf"`
	Mrp                *NokiaConf_Configure_Service_Vpls_MeshSdp_Mrp                `path:"mrp" module:"nokia-conf"`
	Pbb                *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb                `path:"pbb" module:"nokia-conf"`
	SdpBindId          *string                                                      `path:"sdp-bind-id" module:"nokia-conf"`
	VcType             E_NokiaTypesServices_VplsSdpBindVcType                       `path:"vc-type" module:"nokia-conf"`
	VlanVcTag          *uint32                                                      `path:"vlan-vc-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp) IsYANGGoStruct() {}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetOrCreateBfd() *NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd{}
	return t.Bfd
}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetOrCreateBfdLiveness() *NokiaConf_Configure_Service_Vpls_MeshSdp_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Service_Vpls_MeshSdp_BfdLiveness{}
	return t.BfdLiveness
}

// GetOrCreateCpuProtection retrieves the value of the CpuProtection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetOrCreateCpuProtection() *NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection {
	if t.CpuProtection != nil {
		return t.CpuProtection
	}
	t.CpuProtection = &NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection{}
	return t.CpuProtection
}

// GetOrCreateDhcp retrieves the value of the Dhcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetOrCreateDhcp() *NokiaConf_Configure_Service_Vpls_MeshSdp_Dhcp {
	if t.Dhcp != nil {
		return t.Dhcp
	}
	t.Dhcp = &NokiaConf_Configure_Service_Vpls_MeshSdp_Dhcp{}
	return t.Dhcp
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetOrCreateEgress() *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Service_Vpls_MeshSdp_Egress{}
	return t.Egress
}

// GetOrCreateEthCfm retrieves the value of the EthCfm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetOrCreateEthCfm() *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm {
	if t.EthCfm != nil {
		return t.EthCfm
	}
	t.EthCfm = &NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm{}
	return t.EthCfm
}

// GetOrCreateFdb retrieves the value of the Fdb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetOrCreateFdb() *NokiaConf_Configure_Service_Vpls_MeshSdp_Fdb {
	if t.Fdb != nil {
		return t.Fdb
	}
	t.Fdb = &NokiaConf_Configure_Service_Vpls_MeshSdp_Fdb{}
	return t.Fdb
}

// GetOrCreateHashLabel retrieves the value of the HashLabel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetOrCreateHashLabel() *NokiaConf_Configure_Service_Vpls_MeshSdp_HashLabel {
	if t.HashLabel != nil {
		return t.HashLabel
	}
	t.HashLabel = &NokiaConf_Configure_Service_Vpls_MeshSdp_HashLabel{}
	return t.HashLabel
}

// GetOrCreateIgmpSnooping retrieves the value of the IgmpSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetOrCreateIgmpSnooping() *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping {
	if t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	t.IgmpSnooping = &NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping{}
	return t.IgmpSnooping
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetOrCreateIngress() *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress{}
	return t.Ingress
}

// GetOrCreateMldSnooping retrieves the value of the MldSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetOrCreateMldSnooping() *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping {
	if t.MldSnooping != nil {
		return t.MldSnooping
	}
	t.MldSnooping = &NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping{}
	return t.MldSnooping
}

// GetOrCreateMrp retrieves the value of the Mrp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetOrCreateMrp() *NokiaConf_Configure_Service_Vpls_MeshSdp_Mrp {
	if t.Mrp != nil {
		return t.Mrp
	}
	t.Mrp = &NokiaConf_Configure_Service_Vpls_MeshSdp_Mrp{}
	return t.Mrp
}

// GetOrCreatePbb retrieves the value of the Pbb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetOrCreatePbb() *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb {
	if t.Pbb != nil {
		return t.Pbb
	}
	t.Pbb = &NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb{}
	return t.Pbb
}

// GetBfd returns the value of the Bfd struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetBfd() *NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetBfdLiveness() *NokiaConf_Configure_Service_Vpls_MeshSdp_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetCpuProtection returns the value of the CpuProtection struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp. If the receiver or the field CpuProtection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetCpuProtection() *NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection {
	if t != nil && t.CpuProtection != nil {
		return t.CpuProtection
	}
	return nil
}

// GetDhcp returns the value of the Dhcp struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp. If the receiver or the field Dhcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetDhcp() *NokiaConf_Configure_Service_Vpls_MeshSdp_Dhcp {
	if t != nil && t.Dhcp != nil {
		return t.Dhcp
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetEgress() *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetEthCfm returns the value of the EthCfm struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp. If the receiver or the field EthCfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetEthCfm() *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm {
	if t != nil && t.EthCfm != nil {
		return t.EthCfm
	}
	return nil
}

// GetFdb returns the value of the Fdb struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp. If the receiver or the field Fdb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetFdb() *NokiaConf_Configure_Service_Vpls_MeshSdp_Fdb {
	if t != nil && t.Fdb != nil {
		return t.Fdb
	}
	return nil
}

// GetHashLabel returns the value of the HashLabel struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp. If the receiver or the field HashLabel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetHashLabel() *NokiaConf_Configure_Service_Vpls_MeshSdp_HashLabel {
	if t != nil && t.HashLabel != nil {
		return t.HashLabel
	}
	return nil
}

// GetIgmpSnooping returns the value of the IgmpSnooping struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp. If the receiver or the field IgmpSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetIgmpSnooping() *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping {
	if t != nil && t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetIngress() *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetMldSnooping returns the value of the MldSnooping struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp. If the receiver or the field MldSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetMldSnooping() *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping {
	if t != nil && t.MldSnooping != nil {
		return t.MldSnooping
	}
	return nil
}

// GetMrp returns the value of the Mrp struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp. If the receiver or the field Mrp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetMrp() *NokiaConf_Configure_Service_Vpls_MeshSdp_Mrp {
	if t != nil && t.Mrp != nil {
		return t.Mrp
	}
	return nil
}

// GetPbb returns the value of the Pbb struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp. If the receiver or the field Pbb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetPbb() *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb {
	if t != nil && t.Pbb != nil {
		return t.Pbb
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Service_Vpls_MeshSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_MeshSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_MeshSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_MeshSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBfdTemplate retrieves the value of the leaf BfdTemplate from the NokiaConf_Configure_Service_Vpls_MeshSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdTemplate is set, it can
// safely use t.GetBfdTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetBfdTemplate() string {
	if t == nil || t.BfdTemplate == nil {
		return ""
	}
	return *t.BfdTemplate
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Service_Vpls_MeshSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetControlWord retrieves the value of the leaf ControlWord from the NokiaConf_Configure_Service_Vpls_MeshSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ControlWord is set, it can
// safely use t.GetControlWord() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ControlWord == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetControlWord() bool {
	if t == nil || t.ControlWord == nil {
		return false
	}
	return *t.ControlWord
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vpls_MeshSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntropyLabel retrieves the value of the leaf EntropyLabel from the NokiaConf_Configure_Service_Vpls_MeshSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntropyLabel is set, it can
// safely use t.GetEntropyLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntropyLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetEntropyLabel() YANGEmpty {
	if t == nil || t.EntropyLabel == false {
		return false
	}
	return t.EntropyLabel
}

// GetEtreeLeaf retrieves the value of the leaf EtreeLeaf from the NokiaConf_Configure_Service_Vpls_MeshSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EtreeLeaf is set, it can
// safely use t.GetEtreeLeaf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EtreeLeaf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetEtreeLeaf() bool {
	if t == nil || t.EtreeLeaf == nil {
		return false
	}
	return *t.EtreeLeaf
}

// GetEtreeRootLeafTag retrieves the value of the leaf EtreeRootLeafTag from the NokiaConf_Configure_Service_Vpls_MeshSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EtreeRootLeafTag is set, it can
// safely use t.GetEtreeRootLeafTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EtreeRootLeafTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetEtreeRootLeafTag() bool {
	if t == nil || t.EtreeRootLeafTag == nil {
		return false
	}
	return *t.EtreeRootLeafTag
}

// GetForceVcForwarding retrieves the value of the leaf ForceVcForwarding from the NokiaConf_Configure_Service_Vpls_MeshSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForceVcForwarding is set, it can
// safely use t.GetForceVcForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForceVcForwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetForceVcForwarding() E_NokiaConf_Configure_Service_Vpls_MeshSdp_ForceVcForwarding {
	if t == nil || t.ForceVcForwarding == 0 {
		return 0
	}
	return t.ForceVcForwarding
}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_Service_Vpls_MeshSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// GetVcType retrieves the value of the leaf VcType from the NokiaConf_Configure_Service_Vpls_MeshSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcType is set, it can
// safely use t.GetVcType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetVcType() E_NokiaTypesServices_VplsSdpBindVcType {
	if t == nil || t.VcType == 0 {
		return NokiaTypesServices_VplsSdpBindVcType_ether
	}
	return t.VcType
}

// GetVlanVcTag retrieves the value of the leaf VlanVcTag from the NokiaConf_Configure_Service_Vpls_MeshSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanVcTag is set, it can
// safely use t.GetVlanVcTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanVcTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) GetVlanVcTag() uint32 {
	if t == nil || t.VlanVcTag == nil {
		return 0
	}
	return *t.VlanVcTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.ControlWord == nil {
		var v bool = false
		t.ControlWord = &v
	}
	if t.EtreeLeaf == nil {
		var v bool = false
		t.EtreeLeaf = &v
	}
	if t.EtreeRootLeafTag == nil {
		var v bool = false
		t.EtreeRootLeafTag = &v
	}
	if t.VcType == 0 {
		t.VcType = NokiaTypesServices_VplsSdpBindVcType_ether
	}
	t.Bfd.PopulateDefaults()
	t.BfdLiveness.PopulateDefaults()
	t.CpuProtection.PopulateDefaults()
	t.Dhcp.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.EthCfm.PopulateDefaults()
	t.Fdb.PopulateDefaults()
	t.HashLabel.PopulateDefaults()
	t.IgmpSnooping.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.MldSnooping.PopulateDefaults()
	t.Mrp.PopulateDefaults()
	t.Pbb.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_MeshSdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SdpBindId == nil {
		return nil, fmt.Errorf("nil value for key SdpBindId")
	}

	return map[string]interface{}{
		"sdp-bind-id": *t.SdpBindId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd represents the /nokia-conf/configure/service/vpls/mesh-sdp/bfd YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd struct {
	BfdLiveness *NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd_BfdLiveness `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	BfdTemplate *string                                                   `path:"bfd-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd) IsYANGGoStruct() {}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd) GetOrCreateBfdLiveness() *NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd_BfdLiveness{}
	return t.BfdLiveness
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd) GetBfdLiveness() *NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetBfdTemplate retrieves the value of the leaf BfdTemplate from the NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdTemplate is set, it can
// safely use t.GetBfdTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd) GetBfdTemplate() string {
	if t == nil || t.BfdTemplate == nil {
		return ""
	}
	return *t.BfdTemplate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BfdLiveness.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_BfdLiveness represents the /nokia-conf/configure/service/vpls/mesh-sdp/bfd-liveness YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_BfdLiveness struct {
	Encap E_NokiaTypesServices_BfdEncap `path:"encap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_BfdLiveness) IsYANGGoStruct() {}

// GetEncap retrieves the value of the leaf Encap from the NokiaConf_Configure_Service_Vpls_MeshSdp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Encap is set, it can
// safely use t.GetEncap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Encap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_BfdLiveness) GetEncap() E_NokiaTypesServices_BfdEncap {
	if t == nil || t.Encap == 0 {
		return NokiaTypesServices_BfdEncap_ipv4
	}
	return t.Encap
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Encap == 0 {
		t.Encap = NokiaTypesServices_BfdEncap_ipv4
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_BfdLiveness.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd_BfdLiveness represents the /nokia-conf/configure/service/vpls/mesh-sdp/bfd/bfd-liveness YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd_BfdLiveness struct {
	Encap E_NokiaTypesServices_BfdEncap `path:"encap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd_BfdLiveness) IsYANGGoStruct() {}

// GetEncap retrieves the value of the leaf Encap from the NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Encap is set, it can
// safely use t.GetEncap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Encap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd_BfdLiveness) GetEncap() E_NokiaTypesServices_BfdEncap {
	if t == nil || t.Encap == 0 {
		return NokiaTypesServices_BfdEncap_ipv4
	}
	return t.Encap
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Encap == 0 {
		t.Encap = NokiaTypesServices_BfdEncap_ipv4
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd_BfdLiveness.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Bfd_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection represents the /nokia-conf/configure/service/vpls/mesh-sdp/cpu-protection YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection struct {
	EthCfmMonitoring *NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring `path:"eth-cfm-monitoring" module:"nokia-conf" yangPresence:"true"`
	MacMonitoring    YANGEmpty                                                                `path:"mac-monitoring" module:"nokia-conf"`
	PolicyId         *uint32                                                                  `path:"policy-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection) IsYANGGoStruct() {}

// GetOrCreateEthCfmMonitoring retrieves the value of the EthCfmMonitoring field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection) GetOrCreateEthCfmMonitoring() *NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring {
	if t.EthCfmMonitoring != nil {
		return t.EthCfmMonitoring
	}
	t.EthCfmMonitoring = &NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring{}
	return t.EthCfmMonitoring
}

// GetEthCfmMonitoring returns the value of the EthCfmMonitoring struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection. If the receiver or the field EthCfmMonitoring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection) GetEthCfmMonitoring() *NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring {
	if t != nil && t.EthCfmMonitoring != nil {
		return t.EthCfmMonitoring
	}
	return nil
}

// GetMacMonitoring retrieves the value of the leaf MacMonitoring from the NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacMonitoring is set, it can
// safely use t.GetMacMonitoring() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacMonitoring == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection) GetMacMonitoring() YANGEmpty {
	if t == nil || t.MacMonitoring == false {
		return false
	}
	return t.MacMonitoring
}

// GetPolicyId retrieves the value of the leaf PolicyId from the NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyId is set, it can
// safely use t.GetPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection) GetPolicyId() uint32 {
	if t == nil || t.PolicyId == nil {
		return 0
	}
	return *t.PolicyId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthCfmMonitoring.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring represents the /nokia-conf/configure/service/vpls/mesh-sdp/cpu-protection/eth-cfm-monitoring YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring struct {
	Aggregate YANGEmpty `path:"aggregate" module:"nokia-conf"`
	Car       YANGEmpty `path:"car" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring) IsYANGGoStruct() {}

// GetAggregate retrieves the value of the leaf Aggregate from the NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aggregate is set, it can
// safely use t.GetAggregate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aggregate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring) GetAggregate() YANGEmpty {
	if t == nil || t.Aggregate == false {
		return false
	}
	return t.Aggregate
}

// GetCar retrieves the value of the leaf Car from the NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Car is set, it can
// safely use t.GetCar() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Car == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring) GetCar() YANGEmpty {
	if t == nil || t.Car == false {
		return false
	}
	return t.Car
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_Dhcp represents the /nokia-conf/configure/service/vpls/mesh-sdp/dhcp YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_Dhcp struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string  `path:"description" module:"nokia-conf"`
	Snoop              *bool    `path:"snoop" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_Dhcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Dhcp) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_MeshSdp_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Dhcp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_MeshSdp_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Dhcp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vpls_MeshSdp_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Dhcp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSnoop retrieves the value of the leaf Snoop from the NokiaConf_Configure_Service_Vpls_MeshSdp_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Snoop is set, it can
// safely use t.GetSnoop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Snoop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Dhcp) GetSnoop() bool {
	if t == nil || t.Snoop == nil {
		return false
	}
	return *t.Snoop
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_Dhcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Dhcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Snoop == nil {
		var v bool = false
		t.Snoop = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Dhcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_Dhcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Dhcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Dhcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_Dhcp.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Dhcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_Egress represents the /nokia-conf/configure/service/vpls/mesh-sdp/egress YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_Egress struct {
	Filter                     *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Filter                     `path:"filter" module:"nokia-conf"`
	MfibAllowedMdaDestinations *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations `path:"mfib-allowed-mda-destinations" module:"nokia-conf"`
	Qos                        *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos                        `path:"qos" module:"nokia-conf"`
	VcLabel                    *uint32                                                                     `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Egress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress) GetOrCreateFilter() *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Filter{}
	return t.Filter
}

// GetOrCreateMfibAllowedMdaDestinations retrieves the value of the MfibAllowedMdaDestinations field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress) GetOrCreateMfibAllowedMdaDestinations() *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations {
	if t.MfibAllowedMdaDestinations != nil {
		return t.MfibAllowedMdaDestinations
	}
	t.MfibAllowedMdaDestinations = &NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations{}
	return t.MfibAllowedMdaDestinations
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress) GetOrCreateQos() *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp_Egress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress) GetFilter() *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetMfibAllowedMdaDestinations returns the value of the MfibAllowedMdaDestinations struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp_Egress. If the receiver or the field MfibAllowedMdaDestinations is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress) GetMfibAllowedMdaDestinations() *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations {
	if t != nil && t.MfibAllowedMdaDestinations != nil {
		return t.MfibAllowedMdaDestinations
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress) GetQos() *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Service_Vpls_MeshSdp_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.MfibAllowedMdaDestinations.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_Egress.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Filter represents the /nokia-conf/configure/service/vpls/mesh-sdp/egress/filter YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
	Mac  *string `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Filter) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Filter.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations represents the /nokia-conf/configure/service/vpls/mesh-sdp/egress/mfib-allowed-mda-destinations YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations struct {
	Mda map[string]*NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda `path:"mda" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations) IsYANGGoStruct() {}

// NewMda creates a new entry in the Mda list of the
// NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations) NewMda(MdaId string) (*NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mda == nil {
		t.Mda = make(map[string]*NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda)
	}

	key := MdaId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mda[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mda", key)
	}

	t.Mda[key] = &NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda{
		MdaId: &MdaId,
	}

	return t.Mda[key], nil
}

// RenameMda renames an entry in the list Mda within
// the NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations) RenameMda(oldK, newK string) error {
	if _, ok := t.Mda[newK]; ok {
		return fmt.Errorf("key %v already exists in Mda", newK)
	}

	e, ok := t.Mda[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mda", oldK)
	}
	e.MdaId = &newK

	t.Mda[newK] = e
	delete(t.Mda, oldK)
	return nil
}

// GetOrCreateMda retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations) GetOrCreateMda(MdaId string) *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda {

	key := MdaId

	if v, ok := t.Mda[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMda(MdaId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMda got unexpected error: %v", err))
	}
	return v
}

// GetMda retrieves the value with the specified key from
// the Mda map field of NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations) GetMda(MdaId string) *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda {

	if t == nil {
		return nil
	}

	key := MdaId

	if lm, ok := t.Mda[key]; ok {
		return lm
	}
	return nil
}

// DeleteMda deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations) DeleteMda(MdaId string) {
	key := MdaId

	delete(t.Mda, key)
}

// AppendMda appends the supplied NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda struct to the
// list Mda of NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations) AppendMda(v *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda) error {
	if v.MdaId == nil {
		return fmt.Errorf("invalid nil key received for MdaId")
	}

	key := *v.MdaId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mda == nil {
		t.Mda = make(map[string]*NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda)
	}

	if _, ok := t.Mda[key]; ok {
		return fmt.Errorf("duplicate key for list Mda %v", key)
	}

	t.Mda[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Mda {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda represents the /nokia-conf/configure/service/vpls/mesh-sdp/egress/mfib-allowed-mda-destinations/mda YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda struct {
	MdaId *string `path:"mda-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda) IsYANGGoStruct() {
}

// GetMdaId retrieves the value of the leaf MdaId from the NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdaId is set, it can
// safely use t.GetMdaId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdaId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda) GetMdaId() string {
	if t == nil || t.MdaId == nil {
		return ""
	}
	return *t.MdaId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MdaId == nil {
		return nil, fmt.Errorf("nil value for key MdaId")
	}

	return map[string]interface{}{
		"mda-id": *t.MdaId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos represents the /nokia-conf/configure/service/vpls/mesh-sdp/egress/qos YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos struct {
	Network *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network `path:"network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos) IsYANGGoStruct() {}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos) GetOrCreateNetwork() *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network{}
	return t.Network
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos) GetNetwork() *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Network.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network represents the /nokia-conf/configure/service/vpls/mesh-sdp/egress/qos/network YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network struct {
	PolicyName        *string                                                                        `path:"policy-name" module:"nokia-conf"`
	PortRedirectGroup *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup `path:"port-redirect-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network) IsYANGGoStruct() {}

// GetOrCreatePortRedirectGroup retrieves the value of the PortRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network) GetOrCreatePortRedirectGroup() *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup {
	if t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	t.PortRedirectGroup = &NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup{}
	return t.PortRedirectGroup
}

// GetPortRedirectGroup returns the value of the PortRedirectGroup struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network. If the receiver or the field PortRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network) GetPortRedirectGroup() *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup {
	if t != nil && t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup represents the /nokia-conf/configure/service/vpls/mesh-sdp/egress/qos/network/port-redirect-group YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm represents the /nokia-conf/configure/service/vpls/mesh-sdp/eth-cfm YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm struct {
	ApplyGroups              []string                                                                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude       []string                                                                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	CollectLmmFcStats        *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats                                                             `path:"collect-lmm-fc-stats" module:"nokia-conf"`
	CollectLmmStats          *bool                                                                                                                          `path:"collect-lmm-stats" module:"nokia-conf"`
	Mep                      map[NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Key]*NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep               `path:"mep" module:"nokia-conf"`
	Mip                      map[NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip_PrimaryVlan_Union]*NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip `path:"mip" module:"nokia-conf"`
	SquelchIngressCtagLevels []uint32                                                                                                                       `path:"squelch-ingress-ctag-levels" module:"nokia-conf"`
	SquelchIngressLevels     []uint32                                                                                                                       `path:"squelch-ingress-levels" module:"nokia-conf"`
	VmepFilter               *bool                                                                                                                          `path:"vmep-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm) IsYANGGoStruct() {}

// NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Key represents the key for list Mep of element /nokia-conf/configure/service/vpls/mesh-sdp/eth-cfm.
type NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Key struct {
	MdAdminName string `path:"md-admin-name"`
	MaAdminName string `path:"ma-admin-name"`
	MepId       uint16 `path:"mep-id"`
}

// NewMep creates a new entry in the Mep list of the
// NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm) NewMep(MdAdminName string, MaAdminName string, MepId uint16) (*NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Key]*NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep)
	}

	key := NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mep[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mep", key)
	}

	t.Mep[key] = &NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep{
		MdAdminName: &MdAdminName,
		MaAdminName: &MaAdminName,
		MepId:       &MepId,
	}

	return t.Mep[key], nil
}

// RenameMep renames an entry in the list Mep within
// the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm) RenameMep(oldK, newK NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Key) error {
	if _, ok := t.Mep[newK]; ok {
		return fmt.Errorf("key %v already exists in Mep", newK)
	}

	e, ok := t.Mep[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mep", oldK)
	}
	e.MdAdminName = &newK.MdAdminName
	e.MaAdminName = &newK.MaAdminName
	e.MepId = &newK.MepId

	t.Mep[newK] = e
	delete(t.Mep, oldK)
	return nil
}

// GetOrCreateMep retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm) GetOrCreateMep(MdAdminName string, MaAdminName string, MepId uint16) *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep {

	key := NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if v, ok := t.Mep[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMep(MdAdminName, MaAdminName, MepId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMep got unexpected error: %v", err))
	}
	return v
}

// GetMep retrieves the value with the specified key from
// the Mep map field of NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm) GetMep(MdAdminName string, MaAdminName string, MepId uint16) *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if lm, ok := t.Mep[key]; ok {
		return lm
	}
	return nil
}

// DeleteMep deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm) DeleteMep(MdAdminName string, MaAdminName string, MepId uint16) {
	key := NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	delete(t.Mep, key)
}

// AppendMep appends the supplied NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep struct to the
// list Mep of NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm) AppendMep(v *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep) error {
	if v.MdAdminName == nil {
		return fmt.Errorf("invalid nil key for MdAdminName")
	}

	if v.MaAdminName == nil {
		return fmt.Errorf("invalid nil key for MaAdminName")
	}

	if v.MepId == nil {
		return fmt.Errorf("invalid nil key for MepId")
	}

	key := NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Key{
		MdAdminName: *v.MdAdminName,
		MaAdminName: *v.MaAdminName,
		MepId:       *v.MepId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Key]*NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep)
	}

	if _, ok := t.Mep[key]; ok {
		return fmt.Errorf("duplicate key for list Mep %v", key)
	}

	t.Mep[key] = v
	return nil
}

// NewMip creates a new entry in the Mip list of the
// NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm) NewMip(PrimaryVlan NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip_PrimaryVlan_Union) (*NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mip == nil {
		t.Mip = make(map[NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip_PrimaryVlan_Union]*NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip)
	}

	key := PrimaryVlan

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mip[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mip", key)
	}

	t.Mip[key] = &NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip{
		PrimaryVlan: PrimaryVlan,
	}

	return t.Mip[key], nil
}

// RenameMip renames an entry in the list Mip within
// the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm) RenameMip(oldK, newK NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip_PrimaryVlan_Union) error {
	if _, ok := t.Mip[newK]; ok {
		return fmt.Errorf("key %v already exists in Mip", newK)
	}

	e, ok := t.Mip[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mip", oldK)
	}
	e.PrimaryVlan = newK

	t.Mip[newK] = e
	delete(t.Mip, oldK)
	return nil
}

// GetOrCreateMip retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm) GetOrCreateMip(PrimaryVlan NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip_PrimaryVlan_Union) *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip {

	key := PrimaryVlan

	if v, ok := t.Mip[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMip(PrimaryVlan)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMip got unexpected error: %v", err))
	}
	return v
}

// GetMip retrieves the value with the specified key from
// the Mip map field of NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm) GetMip(PrimaryVlan NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip_PrimaryVlan_Union) *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip {

	if t == nil {
		return nil
	}

	key := PrimaryVlan

	if lm, ok := t.Mip[key]; ok {
		return lm
	}
	return nil
}

// DeleteMip deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm) DeleteMip(PrimaryVlan NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip_PrimaryVlan_Union) {
	key := PrimaryVlan

	delete(t.Mip, key)
}

// AppendMip appends the supplied NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip struct to the
// list Mip of NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm) AppendMip(v *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip) error {
	key := v.PrimaryVlan

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mip == nil {
		t.Mip = make(map[NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip_PrimaryVlan_Union]*NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip)
	}

	if _, ok := t.Mip[key]; ok {
		return fmt.Errorf("duplicate key for list Mip %v", key)
	}

	t.Mip[key] = v
	return nil
}

// GetOrCreateCollectLmmFcStats retrieves the value of the CollectLmmFcStats field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm) GetOrCreateCollectLmmFcStats() *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats {
	if t.CollectLmmFcStats != nil {
		return t.CollectLmmFcStats
	}
	t.CollectLmmFcStats = &NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats{}
	return t.CollectLmmFcStats
}

// GetCollectLmmFcStats returns the value of the CollectLmmFcStats struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm. If the receiver or the field CollectLmmFcStats is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm) GetCollectLmmFcStats() *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats {
	if t != nil && t.CollectLmmFcStats != nil {
		return t.CollectLmmFcStats
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCollectLmmStats retrieves the value of the leaf CollectLmmStats from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectLmmStats is set, it can
// safely use t.GetCollectLmmStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectLmmStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm) GetCollectLmmStats() bool {
	if t == nil || t.CollectLmmStats == nil {
		return false
	}
	return *t.CollectLmmStats
}

// GetSquelchIngressCtagLevels retrieves the value of the leaf SquelchIngressCtagLevels from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SquelchIngressCtagLevels is set, it can
// safely use t.GetSquelchIngressCtagLevels() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SquelchIngressCtagLevels == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm) GetSquelchIngressCtagLevels() []uint32 {
	if t == nil || t.SquelchIngressCtagLevels == nil {
		return nil
	}
	return t.SquelchIngressCtagLevels
}

// GetSquelchIngressLevels retrieves the value of the leaf SquelchIngressLevels from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SquelchIngressLevels is set, it can
// safely use t.GetSquelchIngressLevels() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SquelchIngressLevels == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm) GetSquelchIngressLevels() []uint32 {
	if t == nil || t.SquelchIngressLevels == nil {
		return nil
	}
	return t.SquelchIngressLevels
}

// GetVmepFilter retrieves the value of the leaf VmepFilter from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VmepFilter is set, it can
// safely use t.GetVmepFilter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VmepFilter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm) GetVmepFilter() bool {
	if t == nil || t.VmepFilter == nil {
		return false
	}
	return *t.VmepFilter
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectLmmStats == nil {
		var v bool = false
		t.CollectLmmStats = &v
	}
	if t.VmepFilter == nil {
		var v bool = false
		t.VmepFilter = &v
	}
	t.CollectLmmFcStats.PopulateDefaults()
	for _, e := range t.Mep {
		e.PopulateDefaults()
	}
	for _, e := range t.Mip {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats represents the /nokia-conf/configure/service/vpls/mesh-sdp/eth-cfm/collect-lmm-fc-stats YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats struct {
	Fc          []E_NokiaTypesEthCfm_FcType `path:"fc" module:"nokia-conf"`
	FcInProfile []E_NokiaTypesEthCfm_FcType `path:"fc-in-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats) GetFc() []E_NokiaTypesEthCfm_FcType {
	if t == nil || t.Fc == nil {
		return nil
	}
	return t.Fc
}

// GetFcInProfile retrieves the value of the leaf FcInProfile from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcInProfile is set, it can
// safely use t.GetFcInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcInProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats) GetFcInProfile() []E_NokiaTypesEthCfm_FcType {
	if t == nil || t.FcInProfile == nil {
		return nil
	}
	return t.FcInProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep represents the /nokia-conf/configure/service/vpls/mesh-sdp/eth-cfm/mep YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep struct {
	AdminState           E_NokiaTypesSros_AdminState                                            `path:"admin-state" module:"nokia-conf"`
	Ais                  *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Ais               `path:"ais" module:"nokia-conf" yangPresence:"true"`
	AlarmNotification    *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification `path:"alarm-notification" module:"nokia-conf"`
	ApplyGroups          []string                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	Ccm                  *bool                                                                  `path:"ccm" module:"nokia-conf"`
	CcmLtmPriority       *uint8                                                                 `path:"ccm-ltm-priority" module:"nokia-conf"`
	CcmPaddingSize       *uint32                                                                `path:"ccm-padding-size" module:"nokia-conf"`
	CfmVlanTag           *string                                                                `path:"cfm-vlan-tag" module:"nokia-conf"`
	Csf                  *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Csf               `path:"csf" module:"nokia-conf" yangPresence:"true"`
	Description          *string                                                                `path:"description" module:"nokia-conf"`
	Direction            E_NokiaTypesEthCfm_MpDirection                                         `path:"direction" module:"nokia-conf"`
	EthTest              *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest           `path:"eth-test" module:"nokia-conf" yangPresence:"true"`
	FaultPropagation     E_NokiaTypesEthCfm_FaultPropagationType                                `path:"fault-propagation" module:"nokia-conf"`
	Grace                *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace             `path:"grace" module:"nokia-conf"`
	InstallMep           *bool                                                                  `path:"install-mep" module:"nokia-conf"`
	LbmSvcActResponder   *bool                                                                  `path:"lbm-svc-act-responder" module:"nokia-conf"`
	LowPriorityDefect    E_NokiaTypesEthCfm_LowestAlarmPriority                                 `path:"low-priority-defect" module:"nokia-conf"`
	MaAdminName          *string                                                                `path:"ma-admin-name" module:"nokia-conf"`
	MacAddress           *string                                                                `path:"mac-address" module:"nokia-conf"`
	MdAdminName          *string                                                                `path:"md-admin-name" module:"nokia-conf"`
	MepId                *uint16                                                                `path:"mep-id" module:"nokia-conf"`
	OneWayDelayThreshold *uint32                                                                `path:"one-way-delay-threshold" module:"nokia-conf"`
	PrimaryVlan          *bool                                                                  `path:"primary-vlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep) IsYANGGoStruct() {}

// GetOrCreateAis retrieves the value of the Ais field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep) GetOrCreateAis() *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Ais {
	if t.Ais != nil {
		return t.Ais
	}
	t.Ais = &NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Ais{}
	return t.Ais
}

// GetOrCreateAlarmNotification retrieves the value of the AlarmNotification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep) GetOrCreateAlarmNotification() *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification {
	if t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	t.AlarmNotification = &NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification{}
	return t.AlarmNotification
}

// GetOrCreateCsf retrieves the value of the Csf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep) GetOrCreateCsf() *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Csf {
	if t.Csf != nil {
		return t.Csf
	}
	t.Csf = &NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Csf{}
	return t.Csf
}

// GetOrCreateEthTest retrieves the value of the EthTest field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep) GetOrCreateEthTest() *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest {
	if t.EthTest != nil {
		return t.EthTest
	}
	t.EthTest = &NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest{}
	return t.EthTest
}

// GetOrCreateGrace retrieves the value of the Grace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep) GetOrCreateGrace() *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace {
	if t.Grace != nil {
		return t.Grace
	}
	t.Grace = &NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace{}
	return t.Grace
}

// GetAis returns the value of the Ais struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep. If the receiver or the field Ais is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep) GetAis() *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Ais {
	if t != nil && t.Ais != nil {
		return t.Ais
	}
	return nil
}

// GetAlarmNotification returns the value of the AlarmNotification struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep. If the receiver or the field AlarmNotification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep) GetAlarmNotification() *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification {
	if t != nil && t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	return nil
}

// GetCsf returns the value of the Csf struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep. If the receiver or the field Csf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep) GetCsf() *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Csf {
	if t != nil && t.Csf != nil {
		return t.Csf
	}
	return nil
}

// GetEthTest returns the value of the EthTest struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep. If the receiver or the field EthTest is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep) GetEthTest() *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest {
	if t != nil && t.EthTest != nil {
		return t.EthTest
	}
	return nil
}

// GetGrace returns the value of the Grace struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep. If the receiver or the field Grace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep) GetGrace() *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace {
	if t != nil && t.Grace != nil {
		return t.Grace
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCcm retrieves the value of the leaf Ccm from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ccm is set, it can
// safely use t.GetCcm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ccm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep) GetCcm() bool {
	if t == nil || t.Ccm == nil {
		return false
	}
	return *t.Ccm
}

// GetCcmLtmPriority retrieves the value of the leaf CcmLtmPriority from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmLtmPriority is set, it can
// safely use t.GetCcmLtmPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmLtmPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep) GetCcmLtmPriority() uint8 {
	if t == nil || t.CcmLtmPriority == nil {
		return 7
	}
	return *t.CcmLtmPriority
}

// GetCcmPaddingSize retrieves the value of the leaf CcmPaddingSize from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmPaddingSize is set, it can
// safely use t.GetCcmPaddingSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmPaddingSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep) GetCcmPaddingSize() uint32 {
	if t == nil || t.CcmPaddingSize == nil {
		return 0
	}
	return *t.CcmPaddingSize
}

// GetCfmVlanTag retrieves the value of the leaf CfmVlanTag from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CfmVlanTag is set, it can
// safely use t.GetCfmVlanTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CfmVlanTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep) GetCfmVlanTag() string {
	if t == nil || t.CfmVlanTag == nil {
		return ""
	}
	return *t.CfmVlanTag
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep) GetDirection() E_NokiaTypesEthCfm_MpDirection {
	if t == nil || t.Direction == 0 {
		return NokiaTypesEthCfm_MpDirection_down
	}
	return t.Direction
}

// GetFaultPropagation retrieves the value of the leaf FaultPropagation from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FaultPropagation is set, it can
// safely use t.GetFaultPropagation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FaultPropagation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep) GetFaultPropagation() E_NokiaTypesEthCfm_FaultPropagationType {
	if t == nil || t.FaultPropagation == 0 {
		return 0
	}
	return t.FaultPropagation
}

// GetInstallMep retrieves the value of the leaf InstallMep from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstallMep is set, it can
// safely use t.GetInstallMep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstallMep == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep) GetInstallMep() bool {
	if t == nil || t.InstallMep == nil {
		return false
	}
	return *t.InstallMep
}

// GetLbmSvcActResponder retrieves the value of the leaf LbmSvcActResponder from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LbmSvcActResponder is set, it can
// safely use t.GetLbmSvcActResponder() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LbmSvcActResponder == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep) GetLbmSvcActResponder() bool {
	if t == nil || t.LbmSvcActResponder == nil {
		return false
	}
	return *t.LbmSvcActResponder
}

// GetLowPriorityDefect retrieves the value of the leaf LowPriorityDefect from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPriorityDefect is set, it can
// safely use t.GetLowPriorityDefect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPriorityDefect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep) GetLowPriorityDefect() E_NokiaTypesEthCfm_LowestAlarmPriority {
	if t == nil || t.LowPriorityDefect == 0 {
		return NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	return t.LowPriorityDefect
}

// GetMaAdminName retrieves the value of the leaf MaAdminName from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaAdminName is set, it can
// safely use t.GetMaAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep) GetMaAdminName() string {
	if t == nil || t.MaAdminName == nil {
		return ""
	}
	return *t.MaAdminName
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetMdAdminName retrieves the value of the leaf MdAdminName from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdAdminName is set, it can
// safely use t.GetMdAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep) GetMdAdminName() string {
	if t == nil || t.MdAdminName == nil {
		return ""
	}
	return *t.MdAdminName
}

// GetMepId retrieves the value of the leaf MepId from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MepId is set, it can
// safely use t.GetMepId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MepId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep) GetMepId() uint16 {
	if t == nil || t.MepId == nil {
		return 0
	}
	return *t.MepId
}

// GetOneWayDelayThreshold retrieves the value of the leaf OneWayDelayThreshold from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OneWayDelayThreshold is set, it can
// safely use t.GetOneWayDelayThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OneWayDelayThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep) GetOneWayDelayThreshold() uint32 {
	if t == nil || t.OneWayDelayThreshold == nil {
		return 3
	}
	return *t.OneWayDelayThreshold
}

// GetPrimaryVlan retrieves the value of the leaf PrimaryVlan from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrimaryVlan is set, it can
// safely use t.GetPrimaryVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrimaryVlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep) GetPrimaryVlan() bool {
	if t == nil || t.PrimaryVlan == nil {
		return false
	}
	return *t.PrimaryVlan
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Ccm == nil {
		var v bool = false
		t.Ccm = &v
	}
	if t.CcmLtmPriority == nil {
		var v uint8 = 7
		t.CcmLtmPriority = &v
	}
	if t.Direction == 0 {
		t.Direction = NokiaTypesEthCfm_MpDirection_down
	}
	if t.InstallMep == nil {
		var v bool = false
		t.InstallMep = &v
	}
	if t.LowPriorityDefect == 0 {
		t.LowPriorityDefect = NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	if t.OneWayDelayThreshold == nil {
		var v uint32 = 3
		t.OneWayDelayThreshold = &v
	}
	if t.PrimaryVlan == nil {
		var v bool = false
		t.PrimaryVlan = &v
	}
	t.Ais.PopulateDefaults()
	t.AlarmNotification.PopulateDefaults()
	t.Csf.PopulateDefaults()
	t.EthTest.PopulateDefaults()
	t.Grace.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MaAdminName == nil {
		return nil, fmt.Errorf("nil value for key MaAdminName")
	}

	if t.MdAdminName == nil {
		return nil, fmt.Errorf("nil value for key MdAdminName")
	}

	if t.MepId == nil {
		return nil, fmt.Errorf("nil value for key MepId")
	}

	return map[string]interface{}{
		"ma-admin-name": *t.MaAdminName,
		"md-admin-name": *t.MdAdminName,
		"mep-id":        *t.MepId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Ais represents the /nokia-conf/configure/service/vpls/mesh-sdp/eth-cfm/mep/ais YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Ais struct {
	ClientMegLevel    []uint32                                                                    `path:"client-meg-level" module:"nokia-conf"`
	InterfaceSupport  *bool                                                                       `path:"interface-support" module:"nokia-conf"`
	Interval          *uint32                                                                     `path:"interval" module:"nokia-conf"`
	LowPriorityDefect E_NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Ais_LowPriorityDefect `path:"low-priority-defect" module:"nokia-conf"`
	Priority          *uint8                                                                      `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Ais implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Ais) IsYANGGoStruct() {}

// GetClientMegLevel retrieves the value of the leaf ClientMegLevel from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientMegLevel is set, it can
// safely use t.GetClientMegLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientMegLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Ais) GetClientMegLevel() []uint32 {
	if t == nil || t.ClientMegLevel == nil {
		return nil
	}
	return t.ClientMegLevel
}

// GetInterfaceSupport retrieves the value of the leaf InterfaceSupport from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceSupport is set, it can
// safely use t.GetInterfaceSupport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceSupport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Ais) GetInterfaceSupport() bool {
	if t == nil || t.InterfaceSupport == nil {
		return false
	}
	return *t.InterfaceSupport
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Ais) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 1
	}
	return *t.Interval
}

// GetLowPriorityDefect retrieves the value of the leaf LowPriorityDefect from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPriorityDefect is set, it can
// safely use t.GetLowPriorityDefect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPriorityDefect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Ais) GetLowPriorityDefect() E_NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Ais_LowPriorityDefect {
	if t == nil || t.LowPriorityDefect == 0 {
		return NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Ais_LowPriorityDefect_all_def
	}
	return t.LowPriorityDefect
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Ais) GetPriority() uint8 {
	if t == nil || t.Priority == nil {
		return 7
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Ais
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Ais) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InterfaceSupport == nil {
		var v bool = false
		t.InterfaceSupport = &v
	}
	if t.Interval == nil {
		var v uint32 = 1
		t.Interval = &v
	}
	if t.LowPriorityDefect == 0 {
		t.LowPriorityDefect = NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Ais_LowPriorityDefect_all_def
	}
	if t.Priority == nil {
		var v uint8 = 7
		t.Priority = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Ais) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Ais"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Ais) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Ais) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Ais.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Ais) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification represents the /nokia-conf/configure/service/vpls/mesh-sdp/eth-cfm/mep/alarm-notification YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification struct {
	FngAlarmTime *int32 `path:"fng-alarm-time" module:"nokia-conf"`
	FngResetTime *int32 `path:"fng-reset-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification) IsYANGGoStruct() {}

// GetFngAlarmTime retrieves the value of the leaf FngAlarmTime from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngAlarmTime is set, it can
// safely use t.GetFngAlarmTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngAlarmTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification) GetFngAlarmTime() int32 {
	if t == nil || t.FngAlarmTime == nil {
		return 0
	}
	return *t.FngAlarmTime
}

// GetFngResetTime retrieves the value of the leaf FngResetTime from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngResetTime is set, it can
// safely use t.GetFngResetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngResetTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification) GetFngResetTime() int32 {
	if t == nil || t.FngResetTime == nil {
		return 0
	}
	return *t.FngResetTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Csf represents the /nokia-conf/configure/service/vpls/mesh-sdp/eth-cfm/mep/csf YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Csf struct {
	Multiplier *float64 `path:"multiplier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Csf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Csf) IsYANGGoStruct() {}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Csf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Csf) GetMultiplier() float64 {
	if t == nil || t.Multiplier == nil {
		return 3.5
	}
	return *t.Multiplier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Csf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Csf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v float64 = 3.5
		t.Multiplier = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Csf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Csf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Csf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Csf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Csf.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Csf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest represents the /nokia-conf/configure/service/vpls/mesh-sdp/eth-cfm/mep/eth-test YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest struct {
	BitErrorThreshold *uint32                                                                  `path:"bit-error-threshold" module:"nokia-conf"`
	TestPattern       *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern `path:"test-pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest) IsYANGGoStruct() {}

// GetOrCreateTestPattern retrieves the value of the TestPattern field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest) GetOrCreateTestPattern() *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern {
	if t.TestPattern != nil {
		return t.TestPattern
	}
	t.TestPattern = &NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern{}
	return t.TestPattern
}

// GetTestPattern returns the value of the TestPattern struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest. If the receiver or the field TestPattern is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest) GetTestPattern() *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern {
	if t != nil && t.TestPattern != nil {
		return t.TestPattern
	}
	return nil
}

// GetBitErrorThreshold retrieves the value of the leaf BitErrorThreshold from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitErrorThreshold is set, it can
// safely use t.GetBitErrorThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitErrorThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest) GetBitErrorThreshold() uint32 {
	if t == nil || t.BitErrorThreshold == nil {
		return 1
	}
	return *t.BitErrorThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BitErrorThreshold == nil {
		var v uint32 = 1
		t.BitErrorThreshold = &v
	}
	t.TestPattern.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern represents the /nokia-conf/configure/service/vpls/mesh-sdp/eth-cfm/mep/eth-test/test-pattern YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern struct {
	CrcTlv  *bool                                                                             `path:"crc-tlv" module:"nokia-conf"`
	Pattern E_NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern_Pattern `path:"pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern) IsYANGGoStruct() {}

// GetCrcTlv retrieves the value of the leaf CrcTlv from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CrcTlv is set, it can
// safely use t.GetCrcTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CrcTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern) GetCrcTlv() bool {
	if t == nil || t.CrcTlv == nil {
		return false
	}
	return *t.CrcTlv
}

// GetPattern retrieves the value of the leaf Pattern from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pattern is set, it can
// safely use t.GetPattern() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pattern == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern) GetPattern() E_NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern_Pattern {
	if t == nil || t.Pattern == 0 {
		return NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
	return t.Pattern
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CrcTlv == nil {
		var v bool = false
		t.CrcTlv = &v
	}
	if t.Pattern == 0 {
		t.Pattern = NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace represents the /nokia-conf/configure/service/vpls/mesh-sdp/eth-cfm/mep/grace YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace struct {
	EthEd       *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd       `path:"eth-ed" module:"nokia-conf"`
	EthVsmGrace *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace `path:"eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace) IsYANGGoStruct() {}

// GetOrCreateEthEd retrieves the value of the EthEd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace) GetOrCreateEthEd() *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd {
	if t.EthEd != nil {
		return t.EthEd
	}
	t.EthEd = &NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd{}
	return t.EthEd
}

// GetOrCreateEthVsmGrace retrieves the value of the EthVsmGrace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace) GetOrCreateEthVsmGrace() *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace {
	if t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	t.EthVsmGrace = &NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace{}
	return t.EthVsmGrace
}

// GetEthEd returns the value of the EthEd struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace. If the receiver or the field EthEd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace) GetEthEd() *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd {
	if t != nil && t.EthEd != nil {
		return t.EthEd
	}
	return nil
}

// GetEthVsmGrace returns the value of the EthVsmGrace struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace. If the receiver or the field EthVsmGrace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace) GetEthVsmGrace() *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace {
	if t != nil && t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthEd.PopulateDefaults()
	t.EthVsmGrace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd represents the /nokia-conf/configure/service/vpls/mesh-sdp/eth-cfm/mep/grace/eth-ed YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd struct {
	MaxRxDefectWindow *uint32 `path:"max-rx-defect-window" module:"nokia-conf"`
	Priority          *int32  `path:"priority" module:"nokia-conf"`
	RxEthEd           *bool   `path:"rx-eth-ed" module:"nokia-conf"`
	TxEthEd           *bool   `path:"tx-eth-ed" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd) IsYANGGoStruct() {}

// GetMaxRxDefectWindow retrieves the value of the leaf MaxRxDefectWindow from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRxDefectWindow is set, it can
// safely use t.GetMaxRxDefectWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRxDefectWindow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd) GetMaxRxDefectWindow() uint32 {
	if t == nil || t.MaxRxDefectWindow == nil {
		return 0
	}
	return *t.MaxRxDefectWindow
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetRxEthEd retrieves the value of the leaf RxEthEd from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthEd is set, it can
// safely use t.GetRxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd) GetRxEthEd() bool {
	if t == nil || t.RxEthEd == nil {
		return true
	}
	return *t.RxEthEd
}

// GetTxEthEd retrieves the value of the leaf TxEthEd from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthEd is set, it can
// safely use t.GetTxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd) GetTxEthEd() bool {
	if t == nil || t.TxEthEd == nil {
		return false
	}
	return *t.TxEthEd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthEd == nil {
		var v bool = true
		t.RxEthEd = &v
	}
	if t.TxEthEd == nil {
		var v bool = false
		t.TxEthEd = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace represents the /nokia-conf/configure/service/vpls/mesh-sdp/eth-cfm/mep/grace/eth-vsm-grace YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace struct {
	RxEthVsmGrace *bool `path:"rx-eth-vsm-grace" module:"nokia-conf"`
	TxEthVsmGrace *bool `path:"tx-eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace) IsYANGGoStruct() {}

// GetRxEthVsmGrace retrieves the value of the leaf RxEthVsmGrace from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthVsmGrace is set, it can
// safely use t.GetRxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace) GetRxEthVsmGrace() bool {
	if t == nil || t.RxEthVsmGrace == nil {
		return true
	}
	return *t.RxEthVsmGrace
}

// GetTxEthVsmGrace retrieves the value of the leaf TxEthVsmGrace from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthVsmGrace is set, it can
// safely use t.GetTxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace) GetTxEthVsmGrace() bool {
	if t == nil || t.TxEthVsmGrace == nil {
		return true
	}
	return *t.TxEthVsmGrace
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthVsmGrace == nil {
		var v bool = true
		t.RxEthVsmGrace = &v
	}
	if t.TxEthVsmGrace == nil {
		var v bool = true
		t.TxEthVsmGrace = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip represents the /nokia-conf/configure/service/vpls/mesh-sdp/eth-cfm/mip YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip struct {
	ApplyGroups        []string                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	CfmVlanTag         *string                                                               `path:"cfm-vlan-tag" module:"nokia-conf"`
	MacAddress         *string                                                               `path:"mac-address" module:"nokia-conf"`
	PrimaryVlan        NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip_PrimaryVlan_Union `path:"primary-vlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCfmVlanTag retrieves the value of the leaf CfmVlanTag from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CfmVlanTag is set, it can
// safely use t.GetCfmVlanTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CfmVlanTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip) GetCfmVlanTag() string {
	if t == nil || t.CfmVlanTag == nil {
		return ""
	}
	return *t.CfmVlanTag
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetPrimaryVlan retrieves the value of the leaf PrimaryVlan from the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrimaryVlan is set, it can
// safely use t.GetPrimaryVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrimaryVlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip) GetPrimaryVlan() NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip_PrimaryVlan_Union {
	if t == nil || t.PrimaryVlan == nil {
		return nil
	}
	return t.PrimaryVlan
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"primary-vlan": t.PrimaryVlan,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_EthCfm_Mip) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_Fdb represents the /nokia-conf/configure/service/vpls/mesh-sdp/fdb YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_Fdb struct {
	AutoLearnMacProtect            *bool                                                  `path:"auto-learn-mac-protect" module:"nokia-conf"`
	AutoLearnMacProtectExcludeList *string                                                `path:"auto-learn-mac-protect-exclude-list" module:"nokia-conf"`
	MacPinning                     *bool                                                  `path:"mac-pinning" module:"nokia-conf"`
	ProtectedSrcMacViolationAction E_NokiaTypesServices_SdpProtectedSrcMacViolationAction `path:"protected-src-mac-violation-action" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_Fdb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Fdb) IsYANGGoStruct() {}

// GetAutoLearnMacProtect retrieves the value of the leaf AutoLearnMacProtect from the NokiaConf_Configure_Service_Vpls_MeshSdp_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoLearnMacProtect is set, it can
// safely use t.GetAutoLearnMacProtect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoLearnMacProtect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Fdb) GetAutoLearnMacProtect() bool {
	if t == nil || t.AutoLearnMacProtect == nil {
		return false
	}
	return *t.AutoLearnMacProtect
}

// GetAutoLearnMacProtectExcludeList retrieves the value of the leaf AutoLearnMacProtectExcludeList from the NokiaConf_Configure_Service_Vpls_MeshSdp_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoLearnMacProtectExcludeList is set, it can
// safely use t.GetAutoLearnMacProtectExcludeList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoLearnMacProtectExcludeList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Fdb) GetAutoLearnMacProtectExcludeList() string {
	if t == nil || t.AutoLearnMacProtectExcludeList == nil {
		return ""
	}
	return *t.AutoLearnMacProtectExcludeList
}

// GetMacPinning retrieves the value of the leaf MacPinning from the NokiaConf_Configure_Service_Vpls_MeshSdp_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacPinning is set, it can
// safely use t.GetMacPinning() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacPinning == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Fdb) GetMacPinning() bool {
	if t == nil || t.MacPinning == nil {
		return false
	}
	return *t.MacPinning
}

// GetProtectedSrcMacViolationAction retrieves the value of the leaf ProtectedSrcMacViolationAction from the NokiaConf_Configure_Service_Vpls_MeshSdp_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtectedSrcMacViolationAction is set, it can
// safely use t.GetProtectedSrcMacViolationAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtectedSrcMacViolationAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Fdb) GetProtectedSrcMacViolationAction() E_NokiaTypesServices_SdpProtectedSrcMacViolationAction {
	if t == nil || t.ProtectedSrcMacViolationAction == 0 {
		return 0
	}
	return t.ProtectedSrcMacViolationAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_Fdb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Fdb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AutoLearnMacProtect == nil {
		var v bool = false
		t.AutoLearnMacProtect = &v
	}
	if t.MacPinning == nil {
		var v bool = false
		t.MacPinning = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Fdb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_Fdb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Fdb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Fdb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_Fdb.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Fdb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_HashLabel represents the /nokia-conf/configure/service/vpls/mesh-sdp/hash-label YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_HashLabel struct {
	SignalCapability YANGEmpty `path:"signal-capability" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_HashLabel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_HashLabel) IsYANGGoStruct() {}

// GetSignalCapability retrieves the value of the leaf SignalCapability from the NokiaConf_Configure_Service_Vpls_MeshSdp_HashLabel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SignalCapability is set, it can
// safely use t.GetSignalCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SignalCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_HashLabel) GetSignalCapability() YANGEmpty {
	if t == nil || t.SignalCapability == false {
		return false
	}
	return t.SignalCapability
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_HashLabel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_HashLabel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_HashLabel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_HashLabel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_HashLabel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_HashLabel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_HashLabel.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_HashLabel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping represents the /nokia-conf/configure/service/vpls/mesh-sdp/igmp-snooping YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping struct {
	ApplyGroups               []string                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	FastLeave                 *bool                                                         `path:"fast-leave" module:"nokia-conf"`
	ImportPolicy              *string                                                       `path:"import-policy" module:"nokia-conf"`
	MaximumNumberGroupSources *uint32                                                       `path:"maximum-number-group-sources" module:"nokia-conf"`
	MaximumNumberGroups       *uint32                                                       `path:"maximum-number-groups" module:"nokia-conf"`
	MaximumNumberSources      *uint32                                                       `path:"maximum-number-sources" module:"nokia-conf"`
	Mcac                      *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac   `path:"mcac" module:"nokia-conf"`
	MrouterPort               *bool                                                         `path:"mrouter-port" module:"nokia-conf"`
	QueryInterval             *uint32                                                       `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval   *uint32                                                       `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval     *uint32                                                       `path:"query-response-interval" module:"nokia-conf"`
	RobustCount               *uint32                                                       `path:"robust-count" module:"nokia-conf"`
	RouterAlertCheck          *bool                                                         `path:"router-alert-check" module:"nokia-conf"`
	SendQueries               *bool                                                         `path:"send-queries" module:"nokia-conf"`
	Static                    *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static `path:"static" module:"nokia-conf"`
	Version                   E_NokiaTypesIgmp_IgmpVersion                                  `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping) IsYANGGoStruct() {}

// GetOrCreateMcac retrieves the value of the Mcac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping) GetOrCreateMcac() *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac {
	if t.Mcac != nil {
		return t.Mcac
	}
	t.Mcac = &NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac{}
	return t.Mcac
}

// GetOrCreateStatic retrieves the value of the Static field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping) GetOrCreateStatic() *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static {
	if t.Static != nil {
		return t.Static
	}
	t.Static = &NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static{}
	return t.Static
}

// GetMcac returns the value of the Mcac struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping. If the receiver or the field Mcac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping) GetMcac() *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac {
	if t != nil && t.Mcac != nil {
		return t.Mcac
	}
	return nil
}

// GetStatic returns the value of the Static struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping. If the receiver or the field Static is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping) GetStatic() *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static {
	if t != nil && t.Static != nil {
		return t.Static
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFastLeave retrieves the value of the leaf FastLeave from the NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastLeave is set, it can
// safely use t.GetFastLeave() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastLeave == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping) GetFastLeave() bool {
	if t == nil || t.FastLeave == nil {
		return false
	}
	return *t.FastLeave
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetMaximumNumberGroupSources retrieves the value of the leaf MaximumNumberGroupSources from the NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroupSources is set, it can
// safely use t.GetMaximumNumberGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroupSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping) GetMaximumNumberGroupSources() uint32 {
	if t == nil || t.MaximumNumberGroupSources == nil {
		return 0
	}
	return *t.MaximumNumberGroupSources
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMaximumNumberSources retrieves the value of the leaf MaximumNumberSources from the NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberSources is set, it can
// safely use t.GetMaximumNumberSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping) GetMaximumNumberSources() uint32 {
	if t == nil || t.MaximumNumberSources == nil {
		return 0
	}
	return *t.MaximumNumberSources
}

// GetMrouterPort retrieves the value of the leaf MrouterPort from the NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MrouterPort is set, it can
// safely use t.GetMrouterPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MrouterPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping) GetMrouterPort() bool {
	if t == nil || t.MrouterPort == nil {
		return false
	}
	return *t.MrouterPort
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 125
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 10
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 10
	}
	return *t.QueryResponseInterval
}

// GetRobustCount retrieves the value of the leaf RobustCount from the NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RobustCount is set, it can
// safely use t.GetRobustCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RobustCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping) GetRobustCount() uint32 {
	if t == nil || t.RobustCount == nil {
		return 2
	}
	return *t.RobustCount
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetSendQueries retrieves the value of the leaf SendQueries from the NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendQueries is set, it can
// safely use t.GetSendQueries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendQueries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping) GetSendQueries() bool {
	if t == nil || t.SendQueries == nil {
		return false
	}
	return *t.SendQueries
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping) GetVersion() E_NokiaTypesIgmp_IgmpVersion {
	if t == nil || t.Version == 0 {
		return NokiaTypesIgmp_IgmpVersion_3
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastLeave == nil {
		var v bool = false
		t.FastLeave = &v
	}
	if t.MrouterPort == nil {
		var v bool = false
		t.MrouterPort = &v
	}
	if t.QueryInterval == nil {
		var v uint32 = 125
		t.QueryInterval = &v
	}
	if t.QueryLastMemberInterval == nil {
		var v uint32 = 10
		t.QueryLastMemberInterval = &v
	}
	if t.QueryResponseInterval == nil {
		var v uint32 = 10
		t.QueryResponseInterval = &v
	}
	if t.RobustCount == nil {
		var v uint32 = 2
		t.RobustCount = &v
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.SendQueries == nil {
		var v bool = false
		t.SendQueries = &v
	}
	if t.Version == 0 {
		t.Version = NokiaTypesIgmp_IgmpVersion_3
	}
	t.Mcac.PopulateDefaults()
	t.Static.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac represents the /nokia-conf/configure/service/vpls/mesh-sdp/igmp-snooping/mcac YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac struct {
	Bandwidth       *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth `path:"bandwidth" module:"nokia-conf"`
	InterfacePolicy *string                                                               `path:"interface-policy" module:"nokia-conf"`
	Policy          *string                                                               `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac) IsYANGGoStruct() {}

// GetOrCreateBandwidth retrieves the value of the Bandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac) GetOrCreateBandwidth() *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth {
	if t.Bandwidth != nil {
		return t.Bandwidth
	}
	t.Bandwidth = &NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth{}
	return t.Bandwidth
}

// GetBandwidth returns the value of the Bandwidth struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac. If the receiver or the field Bandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac) GetBandwidth() *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth {
	if t != nil && t.Bandwidth != nil {
		return t.Bandwidth
	}
	return nil
}

// GetInterfacePolicy retrieves the value of the leaf InterfacePolicy from the NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfacePolicy is set, it can
// safely use t.GetInterfacePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfacePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac) GetInterfacePolicy() string {
	if t == nil || t.InterfacePolicy == nil {
		return ""
	}
	return *t.InterfacePolicy
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bandwidth.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth represents the /nokia-conf/configure/service/vpls/mesh-sdp/igmp-snooping/mcac/bandwidth YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth struct {
	Mandatory NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth_Mandatory_Union `path:"mandatory" module:"nokia-conf"`
	Total     NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth_Total_Union     `path:"total" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth) IsYANGGoStruct() {}

// GetMandatory retrieves the value of the leaf Mandatory from the NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mandatory is set, it can
// safely use t.GetMandatory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mandatory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth) GetMandatory() NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth_Mandatory_Union {
	if t == nil || t.Mandatory == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Mandatory
}

// GetTotal retrieves the value of the leaf Total from the NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Total is set, it can
// safely use t.GetTotal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Total == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth) GetTotal() NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth_Total_Union {
	if t == nil || t.Total == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Total
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mandatory == nil {
		t.Mandatory = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	if t.Total == nil {
		t.Total = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static represents the /nokia-conf/configure/service/vpls/mesh-sdp/igmp-snooping/static YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static struct {
	Group map[string]*NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group `path:"group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static) NewGroup(GroupAddress string) (*NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group)
	}

	key := GroupAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group{
		GroupAddress: &GroupAddress,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupAddress = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static) GetOrCreateGroup(GroupAddress string) *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group {

	key := GroupAddress

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static) GetGroup(GroupAddress string) *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group {

	if t == nil {
		return nil
	}

	key := GroupAddress

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static) DeleteGroup(GroupAddress string) {
	key := GroupAddress

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group struct to the
// list Group of NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static) AppendGroup(v *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group) error {
	if v.GroupAddress == nil {
		return fmt.Errorf("invalid nil key received for GroupAddress")
	}

	key := *v.GroupAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group represents the /nokia-conf/configure/service/vpls/mesh-sdp/igmp-snooping/static/group YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group struct {
	ApplyGroups        []string                                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupAddress       *string                                                                               `path:"group-address" module:"nokia-conf"`
	Source             map[string]*NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source `path:"source" module:"nokia-conf"`
	Starg              YANGEmpty                                                                             `path:"starg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group) IsYANGGoStruct() {}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group) NewSource(SourceAddress string) (*NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group) GetSource(SourceAddress string) *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source struct to the
// list Source of NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group) AppendSource(v *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetStarg retrieves the value of the leaf Starg from the NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group) GetStarg() YANGEmpty {
	if t == nil || t.Starg == false {
		return false
	}
	return t.Starg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupAddress == nil {
		return nil, fmt.Errorf("nil value for key GroupAddress")
	}

	return map[string]interface{}{
		"group-address": *t.GroupAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source represents the /nokia-conf/configure/service/vpls/mesh-sdp/igmp-snooping/static/group/source YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source) IsYANGGoStruct() {}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress represents the /nokia-conf/configure/service/vpls/mesh-sdp/ingress YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress struct {
	Filter  *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Filter `path:"filter" module:"nokia-conf"`
	Qos     *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos    `path:"qos" module:"nokia-conf"`
	VcLabel *uint32                                                  `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress) GetOrCreateQos() *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress) GetFilter() *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress) GetQos() *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Filter represents the /nokia-conf/configure/service/vpls/mesh-sdp/ingress/filter YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
	Mac  *string `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Filter) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Filter.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos represents the /nokia-conf/configure/service/vpls/mesh-sdp/ingress/qos YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos struct {
	Network *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network `path:"network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos) IsYANGGoStruct() {}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos) GetOrCreateNetwork() *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network{}
	return t.Network
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos) GetNetwork() *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Network.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network represents the /nokia-conf/configure/service/vpls/mesh-sdp/ingress/qos/network YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network struct {
	FpRedirectGroup *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup `path:"fp-redirect-group" module:"nokia-conf"`
	PolicyName      *string                                                                       `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network) IsYANGGoStruct() {}

// GetOrCreateFpRedirectGroup retrieves the value of the FpRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network) GetOrCreateFpRedirectGroup() *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup {
	if t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	t.FpRedirectGroup = &NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup{}
	return t.FpRedirectGroup
}

// GetFpRedirectGroup returns the value of the FpRedirectGroup struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network. If the receiver or the field FpRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network) GetFpRedirectGroup() *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup {
	if t != nil && t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FpRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup represents the /nokia-conf/configure/service/vpls/mesh-sdp/ingress/qos/network/fp-redirect-group YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping represents the /nokia-conf/configure/service/vpls/mesh-sdp/mld-snooping YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping struct {
	ApplyGroups             []string                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	FastLeave               *bool                                                        `path:"fast-leave" module:"nokia-conf"`
	ImportPolicy            *string                                                      `path:"import-policy" module:"nokia-conf"`
	MaximumNumberGroups     *uint32                                                      `path:"maximum-number-groups" module:"nokia-conf"`
	MrouterPort             *bool                                                        `path:"mrouter-port" module:"nokia-conf"`
	QueryInterval           *uint32                                                      `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval *uint32                                                      `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval   *uint32                                                      `path:"query-response-interval" module:"nokia-conf"`
	RobustCount             *uint32                                                      `path:"robust-count" module:"nokia-conf"`
	RouterAlertCheck        *bool                                                        `path:"router-alert-check" module:"nokia-conf"`
	SendQueries             *bool                                                        `path:"send-queries" module:"nokia-conf"`
	Static                  *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static `path:"static" module:"nokia-conf"`
	Version                 E_NokiaTypesIgmp_MldVersion                                  `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping) IsYANGGoStruct() {}

// GetOrCreateStatic retrieves the value of the Static field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping) GetOrCreateStatic() *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static {
	if t.Static != nil {
		return t.Static
	}
	t.Static = &NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static{}
	return t.Static
}

// GetStatic returns the value of the Static struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping. If the receiver or the field Static is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping) GetStatic() *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static {
	if t != nil && t.Static != nil {
		return t.Static
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFastLeave retrieves the value of the leaf FastLeave from the NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastLeave is set, it can
// safely use t.GetFastLeave() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastLeave == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping) GetFastLeave() bool {
	if t == nil || t.FastLeave == nil {
		return false
	}
	return *t.FastLeave
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMrouterPort retrieves the value of the leaf MrouterPort from the NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MrouterPort is set, it can
// safely use t.GetMrouterPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MrouterPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping) GetMrouterPort() bool {
	if t == nil || t.MrouterPort == nil {
		return false
	}
	return *t.MrouterPort
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 125
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 10
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 10
	}
	return *t.QueryResponseInterval
}

// GetRobustCount retrieves the value of the leaf RobustCount from the NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RobustCount is set, it can
// safely use t.GetRobustCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RobustCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping) GetRobustCount() uint32 {
	if t == nil || t.RobustCount == nil {
		return 2
	}
	return *t.RobustCount
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetSendQueries retrieves the value of the leaf SendQueries from the NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendQueries is set, it can
// safely use t.GetSendQueries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendQueries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping) GetSendQueries() bool {
	if t == nil || t.SendQueries == nil {
		return false
	}
	return *t.SendQueries
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping) GetVersion() E_NokiaTypesIgmp_MldVersion {
	if t == nil || t.Version == 0 {
		return NokiaTypesIgmp_MldVersion_2
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastLeave == nil {
		var v bool = false
		t.FastLeave = &v
	}
	if t.MrouterPort == nil {
		var v bool = false
		t.MrouterPort = &v
	}
	if t.QueryInterval == nil {
		var v uint32 = 125
		t.QueryInterval = &v
	}
	if t.QueryLastMemberInterval == nil {
		var v uint32 = 10
		t.QueryLastMemberInterval = &v
	}
	if t.QueryResponseInterval == nil {
		var v uint32 = 10
		t.QueryResponseInterval = &v
	}
	if t.RobustCount == nil {
		var v uint32 = 2
		t.RobustCount = &v
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.SendQueries == nil {
		var v bool = false
		t.SendQueries = &v
	}
	if t.Version == 0 {
		t.Version = NokiaTypesIgmp_MldVersion_2
	}
	t.Static.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static represents the /nokia-conf/configure/service/vpls/mesh-sdp/mld-snooping/static YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static struct {
	Group map[string]*NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group `path:"group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static) NewGroup(GroupAddress string) (*NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group)
	}

	key := GroupAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group{
		GroupAddress: &GroupAddress,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupAddress = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static) GetOrCreateGroup(GroupAddress string) *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group {

	key := GroupAddress

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static) GetGroup(GroupAddress string) *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group {

	if t == nil {
		return nil
	}

	key := GroupAddress

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static) DeleteGroup(GroupAddress string) {
	key := GroupAddress

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group struct to the
// list Group of NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static) AppendGroup(v *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group) error {
	if v.GroupAddress == nil {
		return fmt.Errorf("invalid nil key received for GroupAddress")
	}

	key := *v.GroupAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group represents the /nokia-conf/configure/service/vpls/mesh-sdp/mld-snooping/static/group YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group struct {
	ApplyGroups        []string                                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupAddress       *string                                                                              `path:"group-address" module:"nokia-conf"`
	Source             map[string]*NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source `path:"source" module:"nokia-conf"`
	Starg              YANGEmpty                                                                            `path:"starg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group) IsYANGGoStruct() {}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group) NewSource(SourceAddress string) (*NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group) GetSource(SourceAddress string) *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source struct to the
// list Source of NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group) AppendSource(v *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetStarg retrieves the value of the leaf Starg from the NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group) GetStarg() YANGEmpty {
	if t == nil || t.Starg == false {
		return false
	}
	return t.Starg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupAddress == nil {
		return nil, fmt.Errorf("nil value for key GroupAddress")
	}

	return map[string]interface{}{
		"group-address": *t.GroupAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source represents the /nokia-conf/configure/service/vpls/mesh-sdp/mld-snooping/static/group/source YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source) IsYANGGoStruct() {}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_Mrp represents the /nokia-conf/configure/service/vpls/mesh-sdp/mrp YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_Mrp struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	JoinTime           *uint32  `path:"join-time" module:"nokia-conf"`
	LeaveAllTime       *uint32  `path:"leave-all-time" module:"nokia-conf"`
	LeaveTime          *uint32  `path:"leave-time" module:"nokia-conf"`
	PeriodicTime       *uint32  `path:"periodic-time" module:"nokia-conf"`
	PeriodicTimer      *bool    `path:"periodic-timer" module:"nokia-conf"`
	Policy             *string  `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_Mrp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Mrp) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_MeshSdp_Mrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Mrp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_MeshSdp_Mrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Mrp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetJoinTime retrieves the value of the leaf JoinTime from the NokiaConf_Configure_Service_Vpls_MeshSdp_Mrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if JoinTime is set, it can
// safely use t.GetJoinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.JoinTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Mrp) GetJoinTime() uint32 {
	if t == nil || t.JoinTime == nil {
		return 2
	}
	return *t.JoinTime
}

// GetLeaveAllTime retrieves the value of the leaf LeaveAllTime from the NokiaConf_Configure_Service_Vpls_MeshSdp_Mrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LeaveAllTime is set, it can
// safely use t.GetLeaveAllTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LeaveAllTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Mrp) GetLeaveAllTime() uint32 {
	if t == nil || t.LeaveAllTime == nil {
		return 100
	}
	return *t.LeaveAllTime
}

// GetLeaveTime retrieves the value of the leaf LeaveTime from the NokiaConf_Configure_Service_Vpls_MeshSdp_Mrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LeaveTime is set, it can
// safely use t.GetLeaveTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LeaveTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Mrp) GetLeaveTime() uint32 {
	if t == nil || t.LeaveTime == nil {
		return 30
	}
	return *t.LeaveTime
}

// GetPeriodicTime retrieves the value of the leaf PeriodicTime from the NokiaConf_Configure_Service_Vpls_MeshSdp_Mrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeriodicTime is set, it can
// safely use t.GetPeriodicTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeriodicTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Mrp) GetPeriodicTime() uint32 {
	if t == nil || t.PeriodicTime == nil {
		return 10
	}
	return *t.PeriodicTime
}

// GetPeriodicTimer retrieves the value of the leaf PeriodicTimer from the NokiaConf_Configure_Service_Vpls_MeshSdp_Mrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeriodicTimer is set, it can
// safely use t.GetPeriodicTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeriodicTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Mrp) GetPeriodicTimer() bool {
	if t == nil || t.PeriodicTimer == nil {
		return false
	}
	return *t.PeriodicTimer
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vpls_MeshSdp_Mrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Mrp) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_Mrp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Mrp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.JoinTime == nil {
		var v uint32 = 2
		t.JoinTime = &v
	}
	if t.LeaveAllTime == nil {
		var v uint32 = 100
		t.LeaveAllTime = &v
	}
	if t.LeaveTime == nil {
		var v uint32 = 30
		t.LeaveTime = &v
	}
	if t.PeriodicTime == nil {
		var v uint32 = 10
		t.PeriodicTime = &v
	}
	if t.PeriodicTimer == nil {
		var v bool = false
		t.PeriodicTimer = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Mrp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_Mrp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Mrp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Mrp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_Mrp.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Mrp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb represents the /nokia-conf/configure/service/vpls/mesh-sdp/pbb YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb struct {
	FaultPropagation *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation `path:"fault-propagation" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb) IsYANGGoStruct() {}

// GetOrCreateFaultPropagation retrieves the value of the FaultPropagation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb) GetOrCreateFaultPropagation() *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation {
	if t.FaultPropagation != nil {
		return t.FaultPropagation
	}
	t.FaultPropagation = &NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation{}
	return t.FaultPropagation
}

// GetFaultPropagation returns the value of the FaultPropagation struct pointer
// from NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb. If the receiver or the field FaultPropagation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb) GetFaultPropagation() *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation {
	if t != nil && t.FaultPropagation != nil {
		return t.FaultPropagation
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FaultPropagation.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation represents the /nokia-conf/configure/service/vpls/mesh-sdp/pbb/fault-propagation YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation struct {
	BackboneMacAddress map[string]*NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress `path:"backbone-mac-address" module:"nokia-conf"`
	BackboneMacName    map[string]*NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName    `path:"backbone-mac-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation) IsYANGGoStruct() {}

// NewBackboneMacAddress creates a new entry in the BackboneMacAddress list of the
// NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation) NewBackboneMacAddress(Address string) (*NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BackboneMacAddress == nil {
		t.BackboneMacAddress = make(map[string]*NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BackboneMacAddress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BackboneMacAddress", key)
	}

	t.BackboneMacAddress[key] = &NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress{
		Address: &Address,
	}

	return t.BackboneMacAddress[key], nil
}

// RenameBackboneMacAddress renames an entry in the list BackboneMacAddress within
// the NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation) RenameBackboneMacAddress(oldK, newK string) error {
	if _, ok := t.BackboneMacAddress[newK]; ok {
		return fmt.Errorf("key %v already exists in BackboneMacAddress", newK)
	}

	e, ok := t.BackboneMacAddress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BackboneMacAddress", oldK)
	}
	e.Address = &newK

	t.BackboneMacAddress[newK] = e
	delete(t.BackboneMacAddress, oldK)
	return nil
}

// GetOrCreateBackboneMacAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation) GetOrCreateBackboneMacAddress(Address string) *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress {

	key := Address

	if v, ok := t.BackboneMacAddress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBackboneMacAddress(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBackboneMacAddress got unexpected error: %v", err))
	}
	return v
}

// GetBackboneMacAddress retrieves the value with the specified key from
// the BackboneMacAddress map field of NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation) GetBackboneMacAddress(Address string) *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.BackboneMacAddress[key]; ok {
		return lm
	}
	return nil
}

// DeleteBackboneMacAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation) DeleteBackboneMacAddress(Address string) {
	key := Address

	delete(t.BackboneMacAddress, key)
}

// AppendBackboneMacAddress appends the supplied NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress struct to the
// list BackboneMacAddress of NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation) AppendBackboneMacAddress(v *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BackboneMacAddress == nil {
		t.BackboneMacAddress = make(map[string]*NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress)
	}

	if _, ok := t.BackboneMacAddress[key]; ok {
		return fmt.Errorf("duplicate key for list BackboneMacAddress %v", key)
	}

	t.BackboneMacAddress[key] = v
	return nil
}

// NewBackboneMacName creates a new entry in the BackboneMacName list of the
// NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation) NewBackboneMacName(Name string) (*NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BackboneMacName == nil {
		t.BackboneMacName = make(map[string]*NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BackboneMacName[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BackboneMacName", key)
	}

	t.BackboneMacName[key] = &NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName{
		Name: &Name,
	}

	return t.BackboneMacName[key], nil
}

// RenameBackboneMacName renames an entry in the list BackboneMacName within
// the NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation) RenameBackboneMacName(oldK, newK string) error {
	if _, ok := t.BackboneMacName[newK]; ok {
		return fmt.Errorf("key %v already exists in BackboneMacName", newK)
	}

	e, ok := t.BackboneMacName[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BackboneMacName", oldK)
	}
	e.Name = &newK

	t.BackboneMacName[newK] = e
	delete(t.BackboneMacName, oldK)
	return nil
}

// GetOrCreateBackboneMacName retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation) GetOrCreateBackboneMacName(Name string) *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName {

	key := Name

	if v, ok := t.BackboneMacName[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBackboneMacName(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBackboneMacName got unexpected error: %v", err))
	}
	return v
}

// GetBackboneMacName retrieves the value with the specified key from
// the BackboneMacName map field of NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation) GetBackboneMacName(Name string) *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.BackboneMacName[key]; ok {
		return lm
	}
	return nil
}

// DeleteBackboneMacName deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation) DeleteBackboneMacName(Name string) {
	key := Name

	delete(t.BackboneMacName, key)
}

// AppendBackboneMacName appends the supplied NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName struct to the
// list BackboneMacName of NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation) AppendBackboneMacName(v *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BackboneMacName == nil {
		t.BackboneMacName = make(map[string]*NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName)
	}

	if _, ok := t.BackboneMacName[key]; ok {
		return fmt.Errorf("duplicate key for list BackboneMacName %v", key)
	}

	t.BackboneMacName[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.BackboneMacAddress {
		e.PopulateDefaults()
	}
	for _, e := range t.BackboneMacName {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress represents the /nokia-conf/configure/service/vpls/mesh-sdp/pbb/fault-propagation/backbone-mac-address YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress struct {
	Address *string `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName represents the /nokia-conf/configure/service/vpls/mesh-sdp/pbb/fault-propagation/backbone-mac-name YANG schema element.
type NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName struct {
	Name *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName) IsYANGGoStruct() {
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName.
func (*NokiaConf_Configure_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Mfib represents the /nokia-conf/configure/service/vpls/mfib YANG schema element.
type NokiaConf_Configure_Service_Vpls_Mfib struct {
	Table *NokiaConf_Configure_Service_Vpls_Mfib_Table `path:"table" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Mfib implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Mfib) IsYANGGoStruct() {}

// GetOrCreateTable retrieves the value of the Table field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Mfib) GetOrCreateTable() *NokiaConf_Configure_Service_Vpls_Mfib_Table {
	if t.Table != nil {
		return t.Table
	}
	t.Table = &NokiaConf_Configure_Service_Vpls_Mfib_Table{}
	return t.Table
}

// GetTable returns the value of the Table struct pointer
// from NokiaConf_Configure_Service_Vpls_Mfib. If the receiver or the field Table is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Mfib) GetTable() *NokiaConf_Configure_Service_Vpls_Mfib_Table {
	if t != nil && t.Table != nil {
		return t.Table
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Mfib
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Mfib) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Table.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Mfib) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Mfib"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Mfib) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Mfib) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Mfib.
func (*NokiaConf_Configure_Service_Vpls_Mfib) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Mfib_Table represents the /nokia-conf/configure/service/vpls/mfib/table YANG schema element.
type NokiaConf_Configure_Service_Vpls_Mfib_Table struct {
	HighWmark *int32 `path:"high-wmark" module:"nokia-conf"`
	LowWmark  *int32 `path:"low-wmark" module:"nokia-conf"`
	Size      *int32 `path:"size" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Mfib_Table implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Mfib_Table) IsYANGGoStruct() {}

// GetHighWmark retrieves the value of the leaf HighWmark from the NokiaConf_Configure_Service_Vpls_Mfib_Table
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighWmark is set, it can
// safely use t.GetHighWmark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighWmark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Mfib_Table) GetHighWmark() int32 {
	if t == nil || t.HighWmark == nil {
		return 95
	}
	return *t.HighWmark
}

// GetLowWmark retrieves the value of the leaf LowWmark from the NokiaConf_Configure_Service_Vpls_Mfib_Table
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowWmark is set, it can
// safely use t.GetLowWmark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowWmark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Mfib_Table) GetLowWmark() int32 {
	if t == nil || t.LowWmark == nil {
		return 90
	}
	return *t.LowWmark
}

// GetSize retrieves the value of the leaf Size from the NokiaConf_Configure_Service_Vpls_Mfib_Table
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Size is set, it can
// safely use t.GetSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Size == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Mfib_Table) GetSize() int32 {
	if t == nil || t.Size == nil {
		return 0
	}
	return *t.Size
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Mfib_Table
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Mfib_Table) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HighWmark == nil {
		var v int32 = 95
		t.HighWmark = &v
	}
	if t.LowWmark == nil {
		var v int32 = 90
		t.LowWmark = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Mfib_Table) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Mfib_Table"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Mfib_Table) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Mfib_Table) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Mfib_Table.
func (*NokiaConf_Configure_Service_Vpls_Mfib_Table) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MldSnooping represents the /nokia-conf/configure/service/vpls/mld-snooping YANG schema element.
type NokiaConf_Configure_Service_Vpls_MldSnooping struct {
	AdminState          E_NokiaTypesSros_AdminState                                           `path:"admin-state" module:"nokia-conf"`
	ApplyGroups         []string                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	EvpnProxy           *NokiaConf_Configure_Service_Vpls_MldSnooping_EvpnProxy               `path:"evpn-proxy" module:"nokia-conf"`
	Mvr                 *NokiaConf_Configure_Service_Vpls_MldSnooping_Mvr                     `path:"mvr" module:"nokia-conf"`
	QueryInterval       *uint32                                                               `path:"query-interval" module:"nokia-conf"`
	QuerySourceAddress  NokiaConf_Configure_Service_Vpls_MldSnooping_QuerySourceAddress_Union `path:"query-source-address" module:"nokia-conf"`
	ReportSourceAddress *string                                                               `path:"report-source-address" module:"nokia-conf"`
	RobustCount         *uint32                                                               `path:"robust-count" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MldSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MldSnooping) IsYANGGoStruct() {}

// GetOrCreateEvpnProxy retrieves the value of the EvpnProxy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MldSnooping) GetOrCreateEvpnProxy() *NokiaConf_Configure_Service_Vpls_MldSnooping_EvpnProxy {
	if t.EvpnProxy != nil {
		return t.EvpnProxy
	}
	t.EvpnProxy = &NokiaConf_Configure_Service_Vpls_MldSnooping_EvpnProxy{}
	return t.EvpnProxy
}

// GetOrCreateMvr retrieves the value of the Mvr field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_MldSnooping) GetOrCreateMvr() *NokiaConf_Configure_Service_Vpls_MldSnooping_Mvr {
	if t.Mvr != nil {
		return t.Mvr
	}
	t.Mvr = &NokiaConf_Configure_Service_Vpls_MldSnooping_Mvr{}
	return t.Mvr
}

// GetEvpnProxy returns the value of the EvpnProxy struct pointer
// from NokiaConf_Configure_Service_Vpls_MldSnooping. If the receiver or the field EvpnProxy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MldSnooping) GetEvpnProxy() *NokiaConf_Configure_Service_Vpls_MldSnooping_EvpnProxy {
	if t != nil && t.EvpnProxy != nil {
		return t.EvpnProxy
	}
	return nil
}

// GetMvr returns the value of the Mvr struct pointer
// from NokiaConf_Configure_Service_Vpls_MldSnooping. If the receiver or the field Mvr is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_MldSnooping) GetMvr() *NokiaConf_Configure_Service_Vpls_MldSnooping_Mvr {
	if t != nil && t.Mvr != nil {
		return t.Mvr
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MldSnooping) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MldSnooping) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MldSnooping) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Service_Vpls_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MldSnooping) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 125
	}
	return *t.QueryInterval
}

// GetQuerySourceAddress retrieves the value of the leaf QuerySourceAddress from the NokiaConf_Configure_Service_Vpls_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QuerySourceAddress is set, it can
// safely use t.GetQuerySourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QuerySourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MldSnooping) GetQuerySourceAddress() NokiaConf_Configure_Service_Vpls_MldSnooping_QuerySourceAddress_Union {
	if t == nil || t.QuerySourceAddress == nil {
		return NokiaConf_Configure_Service_Vpls_MldSnooping_QuerySourceAddress_Enum_system
	}
	return t.QuerySourceAddress
}

// GetReportSourceAddress retrieves the value of the leaf ReportSourceAddress from the NokiaConf_Configure_Service_Vpls_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReportSourceAddress is set, it can
// safely use t.GetReportSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReportSourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MldSnooping) GetReportSourceAddress() string {
	if t == nil || t.ReportSourceAddress == nil {
		return ""
	}
	return *t.ReportSourceAddress
}

// GetRobustCount retrieves the value of the leaf RobustCount from the NokiaConf_Configure_Service_Vpls_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RobustCount is set, it can
// safely use t.GetRobustCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RobustCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MldSnooping) GetRobustCount() uint32 {
	if t == nil || t.RobustCount == nil {
		return 2
	}
	return *t.RobustCount
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MldSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MldSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.QueryInterval == nil {
		var v uint32 = 125
		t.QueryInterval = &v
	}
	if t.QuerySourceAddress == nil {
		t.QuerySourceAddress = NokiaConf_Configure_Service_Vpls_MldSnooping_QuerySourceAddress_Enum_system
	}
	if t.RobustCount == nil {
		var v uint32 = 2
		t.RobustCount = &v
	}
	t.EvpnProxy.PopulateDefaults()
	t.Mvr.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MldSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MldSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MldSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MldSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MldSnooping.
func (*NokiaConf_Configure_Service_Vpls_MldSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MldSnooping_EvpnProxy represents the /nokia-conf/configure/service/vpls/mld-snooping/evpn-proxy YANG schema element.
type NokiaConf_Configure_Service_Vpls_MldSnooping_EvpnProxy struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MldSnooping_EvpnProxy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MldSnooping_EvpnProxy) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_MldSnooping_EvpnProxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MldSnooping_EvpnProxy) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MldSnooping_EvpnProxy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MldSnooping_EvpnProxy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MldSnooping_EvpnProxy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MldSnooping_EvpnProxy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MldSnooping_EvpnProxy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MldSnooping_EvpnProxy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MldSnooping_EvpnProxy.
func (*NokiaConf_Configure_Service_Vpls_MldSnooping_EvpnProxy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_MldSnooping_Mvr represents the /nokia-conf/configure/service/vpls/mld-snooping/mvr YANG schema element.
type NokiaConf_Configure_Service_Vpls_MldSnooping_Mvr struct {
	AdminState  E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Description *string                     `path:"description" module:"nokia-conf"`
	GroupPolicy *string                     `path:"group-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_MldSnooping_Mvr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_MldSnooping_Mvr) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_MldSnooping_Mvr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MldSnooping_Mvr) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vpls_MldSnooping_Mvr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MldSnooping_Mvr) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetGroupPolicy retrieves the value of the leaf GroupPolicy from the NokiaConf_Configure_Service_Vpls_MldSnooping_Mvr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupPolicy is set, it can
// safely use t.GetGroupPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_MldSnooping_Mvr) GetGroupPolicy() string {
	if t == nil || t.GroupPolicy == nil {
		return ""
	}
	return *t.GroupPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_MldSnooping_Mvr
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_MldSnooping_Mvr) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MldSnooping_Mvr) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_MldSnooping_Mvr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_MldSnooping_Mvr) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_MldSnooping_Mvr) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_MldSnooping_Mvr.
func (*NokiaConf_Configure_Service_Vpls_MldSnooping_Mvr) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Mrp represents the /nokia-conf/configure/service/vpls/mrp YANG schema element.
type NokiaConf_Configure_Service_Vpls_Mrp struct {
	AdminState E_NokiaTypesSros_AdminState                `path:"admin-state" module:"nokia-conf"`
	Mmrp       *NokiaConf_Configure_Service_Vpls_Mrp_Mmrp `path:"mmrp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Mrp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Mrp) IsYANGGoStruct() {}

// GetOrCreateMmrp retrieves the value of the Mmrp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Mrp) GetOrCreateMmrp() *NokiaConf_Configure_Service_Vpls_Mrp_Mmrp {
	if t.Mmrp != nil {
		return t.Mmrp
	}
	t.Mmrp = &NokiaConf_Configure_Service_Vpls_Mrp_Mmrp{}
	return t.Mmrp
}

// GetMmrp returns the value of the Mmrp struct pointer
// from NokiaConf_Configure_Service_Vpls_Mrp. If the receiver or the field Mmrp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Mrp) GetMmrp() *NokiaConf_Configure_Service_Vpls_Mrp_Mmrp {
	if t != nil && t.Mmrp != nil {
		return t.Mmrp
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_Mrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Mrp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Mrp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Mrp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Mmrp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Mrp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Mrp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Mrp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Mrp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Mrp.
func (*NokiaConf_Configure_Service_Vpls_Mrp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Mrp_Mmrp represents the /nokia-conf/configure/service/vpls/mrp/mmrp YANG schema element.
type NokiaConf_Configure_Service_Vpls_Mrp_Mmrp struct {
	AdminState     E_NokiaTypesSros_AdminState                               `path:"admin-state" module:"nokia-conf"`
	AttributeTable *NokiaConf_Configure_Service_Vpls_Mrp_Mmrp_AttributeTable `path:"attribute-table" module:"nokia-conf"`
	EndStationOnly *bool                                                     `path:"end-station-only" module:"nokia-conf"`
	FloodTime      *uint32                                                   `path:"flood-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Mrp_Mmrp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Mrp_Mmrp) IsYANGGoStruct() {}

// GetOrCreateAttributeTable retrieves the value of the AttributeTable field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Mrp_Mmrp) GetOrCreateAttributeTable() *NokiaConf_Configure_Service_Vpls_Mrp_Mmrp_AttributeTable {
	if t.AttributeTable != nil {
		return t.AttributeTable
	}
	t.AttributeTable = &NokiaConf_Configure_Service_Vpls_Mrp_Mmrp_AttributeTable{}
	return t.AttributeTable
}

// GetAttributeTable returns the value of the AttributeTable struct pointer
// from NokiaConf_Configure_Service_Vpls_Mrp_Mmrp. If the receiver or the field AttributeTable is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Mrp_Mmrp) GetAttributeTable() *NokiaConf_Configure_Service_Vpls_Mrp_Mmrp_AttributeTable {
	if t != nil && t.AttributeTable != nil {
		return t.AttributeTable
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_Mrp_Mmrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Mrp_Mmrp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetEndStationOnly retrieves the value of the leaf EndStationOnly from the NokiaConf_Configure_Service_Vpls_Mrp_Mmrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndStationOnly is set, it can
// safely use t.GetEndStationOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndStationOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Mrp_Mmrp) GetEndStationOnly() bool {
	if t == nil || t.EndStationOnly == nil {
		return false
	}
	return *t.EndStationOnly
}

// GetFloodTime retrieves the value of the leaf FloodTime from the NokiaConf_Configure_Service_Vpls_Mrp_Mmrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FloodTime is set, it can
// safely use t.GetFloodTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FloodTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Mrp_Mmrp) GetFloodTime() uint32 {
	if t == nil || t.FloodTime == nil {
		return 0
	}
	return *t.FloodTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Mrp_Mmrp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Mrp_Mmrp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EndStationOnly == nil {
		var v bool = false
		t.EndStationOnly = &v
	}
	t.AttributeTable.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Mrp_Mmrp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Mrp_Mmrp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Mrp_Mmrp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Mrp_Mmrp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Mrp_Mmrp.
func (*NokiaConf_Configure_Service_Vpls_Mrp_Mmrp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Mrp_Mmrp_AttributeTable represents the /nokia-conf/configure/service/vpls/mrp/mmrp/attribute-table YANG schema element.
type NokiaConf_Configure_Service_Vpls_Mrp_Mmrp_AttributeTable struct {
	HighWmark *int32  `path:"high-wmark" module:"nokia-conf"`
	LowWmark  *int32  `path:"low-wmark" module:"nokia-conf"`
	Size      *uint32 `path:"size" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Mrp_Mmrp_AttributeTable implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Mrp_Mmrp_AttributeTable) IsYANGGoStruct() {}

// GetHighWmark retrieves the value of the leaf HighWmark from the NokiaConf_Configure_Service_Vpls_Mrp_Mmrp_AttributeTable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighWmark is set, it can
// safely use t.GetHighWmark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighWmark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Mrp_Mmrp_AttributeTable) GetHighWmark() int32 {
	if t == nil || t.HighWmark == nil {
		return 95
	}
	return *t.HighWmark
}

// GetLowWmark retrieves the value of the leaf LowWmark from the NokiaConf_Configure_Service_Vpls_Mrp_Mmrp_AttributeTable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowWmark is set, it can
// safely use t.GetLowWmark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowWmark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Mrp_Mmrp_AttributeTable) GetLowWmark() int32 {
	if t == nil || t.LowWmark == nil {
		return 90
	}
	return *t.LowWmark
}

// GetSize retrieves the value of the leaf Size from the NokiaConf_Configure_Service_Vpls_Mrp_Mmrp_AttributeTable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Size is set, it can
// safely use t.GetSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Size == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Mrp_Mmrp_AttributeTable) GetSize() uint32 {
	if t == nil || t.Size == nil {
		return 2048
	}
	return *t.Size
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Mrp_Mmrp_AttributeTable
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Mrp_Mmrp_AttributeTable) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HighWmark == nil {
		var v int32 = 95
		t.HighWmark = &v
	}
	if t.LowWmark == nil {
		var v int32 = 90
		t.LowWmark = &v
	}
	if t.Size == nil {
		var v uint32 = 2048
		t.Size = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Mrp_Mmrp_AttributeTable) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Mrp_Mmrp_AttributeTable"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Mrp_Mmrp_AttributeTable) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Mrp_Mmrp_AttributeTable) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Mrp_Mmrp_AttributeTable.
func (*NokiaConf_Configure_Service_Vpls_Mrp_Mmrp_AttributeTable) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Pbb represents the /nokia-conf/configure/service/vpls/pbb YANG schema element.
type NokiaConf_Configure_Service_Vpls_Pbb struct {
	BackboneVpls        map[string]*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls `path:"backbone-vpls" module:"nokia-conf"`
	ForceQtagForwarding *bool                                                         `path:"force-qtag-forwarding" module:"nokia-conf"`
	IVplsMacFlush       *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush           `path:"i-vpls-mac-flush" module:"nokia-conf"`
	MacNotification     *NokiaConf_Configure_Service_Vpls_Pbb_MacNotification         `path:"mac-notification" module:"nokia-conf"`
	SourceBmac          *NokiaConf_Configure_Service_Vpls_Pbb_SourceBmac              `path:"source-bmac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Pbb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Pbb) IsYANGGoStruct() {}

// NewBackboneVpls creates a new entry in the BackboneVpls list of the
// NokiaConf_Configure_Service_Vpls_Pbb struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Pbb) NewBackboneVpls(BackboneVplsServiceName string) (*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BackboneVpls == nil {
		t.BackboneVpls = make(map[string]*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls)
	}

	key := BackboneVplsServiceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BackboneVpls[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BackboneVpls", key)
	}

	t.BackboneVpls[key] = &NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls{
		BackboneVplsServiceName: &BackboneVplsServiceName,
	}

	return t.BackboneVpls[key], nil
}

// RenameBackboneVpls renames an entry in the list BackboneVpls within
// the NokiaConf_Configure_Service_Vpls_Pbb struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb) RenameBackboneVpls(oldK, newK string) error {
	if _, ok := t.BackboneVpls[newK]; ok {
		return fmt.Errorf("key %v already exists in BackboneVpls", newK)
	}

	e, ok := t.BackboneVpls[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BackboneVpls", oldK)
	}
	e.BackboneVplsServiceName = &newK

	t.BackboneVpls[newK] = e
	delete(t.BackboneVpls, oldK)
	return nil
}

// GetOrCreateBackboneVpls retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Pbb. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Pbb) GetOrCreateBackboneVpls(BackboneVplsServiceName string) *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls {

	key := BackboneVplsServiceName

	if v, ok := t.BackboneVpls[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBackboneVpls(BackboneVplsServiceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBackboneVpls got unexpected error: %v", err))
	}
	return v
}

// GetBackboneVpls retrieves the value with the specified key from
// the BackboneVpls map field of NokiaConf_Configure_Service_Vpls_Pbb. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Pbb) GetBackboneVpls(BackboneVplsServiceName string) *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls {

	if t == nil {
		return nil
	}

	key := BackboneVplsServiceName

	if lm, ok := t.BackboneVpls[key]; ok {
		return lm
	}
	return nil
}

// DeleteBackboneVpls deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Pbb. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Pbb) DeleteBackboneVpls(BackboneVplsServiceName string) {
	key := BackboneVplsServiceName

	delete(t.BackboneVpls, key)
}

// AppendBackboneVpls appends the supplied NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls struct to the
// list BackboneVpls of NokiaConf_Configure_Service_Vpls_Pbb. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Pbb) AppendBackboneVpls(v *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls) error {
	if v.BackboneVplsServiceName == nil {
		return fmt.Errorf("invalid nil key received for BackboneVplsServiceName")
	}

	key := *v.BackboneVplsServiceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BackboneVpls == nil {
		t.BackboneVpls = make(map[string]*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls)
	}

	if _, ok := t.BackboneVpls[key]; ok {
		return fmt.Errorf("duplicate key for list BackboneVpls %v", key)
	}

	t.BackboneVpls[key] = v
	return nil
}

// GetOrCreateIVplsMacFlush retrieves the value of the IVplsMacFlush field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Pbb) GetOrCreateIVplsMacFlush() *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush {
	if t.IVplsMacFlush != nil {
		return t.IVplsMacFlush
	}
	t.IVplsMacFlush = &NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush{}
	return t.IVplsMacFlush
}

// GetOrCreateMacNotification retrieves the value of the MacNotification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Pbb) GetOrCreateMacNotification() *NokiaConf_Configure_Service_Vpls_Pbb_MacNotification {
	if t.MacNotification != nil {
		return t.MacNotification
	}
	t.MacNotification = &NokiaConf_Configure_Service_Vpls_Pbb_MacNotification{}
	return t.MacNotification
}

// GetOrCreateSourceBmac retrieves the value of the SourceBmac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Pbb) GetOrCreateSourceBmac() *NokiaConf_Configure_Service_Vpls_Pbb_SourceBmac {
	if t.SourceBmac != nil {
		return t.SourceBmac
	}
	t.SourceBmac = &NokiaConf_Configure_Service_Vpls_Pbb_SourceBmac{}
	return t.SourceBmac
}

// GetIVplsMacFlush returns the value of the IVplsMacFlush struct pointer
// from NokiaConf_Configure_Service_Vpls_Pbb. If the receiver or the field IVplsMacFlush is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Pbb) GetIVplsMacFlush() *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush {
	if t != nil && t.IVplsMacFlush != nil {
		return t.IVplsMacFlush
	}
	return nil
}

// GetMacNotification returns the value of the MacNotification struct pointer
// from NokiaConf_Configure_Service_Vpls_Pbb. If the receiver or the field MacNotification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Pbb) GetMacNotification() *NokiaConf_Configure_Service_Vpls_Pbb_MacNotification {
	if t != nil && t.MacNotification != nil {
		return t.MacNotification
	}
	return nil
}

// GetSourceBmac returns the value of the SourceBmac struct pointer
// from NokiaConf_Configure_Service_Vpls_Pbb. If the receiver or the field SourceBmac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Pbb) GetSourceBmac() *NokiaConf_Configure_Service_Vpls_Pbb_SourceBmac {
	if t != nil && t.SourceBmac != nil {
		return t.SourceBmac
	}
	return nil
}

// GetForceQtagForwarding retrieves the value of the leaf ForceQtagForwarding from the NokiaConf_Configure_Service_Vpls_Pbb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForceQtagForwarding is set, it can
// safely use t.GetForceQtagForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForceQtagForwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb) GetForceQtagForwarding() bool {
	if t == nil || t.ForceQtagForwarding == nil {
		return false
	}
	return *t.ForceQtagForwarding
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Pbb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Pbb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ForceQtagForwarding == nil {
		var v bool = false
		t.ForceQtagForwarding = &v
	}
	t.IVplsMacFlush.PopulateDefaults()
	t.MacNotification.PopulateDefaults()
	t.SourceBmac.PopulateDefaults()
	for _, e := range t.BackboneVpls {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Pbb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Pbb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Pbb.
func (*NokiaConf_Configure_Service_Vpls_Pbb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls represents the /nokia-conf/configure/service/vpls/pbb/backbone-vpls YANG schema element.
type NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls struct {
	ApplyGroups             []string                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	BackboneVplsServiceName *string                                                                `path:"backbone-vpls-service-name" module:"nokia-conf"`
	Fdb                     *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Fdb                 `path:"fdb" module:"nokia-conf"`
	IgmpSnooping            *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping        `path:"igmp-snooping" module:"nokia-conf"`
	Isid                    *int32                                                                 `path:"isid" module:"nokia-conf"`
	MeshSdp                 map[string]*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp  `path:"mesh-sdp" module:"nokia-conf"`
	MldSnooping             *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping         `path:"mld-snooping" module:"nokia-conf"`
	Sap                     map[string]*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap      `path:"sap" module:"nokia-conf"`
	SpokeSdp                map[string]*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp `path:"spoke-sdp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls) IsYANGGoStruct() {}

// NewMeshSdp creates a new entry in the MeshSdp list of the
// NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls) NewMeshSdp(SdpBindId string) (*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MeshSdp == nil {
		t.MeshSdp = make(map[string]*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp)
	}

	key := SdpBindId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MeshSdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MeshSdp", key)
	}

	t.MeshSdp[key] = &NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp{
		SdpBindId: &SdpBindId,
	}

	return t.MeshSdp[key], nil
}

// RenameMeshSdp renames an entry in the list MeshSdp within
// the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls) RenameMeshSdp(oldK, newK string) error {
	if _, ok := t.MeshSdp[newK]; ok {
		return fmt.Errorf("key %v already exists in MeshSdp", newK)
	}

	e, ok := t.MeshSdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MeshSdp", oldK)
	}
	e.SdpBindId = &newK

	t.MeshSdp[newK] = e
	delete(t.MeshSdp, oldK)
	return nil
}

// GetOrCreateMeshSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls) GetOrCreateMeshSdp(SdpBindId string) *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp {

	key := SdpBindId

	if v, ok := t.MeshSdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMeshSdp(SdpBindId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMeshSdp got unexpected error: %v", err))
	}
	return v
}

// GetMeshSdp retrieves the value with the specified key from
// the MeshSdp map field of NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls) GetMeshSdp(SdpBindId string) *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp {

	if t == nil {
		return nil
	}

	key := SdpBindId

	if lm, ok := t.MeshSdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteMeshSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls) DeleteMeshSdp(SdpBindId string) {
	key := SdpBindId

	delete(t.MeshSdp, key)
}

// AppendMeshSdp appends the supplied NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp struct to the
// list MeshSdp of NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls) AppendMeshSdp(v *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp) error {
	if v.SdpBindId == nil {
		return fmt.Errorf("invalid nil key received for SdpBindId")
	}

	key := *v.SdpBindId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MeshSdp == nil {
		t.MeshSdp = make(map[string]*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp)
	}

	if _, ok := t.MeshSdp[key]; ok {
		return fmt.Errorf("duplicate key for list MeshSdp %v", key)
	}

	t.MeshSdp[key] = v
	return nil
}

// NewSap creates a new entry in the Sap list of the
// NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls) NewSap(SapId string) (*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap)
	}

	key := SapId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sap", key)
	}

	t.Sap[key] = &NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap{
		SapId: &SapId,
	}

	return t.Sap[key], nil
}

// RenameSap renames an entry in the list Sap within
// the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls) RenameSap(oldK, newK string) error {
	if _, ok := t.Sap[newK]; ok {
		return fmt.Errorf("key %v already exists in Sap", newK)
	}

	e, ok := t.Sap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sap", oldK)
	}
	e.SapId = &newK

	t.Sap[newK] = e
	delete(t.Sap, oldK)
	return nil
}

// GetOrCreateSap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls) GetOrCreateSap(SapId string) *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap {

	key := SapId

	if v, ok := t.Sap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSap(SapId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSap got unexpected error: %v", err))
	}
	return v
}

// GetSap retrieves the value with the specified key from
// the Sap map field of NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls) GetSap(SapId string) *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap {

	if t == nil {
		return nil
	}

	key := SapId

	if lm, ok := t.Sap[key]; ok {
		return lm
	}
	return nil
}

// DeleteSap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls) DeleteSap(SapId string) {
	key := SapId

	delete(t.Sap, key)
}

// AppendSap appends the supplied NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap struct to the
// list Sap of NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls) AppendSap(v *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap) error {
	if v.SapId == nil {
		return fmt.Errorf("invalid nil key received for SapId")
	}

	key := *v.SapId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap)
	}

	if _, ok := t.Sap[key]; ok {
		return fmt.Errorf("duplicate key for list Sap %v", key)
	}

	t.Sap[key] = v
	return nil
}

// NewSpokeSdp creates a new entry in the SpokeSdp list of the
// NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls) NewSpokeSdp(SdpBindId string) (*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp)
	}

	key := SdpBindId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SpokeSdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SpokeSdp", key)
	}

	t.SpokeSdp[key] = &NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp{
		SdpBindId: &SdpBindId,
	}

	return t.SpokeSdp[key], nil
}

// RenameSpokeSdp renames an entry in the list SpokeSdp within
// the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls) RenameSpokeSdp(oldK, newK string) error {
	if _, ok := t.SpokeSdp[newK]; ok {
		return fmt.Errorf("key %v already exists in SpokeSdp", newK)
	}

	e, ok := t.SpokeSdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SpokeSdp", oldK)
	}
	e.SdpBindId = &newK

	t.SpokeSdp[newK] = e
	delete(t.SpokeSdp, oldK)
	return nil
}

// GetOrCreateSpokeSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls) GetOrCreateSpokeSdp(SdpBindId string) *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp {

	key := SdpBindId

	if v, ok := t.SpokeSdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSpokeSdp(SdpBindId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSpokeSdp got unexpected error: %v", err))
	}
	return v
}

// GetSpokeSdp retrieves the value with the specified key from
// the SpokeSdp map field of NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls) GetSpokeSdp(SdpBindId string) *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp {

	if t == nil {
		return nil
	}

	key := SdpBindId

	if lm, ok := t.SpokeSdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteSpokeSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls) DeleteSpokeSdp(SdpBindId string) {
	key := SdpBindId

	delete(t.SpokeSdp, key)
}

// AppendSpokeSdp appends the supplied NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp struct to the
// list SpokeSdp of NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls) AppendSpokeSdp(v *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp) error {
	if v.SdpBindId == nil {
		return fmt.Errorf("invalid nil key received for SdpBindId")
	}

	key := *v.SdpBindId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp)
	}

	if _, ok := t.SpokeSdp[key]; ok {
		return fmt.Errorf("duplicate key for list SpokeSdp %v", key)
	}

	t.SpokeSdp[key] = v
	return nil
}

// GetOrCreateFdb retrieves the value of the Fdb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls) GetOrCreateFdb() *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Fdb {
	if t.Fdb != nil {
		return t.Fdb
	}
	t.Fdb = &NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Fdb{}
	return t.Fdb
}

// GetOrCreateIgmpSnooping retrieves the value of the IgmpSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls) GetOrCreateIgmpSnooping() *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping {
	if t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	t.IgmpSnooping = &NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping{}
	return t.IgmpSnooping
}

// GetOrCreateMldSnooping retrieves the value of the MldSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls) GetOrCreateMldSnooping() *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping {
	if t.MldSnooping != nil {
		return t.MldSnooping
	}
	t.MldSnooping = &NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping{}
	return t.MldSnooping
}

// GetFdb returns the value of the Fdb struct pointer
// from NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls. If the receiver or the field Fdb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls) GetFdb() *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Fdb {
	if t != nil && t.Fdb != nil {
		return t.Fdb
	}
	return nil
}

// GetIgmpSnooping returns the value of the IgmpSnooping struct pointer
// from NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls. If the receiver or the field IgmpSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls) GetIgmpSnooping() *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping {
	if t != nil && t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	return nil
}

// GetMldSnooping returns the value of the MldSnooping struct pointer
// from NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls. If the receiver or the field MldSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls) GetMldSnooping() *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping {
	if t != nil && t.MldSnooping != nil {
		return t.MldSnooping
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBackboneVplsServiceName retrieves the value of the leaf BackboneVplsServiceName from the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BackboneVplsServiceName is set, it can
// safely use t.GetBackboneVplsServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BackboneVplsServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls) GetBackboneVplsServiceName() string {
	if t == nil || t.BackboneVplsServiceName == nil {
		return ""
	}
	return *t.BackboneVplsServiceName
}

// GetIsid retrieves the value of the leaf Isid from the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Isid is set, it can
// safely use t.GetIsid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Isid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls) GetIsid() int32 {
	if t == nil || t.Isid == nil {
		return 0
	}
	return *t.Isid
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Fdb.PopulateDefaults()
	t.IgmpSnooping.PopulateDefaults()
	t.MldSnooping.PopulateDefaults()
	for _, e := range t.MeshSdp {
		e.PopulateDefaults()
	}
	for _, e := range t.Sap {
		e.PopulateDefaults()
	}
	for _, e := range t.SpokeSdp {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls) ΛListKeyMap() (map[string]interface{}, error) {
	if t.BackboneVplsServiceName == nil {
		return nil, fmt.Errorf("nil value for key BackboneVplsServiceName")
	}

	return map[string]interface{}{
		"backbone-vpls-service-name": *t.BackboneVplsServiceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls.
func (*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Fdb represents the /nokia-conf/configure/service/vpls/pbb/backbone-vpls/fdb YANG schema element.
type NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Fdb struct {
	ProtectedSrcMacViolationAction E_NokiaTypesServices_ProtectedSrcMacViolationDfAction `path:"protected-src-mac-violation-action" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Fdb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Fdb) IsYANGGoStruct() {}

// GetProtectedSrcMacViolationAction retrieves the value of the leaf ProtectedSrcMacViolationAction from the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtectedSrcMacViolationAction is set, it can
// safely use t.GetProtectedSrcMacViolationAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtectedSrcMacViolationAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Fdb) GetProtectedSrcMacViolationAction() E_NokiaTypesServices_ProtectedSrcMacViolationDfAction {
	if t == nil || t.ProtectedSrcMacViolationAction == 0 {
		return 0
	}
	return t.ProtectedSrcMacViolationAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Fdb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Fdb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Fdb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Fdb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Fdb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Fdb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Fdb.
func (*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Fdb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping represents the /nokia-conf/configure/service/vpls/pbb/backbone-vpls/igmp-snooping YANG schema element.
type NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping struct {
	MrouterDestination map[string]*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination `path:"mrouter-destination" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping) IsYANGGoStruct() {}

// NewMrouterDestination creates a new entry in the MrouterDestination list of the
// NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping) NewMrouterDestination(MacReference string) (*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MrouterDestination == nil {
		t.MrouterDestination = make(map[string]*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination)
	}

	key := MacReference

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MrouterDestination[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MrouterDestination", key)
	}

	t.MrouterDestination[key] = &NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination{
		MacReference: &MacReference,
	}

	return t.MrouterDestination[key], nil
}

// RenameMrouterDestination renames an entry in the list MrouterDestination within
// the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping) RenameMrouterDestination(oldK, newK string) error {
	if _, ok := t.MrouterDestination[newK]; ok {
		return fmt.Errorf("key %v already exists in MrouterDestination", newK)
	}

	e, ok := t.MrouterDestination[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MrouterDestination", oldK)
	}
	e.MacReference = &newK

	t.MrouterDestination[newK] = e
	delete(t.MrouterDestination, oldK)
	return nil
}

// GetOrCreateMrouterDestination retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping) GetOrCreateMrouterDestination(MacReference string) *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination {

	key := MacReference

	if v, ok := t.MrouterDestination[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMrouterDestination(MacReference)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMrouterDestination got unexpected error: %v", err))
	}
	return v
}

// GetMrouterDestination retrieves the value with the specified key from
// the MrouterDestination map field of NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping) GetMrouterDestination(MacReference string) *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination {

	if t == nil {
		return nil
	}

	key := MacReference

	if lm, ok := t.MrouterDestination[key]; ok {
		return lm
	}
	return nil
}

// DeleteMrouterDestination deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping) DeleteMrouterDestination(MacReference string) {
	key := MacReference

	delete(t.MrouterDestination, key)
}

// AppendMrouterDestination appends the supplied NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination struct to the
// list MrouterDestination of NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping) AppendMrouterDestination(v *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination) error {
	if v.MacReference == nil {
		return fmt.Errorf("invalid nil key received for MacReference")
	}

	key := *v.MacReference

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MrouterDestination == nil {
		t.MrouterDestination = make(map[string]*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination)
	}

	if _, ok := t.MrouterDestination[key]; ok {
		return fmt.Errorf("duplicate key for list MrouterDestination %v", key)
	}

	t.MrouterDestination[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.MrouterDestination {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping.
func (*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination represents the /nokia-conf/configure/service/vpls/pbb/backbone-vpls/igmp-snooping/mrouter-destination YANG schema element.
type NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination struct {
	MacReference *string `path:"mac-reference" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination) IsYANGGoStruct() {
}

// GetMacReference retrieves the value of the leaf MacReference from the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacReference is set, it can
// safely use t.GetMacReference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacReference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination) GetMacReference() string {
	if t == nil || t.MacReference == nil {
		return ""
	}
	return *t.MacReference
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MacReference == nil {
		return nil, fmt.Errorf("nil value for key MacReference")
	}

	return map[string]interface{}{
		"mac-reference": *t.MacReference,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination.
func (*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp represents the /nokia-conf/configure/service/vpls/pbb/backbone-vpls/mesh-sdp YANG schema element.
type NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp struct {
	ApplyGroups        []string                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	IgmpSnooping       *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp_IgmpSnooping `path:"igmp-snooping" module:"nokia-conf"`
	MldSnooping        *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp_MldSnooping  `path:"mld-snooping" module:"nokia-conf"`
	SdpBindId          *string                                                                 `path:"sdp-bind-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp) IsYANGGoStruct() {}

// GetOrCreateIgmpSnooping retrieves the value of the IgmpSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp) GetOrCreateIgmpSnooping() *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp_IgmpSnooping {
	if t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	t.IgmpSnooping = &NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp_IgmpSnooping{}
	return t.IgmpSnooping
}

// GetOrCreateMldSnooping retrieves the value of the MldSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp) GetOrCreateMldSnooping() *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp_MldSnooping {
	if t.MldSnooping != nil {
		return t.MldSnooping
	}
	t.MldSnooping = &NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp_MldSnooping{}
	return t.MldSnooping
}

// GetIgmpSnooping returns the value of the IgmpSnooping struct pointer
// from NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp. If the receiver or the field IgmpSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp) GetIgmpSnooping() *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp_IgmpSnooping {
	if t != nil && t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	return nil
}

// GetMldSnooping returns the value of the MldSnooping struct pointer
// from NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp. If the receiver or the field MldSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp) GetMldSnooping() *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp_MldSnooping {
	if t != nil && t.MldSnooping != nil {
		return t.MldSnooping
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IgmpSnooping.PopulateDefaults()
	t.MldSnooping.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SdpBindId == nil {
		return nil, fmt.Errorf("nil value for key SdpBindId")
	}

	return map[string]interface{}{
		"sdp-bind-id": *t.SdpBindId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp.
func (*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp_IgmpSnooping represents the /nokia-conf/configure/service/vpls/pbb/backbone-vpls/mesh-sdp/igmp-snooping YANG schema element.
type NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp_IgmpSnooping struct {
	MrouterPort *bool `path:"mrouter-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp_IgmpSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp_IgmpSnooping) IsYANGGoStruct() {}

// GetMrouterPort retrieves the value of the leaf MrouterPort from the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MrouterPort is set, it can
// safely use t.GetMrouterPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MrouterPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp_IgmpSnooping) GetMrouterPort() bool {
	if t == nil || t.MrouterPort == nil {
		return false
	}
	return *t.MrouterPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp_IgmpSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp_IgmpSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MrouterPort == nil {
		var v bool = false
		t.MrouterPort = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp_IgmpSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp_IgmpSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp_IgmpSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp_IgmpSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp_IgmpSnooping.
func (*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp_IgmpSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp_MldSnooping represents the /nokia-conf/configure/service/vpls/pbb/backbone-vpls/mesh-sdp/mld-snooping YANG schema element.
type NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp_MldSnooping struct {
	MrouterPort *bool `path:"mrouter-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp_MldSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp_MldSnooping) IsYANGGoStruct() {}

// GetMrouterPort retrieves the value of the leaf MrouterPort from the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MrouterPort is set, it can
// safely use t.GetMrouterPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MrouterPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp_MldSnooping) GetMrouterPort() bool {
	if t == nil || t.MrouterPort == nil {
		return false
	}
	return *t.MrouterPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp_MldSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp_MldSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MrouterPort == nil {
		var v bool = false
		t.MrouterPort = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp_MldSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp_MldSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp_MldSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp_MldSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp_MldSnooping.
func (*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MeshSdp_MldSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping represents the /nokia-conf/configure/service/vpls/pbb/backbone-vpls/mld-snooping YANG schema element.
type NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping struct {
	MrouterDestination map[string]*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination `path:"mrouter-destination" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping) IsYANGGoStruct() {}

// NewMrouterDestination creates a new entry in the MrouterDestination list of the
// NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping) NewMrouterDestination(MacReference string) (*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MrouterDestination == nil {
		t.MrouterDestination = make(map[string]*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination)
	}

	key := MacReference

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MrouterDestination[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MrouterDestination", key)
	}

	t.MrouterDestination[key] = &NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination{
		MacReference: &MacReference,
	}

	return t.MrouterDestination[key], nil
}

// RenameMrouterDestination renames an entry in the list MrouterDestination within
// the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping) RenameMrouterDestination(oldK, newK string) error {
	if _, ok := t.MrouterDestination[newK]; ok {
		return fmt.Errorf("key %v already exists in MrouterDestination", newK)
	}

	e, ok := t.MrouterDestination[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MrouterDestination", oldK)
	}
	e.MacReference = &newK

	t.MrouterDestination[newK] = e
	delete(t.MrouterDestination, oldK)
	return nil
}

// GetOrCreateMrouterDestination retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping) GetOrCreateMrouterDestination(MacReference string) *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination {

	key := MacReference

	if v, ok := t.MrouterDestination[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMrouterDestination(MacReference)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMrouterDestination got unexpected error: %v", err))
	}
	return v
}

// GetMrouterDestination retrieves the value with the specified key from
// the MrouterDestination map field of NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping) GetMrouterDestination(MacReference string) *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination {

	if t == nil {
		return nil
	}

	key := MacReference

	if lm, ok := t.MrouterDestination[key]; ok {
		return lm
	}
	return nil
}

// DeleteMrouterDestination deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping) DeleteMrouterDestination(MacReference string) {
	key := MacReference

	delete(t.MrouterDestination, key)
}

// AppendMrouterDestination appends the supplied NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination struct to the
// list MrouterDestination of NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping) AppendMrouterDestination(v *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination) error {
	if v.MacReference == nil {
		return fmt.Errorf("invalid nil key received for MacReference")
	}

	key := *v.MacReference

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MrouterDestination == nil {
		t.MrouterDestination = make(map[string]*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination)
	}

	if _, ok := t.MrouterDestination[key]; ok {
		return fmt.Errorf("duplicate key for list MrouterDestination %v", key)
	}

	t.MrouterDestination[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.MrouterDestination {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping.
func (*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination represents the /nokia-conf/configure/service/vpls/pbb/backbone-vpls/mld-snooping/mrouter-destination YANG schema element.
type NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination struct {
	MacReference *string `path:"mac-reference" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination) IsYANGGoStruct() {
}

// GetMacReference retrieves the value of the leaf MacReference from the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacReference is set, it can
// safely use t.GetMacReference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacReference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination) GetMacReference() string {
	if t == nil || t.MacReference == nil {
		return ""
	}
	return *t.MacReference
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MacReference == nil {
		return nil, fmt.Errorf("nil value for key MacReference")
	}

	return map[string]interface{}{
		"mac-reference": *t.MacReference,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination.
func (*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap represents the /nokia-conf/configure/service/vpls/pbb/backbone-vpls/sap YANG schema element.
type NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap struct {
	ApplyGroups        []string                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	IgmpSnooping       *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap_IgmpSnooping `path:"igmp-snooping" module:"nokia-conf"`
	MldSnooping        *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap_MldSnooping  `path:"mld-snooping" module:"nokia-conf"`
	SapId              *string                                                             `path:"sap-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap) IsYANGGoStruct() {}

// GetOrCreateIgmpSnooping retrieves the value of the IgmpSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap) GetOrCreateIgmpSnooping() *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap_IgmpSnooping {
	if t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	t.IgmpSnooping = &NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap_IgmpSnooping{}
	return t.IgmpSnooping
}

// GetOrCreateMldSnooping retrieves the value of the MldSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap) GetOrCreateMldSnooping() *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap_MldSnooping {
	if t.MldSnooping != nil {
		return t.MldSnooping
	}
	t.MldSnooping = &NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap_MldSnooping{}
	return t.MldSnooping
}

// GetIgmpSnooping returns the value of the IgmpSnooping struct pointer
// from NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap. If the receiver or the field IgmpSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap) GetIgmpSnooping() *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap_IgmpSnooping {
	if t != nil && t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	return nil
}

// GetMldSnooping returns the value of the MldSnooping struct pointer
// from NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap. If the receiver or the field MldSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap) GetMldSnooping() *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap_MldSnooping {
	if t != nil && t.MldSnooping != nil {
		return t.MldSnooping
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IgmpSnooping.PopulateDefaults()
	t.MldSnooping.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SapId == nil {
		return nil, fmt.Errorf("nil value for key SapId")
	}

	return map[string]interface{}{
		"sap-id": *t.SapId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap.
func (*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap_IgmpSnooping represents the /nokia-conf/configure/service/vpls/pbb/backbone-vpls/sap/igmp-snooping YANG schema element.
type NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap_IgmpSnooping struct {
	MrouterPort *bool `path:"mrouter-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap_IgmpSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap_IgmpSnooping) IsYANGGoStruct() {}

// GetMrouterPort retrieves the value of the leaf MrouterPort from the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MrouterPort is set, it can
// safely use t.GetMrouterPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MrouterPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap_IgmpSnooping) GetMrouterPort() bool {
	if t == nil || t.MrouterPort == nil {
		return false
	}
	return *t.MrouterPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap_IgmpSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap_IgmpSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MrouterPort == nil {
		var v bool = false
		t.MrouterPort = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap_IgmpSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap_IgmpSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap_IgmpSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap_IgmpSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap_IgmpSnooping.
func (*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap_IgmpSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap_MldSnooping represents the /nokia-conf/configure/service/vpls/pbb/backbone-vpls/sap/mld-snooping YANG schema element.
type NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap_MldSnooping struct {
	MrouterPort *bool `path:"mrouter-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap_MldSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap_MldSnooping) IsYANGGoStruct() {}

// GetMrouterPort retrieves the value of the leaf MrouterPort from the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MrouterPort is set, it can
// safely use t.GetMrouterPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MrouterPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap_MldSnooping) GetMrouterPort() bool {
	if t == nil || t.MrouterPort == nil {
		return false
	}
	return *t.MrouterPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap_MldSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap_MldSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MrouterPort == nil {
		var v bool = false
		t.MrouterPort = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap_MldSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap_MldSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap_MldSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap_MldSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap_MldSnooping.
func (*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_Sap_MldSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp represents the /nokia-conf/configure/service/vpls/pbb/backbone-vpls/spoke-sdp YANG schema element.
type NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp struct {
	ApplyGroups        []string                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	IgmpSnooping       *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_IgmpSnooping `path:"igmp-snooping" module:"nokia-conf"`
	MldSnooping        *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_MldSnooping  `path:"mld-snooping" module:"nokia-conf"`
	SdpBindId          *string                                                                  `path:"sdp-bind-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp) IsYANGGoStruct() {}

// GetOrCreateIgmpSnooping retrieves the value of the IgmpSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp) GetOrCreateIgmpSnooping() *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_IgmpSnooping {
	if t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	t.IgmpSnooping = &NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_IgmpSnooping{}
	return t.IgmpSnooping
}

// GetOrCreateMldSnooping retrieves the value of the MldSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp) GetOrCreateMldSnooping() *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_MldSnooping {
	if t.MldSnooping != nil {
		return t.MldSnooping
	}
	t.MldSnooping = &NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_MldSnooping{}
	return t.MldSnooping
}

// GetIgmpSnooping returns the value of the IgmpSnooping struct pointer
// from NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp. If the receiver or the field IgmpSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp) GetIgmpSnooping() *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_IgmpSnooping {
	if t != nil && t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	return nil
}

// GetMldSnooping returns the value of the MldSnooping struct pointer
// from NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp. If the receiver or the field MldSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp) GetMldSnooping() *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_MldSnooping {
	if t != nil && t.MldSnooping != nil {
		return t.MldSnooping
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IgmpSnooping.PopulateDefaults()
	t.MldSnooping.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SdpBindId == nil {
		return nil, fmt.Errorf("nil value for key SdpBindId")
	}

	return map[string]interface{}{
		"sdp-bind-id": *t.SdpBindId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp.
func (*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_IgmpSnooping represents the /nokia-conf/configure/service/vpls/pbb/backbone-vpls/spoke-sdp/igmp-snooping YANG schema element.
type NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_IgmpSnooping struct {
	MrouterPort *bool `path:"mrouter-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_IgmpSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_IgmpSnooping) IsYANGGoStruct() {}

// GetMrouterPort retrieves the value of the leaf MrouterPort from the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MrouterPort is set, it can
// safely use t.GetMrouterPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MrouterPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_IgmpSnooping) GetMrouterPort() bool {
	if t == nil || t.MrouterPort == nil {
		return false
	}
	return *t.MrouterPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_IgmpSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_IgmpSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MrouterPort == nil {
		var v bool = false
		t.MrouterPort = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_IgmpSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_IgmpSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_IgmpSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_IgmpSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_IgmpSnooping.
func (*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_IgmpSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_MldSnooping represents the /nokia-conf/configure/service/vpls/pbb/backbone-vpls/spoke-sdp/mld-snooping YANG schema element.
type NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_MldSnooping struct {
	MrouterPort *bool `path:"mrouter-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_MldSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_MldSnooping) IsYANGGoStruct() {}

// GetMrouterPort retrieves the value of the leaf MrouterPort from the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MrouterPort is set, it can
// safely use t.GetMrouterPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MrouterPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_MldSnooping) GetMrouterPort() bool {
	if t == nil || t.MrouterPort == nil {
		return false
	}
	return *t.MrouterPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_MldSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_MldSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MrouterPort == nil {
		var v bool = false
		t.MrouterPort = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_MldSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_MldSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_MldSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_MldSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_MldSnooping.
func (*NokiaConf_Configure_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_MldSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush represents the /nokia-conf/configure/service/vpls/pbb/i-vpls-mac-flush YANG schema element.
type NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush struct {
	BgpEvpn *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_BgpEvpn `path:"bgp-evpn" module:"nokia-conf"`
	Tldp    *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp    `path:"tldp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush) IsYANGGoStruct() {}

// GetOrCreateBgpEvpn retrieves the value of the BgpEvpn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush) GetOrCreateBgpEvpn() *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_BgpEvpn {
	if t.BgpEvpn != nil {
		return t.BgpEvpn
	}
	t.BgpEvpn = &NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_BgpEvpn{}
	return t.BgpEvpn
}

// GetOrCreateTldp retrieves the value of the Tldp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush) GetOrCreateTldp() *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp {
	if t.Tldp != nil {
		return t.Tldp
	}
	t.Tldp = &NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp{}
	return t.Tldp
}

// GetBgpEvpn returns the value of the BgpEvpn struct pointer
// from NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush. If the receiver or the field BgpEvpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush) GetBgpEvpn() *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_BgpEvpn {
	if t != nil && t.BgpEvpn != nil {
		return t.BgpEvpn
	}
	return nil
}

// GetTldp returns the value of the Tldp struct pointer
// from NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush. If the receiver or the field Tldp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush) GetTldp() *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp {
	if t != nil && t.Tldp != nil {
		return t.Tldp
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BgpEvpn.PopulateDefaults()
	t.Tldp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush.
func (*NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_BgpEvpn represents the /nokia-conf/configure/service/vpls/pbb/i-vpls-mac-flush/bgp-evpn YANG schema element.
type NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_BgpEvpn struct {
	SendToBvpls *bool `path:"send-to-bvpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_BgpEvpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_BgpEvpn) IsYANGGoStruct() {}

// GetSendToBvpls retrieves the value of the leaf SendToBvpls from the NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_BgpEvpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendToBvpls is set, it can
// safely use t.GetSendToBvpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendToBvpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_BgpEvpn) GetSendToBvpls() bool {
	if t == nil || t.SendToBvpls == nil {
		return false
	}
	return *t.SendToBvpls
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_BgpEvpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_BgpEvpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SendToBvpls == nil {
		var v bool = false
		t.SendToBvpls = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_BgpEvpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_BgpEvpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_BgpEvpn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_BgpEvpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_BgpEvpn.
func (*NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_BgpEvpn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp represents the /nokia-conf/configure/service/vpls/pbb/i-vpls-mac-flush/tldp YANG schema element.
type NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp struct {
	PropagateFromBvpls *bool                                                                `path:"propagate-from-bvpls" module:"nokia-conf"`
	SendOnBvplsFailure *bool                                                                `path:"send-on-bvpls-failure" module:"nokia-conf"`
	SendToBvpls        *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls `path:"send-to-bvpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp) IsYANGGoStruct() {}

// GetOrCreateSendToBvpls retrieves the value of the SendToBvpls field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp) GetOrCreateSendToBvpls() *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls {
	if t.SendToBvpls != nil {
		return t.SendToBvpls
	}
	t.SendToBvpls = &NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls{}
	return t.SendToBvpls
}

// GetSendToBvpls returns the value of the SendToBvpls struct pointer
// from NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp. If the receiver or the field SendToBvpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp) GetSendToBvpls() *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls {
	if t != nil && t.SendToBvpls != nil {
		return t.SendToBvpls
	}
	return nil
}

// GetPropagateFromBvpls retrieves the value of the leaf PropagateFromBvpls from the NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PropagateFromBvpls is set, it can
// safely use t.GetPropagateFromBvpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PropagateFromBvpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp) GetPropagateFromBvpls() bool {
	if t == nil || t.PropagateFromBvpls == nil {
		return false
	}
	return *t.PropagateFromBvpls
}

// GetSendOnBvplsFailure retrieves the value of the leaf SendOnBvplsFailure from the NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendOnBvplsFailure is set, it can
// safely use t.GetSendOnBvplsFailure() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendOnBvplsFailure == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp) GetSendOnBvplsFailure() bool {
	if t == nil || t.SendOnBvplsFailure == nil {
		return false
	}
	return *t.SendOnBvplsFailure
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PropagateFromBvpls == nil {
		var v bool = false
		t.PropagateFromBvpls = &v
	}
	if t.SendOnBvplsFailure == nil {
		var v bool = false
		t.SendOnBvplsFailure = &v
	}
	t.SendToBvpls.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp.
func (*NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls represents the /nokia-conf/configure/service/vpls/pbb/i-vpls-mac-flush/tldp/send-to-bvpls YANG schema element.
type NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls struct {
	AllButMine *bool `path:"all-but-mine" module:"nokia-conf"`
	AllFromMe  *bool `path:"all-from-me" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls) IsYANGGoStruct() {}

// GetAllButMine retrieves the value of the leaf AllButMine from the NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllButMine is set, it can
// safely use t.GetAllButMine() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllButMine == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls) GetAllButMine() bool {
	if t == nil || t.AllButMine == nil {
		return false
	}
	return *t.AllButMine
}

// GetAllFromMe retrieves the value of the leaf AllFromMe from the NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllFromMe is set, it can
// safely use t.GetAllFromMe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllFromMe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls) GetAllFromMe() bool {
	if t == nil || t.AllFromMe == nil {
		return false
	}
	return *t.AllFromMe
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllButMine == nil {
		var v bool = false
		t.AllButMine = &v
	}
	if t.AllFromMe == nil {
		var v bool = false
		t.AllFromMe = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls.
func (*NokiaConf_Configure_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Pbb_MacNotification represents the /nokia-conf/configure/service/vpls/pbb/mac-notification YANG schema element.
type NokiaConf_Configure_Service_Vpls_Pbb_MacNotification struct {
	AdminState E_NokiaTypesSros_AdminState                                         `path:"admin-state" module:"nokia-conf"`
	Count      *uint32                                                             `path:"count" module:"nokia-conf"`
	Interval   *uint32                                                             `path:"interval" module:"nokia-conf"`
	Renotify   NokiaConf_Configure_Service_Vpls_Pbb_MacNotification_Renotify_Union `path:"renotify" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Pbb_MacNotification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Pbb_MacNotification) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_Pbb_MacNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_MacNotification) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCount retrieves the value of the leaf Count from the NokiaConf_Configure_Service_Vpls_Pbb_MacNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Count is set, it can
// safely use t.GetCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Count == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_MacNotification) GetCount() uint32 {
	if t == nil || t.Count == nil {
		return 0
	}
	return *t.Count
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Service_Vpls_Pbb_MacNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_MacNotification) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetRenotify retrieves the value of the leaf Renotify from the NokiaConf_Configure_Service_Vpls_Pbb_MacNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Renotify is set, it can
// safely use t.GetRenotify() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Renotify == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_MacNotification) GetRenotify() NokiaConf_Configure_Service_Vpls_Pbb_MacNotification_Renotify_Union {
	if t == nil || t.Renotify == nil {
		return NokiaConf_Configure_Service_Vpls_Pbb_MacNotification_Renotify_Enum_none
	}
	return t.Renotify
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Pbb_MacNotification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_MacNotification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Renotify == nil {
		t.Renotify = NokiaConf_Configure_Service_Vpls_Pbb_MacNotification_Renotify_Enum_none
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_MacNotification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Pbb_MacNotification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_MacNotification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_MacNotification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Pbb_MacNotification.
func (*NokiaConf_Configure_Service_Vpls_Pbb_MacNotification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Pbb_SourceBmac represents the /nokia-conf/configure/service/vpls/pbb/source-bmac YANG schema element.
type NokiaConf_Configure_Service_Vpls_Pbb_SourceBmac struct {
	Address         *string `path:"address" module:"nokia-conf"`
	UseEsBmacLsb    *bool   `path:"use-es-bmac-lsb" module:"nokia-conf"`
	UseMclagBmacLsb *bool   `path:"use-mclag-bmac-lsb" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Pbb_SourceBmac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Pbb_SourceBmac) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vpls_Pbb_SourceBmac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_SourceBmac) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetUseEsBmacLsb retrieves the value of the leaf UseEsBmacLsb from the NokiaConf_Configure_Service_Vpls_Pbb_SourceBmac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseEsBmacLsb is set, it can
// safely use t.GetUseEsBmacLsb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseEsBmacLsb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_SourceBmac) GetUseEsBmacLsb() bool {
	if t == nil || t.UseEsBmacLsb == nil {
		return false
	}
	return *t.UseEsBmacLsb
}

// GetUseMclagBmacLsb retrieves the value of the leaf UseMclagBmacLsb from the NokiaConf_Configure_Service_Vpls_Pbb_SourceBmac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseMclagBmacLsb is set, it can
// safely use t.GetUseMclagBmacLsb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseMclagBmacLsb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_SourceBmac) GetUseMclagBmacLsb() bool {
	if t == nil || t.UseMclagBmacLsb == nil {
		return false
	}
	return *t.UseMclagBmacLsb
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Pbb_SourceBmac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_SourceBmac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UseEsBmacLsb == nil {
		var v bool = false
		t.UseEsBmacLsb = &v
	}
	if t.UseMclagBmacLsb == nil {
		var v bool = false
		t.UseMclagBmacLsb = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_SourceBmac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Pbb_SourceBmac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_SourceBmac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Pbb_SourceBmac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Pbb_SourceBmac.
func (*NokiaConf_Configure_Service_Vpls_Pbb_SourceBmac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_PimSnooping represents the /nokia-conf/configure/service/vpls/pim-snooping YANG schema element.
type NokiaConf_Configure_Service_Vpls_PimSnooping struct {
	ApplyGroups        []string                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupPolicy        []string                                           `path:"group-policy" module:"nokia-conf"`
	HoldTime           *uint32                                            `path:"hold-time" module:"nokia-conf"`
	Ipv4               *NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv4 `path:"ipv4" module:"nokia-conf"`
	Ipv6               *NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv6 `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_PimSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_PimSnooping) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_PimSnooping) GetOrCreateIpv4() *NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_PimSnooping) GetOrCreateIpv6() *NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv6{}
	return t.Ipv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Service_Vpls_PimSnooping. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_PimSnooping) GetIpv4() *NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Service_Vpls_PimSnooping. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_PimSnooping) GetIpv6() *NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_PimSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_PimSnooping) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_PimSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_PimSnooping) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroupPolicy retrieves the value of the leaf GroupPolicy from the NokiaConf_Configure_Service_Vpls_PimSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupPolicy is set, it can
// safely use t.GetGroupPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_PimSnooping) GetGroupPolicy() []string {
	if t == nil || t.GroupPolicy == nil {
		return nil
	}
	return t.GroupPolicy
}

// GetHoldTime retrieves the value of the leaf HoldTime from the NokiaConf_Configure_Service_Vpls_PimSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTime is set, it can
// safely use t.GetHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_PimSnooping) GetHoldTime() uint32 {
	if t == nil || t.HoldTime == nil {
		return 90
	}
	return *t.HoldTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_PimSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_PimSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HoldTime == nil {
		var v uint32 = 90
		t.HoldTime = &v
	}
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_PimSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_PimSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_PimSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_PimSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_PimSnooping.
func (*NokiaConf_Configure_Service_Vpls_PimSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv4 represents the /nokia-conf/configure/service/vpls/pim-snooping/ipv4 YANG schema element.
type NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv4 struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv4) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv4) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv4) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv4) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv4.
func (*NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv6 represents the /nokia-conf/configure/service/vpls/pim-snooping/ipv6 YANG schema element.
type NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv6 struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv6) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv6) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv6) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv6) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv6.
func (*NokiaConf_Configure_Service_Vpls_PimSnooping_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_ProviderTunnel represents the /nokia-conf/configure/service/vpls/provider-tunnel YANG schema element.
type NokiaConf_Configure_Service_Vpls_ProviderTunnel struct {
	ApplyGroups        []string                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Inclusive          *NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive `path:"inclusive" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_ProviderTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_ProviderTunnel) IsYANGGoStruct() {}

// GetOrCreateInclusive retrieves the value of the Inclusive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_ProviderTunnel) GetOrCreateInclusive() *NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive {
	if t.Inclusive != nil {
		return t.Inclusive
	}
	t.Inclusive = &NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive{}
	return t.Inclusive
}

// GetInclusive returns the value of the Inclusive struct pointer
// from NokiaConf_Configure_Service_Vpls_ProviderTunnel. If the receiver or the field Inclusive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_ProviderTunnel) GetInclusive() *NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive {
	if t != nil && t.Inclusive != nil {
		return t.Inclusive
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_ProviderTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProviderTunnel) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_ProviderTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProviderTunnel) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_ProviderTunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_ProviderTunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Inclusive.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProviderTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_ProviderTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProviderTunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_ProviderTunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_ProviderTunnel.
func (*NokiaConf_Configure_Service_Vpls_ProviderTunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive represents the /nokia-conf/configure/service/vpls/provider-tunnel/inclusive YANG schema element.
type NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive struct {
	AdminState        E_NokiaTypesSros_AdminState                                       `path:"admin-state" module:"nokia-conf"`
	DataDelayInterval *int32                                                            `path:"data-delay-interval" module:"nokia-conf"`
	Mldp              YANGEmpty                                                         `path:"mldp" module:"nokia-conf"`
	Owner             E_NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive_Owner `path:"owner" module:"nokia-conf"`
	RootAndLeaf       *bool                                                             `path:"root-and-leaf" module:"nokia-conf"`
	Rsvp              *NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive_Rsvp   `path:"rsvp" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive) IsYANGGoStruct() {}

// GetOrCreateRsvp retrieves the value of the Rsvp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive) GetOrCreateRsvp() *NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive_Rsvp {
	if t.Rsvp != nil {
		return t.Rsvp
	}
	t.Rsvp = &NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive_Rsvp{}
	return t.Rsvp
}

// GetRsvp returns the value of the Rsvp struct pointer
// from NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive. If the receiver or the field Rsvp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive) GetRsvp() *NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive_Rsvp {
	if t != nil && t.Rsvp != nil {
		return t.Rsvp
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDataDelayInterval retrieves the value of the leaf DataDelayInterval from the NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DataDelayInterval is set, it can
// safely use t.GetDataDelayInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DataDelayInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive) GetDataDelayInterval() int32 {
	if t == nil || t.DataDelayInterval == nil {
		return 15
	}
	return *t.DataDelayInterval
}

// GetMldp retrieves the value of the leaf Mldp from the NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mldp is set, it can
// safely use t.GetMldp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mldp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive) GetMldp() YANGEmpty {
	if t == nil || t.Mldp == false {
		return false
	}
	return t.Mldp
}

// GetOwner retrieves the value of the leaf Owner from the NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Owner is set, it can
// safely use t.GetOwner() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Owner == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive) GetOwner() E_NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive_Owner {
	if t == nil || t.Owner == 0 {
		return 0
	}
	return t.Owner
}

// GetRootAndLeaf retrieves the value of the leaf RootAndLeaf from the NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootAndLeaf is set, it can
// safely use t.GetRootAndLeaf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootAndLeaf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive) GetRootAndLeaf() bool {
	if t == nil || t.RootAndLeaf == nil {
		return false
	}
	return *t.RootAndLeaf
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.DataDelayInterval == nil {
		var v int32 = 15
		t.DataDelayInterval = &v
	}
	if t.RootAndLeaf == nil {
		var v bool = false
		t.RootAndLeaf = &v
	}
	t.Rsvp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive.
func (*NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive_Rsvp represents the /nokia-conf/configure/service/vpls/provider-tunnel/inclusive/rsvp YANG schema element.
type NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive_Rsvp struct {
	LspTemplate *string `path:"lsp-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive_Rsvp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive_Rsvp) IsYANGGoStruct() {}

// GetLspTemplate retrieves the value of the leaf LspTemplate from the NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspTemplate is set, it can
// safely use t.GetLspTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive_Rsvp) GetLspTemplate() string {
	if t == nil || t.LspTemplate == nil {
		return ""
	}
	return *t.LspTemplate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive_Rsvp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive_Rsvp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive_Rsvp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive_Rsvp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive_Rsvp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive_Rsvp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive_Rsvp.
func (*NokiaConf_Configure_Service_Vpls_ProviderTunnel_Inclusive_Rsvp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_ProxyArp represents the /nokia-conf/configure/service/vpls/proxy-arp YANG schema element.
type NokiaConf_Configure_Service_Vpls_ProxyArp struct {
	AdminState         E_NokiaTypesSros_AdminState                                 `path:"admin-state" module:"nokia-conf"`
	AgeTime            NokiaConf_Configure_Service_Vpls_ProxyArp_AgeTime_Union     `path:"age-time" module:"nokia-conf"`
	ApplyGroups        []string                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	DuplicateDetect    *NokiaConf_Configure_Service_Vpls_ProxyArp_DuplicateDetect  `path:"duplicate-detect" module:"nokia-conf"`
	DynamicArp         *NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp       `path:"dynamic-arp" module:"nokia-conf"`
	DynamicPopulate    *bool                                                       `path:"dynamic-populate" module:"nokia-conf"`
	Evpn               *NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn             `path:"evpn" module:"nokia-conf"`
	SendRefresh        NokiaConf_Configure_Service_Vpls_ProxyArp_SendRefresh_Union `path:"send-refresh" module:"nokia-conf"`
	StaticArp          *NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp        `path:"static-arp" module:"nokia-conf"`
	TableSize          *int32                                                      `path:"table-size" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_ProxyArp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_ProxyArp) IsYANGGoStruct() {}

// GetOrCreateDuplicateDetect retrieves the value of the DuplicateDetect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp) GetOrCreateDuplicateDetect() *NokiaConf_Configure_Service_Vpls_ProxyArp_DuplicateDetect {
	if t.DuplicateDetect != nil {
		return t.DuplicateDetect
	}
	t.DuplicateDetect = &NokiaConf_Configure_Service_Vpls_ProxyArp_DuplicateDetect{}
	return t.DuplicateDetect
}

// GetOrCreateDynamicArp retrieves the value of the DynamicArp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp) GetOrCreateDynamicArp() *NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp {
	if t.DynamicArp != nil {
		return t.DynamicArp
	}
	t.DynamicArp = &NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp{}
	return t.DynamicArp
}

// GetOrCreateEvpn retrieves the value of the Evpn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp) GetOrCreateEvpn() *NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn {
	if t.Evpn != nil {
		return t.Evpn
	}
	t.Evpn = &NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn{}
	return t.Evpn
}

// GetOrCreateStaticArp retrieves the value of the StaticArp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp) GetOrCreateStaticArp() *NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp {
	if t.StaticArp != nil {
		return t.StaticArp
	}
	t.StaticArp = &NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp{}
	return t.StaticArp
}

// GetDuplicateDetect returns the value of the DuplicateDetect struct pointer
// from NokiaConf_Configure_Service_Vpls_ProxyArp. If the receiver or the field DuplicateDetect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp) GetDuplicateDetect() *NokiaConf_Configure_Service_Vpls_ProxyArp_DuplicateDetect {
	if t != nil && t.DuplicateDetect != nil {
		return t.DuplicateDetect
	}
	return nil
}

// GetDynamicArp returns the value of the DynamicArp struct pointer
// from NokiaConf_Configure_Service_Vpls_ProxyArp. If the receiver or the field DynamicArp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp) GetDynamicArp() *NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp {
	if t != nil && t.DynamicArp != nil {
		return t.DynamicArp
	}
	return nil
}

// GetEvpn returns the value of the Evpn struct pointer
// from NokiaConf_Configure_Service_Vpls_ProxyArp. If the receiver or the field Evpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp) GetEvpn() *NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn {
	if t != nil && t.Evpn != nil {
		return t.Evpn
	}
	return nil
}

// GetStaticArp returns the value of the StaticArp struct pointer
// from NokiaConf_Configure_Service_Vpls_ProxyArp. If the receiver or the field StaticArp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp) GetStaticArp() *NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp {
	if t != nil && t.StaticArp != nil {
		return t.StaticArp
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_ProxyArp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAgeTime retrieves the value of the leaf AgeTime from the NokiaConf_Configure_Service_Vpls_ProxyArp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AgeTime is set, it can
// safely use t.GetAgeTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AgeTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp) GetAgeTime() NokiaConf_Configure_Service_Vpls_ProxyArp_AgeTime_Union {
	if t == nil || t.AgeTime == nil {
		return NokiaConf_Configure_Service_Vpls_ProxyArp_AgeTime_Enum_never
	}
	return t.AgeTime
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_ProxyArp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_ProxyArp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDynamicPopulate retrieves the value of the leaf DynamicPopulate from the NokiaConf_Configure_Service_Vpls_ProxyArp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicPopulate is set, it can
// safely use t.GetDynamicPopulate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicPopulate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp) GetDynamicPopulate() bool {
	if t == nil || t.DynamicPopulate == nil {
		return false
	}
	return *t.DynamicPopulate
}

// GetSendRefresh retrieves the value of the leaf SendRefresh from the NokiaConf_Configure_Service_Vpls_ProxyArp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendRefresh is set, it can
// safely use t.GetSendRefresh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendRefresh == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp) GetSendRefresh() NokiaConf_Configure_Service_Vpls_ProxyArp_SendRefresh_Union {
	if t == nil || t.SendRefresh == nil {
		return NokiaConf_Configure_Service_Vpls_ProxyArp_SendRefresh_Enum_never
	}
	return t.SendRefresh
}

// GetTableSize retrieves the value of the leaf TableSize from the NokiaConf_Configure_Service_Vpls_ProxyArp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TableSize is set, it can
// safely use t.GetTableSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TableSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp) GetTableSize() int32 {
	if t == nil || t.TableSize == nil {
		return 250
	}
	return *t.TableSize
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_ProxyArp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AgeTime == nil {
		t.AgeTime = NokiaConf_Configure_Service_Vpls_ProxyArp_AgeTime_Enum_never
	}
	if t.DynamicPopulate == nil {
		var v bool = false
		t.DynamicPopulate = &v
	}
	if t.SendRefresh == nil {
		t.SendRefresh = NokiaConf_Configure_Service_Vpls_ProxyArp_SendRefresh_Enum_never
	}
	if t.TableSize == nil {
		var v int32 = 250
		t.TableSize = &v
	}
	t.DuplicateDetect.PopulateDefaults()
	t.DynamicArp.PopulateDefaults()
	t.Evpn.PopulateDefaults()
	t.StaticArp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_ProxyArp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_ProxyArp.
func (*NokiaConf_Configure_Service_Vpls_ProxyArp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_ProxyArp_DuplicateDetect represents the /nokia-conf/configure/service/vpls/proxy-arp/duplicate-detect YANG schema element.
type NokiaConf_Configure_Service_Vpls_ProxyArp_DuplicateDetect struct {
	AntiSpoofMac    *string                                                                      `path:"anti-spoof-mac" module:"nokia-conf"`
	HoldDownTime    NokiaConf_Configure_Service_Vpls_ProxyArp_DuplicateDetect_HoldDownTime_Union `path:"hold-down-time" module:"nokia-conf"`
	NumMoves        *int32                                                                       `path:"num-moves" module:"nokia-conf"`
	StaticBlackhole *bool                                                                        `path:"static-blackhole" module:"nokia-conf"`
	Window          *int32                                                                       `path:"window" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_ProxyArp_DuplicateDetect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_ProxyArp_DuplicateDetect) IsYANGGoStruct() {}

// GetAntiSpoofMac retrieves the value of the leaf AntiSpoofMac from the NokiaConf_Configure_Service_Vpls_ProxyArp_DuplicateDetect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AntiSpoofMac is set, it can
// safely use t.GetAntiSpoofMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AntiSpoofMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_DuplicateDetect) GetAntiSpoofMac() string {
	if t == nil || t.AntiSpoofMac == nil {
		return ""
	}
	return *t.AntiSpoofMac
}

// GetHoldDownTime retrieves the value of the leaf HoldDownTime from the NokiaConf_Configure_Service_Vpls_ProxyArp_DuplicateDetect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldDownTime is set, it can
// safely use t.GetHoldDownTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldDownTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_DuplicateDetect) GetHoldDownTime() NokiaConf_Configure_Service_Vpls_ProxyArp_DuplicateDetect_HoldDownTime_Union {
	if t == nil || t.HoldDownTime == nil {
		return UnionUint32(9)
	}
	return t.HoldDownTime
}

// GetNumMoves retrieves the value of the leaf NumMoves from the NokiaConf_Configure_Service_Vpls_ProxyArp_DuplicateDetect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NumMoves is set, it can
// safely use t.GetNumMoves() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NumMoves == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_DuplicateDetect) GetNumMoves() int32 {
	if t == nil || t.NumMoves == nil {
		return 5
	}
	return *t.NumMoves
}

// GetStaticBlackhole retrieves the value of the leaf StaticBlackhole from the NokiaConf_Configure_Service_Vpls_ProxyArp_DuplicateDetect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticBlackhole is set, it can
// safely use t.GetStaticBlackhole() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticBlackhole == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_DuplicateDetect) GetStaticBlackhole() bool {
	if t == nil || t.StaticBlackhole == nil {
		return false
	}
	return *t.StaticBlackhole
}

// GetWindow retrieves the value of the leaf Window from the NokiaConf_Configure_Service_Vpls_ProxyArp_DuplicateDetect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Window is set, it can
// safely use t.GetWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Window == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_DuplicateDetect) GetWindow() int32 {
	if t == nil || t.Window == nil {
		return 3
	}
	return *t.Window
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_ProxyArp_DuplicateDetect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_DuplicateDetect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HoldDownTime == nil {
		t.HoldDownTime = UnionUint32(9)
	}
	if t.NumMoves == nil {
		var v int32 = 5
		t.NumMoves = &v
	}
	if t.StaticBlackhole == nil {
		var v bool = false
		t.StaticBlackhole = &v
	}
	if t.Window == nil {
		var v int32 = 3
		t.Window = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_DuplicateDetect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_ProxyArp_DuplicateDetect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_DuplicateDetect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_DuplicateDetect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_ProxyArp_DuplicateDetect.
func (*NokiaConf_Configure_Service_Vpls_ProxyArp_DuplicateDetect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp represents the /nokia-conf/configure/service/vpls/proxy-arp/dynamic-arp YANG schema element.
type NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp struct {
	IpAddress map[string]*NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp_IpAddress `path:"ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp) IsYANGGoStruct() {}

// NewIpAddress creates a new entry in the IpAddress list of the
// NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp) NewIpAddress(Ipv4Address string) (*NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp_IpAddress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpAddress == nil {
		t.IpAddress = make(map[string]*NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp_IpAddress)
	}

	key := Ipv4Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IpAddress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IpAddress", key)
	}

	t.IpAddress[key] = &NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp_IpAddress{
		Ipv4Address: &Ipv4Address,
	}

	return t.IpAddress[key], nil
}

// RenameIpAddress renames an entry in the list IpAddress within
// the NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp) RenameIpAddress(oldK, newK string) error {
	if _, ok := t.IpAddress[newK]; ok {
		return fmt.Errorf("key %v already exists in IpAddress", newK)
	}

	e, ok := t.IpAddress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IpAddress", oldK)
	}
	e.Ipv4Address = &newK

	t.IpAddress[newK] = e
	delete(t.IpAddress, oldK)
	return nil
}

// GetOrCreateIpAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp) GetOrCreateIpAddress(Ipv4Address string) *NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp_IpAddress {

	key := Ipv4Address

	if v, ok := t.IpAddress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpAddress(Ipv4Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpAddress got unexpected error: %v", err))
	}
	return v
}

// GetIpAddress retrieves the value with the specified key from
// the IpAddress map field of NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp) GetIpAddress(Ipv4Address string) *NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp_IpAddress {

	if t == nil {
		return nil
	}

	key := Ipv4Address

	if lm, ok := t.IpAddress[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp) DeleteIpAddress(Ipv4Address string) {
	key := Ipv4Address

	delete(t.IpAddress, key)
}

// AppendIpAddress appends the supplied NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp_IpAddress struct to the
// list IpAddress of NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp_IpAddress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp) AppendIpAddress(v *NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp_IpAddress) error {
	if v.Ipv4Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv4Address")
	}

	key := *v.Ipv4Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpAddress == nil {
		t.IpAddress = make(map[string]*NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp_IpAddress)
	}

	if _, ok := t.IpAddress[key]; ok {
		return fmt.Errorf("duplicate key for list IpAddress %v", key)
	}

	t.IpAddress[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.IpAddress {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp.
func (*NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp_IpAddress represents the /nokia-conf/configure/service/vpls/proxy-arp/dynamic-arp/ip-address YANG schema element.
type NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp_IpAddress struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Ipv4Address        *string  `path:"ipv4-address" module:"nokia-conf"`
	MacList            *string  `path:"mac-list" module:"nokia-conf"`
	ResolveRetryTime   *int32   `path:"resolve-retry-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp_IpAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp_IpAddress) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp_IpAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp_IpAddress) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp_IpAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp_IpAddress) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp_IpAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp_IpAddress) GetIpv4Address() string {
	if t == nil || t.Ipv4Address == nil {
		return ""
	}
	return *t.Ipv4Address
}

// GetMacList retrieves the value of the leaf MacList from the NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp_IpAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacList is set, it can
// safely use t.GetMacList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp_IpAddress) GetMacList() string {
	if t == nil || t.MacList == nil {
		return ""
	}
	return *t.MacList
}

// GetResolveRetryTime retrieves the value of the leaf ResolveRetryTime from the NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp_IpAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResolveRetryTime is set, it can
// safely use t.GetResolveRetryTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResolveRetryTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp_IpAddress) GetResolveRetryTime() int32 {
	if t == nil || t.ResolveRetryTime == nil {
		return 5
	}
	return *t.ResolveRetryTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp_IpAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp_IpAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ResolveRetryTime == nil {
		var v int32 = 5
		t.ResolveRetryTime = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp_IpAddress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp_IpAddress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Address")
	}

	return map[string]interface{}{
		"ipv4-address": *t.Ipv4Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp_IpAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp_IpAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp_IpAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp_IpAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp_IpAddress.
func (*NokiaConf_Configure_Service_Vpls_ProxyArp_DynamicArp_IpAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn represents the /nokia-conf/configure/service/vpls/proxy-arp/evpn YANG schema element.
type NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn struct {
	Flood    *NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn_Flood `path:"flood" module:"nokia-conf"`
	RouteTag *int32                                                `path:"route-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn) IsYANGGoStruct() {}

// GetOrCreateFlood retrieves the value of the Flood field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn) GetOrCreateFlood() *NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn_Flood {
	if t.Flood != nil {
		return t.Flood
	}
	t.Flood = &NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn_Flood{}
	return t.Flood
}

// GetFlood returns the value of the Flood struct pointer
// from NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn. If the receiver or the field Flood is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn) GetFlood() *NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn_Flood {
	if t != nil && t.Flood != nil {
		return t.Flood
	}
	return nil
}

// GetRouteTag retrieves the value of the leaf RouteTag from the NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTag is set, it can
// safely use t.GetRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn) GetRouteTag() int32 {
	if t == nil || t.RouteTag == nil {
		return 0
	}
	return *t.RouteTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RouteTag == nil {
		var v int32 = 0
		t.RouteTag = &v
	}
	t.Flood.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn.
func (*NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn_Flood represents the /nokia-conf/configure/service/vpls/proxy-arp/evpn/flood YANG schema element.
type NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn_Flood struct {
	GratuitousArp *bool `path:"gratuitous-arp" module:"nokia-conf"`
	UnknownArpReq *bool `path:"unknown-arp-req" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn_Flood implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn_Flood) IsYANGGoStruct() {}

// GetGratuitousArp retrieves the value of the leaf GratuitousArp from the NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn_Flood
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GratuitousArp is set, it can
// safely use t.GetGratuitousArp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GratuitousArp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn_Flood) GetGratuitousArp() bool {
	if t == nil || t.GratuitousArp == nil {
		return true
	}
	return *t.GratuitousArp
}

// GetUnknownArpReq retrieves the value of the leaf UnknownArpReq from the NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn_Flood
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnknownArpReq is set, it can
// safely use t.GetUnknownArpReq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnknownArpReq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn_Flood) GetUnknownArpReq() bool {
	if t == nil || t.UnknownArpReq == nil {
		return true
	}
	return *t.UnknownArpReq
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn_Flood
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn_Flood) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.GratuitousArp == nil {
		var v bool = true
		t.GratuitousArp = &v
	}
	if t.UnknownArpReq == nil {
		var v bool = true
		t.UnknownArpReq = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn_Flood) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn_Flood"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn_Flood) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn_Flood) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn_Flood.
func (*NokiaConf_Configure_Service_Vpls_ProxyArp_Evpn_Flood) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp represents the /nokia-conf/configure/service/vpls/proxy-arp/static-arp YANG schema element.
type NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp struct {
	IpAddress map[string]*NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp_IpAddress `path:"ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp) IsYANGGoStruct() {}

// NewIpAddress creates a new entry in the IpAddress list of the
// NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp) NewIpAddress(Ipv4Address string) (*NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp_IpAddress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpAddress == nil {
		t.IpAddress = make(map[string]*NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp_IpAddress)
	}

	key := Ipv4Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IpAddress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IpAddress", key)
	}

	t.IpAddress[key] = &NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp_IpAddress{
		Ipv4Address: &Ipv4Address,
	}

	return t.IpAddress[key], nil
}

// RenameIpAddress renames an entry in the list IpAddress within
// the NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp) RenameIpAddress(oldK, newK string) error {
	if _, ok := t.IpAddress[newK]; ok {
		return fmt.Errorf("key %v already exists in IpAddress", newK)
	}

	e, ok := t.IpAddress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IpAddress", oldK)
	}
	e.Ipv4Address = &newK

	t.IpAddress[newK] = e
	delete(t.IpAddress, oldK)
	return nil
}

// GetOrCreateIpAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp) GetOrCreateIpAddress(Ipv4Address string) *NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp_IpAddress {

	key := Ipv4Address

	if v, ok := t.IpAddress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpAddress(Ipv4Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpAddress got unexpected error: %v", err))
	}
	return v
}

// GetIpAddress retrieves the value with the specified key from
// the IpAddress map field of NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp) GetIpAddress(Ipv4Address string) *NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp_IpAddress {

	if t == nil {
		return nil
	}

	key := Ipv4Address

	if lm, ok := t.IpAddress[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp) DeleteIpAddress(Ipv4Address string) {
	key := Ipv4Address

	delete(t.IpAddress, key)
}

// AppendIpAddress appends the supplied NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp_IpAddress struct to the
// list IpAddress of NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp_IpAddress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp) AppendIpAddress(v *NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp_IpAddress) error {
	if v.Ipv4Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv4Address")
	}

	key := *v.Ipv4Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpAddress == nil {
		t.IpAddress = make(map[string]*NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp_IpAddress)
	}

	if _, ok := t.IpAddress[key]; ok {
		return fmt.Errorf("duplicate key for list IpAddress %v", key)
	}

	t.IpAddress[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.IpAddress {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp.
func (*NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp_IpAddress represents the /nokia-conf/configure/service/vpls/proxy-arp/static-arp/ip-address YANG schema element.
type NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp_IpAddress struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Ipv4Address        *string  `path:"ipv4-address" module:"nokia-conf"`
	Mac                *string  `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp_IpAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp_IpAddress) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp_IpAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp_IpAddress) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp_IpAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp_IpAddress) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp_IpAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp_IpAddress) GetIpv4Address() string {
	if t == nil || t.Ipv4Address == nil {
		return ""
	}
	return *t.Ipv4Address
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp_IpAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp_IpAddress) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp_IpAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp_IpAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp_IpAddress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp_IpAddress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Address")
	}

	return map[string]interface{}{
		"ipv4-address": *t.Ipv4Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp_IpAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp_IpAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp_IpAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp_IpAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp_IpAddress.
func (*NokiaConf_Configure_Service_Vpls_ProxyArp_StaticArp_IpAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_ProxyNd represents the /nokia-conf/configure/service/vpls/proxy-nd YANG schema element.
type NokiaConf_Configure_Service_Vpls_ProxyNd struct {
	AdminState         E_NokiaTypesSros_AdminState                                `path:"admin-state" module:"nokia-conf"`
	AgeTime            NokiaConf_Configure_Service_Vpls_ProxyNd_AgeTime_Union     `path:"age-time" module:"nokia-conf"`
	ApplyGroups        []string                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	DuplicateDetect    *NokiaConf_Configure_Service_Vpls_ProxyNd_DuplicateDetect  `path:"duplicate-detect" module:"nokia-conf"`
	DynamicNeighbor    *NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor  `path:"dynamic-neighbor" module:"nokia-conf"`
	DynamicPopulate    *bool                                                      `path:"dynamic-populate" module:"nokia-conf"`
	Evpn               *NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn             `path:"evpn" module:"nokia-conf"`
	SendRefresh        NokiaConf_Configure_Service_Vpls_ProxyNd_SendRefresh_Union `path:"send-refresh" module:"nokia-conf"`
	StaticNeighbor     *NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor   `path:"static-neighbor" module:"nokia-conf"`
	TableSize          *int32                                                     `path:"table-size" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_ProxyNd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_ProxyNd) IsYANGGoStruct() {}

// GetOrCreateDuplicateDetect retrieves the value of the DuplicateDetect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd) GetOrCreateDuplicateDetect() *NokiaConf_Configure_Service_Vpls_ProxyNd_DuplicateDetect {
	if t.DuplicateDetect != nil {
		return t.DuplicateDetect
	}
	t.DuplicateDetect = &NokiaConf_Configure_Service_Vpls_ProxyNd_DuplicateDetect{}
	return t.DuplicateDetect
}

// GetOrCreateDynamicNeighbor retrieves the value of the DynamicNeighbor field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd) GetOrCreateDynamicNeighbor() *NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor {
	if t.DynamicNeighbor != nil {
		return t.DynamicNeighbor
	}
	t.DynamicNeighbor = &NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor{}
	return t.DynamicNeighbor
}

// GetOrCreateEvpn retrieves the value of the Evpn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd) GetOrCreateEvpn() *NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn {
	if t.Evpn != nil {
		return t.Evpn
	}
	t.Evpn = &NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn{}
	return t.Evpn
}

// GetOrCreateStaticNeighbor retrieves the value of the StaticNeighbor field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd) GetOrCreateStaticNeighbor() *NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor {
	if t.StaticNeighbor != nil {
		return t.StaticNeighbor
	}
	t.StaticNeighbor = &NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor{}
	return t.StaticNeighbor
}

// GetDuplicateDetect returns the value of the DuplicateDetect struct pointer
// from NokiaConf_Configure_Service_Vpls_ProxyNd. If the receiver or the field DuplicateDetect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd) GetDuplicateDetect() *NokiaConf_Configure_Service_Vpls_ProxyNd_DuplicateDetect {
	if t != nil && t.DuplicateDetect != nil {
		return t.DuplicateDetect
	}
	return nil
}

// GetDynamicNeighbor returns the value of the DynamicNeighbor struct pointer
// from NokiaConf_Configure_Service_Vpls_ProxyNd. If the receiver or the field DynamicNeighbor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd) GetDynamicNeighbor() *NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor {
	if t != nil && t.DynamicNeighbor != nil {
		return t.DynamicNeighbor
	}
	return nil
}

// GetEvpn returns the value of the Evpn struct pointer
// from NokiaConf_Configure_Service_Vpls_ProxyNd. If the receiver or the field Evpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd) GetEvpn() *NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn {
	if t != nil && t.Evpn != nil {
		return t.Evpn
	}
	return nil
}

// GetStaticNeighbor returns the value of the StaticNeighbor struct pointer
// from NokiaConf_Configure_Service_Vpls_ProxyNd. If the receiver or the field StaticNeighbor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd) GetStaticNeighbor() *NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor {
	if t != nil && t.StaticNeighbor != nil {
		return t.StaticNeighbor
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_ProxyNd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAgeTime retrieves the value of the leaf AgeTime from the NokiaConf_Configure_Service_Vpls_ProxyNd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AgeTime is set, it can
// safely use t.GetAgeTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AgeTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd) GetAgeTime() NokiaConf_Configure_Service_Vpls_ProxyNd_AgeTime_Union {
	if t == nil || t.AgeTime == nil {
		return NokiaConf_Configure_Service_Vpls_ProxyNd_AgeTime_Enum_never
	}
	return t.AgeTime
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_ProxyNd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_ProxyNd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDynamicPopulate retrieves the value of the leaf DynamicPopulate from the NokiaConf_Configure_Service_Vpls_ProxyNd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicPopulate is set, it can
// safely use t.GetDynamicPopulate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicPopulate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd) GetDynamicPopulate() bool {
	if t == nil || t.DynamicPopulate == nil {
		return false
	}
	return *t.DynamicPopulate
}

// GetSendRefresh retrieves the value of the leaf SendRefresh from the NokiaConf_Configure_Service_Vpls_ProxyNd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendRefresh is set, it can
// safely use t.GetSendRefresh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendRefresh == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd) GetSendRefresh() NokiaConf_Configure_Service_Vpls_ProxyNd_SendRefresh_Union {
	if t == nil || t.SendRefresh == nil {
		return NokiaConf_Configure_Service_Vpls_ProxyNd_SendRefresh_Enum_never
	}
	return t.SendRefresh
}

// GetTableSize retrieves the value of the leaf TableSize from the NokiaConf_Configure_Service_Vpls_ProxyNd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TableSize is set, it can
// safely use t.GetTableSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TableSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd) GetTableSize() int32 {
	if t == nil || t.TableSize == nil {
		return 250
	}
	return *t.TableSize
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_ProxyNd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AgeTime == nil {
		t.AgeTime = NokiaConf_Configure_Service_Vpls_ProxyNd_AgeTime_Enum_never
	}
	if t.DynamicPopulate == nil {
		var v bool = false
		t.DynamicPopulate = &v
	}
	if t.SendRefresh == nil {
		t.SendRefresh = NokiaConf_Configure_Service_Vpls_ProxyNd_SendRefresh_Enum_never
	}
	if t.TableSize == nil {
		var v int32 = 250
		t.TableSize = &v
	}
	t.DuplicateDetect.PopulateDefaults()
	t.DynamicNeighbor.PopulateDefaults()
	t.Evpn.PopulateDefaults()
	t.StaticNeighbor.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_ProxyNd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_ProxyNd.
func (*NokiaConf_Configure_Service_Vpls_ProxyNd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_ProxyNd_DuplicateDetect represents the /nokia-conf/configure/service/vpls/proxy-nd/duplicate-detect YANG schema element.
type NokiaConf_Configure_Service_Vpls_ProxyNd_DuplicateDetect struct {
	AntiSpoofMac    *string                                                                     `path:"anti-spoof-mac" module:"nokia-conf"`
	HoldDownTime    NokiaConf_Configure_Service_Vpls_ProxyNd_DuplicateDetect_HoldDownTime_Union `path:"hold-down-time" module:"nokia-conf"`
	NumMoves        *int32                                                                      `path:"num-moves" module:"nokia-conf"`
	StaticBlackhole *bool                                                                       `path:"static-blackhole" module:"nokia-conf"`
	Window          *int32                                                                      `path:"window" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_ProxyNd_DuplicateDetect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_ProxyNd_DuplicateDetect) IsYANGGoStruct() {}

// GetAntiSpoofMac retrieves the value of the leaf AntiSpoofMac from the NokiaConf_Configure_Service_Vpls_ProxyNd_DuplicateDetect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AntiSpoofMac is set, it can
// safely use t.GetAntiSpoofMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AntiSpoofMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_DuplicateDetect) GetAntiSpoofMac() string {
	if t == nil || t.AntiSpoofMac == nil {
		return ""
	}
	return *t.AntiSpoofMac
}

// GetHoldDownTime retrieves the value of the leaf HoldDownTime from the NokiaConf_Configure_Service_Vpls_ProxyNd_DuplicateDetect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldDownTime is set, it can
// safely use t.GetHoldDownTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldDownTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_DuplicateDetect) GetHoldDownTime() NokiaConf_Configure_Service_Vpls_ProxyNd_DuplicateDetect_HoldDownTime_Union {
	if t == nil || t.HoldDownTime == nil {
		return UnionUint32(9)
	}
	return t.HoldDownTime
}

// GetNumMoves retrieves the value of the leaf NumMoves from the NokiaConf_Configure_Service_Vpls_ProxyNd_DuplicateDetect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NumMoves is set, it can
// safely use t.GetNumMoves() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NumMoves == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_DuplicateDetect) GetNumMoves() int32 {
	if t == nil || t.NumMoves == nil {
		return 5
	}
	return *t.NumMoves
}

// GetStaticBlackhole retrieves the value of the leaf StaticBlackhole from the NokiaConf_Configure_Service_Vpls_ProxyNd_DuplicateDetect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticBlackhole is set, it can
// safely use t.GetStaticBlackhole() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticBlackhole == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_DuplicateDetect) GetStaticBlackhole() bool {
	if t == nil || t.StaticBlackhole == nil {
		return false
	}
	return *t.StaticBlackhole
}

// GetWindow retrieves the value of the leaf Window from the NokiaConf_Configure_Service_Vpls_ProxyNd_DuplicateDetect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Window is set, it can
// safely use t.GetWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Window == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_DuplicateDetect) GetWindow() int32 {
	if t == nil || t.Window == nil {
		return 3
	}
	return *t.Window
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_ProxyNd_DuplicateDetect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_DuplicateDetect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HoldDownTime == nil {
		t.HoldDownTime = UnionUint32(9)
	}
	if t.NumMoves == nil {
		var v int32 = 5
		t.NumMoves = &v
	}
	if t.StaticBlackhole == nil {
		var v bool = false
		t.StaticBlackhole = &v
	}
	if t.Window == nil {
		var v int32 = 3
		t.Window = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_DuplicateDetect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_ProxyNd_DuplicateDetect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_DuplicateDetect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_DuplicateDetect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_ProxyNd_DuplicateDetect.
func (*NokiaConf_Configure_Service_Vpls_ProxyNd_DuplicateDetect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor represents the /nokia-conf/configure/service/vpls/proxy-nd/dynamic-neighbor YANG schema element.
type NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor struct {
	IpAddress map[string]*NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor_IpAddress `path:"ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor) IsYANGGoStruct() {}

// NewIpAddress creates a new entry in the IpAddress list of the
// NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor) NewIpAddress(Ipv6Address string) (*NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor_IpAddress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpAddress == nil {
		t.IpAddress = make(map[string]*NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor_IpAddress)
	}

	key := Ipv6Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IpAddress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IpAddress", key)
	}

	t.IpAddress[key] = &NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor_IpAddress{
		Ipv6Address: &Ipv6Address,
	}

	return t.IpAddress[key], nil
}

// RenameIpAddress renames an entry in the list IpAddress within
// the NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor) RenameIpAddress(oldK, newK string) error {
	if _, ok := t.IpAddress[newK]; ok {
		return fmt.Errorf("key %v already exists in IpAddress", newK)
	}

	e, ok := t.IpAddress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IpAddress", oldK)
	}
	e.Ipv6Address = &newK

	t.IpAddress[newK] = e
	delete(t.IpAddress, oldK)
	return nil
}

// GetOrCreateIpAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor) GetOrCreateIpAddress(Ipv6Address string) *NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor_IpAddress {

	key := Ipv6Address

	if v, ok := t.IpAddress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpAddress(Ipv6Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpAddress got unexpected error: %v", err))
	}
	return v
}

// GetIpAddress retrieves the value with the specified key from
// the IpAddress map field of NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor) GetIpAddress(Ipv6Address string) *NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor_IpAddress {

	if t == nil {
		return nil
	}

	key := Ipv6Address

	if lm, ok := t.IpAddress[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor) DeleteIpAddress(Ipv6Address string) {
	key := Ipv6Address

	delete(t.IpAddress, key)
}

// AppendIpAddress appends the supplied NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor_IpAddress struct to the
// list IpAddress of NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor_IpAddress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor) AppendIpAddress(v *NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor_IpAddress) error {
	if v.Ipv6Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Address")
	}

	key := *v.Ipv6Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpAddress == nil {
		t.IpAddress = make(map[string]*NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor_IpAddress)
	}

	if _, ok := t.IpAddress[key]; ok {
		return fmt.Errorf("duplicate key for list IpAddress %v", key)
	}

	t.IpAddress[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.IpAddress {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor.
func (*NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor_IpAddress represents the /nokia-conf/configure/service/vpls/proxy-nd/dynamic-neighbor/ip-address YANG schema element.
type NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor_IpAddress struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Ipv6Address        *string  `path:"ipv6-address" module:"nokia-conf"`
	MacList            *string  `path:"mac-list" module:"nokia-conf"`
	ResolveRetryTime   *int32   `path:"resolve-retry-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor_IpAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor_IpAddress) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor_IpAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor_IpAddress) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor_IpAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor_IpAddress) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor_IpAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor_IpAddress) GetIpv6Address() string {
	if t == nil || t.Ipv6Address == nil {
		return ""
	}
	return *t.Ipv6Address
}

// GetMacList retrieves the value of the leaf MacList from the NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor_IpAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacList is set, it can
// safely use t.GetMacList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor_IpAddress) GetMacList() string {
	if t == nil || t.MacList == nil {
		return ""
	}
	return *t.MacList
}

// GetResolveRetryTime retrieves the value of the leaf ResolveRetryTime from the NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor_IpAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResolveRetryTime is set, it can
// safely use t.GetResolveRetryTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResolveRetryTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor_IpAddress) GetResolveRetryTime() int32 {
	if t == nil || t.ResolveRetryTime == nil {
		return 5
	}
	return *t.ResolveRetryTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor_IpAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor_IpAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ResolveRetryTime == nil {
		var v int32 = 5
		t.ResolveRetryTime = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor_IpAddress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor_IpAddress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Address")
	}

	return map[string]interface{}{
		"ipv6-address": *t.Ipv6Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor_IpAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor_IpAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor_IpAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor_IpAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor_IpAddress.
func (*NokiaConf_Configure_Service_Vpls_ProxyNd_DynamicNeighbor_IpAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn represents the /nokia-conf/configure/service/vpls/proxy-nd/evpn YANG schema element.
type NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn struct {
	AdvertiseNeighborType E_NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn_AdvertiseNeighborType `path:"advertise-neighbor-type" module:"nokia-conf"`
	Flood                 *NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn_Flood                  `path:"flood" module:"nokia-conf"`
	RouteTag              *int32                                                                `path:"route-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn) IsYANGGoStruct() {}

// GetOrCreateFlood retrieves the value of the Flood field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn) GetOrCreateFlood() *NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn_Flood {
	if t.Flood != nil {
		return t.Flood
	}
	t.Flood = &NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn_Flood{}
	return t.Flood
}

// GetFlood returns the value of the Flood struct pointer
// from NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn. If the receiver or the field Flood is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn) GetFlood() *NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn_Flood {
	if t != nil && t.Flood != nil {
		return t.Flood
	}
	return nil
}

// GetAdvertiseNeighborType retrieves the value of the leaf AdvertiseNeighborType from the NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseNeighborType is set, it can
// safely use t.GetAdvertiseNeighborType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseNeighborType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn) GetAdvertiseNeighborType() E_NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn_AdvertiseNeighborType {
	if t == nil || t.AdvertiseNeighborType == 0 {
		return NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn_AdvertiseNeighborType_router
	}
	return t.AdvertiseNeighborType
}

// GetRouteTag retrieves the value of the leaf RouteTag from the NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTag is set, it can
// safely use t.GetRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn) GetRouteTag() int32 {
	if t == nil || t.RouteTag == nil {
		return 0
	}
	return *t.RouteTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertiseNeighborType == 0 {
		t.AdvertiseNeighborType = NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn_AdvertiseNeighborType_router
	}
	if t.RouteTag == nil {
		var v int32 = 0
		t.RouteTag = &v
	}
	t.Flood.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn.
func (*NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn_Flood represents the /nokia-conf/configure/service/vpls/proxy-nd/evpn/flood YANG schema element.
type NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn_Flood struct {
	UnknownNeighborAdvertiseHost   *bool `path:"unknown-neighbor-advertise-host" module:"nokia-conf"`
	UnknownNeighborAdvertiseRouter *bool `path:"unknown-neighbor-advertise-router" module:"nokia-conf"`
	UnknownNeighborSolicitation    *bool `path:"unknown-neighbor-solicitation" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn_Flood implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn_Flood) IsYANGGoStruct() {}

// GetUnknownNeighborAdvertiseHost retrieves the value of the leaf UnknownNeighborAdvertiseHost from the NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn_Flood
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnknownNeighborAdvertiseHost is set, it can
// safely use t.GetUnknownNeighborAdvertiseHost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnknownNeighborAdvertiseHost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn_Flood) GetUnknownNeighborAdvertiseHost() bool {
	if t == nil || t.UnknownNeighborAdvertiseHost == nil {
		return true
	}
	return *t.UnknownNeighborAdvertiseHost
}

// GetUnknownNeighborAdvertiseRouter retrieves the value of the leaf UnknownNeighborAdvertiseRouter from the NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn_Flood
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnknownNeighborAdvertiseRouter is set, it can
// safely use t.GetUnknownNeighborAdvertiseRouter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnknownNeighborAdvertiseRouter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn_Flood) GetUnknownNeighborAdvertiseRouter() bool {
	if t == nil || t.UnknownNeighborAdvertiseRouter == nil {
		return true
	}
	return *t.UnknownNeighborAdvertiseRouter
}

// GetUnknownNeighborSolicitation retrieves the value of the leaf UnknownNeighborSolicitation from the NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn_Flood
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnknownNeighborSolicitation is set, it can
// safely use t.GetUnknownNeighborSolicitation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnknownNeighborSolicitation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn_Flood) GetUnknownNeighborSolicitation() bool {
	if t == nil || t.UnknownNeighborSolicitation == nil {
		return true
	}
	return *t.UnknownNeighborSolicitation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn_Flood
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn_Flood) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UnknownNeighborAdvertiseHost == nil {
		var v bool = true
		t.UnknownNeighborAdvertiseHost = &v
	}
	if t.UnknownNeighborAdvertiseRouter == nil {
		var v bool = true
		t.UnknownNeighborAdvertiseRouter = &v
	}
	if t.UnknownNeighborSolicitation == nil {
		var v bool = true
		t.UnknownNeighborSolicitation = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn_Flood) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn_Flood"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn_Flood) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn_Flood) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn_Flood.
func (*NokiaConf_Configure_Service_Vpls_ProxyNd_Evpn_Flood) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor represents the /nokia-conf/configure/service/vpls/proxy-nd/static-neighbor YANG schema element.
type NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor struct {
	IpAddress map[string]*NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress `path:"ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor) IsYANGGoStruct() {}

// NewIpAddress creates a new entry in the IpAddress list of the
// NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor) NewIpAddress(Ipv6Address string) (*NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpAddress == nil {
		t.IpAddress = make(map[string]*NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress)
	}

	key := Ipv6Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IpAddress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IpAddress", key)
	}

	t.IpAddress[key] = &NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress{
		Ipv6Address: &Ipv6Address,
	}

	return t.IpAddress[key], nil
}

// RenameIpAddress renames an entry in the list IpAddress within
// the NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor) RenameIpAddress(oldK, newK string) error {
	if _, ok := t.IpAddress[newK]; ok {
		return fmt.Errorf("key %v already exists in IpAddress", newK)
	}

	e, ok := t.IpAddress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IpAddress", oldK)
	}
	e.Ipv6Address = &newK

	t.IpAddress[newK] = e
	delete(t.IpAddress, oldK)
	return nil
}

// GetOrCreateIpAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor) GetOrCreateIpAddress(Ipv6Address string) *NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress {

	key := Ipv6Address

	if v, ok := t.IpAddress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpAddress(Ipv6Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpAddress got unexpected error: %v", err))
	}
	return v
}

// GetIpAddress retrieves the value with the specified key from
// the IpAddress map field of NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor) GetIpAddress(Ipv6Address string) *NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress {

	if t == nil {
		return nil
	}

	key := Ipv6Address

	if lm, ok := t.IpAddress[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor) DeleteIpAddress(Ipv6Address string) {
	key := Ipv6Address

	delete(t.IpAddress, key)
}

// AppendIpAddress appends the supplied NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress struct to the
// list IpAddress of NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor) AppendIpAddress(v *NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress) error {
	if v.Ipv6Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Address")
	}

	key := *v.Ipv6Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpAddress == nil {
		t.IpAddress = make(map[string]*NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress)
	}

	if _, ok := t.IpAddress[key]; ok {
		return fmt.Errorf("duplicate key for list IpAddress %v", key)
	}

	t.IpAddress[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.IpAddress {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor.
func (*NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress represents the /nokia-conf/configure/service/vpls/proxy-nd/static-neighbor/ip-address YANG schema element.
type NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress struct {
	ApplyGroups        []string                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Ipv6Address        *string                                                                  `path:"ipv6-address" module:"nokia-conf"`
	Mac                *string                                                                  `path:"mac" module:"nokia-conf"`
	Type               E_NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress_Type `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress) GetIpv6Address() string {
	if t == nil || t.Ipv6Address == nil {
		return ""
	}
	return *t.Ipv6Address
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress) GetType() E_NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress_Type_router
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress_Type_router
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Address")
	}

	return map[string]interface{}{
		"ipv6-address": *t.Ipv6Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress.
func (*NokiaConf_Configure_Service_Vpls_ProxyNd_StaticNeighbor_IpAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_RoutedVpls represents the /nokia-conf/configure/service/vpls/routed-vpls YANG schema element.
type NokiaConf_Configure_Service_Vpls_RoutedVpls struct {
	EvpnMplsEcmp     *bool                                                  `path:"evpn-mpls-ecmp" module:"nokia-conf"`
	Multicast        *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast `path:"multicast" module:"nokia-conf"`
	VxlanIpv4TepEcmp *bool                                                  `path:"vxlan-ipv4-tep-ecmp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_RoutedVpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_RoutedVpls) IsYANGGoStruct() {}

// GetOrCreateMulticast retrieves the value of the Multicast field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls) GetOrCreateMulticast() *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast {
	if t.Multicast != nil {
		return t.Multicast
	}
	t.Multicast = &NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast{}
	return t.Multicast
}

// GetMulticast returns the value of the Multicast struct pointer
// from NokiaConf_Configure_Service_Vpls_RoutedVpls. If the receiver or the field Multicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls) GetMulticast() *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast {
	if t != nil && t.Multicast != nil {
		return t.Multicast
	}
	return nil
}

// GetEvpnMplsEcmp retrieves the value of the leaf EvpnMplsEcmp from the NokiaConf_Configure_Service_Vpls_RoutedVpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EvpnMplsEcmp is set, it can
// safely use t.GetEvpnMplsEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EvpnMplsEcmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls) GetEvpnMplsEcmp() bool {
	if t == nil || t.EvpnMplsEcmp == nil {
		return false
	}
	return *t.EvpnMplsEcmp
}

// GetVxlanIpv4TepEcmp retrieves the value of the leaf VxlanIpv4TepEcmp from the NokiaConf_Configure_Service_Vpls_RoutedVpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VxlanIpv4TepEcmp is set, it can
// safely use t.GetVxlanIpv4TepEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VxlanIpv4TepEcmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls) GetVxlanIpv4TepEcmp() bool {
	if t == nil || t.VxlanIpv4TepEcmp == nil {
		return false
	}
	return *t.VxlanIpv4TepEcmp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_RoutedVpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EvpnMplsEcmp == nil {
		var v bool = false
		t.EvpnMplsEcmp = &v
	}
	if t.VxlanIpv4TepEcmp == nil {
		var v bool = false
		t.VxlanIpv4TepEcmp = &v
	}
	t.Multicast.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_RoutedVpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_RoutedVpls.
func (*NokiaConf_Configure_Service_Vpls_RoutedVpls) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast represents the /nokia-conf/configure/service/vpls/routed-vpls/multicast YANG schema element.
type NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast struct {
	ApplyGroups        []string                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	EvpnGateway        *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_EvpnGateway `path:"evpn-gateway" module:"nokia-conf" yangPresence:"true"`
	IpMulticastEcmp    *bool                                                              `path:"ip-multicast-ecmp" module:"nokia-conf"`
	Ipv4               *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4        `path:"ipv4" module:"nokia-conf"`
	Ipv6               *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6        `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast) IsYANGGoStruct() {}

// GetOrCreateEvpnGateway retrieves the value of the EvpnGateway field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast) GetOrCreateEvpnGateway() *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_EvpnGateway {
	if t.EvpnGateway != nil {
		return t.EvpnGateway
	}
	t.EvpnGateway = &NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_EvpnGateway{}
	return t.EvpnGateway
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast) GetOrCreateIpv4() *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast) GetOrCreateIpv6() *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6{}
	return t.Ipv6
}

// GetEvpnGateway returns the value of the EvpnGateway struct pointer
// from NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast. If the receiver or the field EvpnGateway is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast) GetEvpnGateway() *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_EvpnGateway {
	if t != nil && t.EvpnGateway != nil {
		return t.EvpnGateway
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast) GetIpv4() *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast) GetIpv6() *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIpMulticastEcmp retrieves the value of the leaf IpMulticastEcmp from the NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpMulticastEcmp is set, it can
// safely use t.GetIpMulticastEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpMulticastEcmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast) GetIpMulticastEcmp() bool {
	if t == nil || t.IpMulticastEcmp == nil {
		return false
	}
	return *t.IpMulticastEcmp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IpMulticastEcmp == nil {
		var v bool = false
		t.IpMulticastEcmp = &v
	}
	t.EvpnGateway.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast.
func (*NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_EvpnGateway represents the /nokia-conf/configure/service/vpls/routed-vpls/multicast/evpn-gateway YANG schema element.
type NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_EvpnGateway struct {
	AdminState          E_NokiaTypesSros_AdminState                                                             `path:"admin-state" module:"nokia-conf"`
	Advertise           E_NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_EvpnGateway_Advertise           `path:"advertise" module:"nokia-conf"`
	ApplyGroups         []string                                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	DrActivationTimer   *uint32                                                                                 `path:"dr-activation-timer" module:"nokia-conf"`
	NonDrAttractTraffic E_NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_EvpnGateway_NonDrAttractTraffic `path:"non-dr-attract-traffic" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_EvpnGateway implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_EvpnGateway) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_EvpnGateway
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_EvpnGateway) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAdvertise retrieves the value of the leaf Advertise from the NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_EvpnGateway
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertise is set, it can
// safely use t.GetAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertise == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_EvpnGateway) GetAdvertise() E_NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_EvpnGateway_Advertise {
	if t == nil || t.Advertise == 0 {
		return NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_EvpnGateway_Advertise_mvpn_pim
	}
	return t.Advertise
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_EvpnGateway
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_EvpnGateway) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_EvpnGateway
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_EvpnGateway) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDrActivationTimer retrieves the value of the leaf DrActivationTimer from the NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_EvpnGateway
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DrActivationTimer is set, it can
// safely use t.GetDrActivationTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DrActivationTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_EvpnGateway) GetDrActivationTimer() uint32 {
	if t == nil || t.DrActivationTimer == nil {
		return 3
	}
	return *t.DrActivationTimer
}

// GetNonDrAttractTraffic retrieves the value of the leaf NonDrAttractTraffic from the NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_EvpnGateway
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NonDrAttractTraffic is set, it can
// safely use t.GetNonDrAttractTraffic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NonDrAttractTraffic == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_EvpnGateway) GetNonDrAttractTraffic() E_NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_EvpnGateway_NonDrAttractTraffic {
	if t == nil || t.NonDrAttractTraffic == 0 {
		return NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_EvpnGateway_NonDrAttractTraffic_from_pim_mvpn
	}
	return t.NonDrAttractTraffic
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_EvpnGateway
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_EvpnGateway) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Advertise == 0 {
		t.Advertise = NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_EvpnGateway_Advertise_mvpn_pim
	}
	if t.DrActivationTimer == nil {
		var v uint32 = 3
		t.DrActivationTimer = &v
	}
	if t.NonDrAttractTraffic == 0 {
		t.NonDrAttractTraffic = NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_EvpnGateway_NonDrAttractTraffic_from_pim_mvpn
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_EvpnGateway) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_EvpnGateway"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_EvpnGateway) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_EvpnGateway) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_EvpnGateway.
func (*NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_EvpnGateway) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4 represents the /nokia-conf/configure/service/vpls/routed-vpls/multicast/ipv4 YANG schema element.
type NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4 struct {
	ForwardToIpInterface *bool                                                                    `path:"forward-to-ip-interface" module:"nokia-conf"`
	IgmpSnooping         *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4_IgmpSnooping `path:"igmp-snooping" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4) IsYANGGoStruct() {}

// GetOrCreateIgmpSnooping retrieves the value of the IgmpSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4) GetOrCreateIgmpSnooping() *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4_IgmpSnooping {
	if t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	t.IgmpSnooping = &NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4_IgmpSnooping{}
	return t.IgmpSnooping
}

// GetIgmpSnooping returns the value of the IgmpSnooping struct pointer
// from NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4. If the receiver or the field IgmpSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4) GetIgmpSnooping() *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4_IgmpSnooping {
	if t != nil && t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	return nil
}

// GetForwardToIpInterface retrieves the value of the leaf ForwardToIpInterface from the NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardToIpInterface is set, it can
// safely use t.GetForwardToIpInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardToIpInterface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4) GetForwardToIpInterface() bool {
	if t == nil || t.ForwardToIpInterface == nil {
		return false
	}
	return *t.ForwardToIpInterface
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ForwardToIpInterface == nil {
		var v bool = false
		t.ForwardToIpInterface = &v
	}
	t.IgmpSnooping.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4.
func (*NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4_IgmpSnooping represents the /nokia-conf/configure/service/vpls/routed-vpls/multicast/ipv4/igmp-snooping YANG schema element.
type NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4_IgmpSnooping struct {
	MrouterPort *bool `path:"mrouter-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4_IgmpSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4_IgmpSnooping) IsYANGGoStruct() {}

// GetMrouterPort retrieves the value of the leaf MrouterPort from the NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MrouterPort is set, it can
// safely use t.GetMrouterPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MrouterPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4_IgmpSnooping) GetMrouterPort() bool {
	if t == nil || t.MrouterPort == nil {
		return false
	}
	return *t.MrouterPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4_IgmpSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4_IgmpSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MrouterPort == nil {
		var v bool = false
		t.MrouterPort = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4_IgmpSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4_IgmpSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4_IgmpSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4_IgmpSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4_IgmpSnooping.
func (*NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv4_IgmpSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6 represents the /nokia-conf/configure/service/vpls/routed-vpls/multicast/ipv6 YANG schema element.
type NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6 struct {
	ForwardToIpInterface *bool                                                                   `path:"forward-to-ip-interface" module:"nokia-conf"`
	MldSnooping          *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6_MldSnooping `path:"mld-snooping" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6) IsYANGGoStruct() {}

// GetOrCreateMldSnooping retrieves the value of the MldSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6) GetOrCreateMldSnooping() *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6_MldSnooping {
	if t.MldSnooping != nil {
		return t.MldSnooping
	}
	t.MldSnooping = &NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6_MldSnooping{}
	return t.MldSnooping
}

// GetMldSnooping returns the value of the MldSnooping struct pointer
// from NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6. If the receiver or the field MldSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6) GetMldSnooping() *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6_MldSnooping {
	if t != nil && t.MldSnooping != nil {
		return t.MldSnooping
	}
	return nil
}

// GetForwardToIpInterface retrieves the value of the leaf ForwardToIpInterface from the NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardToIpInterface is set, it can
// safely use t.GetForwardToIpInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardToIpInterface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6) GetForwardToIpInterface() bool {
	if t == nil || t.ForwardToIpInterface == nil {
		return false
	}
	return *t.ForwardToIpInterface
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ForwardToIpInterface == nil {
		var v bool = false
		t.ForwardToIpInterface = &v
	}
	t.MldSnooping.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6.
func (*NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6_MldSnooping represents the /nokia-conf/configure/service/vpls/routed-vpls/multicast/ipv6/mld-snooping YANG schema element.
type NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6_MldSnooping struct {
	MrouterPort *bool `path:"mrouter-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6_MldSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6_MldSnooping) IsYANGGoStruct() {}

// GetMrouterPort retrieves the value of the leaf MrouterPort from the NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MrouterPort is set, it can
// safely use t.GetMrouterPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MrouterPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6_MldSnooping) GetMrouterPort() bool {
	if t == nil || t.MrouterPort == nil {
		return false
	}
	return *t.MrouterPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6_MldSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6_MldSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MrouterPort == nil {
		var v bool = false
		t.MrouterPort = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6_MldSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6_MldSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6_MldSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6_MldSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6_MldSnooping.
func (*NokiaConf_Configure_Service_Vpls_RoutedVpls_Multicast_Ipv6_MldSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap represents the /nokia-conf/configure/service/vpls/sap YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap struct {
	AccountingPolicy           *uint32                                                `path:"accounting-policy" module:"nokia-conf"`
	AdminState                 E_NokiaTypesSros_AdminState                            `path:"admin-state" module:"nokia-conf"`
	AntiSpoof                  E_NokiaTypesServices_AntiSpoofOption                   `path:"anti-spoof" module:"nokia-conf"`
	AppProfile                 *string                                                `path:"app-profile" module:"nokia-conf"`
	ApplyGroups                []string                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude         []string                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	ArpHost                    *NokiaConf_Configure_Service_Vpls_Sap_ArpHost          `path:"arp-host" module:"nokia-conf"`
	ArpReplyAgent              E_NokiaTypesServices_ArpReplyAgent                     `path:"arp-reply-agent" module:"nokia-conf"`
	Bandwidth                  *uint64                                                `path:"bandwidth" module:"nokia-conf"`
	BgpVplsMhVeid              *int32                                                 `path:"bgp-vpls-mh-veid" module:"nokia-conf"`
	BpduTranslation            E_NokiaTypesServices_BpduTranslation                   `path:"bpdu-translation" module:"nokia-conf"`
	CallingStationId           *string                                                `path:"calling-station-id" module:"nokia-conf"`
	Cflowd                     *bool                                                  `path:"cflowd" module:"nokia-conf"`
	CollectStats               *bool                                                  `path:"collect-stats" module:"nokia-conf"`
	CpuProtection              *NokiaConf_Configure_Service_Vpls_Sap_CpuProtection    `path:"cpu-protection" module:"nokia-conf"`
	Description                *string                                                `path:"description" module:"nokia-conf"`
	Dhcp                       *NokiaConf_Configure_Service_Vpls_Sap_Dhcp             `path:"dhcp" module:"nokia-conf"`
	DistCpuProtection          *string                                                `path:"dist-cpu-protection" module:"nokia-conf"`
	Egress                     *NokiaConf_Configure_Service_Vpls_Sap_Egress           `path:"egress" module:"nokia-conf"`
	EthCfm                     *NokiaConf_Configure_Service_Vpls_Sap_EthCfm           `path:"eth-cfm" module:"nokia-conf"`
	EthRing                    *uint32                                                `path:"eth-ring" module:"nokia-conf"`
	EtreeLeaf                  *bool                                                  `path:"etree-leaf" module:"nokia-conf"`
	EtreeRootLeafTag           *NokiaConf_Configure_Service_Vpls_Sap_EtreeRootLeafTag `path:"etree-root-leaf-tag" module:"nokia-conf" yangPresence:"true"`
	Fdb                        *NokiaConf_Configure_Service_Vpls_Sap_Fdb              `path:"fdb" module:"nokia-conf"`
	HostAdminState             E_NokiaTypesSros_AdminState                            `path:"host-admin-state" module:"nokia-conf"`
	HostLockoutPolicy          *string                                                `path:"host-lockout-policy" module:"nokia-conf"`
	IVplsMacFlush              *NokiaConf_Configure_Service_Vpls_Sap_IVplsMacFlush    `path:"i-vpls-mac-flush" module:"nokia-conf"`
	IgmpHostTracking           *NokiaConf_Configure_Service_Vpls_Sap_IgmpHostTracking `path:"igmp-host-tracking" module:"nokia-conf"`
	IgmpSnooping               *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping     `path:"igmp-snooping" module:"nokia-conf"`
	Ingress                    *NokiaConf_Configure_Service_Vpls_Sap_Ingress          `path:"ingress" module:"nokia-conf"`
	L2Pt                       *NokiaConf_Configure_Service_Vpls_Sap_L2Pt             `path:"l2pt" module:"nokia-conf"`
	L2Tpv3Session              *NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session    `path:"l2tpv3-session" module:"nokia-conf" yangPresence:"true"`
	Lag                        *NokiaConf_Configure_Service_Vpls_Sap_Lag              `path:"lag" module:"nokia-conf"`
	ManagedVlanList            *NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList  `path:"managed-vlan-list" module:"nokia-conf"`
	McRing                     *NokiaConf_Configure_Service_Vpls_Sap_McRing           `path:"mc-ring" module:"nokia-conf" yangPresence:"true"`
	MldSnooping                *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping      `path:"mld-snooping" module:"nokia-conf"`
	MonitorOperGroup           *string                                                `path:"monitor-oper-group" module:"nokia-conf"`
	Mrp                        *NokiaConf_Configure_Service_Vpls_Sap_Mrp              `path:"mrp" module:"nokia-conf"`
	MultiServiceSite           *string                                                `path:"multi-service-site" module:"nokia-conf"`
	MulticastSource            *bool                                                  `path:"multicast-source" module:"nokia-conf"`
	OperGroup                  *string                                                `path:"oper-group" module:"nokia-conf"`
	Pbb                        *NokiaConf_Configure_Service_Vpls_Sap_Pbb              `path:"pbb" module:"nokia-conf"`
	PimSnooping                *NokiaConf_Configure_Service_Vpls_Sap_PimSnooping      `path:"pim-snooping" module:"nokia-conf"`
	ProcessCpmTrafficOnSapDown *bool                                                  `path:"process-cpm-traffic-on-sap-down" module:"nokia-conf"`
	RadiusAuthPolicy           *string                                                `path:"radius-auth-policy" module:"nokia-conf"`
	SapId                      *string                                                `path:"sap-id" module:"nokia-conf"`
	ShcvPolicyIpv4             *string                                                `path:"shcv-policy-ipv4" module:"nokia-conf"`
	Spb                        *NokiaConf_Configure_Service_Vpls_Sap_Spb              `path:"spb" module:"nokia-conf" yangPresence:"true"`
	SplitHorizonGroup          *string                                                `path:"split-horizon-group" module:"nokia-conf"`
	StaticHost                 *NokiaConf_Configure_Service_Vpls_Sap_StaticHost       `path:"static-host" module:"nokia-conf"`
	StaticIsid                 *NokiaConf_Configure_Service_Vpls_Sap_StaticIsid       `path:"static-isid" module:"nokia-conf"`
	Stp                        *NokiaConf_Configure_Service_Vpls_Sap_Stp              `path:"stp" module:"nokia-conf"`
	SubSlaMgmt                 *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt       `path:"sub-sla-mgmt" module:"nokia-conf"`
	TransitPolicy              *NokiaConf_Configure_Service_Vpls_Sap_TransitPolicy    `path:"transit-policy" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap) IsYANGGoStruct() {}

// GetOrCreateArpHost retrieves the value of the ArpHost field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetOrCreateArpHost() *NokiaConf_Configure_Service_Vpls_Sap_ArpHost {
	if t.ArpHost != nil {
		return t.ArpHost
	}
	t.ArpHost = &NokiaConf_Configure_Service_Vpls_Sap_ArpHost{}
	return t.ArpHost
}

// GetOrCreateCpuProtection retrieves the value of the CpuProtection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetOrCreateCpuProtection() *NokiaConf_Configure_Service_Vpls_Sap_CpuProtection {
	if t.CpuProtection != nil {
		return t.CpuProtection
	}
	t.CpuProtection = &NokiaConf_Configure_Service_Vpls_Sap_CpuProtection{}
	return t.CpuProtection
}

// GetOrCreateDhcp retrieves the value of the Dhcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetOrCreateDhcp() *NokiaConf_Configure_Service_Vpls_Sap_Dhcp {
	if t.Dhcp != nil {
		return t.Dhcp
	}
	t.Dhcp = &NokiaConf_Configure_Service_Vpls_Sap_Dhcp{}
	return t.Dhcp
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetOrCreateEgress() *NokiaConf_Configure_Service_Vpls_Sap_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Service_Vpls_Sap_Egress{}
	return t.Egress
}

// GetOrCreateEthCfm retrieves the value of the EthCfm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetOrCreateEthCfm() *NokiaConf_Configure_Service_Vpls_Sap_EthCfm {
	if t.EthCfm != nil {
		return t.EthCfm
	}
	t.EthCfm = &NokiaConf_Configure_Service_Vpls_Sap_EthCfm{}
	return t.EthCfm
}

// GetOrCreateEtreeRootLeafTag retrieves the value of the EtreeRootLeafTag field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetOrCreateEtreeRootLeafTag() *NokiaConf_Configure_Service_Vpls_Sap_EtreeRootLeafTag {
	if t.EtreeRootLeafTag != nil {
		return t.EtreeRootLeafTag
	}
	t.EtreeRootLeafTag = &NokiaConf_Configure_Service_Vpls_Sap_EtreeRootLeafTag{}
	return t.EtreeRootLeafTag
}

// GetOrCreateFdb retrieves the value of the Fdb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetOrCreateFdb() *NokiaConf_Configure_Service_Vpls_Sap_Fdb {
	if t.Fdb != nil {
		return t.Fdb
	}
	t.Fdb = &NokiaConf_Configure_Service_Vpls_Sap_Fdb{}
	return t.Fdb
}

// GetOrCreateIVplsMacFlush retrieves the value of the IVplsMacFlush field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetOrCreateIVplsMacFlush() *NokiaConf_Configure_Service_Vpls_Sap_IVplsMacFlush {
	if t.IVplsMacFlush != nil {
		return t.IVplsMacFlush
	}
	t.IVplsMacFlush = &NokiaConf_Configure_Service_Vpls_Sap_IVplsMacFlush{}
	return t.IVplsMacFlush
}

// GetOrCreateIgmpHostTracking retrieves the value of the IgmpHostTracking field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetOrCreateIgmpHostTracking() *NokiaConf_Configure_Service_Vpls_Sap_IgmpHostTracking {
	if t.IgmpHostTracking != nil {
		return t.IgmpHostTracking
	}
	t.IgmpHostTracking = &NokiaConf_Configure_Service_Vpls_Sap_IgmpHostTracking{}
	return t.IgmpHostTracking
}

// GetOrCreateIgmpSnooping retrieves the value of the IgmpSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetOrCreateIgmpSnooping() *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping {
	if t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	t.IgmpSnooping = &NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping{}
	return t.IgmpSnooping
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetOrCreateIngress() *NokiaConf_Configure_Service_Vpls_Sap_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Service_Vpls_Sap_Ingress{}
	return t.Ingress
}

// GetOrCreateL2Pt retrieves the value of the L2Pt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetOrCreateL2Pt() *NokiaConf_Configure_Service_Vpls_Sap_L2Pt {
	if t.L2Pt != nil {
		return t.L2Pt
	}
	t.L2Pt = &NokiaConf_Configure_Service_Vpls_Sap_L2Pt{}
	return t.L2Pt
}

// GetOrCreateL2Tpv3Session retrieves the value of the L2Tpv3Session field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetOrCreateL2Tpv3Session() *NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session {
	if t.L2Tpv3Session != nil {
		return t.L2Tpv3Session
	}
	t.L2Tpv3Session = &NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session{}
	return t.L2Tpv3Session
}

// GetOrCreateLag retrieves the value of the Lag field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetOrCreateLag() *NokiaConf_Configure_Service_Vpls_Sap_Lag {
	if t.Lag != nil {
		return t.Lag
	}
	t.Lag = &NokiaConf_Configure_Service_Vpls_Sap_Lag{}
	return t.Lag
}

// GetOrCreateManagedVlanList retrieves the value of the ManagedVlanList field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetOrCreateManagedVlanList() *NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList {
	if t.ManagedVlanList != nil {
		return t.ManagedVlanList
	}
	t.ManagedVlanList = &NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList{}
	return t.ManagedVlanList
}

// GetOrCreateMcRing retrieves the value of the McRing field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetOrCreateMcRing() *NokiaConf_Configure_Service_Vpls_Sap_McRing {
	if t.McRing != nil {
		return t.McRing
	}
	t.McRing = &NokiaConf_Configure_Service_Vpls_Sap_McRing{}
	return t.McRing
}

// GetOrCreateMldSnooping retrieves the value of the MldSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetOrCreateMldSnooping() *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping {
	if t.MldSnooping != nil {
		return t.MldSnooping
	}
	t.MldSnooping = &NokiaConf_Configure_Service_Vpls_Sap_MldSnooping{}
	return t.MldSnooping
}

// GetOrCreateMrp retrieves the value of the Mrp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetOrCreateMrp() *NokiaConf_Configure_Service_Vpls_Sap_Mrp {
	if t.Mrp != nil {
		return t.Mrp
	}
	t.Mrp = &NokiaConf_Configure_Service_Vpls_Sap_Mrp{}
	return t.Mrp
}

// GetOrCreatePbb retrieves the value of the Pbb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetOrCreatePbb() *NokiaConf_Configure_Service_Vpls_Sap_Pbb {
	if t.Pbb != nil {
		return t.Pbb
	}
	t.Pbb = &NokiaConf_Configure_Service_Vpls_Sap_Pbb{}
	return t.Pbb
}

// GetOrCreatePimSnooping retrieves the value of the PimSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetOrCreatePimSnooping() *NokiaConf_Configure_Service_Vpls_Sap_PimSnooping {
	if t.PimSnooping != nil {
		return t.PimSnooping
	}
	t.PimSnooping = &NokiaConf_Configure_Service_Vpls_Sap_PimSnooping{}
	return t.PimSnooping
}

// GetOrCreateSpb retrieves the value of the Spb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetOrCreateSpb() *NokiaConf_Configure_Service_Vpls_Sap_Spb {
	if t.Spb != nil {
		return t.Spb
	}
	t.Spb = &NokiaConf_Configure_Service_Vpls_Sap_Spb{}
	return t.Spb
}

// GetOrCreateStaticHost retrieves the value of the StaticHost field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetOrCreateStaticHost() *NokiaConf_Configure_Service_Vpls_Sap_StaticHost {
	if t.StaticHost != nil {
		return t.StaticHost
	}
	t.StaticHost = &NokiaConf_Configure_Service_Vpls_Sap_StaticHost{}
	return t.StaticHost
}

// GetOrCreateStaticIsid retrieves the value of the StaticIsid field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetOrCreateStaticIsid() *NokiaConf_Configure_Service_Vpls_Sap_StaticIsid {
	if t.StaticIsid != nil {
		return t.StaticIsid
	}
	t.StaticIsid = &NokiaConf_Configure_Service_Vpls_Sap_StaticIsid{}
	return t.StaticIsid
}

// GetOrCreateStp retrieves the value of the Stp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetOrCreateStp() *NokiaConf_Configure_Service_Vpls_Sap_Stp {
	if t.Stp != nil {
		return t.Stp
	}
	t.Stp = &NokiaConf_Configure_Service_Vpls_Sap_Stp{}
	return t.Stp
}

// GetOrCreateSubSlaMgmt retrieves the value of the SubSlaMgmt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetOrCreateSubSlaMgmt() *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt {
	if t.SubSlaMgmt != nil {
		return t.SubSlaMgmt
	}
	t.SubSlaMgmt = &NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt{}
	return t.SubSlaMgmt
}

// GetOrCreateTransitPolicy retrieves the value of the TransitPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetOrCreateTransitPolicy() *NokiaConf_Configure_Service_Vpls_Sap_TransitPolicy {
	if t.TransitPolicy != nil {
		return t.TransitPolicy
	}
	t.TransitPolicy = &NokiaConf_Configure_Service_Vpls_Sap_TransitPolicy{}
	return t.TransitPolicy
}

// GetArpHost returns the value of the ArpHost struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap. If the receiver or the field ArpHost is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetArpHost() *NokiaConf_Configure_Service_Vpls_Sap_ArpHost {
	if t != nil && t.ArpHost != nil {
		return t.ArpHost
	}
	return nil
}

// GetCpuProtection returns the value of the CpuProtection struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap. If the receiver or the field CpuProtection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetCpuProtection() *NokiaConf_Configure_Service_Vpls_Sap_CpuProtection {
	if t != nil && t.CpuProtection != nil {
		return t.CpuProtection
	}
	return nil
}

// GetDhcp returns the value of the Dhcp struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap. If the receiver or the field Dhcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetDhcp() *NokiaConf_Configure_Service_Vpls_Sap_Dhcp {
	if t != nil && t.Dhcp != nil {
		return t.Dhcp
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetEgress() *NokiaConf_Configure_Service_Vpls_Sap_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetEthCfm returns the value of the EthCfm struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap. If the receiver or the field EthCfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetEthCfm() *NokiaConf_Configure_Service_Vpls_Sap_EthCfm {
	if t != nil && t.EthCfm != nil {
		return t.EthCfm
	}
	return nil
}

// GetEtreeRootLeafTag returns the value of the EtreeRootLeafTag struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap. If the receiver or the field EtreeRootLeafTag is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetEtreeRootLeafTag() *NokiaConf_Configure_Service_Vpls_Sap_EtreeRootLeafTag {
	if t != nil && t.EtreeRootLeafTag != nil {
		return t.EtreeRootLeafTag
	}
	return nil
}

// GetFdb returns the value of the Fdb struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap. If the receiver or the field Fdb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetFdb() *NokiaConf_Configure_Service_Vpls_Sap_Fdb {
	if t != nil && t.Fdb != nil {
		return t.Fdb
	}
	return nil
}

// GetIVplsMacFlush returns the value of the IVplsMacFlush struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap. If the receiver or the field IVplsMacFlush is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetIVplsMacFlush() *NokiaConf_Configure_Service_Vpls_Sap_IVplsMacFlush {
	if t != nil && t.IVplsMacFlush != nil {
		return t.IVplsMacFlush
	}
	return nil
}

// GetIgmpHostTracking returns the value of the IgmpHostTracking struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap. If the receiver or the field IgmpHostTracking is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetIgmpHostTracking() *NokiaConf_Configure_Service_Vpls_Sap_IgmpHostTracking {
	if t != nil && t.IgmpHostTracking != nil {
		return t.IgmpHostTracking
	}
	return nil
}

// GetIgmpSnooping returns the value of the IgmpSnooping struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap. If the receiver or the field IgmpSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetIgmpSnooping() *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping {
	if t != nil && t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetIngress() *NokiaConf_Configure_Service_Vpls_Sap_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetL2Pt returns the value of the L2Pt struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap. If the receiver or the field L2Pt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetL2Pt() *NokiaConf_Configure_Service_Vpls_Sap_L2Pt {
	if t != nil && t.L2Pt != nil {
		return t.L2Pt
	}
	return nil
}

// GetL2Tpv3Session returns the value of the L2Tpv3Session struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap. If the receiver or the field L2Tpv3Session is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetL2Tpv3Session() *NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session {
	if t != nil && t.L2Tpv3Session != nil {
		return t.L2Tpv3Session
	}
	return nil
}

// GetLag returns the value of the Lag struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap. If the receiver or the field Lag is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetLag() *NokiaConf_Configure_Service_Vpls_Sap_Lag {
	if t != nil && t.Lag != nil {
		return t.Lag
	}
	return nil
}

// GetManagedVlanList returns the value of the ManagedVlanList struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap. If the receiver or the field ManagedVlanList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetManagedVlanList() *NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList {
	if t != nil && t.ManagedVlanList != nil {
		return t.ManagedVlanList
	}
	return nil
}

// GetMcRing returns the value of the McRing struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap. If the receiver or the field McRing is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetMcRing() *NokiaConf_Configure_Service_Vpls_Sap_McRing {
	if t != nil && t.McRing != nil {
		return t.McRing
	}
	return nil
}

// GetMldSnooping returns the value of the MldSnooping struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap. If the receiver or the field MldSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetMldSnooping() *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping {
	if t != nil && t.MldSnooping != nil {
		return t.MldSnooping
	}
	return nil
}

// GetMrp returns the value of the Mrp struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap. If the receiver or the field Mrp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetMrp() *NokiaConf_Configure_Service_Vpls_Sap_Mrp {
	if t != nil && t.Mrp != nil {
		return t.Mrp
	}
	return nil
}

// GetPbb returns the value of the Pbb struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap. If the receiver or the field Pbb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetPbb() *NokiaConf_Configure_Service_Vpls_Sap_Pbb {
	if t != nil && t.Pbb != nil {
		return t.Pbb
	}
	return nil
}

// GetPimSnooping returns the value of the PimSnooping struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap. If the receiver or the field PimSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetPimSnooping() *NokiaConf_Configure_Service_Vpls_Sap_PimSnooping {
	if t != nil && t.PimSnooping != nil {
		return t.PimSnooping
	}
	return nil
}

// GetSpb returns the value of the Spb struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap. If the receiver or the field Spb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetSpb() *NokiaConf_Configure_Service_Vpls_Sap_Spb {
	if t != nil && t.Spb != nil {
		return t.Spb
	}
	return nil
}

// GetStaticHost returns the value of the StaticHost struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap. If the receiver or the field StaticHost is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetStaticHost() *NokiaConf_Configure_Service_Vpls_Sap_StaticHost {
	if t != nil && t.StaticHost != nil {
		return t.StaticHost
	}
	return nil
}

// GetStaticIsid returns the value of the StaticIsid struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap. If the receiver or the field StaticIsid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetStaticIsid() *NokiaConf_Configure_Service_Vpls_Sap_StaticIsid {
	if t != nil && t.StaticIsid != nil {
		return t.StaticIsid
	}
	return nil
}

// GetStp returns the value of the Stp struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap. If the receiver or the field Stp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetStp() *NokiaConf_Configure_Service_Vpls_Sap_Stp {
	if t != nil && t.Stp != nil {
		return t.Stp
	}
	return nil
}

// GetSubSlaMgmt returns the value of the SubSlaMgmt struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap. If the receiver or the field SubSlaMgmt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetSubSlaMgmt() *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt {
	if t != nil && t.SubSlaMgmt != nil {
		return t.SubSlaMgmt
	}
	return nil
}

// GetTransitPolicy returns the value of the TransitPolicy struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap. If the receiver or the field TransitPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetTransitPolicy() *NokiaConf_Configure_Service_Vpls_Sap_TransitPolicy {
	if t != nil && t.TransitPolicy != nil {
		return t.TransitPolicy
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Service_Vpls_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAntiSpoof retrieves the value of the leaf AntiSpoof from the NokiaConf_Configure_Service_Vpls_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AntiSpoof is set, it can
// safely use t.GetAntiSpoof() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AntiSpoof == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetAntiSpoof() E_NokiaTypesServices_AntiSpoofOption {
	if t == nil || t.AntiSpoof == 0 {
		return 0
	}
	return t.AntiSpoof
}

// GetAppProfile retrieves the value of the leaf AppProfile from the NokiaConf_Configure_Service_Vpls_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfile is set, it can
// safely use t.GetAppProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetAppProfile() string {
	if t == nil || t.AppProfile == nil {
		return ""
	}
	return *t.AppProfile
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetArpReplyAgent retrieves the value of the leaf ArpReplyAgent from the NokiaConf_Configure_Service_Vpls_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ArpReplyAgent is set, it can
// safely use t.GetArpReplyAgent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ArpReplyAgent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetArpReplyAgent() E_NokiaTypesServices_ArpReplyAgent {
	if t == nil || t.ArpReplyAgent == 0 {
		return 0
	}
	return t.ArpReplyAgent
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Service_Vpls_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetBandwidth() uint64 {
	if t == nil || t.Bandwidth == nil {
		return 0
	}
	return *t.Bandwidth
}

// GetBgpVplsMhVeid retrieves the value of the leaf BgpVplsMhVeid from the NokiaConf_Configure_Service_Vpls_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpVplsMhVeid is set, it can
// safely use t.GetBgpVplsMhVeid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpVplsMhVeid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetBgpVplsMhVeid() int32 {
	if t == nil || t.BgpVplsMhVeid == nil {
		return 0
	}
	return *t.BgpVplsMhVeid
}

// GetBpduTranslation retrieves the value of the leaf BpduTranslation from the NokiaConf_Configure_Service_Vpls_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BpduTranslation is set, it can
// safely use t.GetBpduTranslation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BpduTranslation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetBpduTranslation() E_NokiaTypesServices_BpduTranslation {
	if t == nil || t.BpduTranslation == 0 {
		return 0
	}
	return t.BpduTranslation
}

// GetCallingStationId retrieves the value of the leaf CallingStationId from the NokiaConf_Configure_Service_Vpls_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CallingStationId is set, it can
// safely use t.GetCallingStationId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CallingStationId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetCallingStationId() string {
	if t == nil || t.CallingStationId == nil {
		return ""
	}
	return *t.CallingStationId
}

// GetCflowd retrieves the value of the leaf Cflowd from the NokiaConf_Configure_Service_Vpls_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cflowd is set, it can
// safely use t.GetCflowd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cflowd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetCflowd() bool {
	if t == nil || t.Cflowd == nil {
		return false
	}
	return *t.Cflowd
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Service_Vpls_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vpls_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDistCpuProtection retrieves the value of the leaf DistCpuProtection from the NokiaConf_Configure_Service_Vpls_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DistCpuProtection is set, it can
// safely use t.GetDistCpuProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DistCpuProtection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetDistCpuProtection() string {
	if t == nil || t.DistCpuProtection == nil {
		return ""
	}
	return *t.DistCpuProtection
}

// GetEthRing retrieves the value of the leaf EthRing from the NokiaConf_Configure_Service_Vpls_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EthRing is set, it can
// safely use t.GetEthRing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EthRing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetEthRing() uint32 {
	if t == nil || t.EthRing == nil {
		return 0
	}
	return *t.EthRing
}

// GetEtreeLeaf retrieves the value of the leaf EtreeLeaf from the NokiaConf_Configure_Service_Vpls_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EtreeLeaf is set, it can
// safely use t.GetEtreeLeaf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EtreeLeaf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetEtreeLeaf() bool {
	if t == nil || t.EtreeLeaf == nil {
		return false
	}
	return *t.EtreeLeaf
}

// GetHostAdminState retrieves the value of the leaf HostAdminState from the NokiaConf_Configure_Service_Vpls_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostAdminState is set, it can
// safely use t.GetHostAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostAdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetHostAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.HostAdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.HostAdminState
}

// GetHostLockoutPolicy retrieves the value of the leaf HostLockoutPolicy from the NokiaConf_Configure_Service_Vpls_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostLockoutPolicy is set, it can
// safely use t.GetHostLockoutPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostLockoutPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetHostLockoutPolicy() string {
	if t == nil || t.HostLockoutPolicy == nil {
		return ""
	}
	return *t.HostLockoutPolicy
}

// GetMonitorOperGroup retrieves the value of the leaf MonitorOperGroup from the NokiaConf_Configure_Service_Vpls_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorOperGroup is set, it can
// safely use t.GetMonitorOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorOperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetMonitorOperGroup() string {
	if t == nil || t.MonitorOperGroup == nil {
		return ""
	}
	return *t.MonitorOperGroup
}

// GetMultiServiceSite retrieves the value of the leaf MultiServiceSite from the NokiaConf_Configure_Service_Vpls_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultiServiceSite is set, it can
// safely use t.GetMultiServiceSite() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultiServiceSite == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetMultiServiceSite() string {
	if t == nil || t.MultiServiceSite == nil {
		return ""
	}
	return *t.MultiServiceSite
}

// GetMulticastSource retrieves the value of the leaf MulticastSource from the NokiaConf_Configure_Service_Vpls_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastSource is set, it can
// safely use t.GetMulticastSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastSource == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetMulticastSource() bool {
	if t == nil || t.MulticastSource == nil {
		return false
	}
	return *t.MulticastSource
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Service_Vpls_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// GetProcessCpmTrafficOnSapDown retrieves the value of the leaf ProcessCpmTrafficOnSapDown from the NokiaConf_Configure_Service_Vpls_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProcessCpmTrafficOnSapDown is set, it can
// safely use t.GetProcessCpmTrafficOnSapDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProcessCpmTrafficOnSapDown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetProcessCpmTrafficOnSapDown() bool {
	if t == nil || t.ProcessCpmTrafficOnSapDown == nil {
		return false
	}
	return *t.ProcessCpmTrafficOnSapDown
}

// GetRadiusAuthPolicy retrieves the value of the leaf RadiusAuthPolicy from the NokiaConf_Configure_Service_Vpls_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusAuthPolicy is set, it can
// safely use t.GetRadiusAuthPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusAuthPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetRadiusAuthPolicy() string {
	if t == nil || t.RadiusAuthPolicy == nil {
		return ""
	}
	return *t.RadiusAuthPolicy
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Service_Vpls_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// GetShcvPolicyIpv4 retrieves the value of the leaf ShcvPolicyIpv4 from the NokiaConf_Configure_Service_Vpls_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ShcvPolicyIpv4 is set, it can
// safely use t.GetShcvPolicyIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ShcvPolicyIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetShcvPolicyIpv4() string {
	if t == nil || t.ShcvPolicyIpv4 == nil {
		return ""
	}
	return *t.ShcvPolicyIpv4
}

// GetSplitHorizonGroup retrieves the value of the leaf SplitHorizonGroup from the NokiaConf_Configure_Service_Vpls_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SplitHorizonGroup is set, it can
// safely use t.GetSplitHorizonGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SplitHorizonGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap) GetSplitHorizonGroup() string {
	if t == nil || t.SplitHorizonGroup == nil {
		return ""
	}
	return *t.SplitHorizonGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Cflowd == nil {
		var v bool = false
		t.Cflowd = &v
	}
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.EtreeLeaf == nil {
		var v bool = false
		t.EtreeLeaf = &v
	}
	if t.HostAdminState == 0 {
		t.HostAdminState = NokiaTypesSros_AdminState_enable
	}
	if t.MulticastSource == nil {
		var v bool = false
		t.MulticastSource = &v
	}
	if t.ProcessCpmTrafficOnSapDown == nil {
		var v bool = false
		t.ProcessCpmTrafficOnSapDown = &v
	}
	t.ArpHost.PopulateDefaults()
	t.CpuProtection.PopulateDefaults()
	t.Dhcp.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.EthCfm.PopulateDefaults()
	t.EtreeRootLeafTag.PopulateDefaults()
	t.Fdb.PopulateDefaults()
	t.IVplsMacFlush.PopulateDefaults()
	t.IgmpHostTracking.PopulateDefaults()
	t.IgmpSnooping.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.L2Pt.PopulateDefaults()
	t.L2Tpv3Session.PopulateDefaults()
	t.Lag.PopulateDefaults()
	t.ManagedVlanList.PopulateDefaults()
	t.McRing.PopulateDefaults()
	t.MldSnooping.PopulateDefaults()
	t.Mrp.PopulateDefaults()
	t.Pbb.PopulateDefaults()
	t.PimSnooping.PopulateDefaults()
	t.Spb.PopulateDefaults()
	t.StaticHost.PopulateDefaults()
	t.StaticIsid.PopulateDefaults()
	t.Stp.PopulateDefaults()
	t.SubSlaMgmt.PopulateDefaults()
	t.TransitPolicy.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Sap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Sap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SapId == nil {
		return nil, fmt.Errorf("nil value for key SapId")
	}

	return map[string]interface{}{
		"sap-id": *t.SapId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap.
func (*NokiaConf_Configure_Service_Vpls_Sap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_ArpHost represents the /nokia-conf/configure/service/vpls/sap/arp-host YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_ArpHost struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	HostLimit          *uint32                     `path:"host-limit" module:"nokia-conf"`
	MinAuthInterval    *uint32                     `path:"min-auth-interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_ArpHost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_ArpHost) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_Sap_ArpHost
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_ArpHost) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Sap_ArpHost
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_ArpHost) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Sap_ArpHost
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_ArpHost) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetHostLimit retrieves the value of the leaf HostLimit from the NokiaConf_Configure_Service_Vpls_Sap_ArpHost
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostLimit is set, it can
// safely use t.GetHostLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_ArpHost) GetHostLimit() uint32 {
	if t == nil || t.HostLimit == nil {
		return 0
	}
	return *t.HostLimit
}

// GetMinAuthInterval retrieves the value of the leaf MinAuthInterval from the NokiaConf_Configure_Service_Vpls_Sap_ArpHost
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinAuthInterval is set, it can
// safely use t.GetMinAuthInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinAuthInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_ArpHost) GetMinAuthInterval() uint32 {
	if t == nil || t.MinAuthInterval == nil {
		return 15
	}
	return *t.MinAuthInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_ArpHost
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_ArpHost) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MinAuthInterval == nil {
		var v uint32 = 15
		t.MinAuthInterval = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_ArpHost) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_ArpHost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_ArpHost) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_ArpHost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_ArpHost.
func (*NokiaConf_Configure_Service_Vpls_Sap_ArpHost) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_CpuProtection represents the /nokia-conf/configure/service/vpls/sap/cpu-protection YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_CpuProtection struct {
	EthCfmMonitoring *NokiaConf_Configure_Service_Vpls_Sap_CpuProtection_EthCfmMonitoring `path:"eth-cfm-monitoring" module:"nokia-conf" yangPresence:"true"`
	MacMonitoring    YANGEmpty                                                            `path:"mac-monitoring" module:"nokia-conf"`
	PolicyId         *uint32                                                              `path:"policy-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_CpuProtection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_CpuProtection) IsYANGGoStruct() {}

// GetOrCreateEthCfmMonitoring retrieves the value of the EthCfmMonitoring field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_CpuProtection) GetOrCreateEthCfmMonitoring() *NokiaConf_Configure_Service_Vpls_Sap_CpuProtection_EthCfmMonitoring {
	if t.EthCfmMonitoring != nil {
		return t.EthCfmMonitoring
	}
	t.EthCfmMonitoring = &NokiaConf_Configure_Service_Vpls_Sap_CpuProtection_EthCfmMonitoring{}
	return t.EthCfmMonitoring
}

// GetEthCfmMonitoring returns the value of the EthCfmMonitoring struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_CpuProtection. If the receiver or the field EthCfmMonitoring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_CpuProtection) GetEthCfmMonitoring() *NokiaConf_Configure_Service_Vpls_Sap_CpuProtection_EthCfmMonitoring {
	if t != nil && t.EthCfmMonitoring != nil {
		return t.EthCfmMonitoring
	}
	return nil
}

// GetMacMonitoring retrieves the value of the leaf MacMonitoring from the NokiaConf_Configure_Service_Vpls_Sap_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacMonitoring is set, it can
// safely use t.GetMacMonitoring() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacMonitoring == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_CpuProtection) GetMacMonitoring() YANGEmpty {
	if t == nil || t.MacMonitoring == false {
		return false
	}
	return t.MacMonitoring
}

// GetPolicyId retrieves the value of the leaf PolicyId from the NokiaConf_Configure_Service_Vpls_Sap_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyId is set, it can
// safely use t.GetPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_CpuProtection) GetPolicyId() uint32 {
	if t == nil || t.PolicyId == nil {
		return 0
	}
	return *t.PolicyId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_CpuProtection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_CpuProtection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthCfmMonitoring.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_CpuProtection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_CpuProtection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_CpuProtection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_CpuProtection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_CpuProtection.
func (*NokiaConf_Configure_Service_Vpls_Sap_CpuProtection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_CpuProtection_EthCfmMonitoring represents the /nokia-conf/configure/service/vpls/sap/cpu-protection/eth-cfm-monitoring YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_CpuProtection_EthCfmMonitoring struct {
	Aggregate YANGEmpty `path:"aggregate" module:"nokia-conf"`
	Car       YANGEmpty `path:"car" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_CpuProtection_EthCfmMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_CpuProtection_EthCfmMonitoring) IsYANGGoStruct() {}

// GetAggregate retrieves the value of the leaf Aggregate from the NokiaConf_Configure_Service_Vpls_Sap_CpuProtection_EthCfmMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aggregate is set, it can
// safely use t.GetAggregate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aggregate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_CpuProtection_EthCfmMonitoring) GetAggregate() YANGEmpty {
	if t == nil || t.Aggregate == false {
		return false
	}
	return t.Aggregate
}

// GetCar retrieves the value of the leaf Car from the NokiaConf_Configure_Service_Vpls_Sap_CpuProtection_EthCfmMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Car is set, it can
// safely use t.GetCar() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Car == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_CpuProtection_EthCfmMonitoring) GetCar() YANGEmpty {
	if t == nil || t.Car == false {
		return false
	}
	return t.Car
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_CpuProtection_EthCfmMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_CpuProtection_EthCfmMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_CpuProtection_EthCfmMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_CpuProtection_EthCfmMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_CpuProtection_EthCfmMonitoring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_CpuProtection_EthCfmMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_CpuProtection_EthCfmMonitoring.
func (*NokiaConf_Configure_Service_Vpls_Sap_CpuProtection_EthCfmMonitoring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Dhcp represents the /nokia-conf/configure/service/vpls/sap/dhcp YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Dhcp struct {
	AdminState         E_NokiaTypesSros_AdminState                              `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                  `path:"description" module:"nokia-conf"`
	LeasePopulate      *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_LeasePopulate `path:"lease-populate" module:"nokia-conf"`
	Option_82          *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82     `path:"option-82" module:"nokia-conf"`
	ProxyServer        *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer   `path:"proxy-server" module:"nokia-conf"`
	Snoop              *bool                                                    `path:"snoop" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Dhcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Dhcp) IsYANGGoStruct() {}

// GetOrCreateLeasePopulate retrieves the value of the LeasePopulate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp) GetOrCreateLeasePopulate() *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_LeasePopulate {
	if t.LeasePopulate != nil {
		return t.LeasePopulate
	}
	t.LeasePopulate = &NokiaConf_Configure_Service_Vpls_Sap_Dhcp_LeasePopulate{}
	return t.LeasePopulate
}

// GetOrCreateOption_82 retrieves the value of the Option_82 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp) GetOrCreateOption_82() *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82 {
	if t.Option_82 != nil {
		return t.Option_82
	}
	t.Option_82 = &NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82{}
	return t.Option_82
}

// GetOrCreateProxyServer retrieves the value of the ProxyServer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp) GetOrCreateProxyServer() *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer {
	if t.ProxyServer != nil {
		return t.ProxyServer
	}
	t.ProxyServer = &NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer{}
	return t.ProxyServer
}

// GetLeasePopulate returns the value of the LeasePopulate struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Dhcp. If the receiver or the field LeasePopulate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp) GetLeasePopulate() *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_LeasePopulate {
	if t != nil && t.LeasePopulate != nil {
		return t.LeasePopulate
	}
	return nil
}

// GetOption_82 returns the value of the Option_82 struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Dhcp. If the receiver or the field Option_82 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp) GetOption_82() *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82 {
	if t != nil && t.Option_82 != nil {
		return t.Option_82
	}
	return nil
}

// GetProxyServer returns the value of the ProxyServer struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Dhcp. If the receiver or the field ProxyServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp) GetProxyServer() *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer {
	if t != nil && t.ProxyServer != nil {
		return t.ProxyServer
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_Sap_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Sap_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Sap_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vpls_Sap_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSnoop retrieves the value of the leaf Snoop from the NokiaConf_Configure_Service_Vpls_Sap_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Snoop is set, it can
// safely use t.GetSnoop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Snoop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp) GetSnoop() bool {
	if t == nil || t.Snoop == nil {
		return false
	}
	return *t.Snoop
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Dhcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Snoop == nil {
		var v bool = false
		t.Snoop = &v
	}
	t.LeasePopulate.PopulateDefaults()
	t.Option_82.PopulateDefaults()
	t.ProxyServer.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Dhcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Dhcp.
func (*NokiaConf_Configure_Service_Vpls_Sap_Dhcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Dhcp_LeasePopulate represents the /nokia-conf/configure/service/vpls/sap/dhcp/lease-populate YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Dhcp_LeasePopulate struct {
	MaxLeases *uint32 `path:"max-leases" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Dhcp_LeasePopulate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Dhcp_LeasePopulate) IsYANGGoStruct() {}

// GetMaxLeases retrieves the value of the leaf MaxLeases from the NokiaConf_Configure_Service_Vpls_Sap_Dhcp_LeasePopulate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLeases is set, it can
// safely use t.GetMaxLeases() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLeases == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_LeasePopulate) GetMaxLeases() uint32 {
	if t == nil || t.MaxLeases == nil {
		return 0
	}
	return *t.MaxLeases
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Dhcp_LeasePopulate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_LeasePopulate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_LeasePopulate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Dhcp_LeasePopulate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_LeasePopulate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_LeasePopulate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Dhcp_LeasePopulate.
func (*NokiaConf_Configure_Service_Vpls_Sap_Dhcp_LeasePopulate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82 represents the /nokia-conf/configure/service/vpls/sap/dhcp/option-82 YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82 struct {
	Action               E_NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_Action              `path:"action" module:"nokia-conf"`
	CircuitId            *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_CircuitId            `path:"circuit-id" module:"nokia-conf"`
	RemoteId             *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_RemoteId             `path:"remote-id" module:"nokia-conf"`
	VendorSpecificOption *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_VendorSpecificOption `path:"vendor-specific-option" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82) IsYANGGoStruct() {}

// GetOrCreateCircuitId retrieves the value of the CircuitId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82) GetOrCreateCircuitId() *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_CircuitId {
	if t.CircuitId != nil {
		return t.CircuitId
	}
	t.CircuitId = &NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_CircuitId{}
	return t.CircuitId
}

// GetOrCreateRemoteId retrieves the value of the RemoteId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82) GetOrCreateRemoteId() *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_RemoteId {
	if t.RemoteId != nil {
		return t.RemoteId
	}
	t.RemoteId = &NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_RemoteId{}
	return t.RemoteId
}

// GetOrCreateVendorSpecificOption retrieves the value of the VendorSpecificOption field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82) GetOrCreateVendorSpecificOption() *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_VendorSpecificOption {
	if t.VendorSpecificOption != nil {
		return t.VendorSpecificOption
	}
	t.VendorSpecificOption = &NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_VendorSpecificOption{}
	return t.VendorSpecificOption
}

// GetCircuitId returns the value of the CircuitId struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82. If the receiver or the field CircuitId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82) GetCircuitId() *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_CircuitId {
	if t != nil && t.CircuitId != nil {
		return t.CircuitId
	}
	return nil
}

// GetRemoteId returns the value of the RemoteId struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82. If the receiver or the field RemoteId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82) GetRemoteId() *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_RemoteId {
	if t != nil && t.RemoteId != nil {
		return t.RemoteId
	}
	return nil
}

// GetVendorSpecificOption returns the value of the VendorSpecificOption struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82. If the receiver or the field VendorSpecificOption is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82) GetVendorSpecificOption() *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_VendorSpecificOption {
	if t != nil && t.VendorSpecificOption != nil {
		return t.VendorSpecificOption
	}
	return nil
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82) GetAction() E_NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_Action {
	if t == nil || t.Action == 0 {
		return NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_Action_keep
	}
	return t.Action
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_Action_keep
	}
	t.CircuitId.PopulateDefaults()
	t.RemoteId.PopulateDefaults()
	t.VendorSpecificOption.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82.
func (*NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_CircuitId represents the /nokia-conf/configure/service/vpls/sap/dhcp/option-82/circuit-id YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_CircuitId struct {
	AsciiTuple     YANGEmpty `path:"ascii-tuple" module:"nokia-conf"`
	HexString      *string   `path:"hex-string" module:"nokia-conf"`
	None           YANGEmpty `path:"none" module:"nokia-conf"`
	VlanAsciiTuple YANGEmpty `path:"vlan-ascii-tuple" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_CircuitId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_CircuitId) IsYANGGoStruct() {}

// GetAsciiTuple retrieves the value of the leaf AsciiTuple from the NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiTuple is set, it can
// safely use t.GetAsciiTuple() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiTuple == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_CircuitId) GetAsciiTuple() YANGEmpty {
	if t == nil || t.AsciiTuple == false {
		return false
	}
	return t.AsciiTuple
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_CircuitId) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// GetNone retrieves the value of the leaf None from the NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if None is set, it can
// safely use t.GetNone() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.None == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_CircuitId) GetNone() YANGEmpty {
	if t == nil || t.None == false {
		return false
	}
	return t.None
}

// GetVlanAsciiTuple retrieves the value of the leaf VlanAsciiTuple from the NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanAsciiTuple is set, it can
// safely use t.GetVlanAsciiTuple() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanAsciiTuple == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_CircuitId) GetVlanAsciiTuple() YANGEmpty {
	if t == nil || t.VlanAsciiTuple == false {
		return false
	}
	return t.VlanAsciiTuple
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_CircuitId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_CircuitId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_CircuitId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_CircuitId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_CircuitId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_CircuitId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_CircuitId.
func (*NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_CircuitId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_RemoteId represents the /nokia-conf/configure/service/vpls/sap/dhcp/option-82/remote-id YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_RemoteId struct {
	AsciiString *string   `path:"ascii-string" module:"nokia-conf"`
	HexString   *string   `path:"hex-string" module:"nokia-conf"`
	Mac         YANGEmpty `path:"mac" module:"nokia-conf"`
	None        YANGEmpty `path:"none" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_RemoteId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_RemoteId) IsYANGGoStruct() {}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_RemoteId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_RemoteId) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_RemoteId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_RemoteId) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_RemoteId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_RemoteId) GetMac() YANGEmpty {
	if t == nil || t.Mac == false {
		return false
	}
	return t.Mac
}

// GetNone retrieves the value of the leaf None from the NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_RemoteId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if None is set, it can
// safely use t.GetNone() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.None == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_RemoteId) GetNone() YANGEmpty {
	if t == nil || t.None == false {
		return false
	}
	return t.None
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_RemoteId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_RemoteId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_RemoteId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_RemoteId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_RemoteId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_RemoteId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_RemoteId.
func (*NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_RemoteId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_VendorSpecificOption represents the /nokia-conf/configure/service/vpls/sap/dhcp/option-82/vendor-specific-option YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_VendorSpecificOption struct {
	ClientMacAddress *bool   `path:"client-mac-address" module:"nokia-conf"`
	SapId            *bool   `path:"sap-id" module:"nokia-conf"`
	ServiceId        *bool   `path:"service-id" module:"nokia-conf"`
	String           *string `path:"string" module:"nokia-conf"`
	SystemId         *bool   `path:"system-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_VendorSpecificOption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_VendorSpecificOption) IsYANGGoStruct() {}

// GetClientMacAddress retrieves the value of the leaf ClientMacAddress from the NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientMacAddress is set, it can
// safely use t.GetClientMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientMacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_VendorSpecificOption) GetClientMacAddress() bool {
	if t == nil || t.ClientMacAddress == nil {
		return false
	}
	return *t.ClientMacAddress
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_VendorSpecificOption) GetSapId() bool {
	if t == nil || t.SapId == nil {
		return false
	}
	return *t.SapId
}

// GetServiceId retrieves the value of the leaf ServiceId from the NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceId is set, it can
// safely use t.GetServiceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_VendorSpecificOption) GetServiceId() bool {
	if t == nil || t.ServiceId == nil {
		return false
	}
	return *t.ServiceId
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_VendorSpecificOption) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// GetSystemId retrieves the value of the leaf SystemId from the NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemId is set, it can
// safely use t.GetSystemId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_VendorSpecificOption) GetSystemId() bool {
	if t == nil || t.SystemId == nil {
		return false
	}
	return *t.SystemId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_VendorSpecificOption
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_VendorSpecificOption) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ClientMacAddress == nil {
		var v bool = false
		t.ClientMacAddress = &v
	}
	if t.SapId == nil {
		var v bool = false
		t.SapId = &v
	}
	if t.ServiceId == nil {
		var v bool = false
		t.ServiceId = &v
	}
	if t.SystemId == nil {
		var v bool = false
		t.SystemId = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_VendorSpecificOption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_VendorSpecificOption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_VendorSpecificOption) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_VendorSpecificOption) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_VendorSpecificOption.
func (*NokiaConf_Configure_Service_Vpls_Sap_Dhcp_Option_82_VendorSpecificOption) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer represents the /nokia-conf/configure/service/vpls/sap/dhcp/proxy-server YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer struct {
	AdminState     E_NokiaTypesSros_AdminState                                      `path:"admin-state" module:"nokia-conf"`
	EmulatedServer *string                                                          `path:"emulated-server" module:"nokia-conf"`
	LeaseTime      *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer_LeaseTime `path:"lease-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer) IsYANGGoStruct() {}

// GetOrCreateLeaseTime retrieves the value of the LeaseTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer) GetOrCreateLeaseTime() *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer_LeaseTime {
	if t.LeaseTime != nil {
		return t.LeaseTime
	}
	t.LeaseTime = &NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer_LeaseTime{}
	return t.LeaseTime
}

// GetLeaseTime returns the value of the LeaseTime struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer. If the receiver or the field LeaseTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer) GetLeaseTime() *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer_LeaseTime {
	if t != nil && t.LeaseTime != nil {
		return t.LeaseTime
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetEmulatedServer retrieves the value of the leaf EmulatedServer from the NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EmulatedServer is set, it can
// safely use t.GetEmulatedServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EmulatedServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer) GetEmulatedServer() string {
	if t == nil || t.EmulatedServer == nil {
		return ""
	}
	return *t.EmulatedServer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.LeaseTime.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer.
func (*NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer_LeaseTime represents the /nokia-conf/configure/service/vpls/sap/dhcp/proxy-server/lease-time YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer_LeaseTime struct {
	RadiusOverride *bool   `path:"radius-override" module:"nokia-conf"`
	Value          *uint32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer_LeaseTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer_LeaseTime) IsYANGGoStruct() {}

// GetRadiusOverride retrieves the value of the leaf RadiusOverride from the NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer_LeaseTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusOverride is set, it can
// safely use t.GetRadiusOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer_LeaseTime) GetRadiusOverride() bool {
	if t == nil || t.RadiusOverride == nil {
		return false
	}
	return *t.RadiusOverride
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer_LeaseTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer_LeaseTime) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer_LeaseTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer_LeaseTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RadiusOverride == nil {
		var v bool = false
		t.RadiusOverride = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer_LeaseTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer_LeaseTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer_LeaseTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer_LeaseTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer_LeaseTime.
func (*NokiaConf_Configure_Service_Vpls_Sap_Dhcp_ProxyServer_LeaseTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Egress represents the /nokia-conf/configure/service/vpls/sap/egress YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Egress struct {
	AggRate          *NokiaConf_Configure_Service_Vpls_Sap_Egress_AggRate          `path:"agg-rate" module:"nokia-conf"`
	DestMacRewrite   *string                                                       `path:"dest-mac-rewrite" module:"nokia-conf"`
	Filter           *NokiaConf_Configure_Service_Vpls_Sap_Egress_Filter           `path:"filter" module:"nokia-conf"`
	Qos              *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos              `path:"qos" module:"nokia-conf"`
	VlanManipulation *NokiaConf_Configure_Service_Vpls_Sap_Egress_VlanManipulation `path:"vlan-manipulation" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress) IsYANGGoStruct() {}

// GetOrCreateAggRate retrieves the value of the AggRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress) GetOrCreateAggRate() *NokiaConf_Configure_Service_Vpls_Sap_Egress_AggRate {
	if t.AggRate != nil {
		return t.AggRate
	}
	t.AggRate = &NokiaConf_Configure_Service_Vpls_Sap_Egress_AggRate{}
	return t.AggRate
}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress) GetOrCreateFilter() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Vpls_Sap_Egress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress) GetOrCreateQos() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos{}
	return t.Qos
}

// GetOrCreateVlanManipulation retrieves the value of the VlanManipulation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress) GetOrCreateVlanManipulation() *NokiaConf_Configure_Service_Vpls_Sap_Egress_VlanManipulation {
	if t.VlanManipulation != nil {
		return t.VlanManipulation
	}
	t.VlanManipulation = &NokiaConf_Configure_Service_Vpls_Sap_Egress_VlanManipulation{}
	return t.VlanManipulation
}

// GetAggRate returns the value of the AggRate struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Egress. If the receiver or the field AggRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress) GetAggRate() *NokiaConf_Configure_Service_Vpls_Sap_Egress_AggRate {
	if t != nil && t.AggRate != nil {
		return t.AggRate
	}
	return nil
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Egress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress) GetFilter() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress) GetQos() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetVlanManipulation returns the value of the VlanManipulation struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Egress. If the receiver or the field VlanManipulation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress) GetVlanManipulation() *NokiaConf_Configure_Service_Vpls_Sap_Egress_VlanManipulation {
	if t != nil && t.VlanManipulation != nil {
		return t.VlanManipulation
	}
	return nil
}

// GetDestMacRewrite retrieves the value of the leaf DestMacRewrite from the NokiaConf_Configure_Service_Vpls_Sap_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestMacRewrite is set, it can
// safely use t.GetDestMacRewrite() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestMacRewrite == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress) GetDestMacRewrite() string {
	if t == nil || t.DestMacRewrite == nil {
		return ""
	}
	return *t.DestMacRewrite
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AggRate.PopulateDefaults()
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
	t.VlanManipulation.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Egress.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Egress_AggRate represents the /nokia-conf/configure/service/vpls/sap/egress/agg-rate YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Egress_AggRate struct {
	Cir                       NokiaConf_Configure_Service_Vpls_Sap_Egress_AggRate_Cir_Union `path:"cir" module:"nokia-conf"`
	LimitUnusedBandwidth      *bool                                                         `path:"limit-unused-bandwidth" module:"nokia-conf"`
	QueueFrameBasedAccounting *bool                                                         `path:"queue-frame-based-accounting" module:"nokia-conf"`
	Rate                      *int64                                                        `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Egress_AggRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_AggRate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Vpls_Sap_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_AggRate) GetCir() NokiaConf_Configure_Service_Vpls_Sap_Egress_AggRate_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionInt32(0)
	}
	return t.Cir
}

// GetLimitUnusedBandwidth retrieves the value of the leaf LimitUnusedBandwidth from the NokiaConf_Configure_Service_Vpls_Sap_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LimitUnusedBandwidth is set, it can
// safely use t.GetLimitUnusedBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LimitUnusedBandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_AggRate) GetLimitUnusedBandwidth() bool {
	if t == nil || t.LimitUnusedBandwidth == nil {
		return false
	}
	return *t.LimitUnusedBandwidth
}

// GetQueueFrameBasedAccounting retrieves the value of the leaf QueueFrameBasedAccounting from the NokiaConf_Configure_Service_Vpls_Sap_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueFrameBasedAccounting is set, it can
// safely use t.GetQueueFrameBasedAccounting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueFrameBasedAccounting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_AggRate) GetQueueFrameBasedAccounting() bool {
	if t == nil || t.QueueFrameBasedAccounting == nil {
		return false
	}
	return *t.QueueFrameBasedAccounting
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Service_Vpls_Sap_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_AggRate) GetRate() int64 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Egress_AggRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_AggRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = UnionInt32(0)
	}
	if t.LimitUnusedBandwidth == nil {
		var v bool = false
		t.LimitUnusedBandwidth = &v
	}
	if t.QueueFrameBasedAccounting == nil {
		var v bool = false
		t.QueueFrameBasedAccounting = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_AggRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Egress_AggRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_AggRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_AggRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Egress_AggRate.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_AggRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Egress_Filter represents the /nokia-conf/configure/service/vpls/sap/egress/filter YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Egress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
	Mac  *string `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Egress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Filter) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Egress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Egress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Egress_Filter.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos represents the /nokia-conf/configure/service/vpls/sap/egress/qos YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos struct {
	EgressRemarkPolicy   *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_EgressRemarkPolicy   `path:"egress-remark-policy" module:"nokia-conf"`
	PolicerControlPolicy *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy `path:"policer-control-policy" module:"nokia-conf"`
	QinqMarkTopOnly      *bool                                                                 `path:"qinq-mark-top-only" module:"nokia-conf"`
	SapEgress            *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress            `path:"sap-egress" module:"nokia-conf"`
	SchedulerPolicy      *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy      `path:"scheduler-policy" module:"nokia-conf"`
	VlanQosPolicy        *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_VlanQosPolicy        `path:"vlan-qos-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos) IsYANGGoStruct() {}

// GetOrCreateEgressRemarkPolicy retrieves the value of the EgressRemarkPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos) GetOrCreateEgressRemarkPolicy() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_EgressRemarkPolicy {
	if t.EgressRemarkPolicy != nil {
		return t.EgressRemarkPolicy
	}
	t.EgressRemarkPolicy = &NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_EgressRemarkPolicy{}
	return t.EgressRemarkPolicy
}

// GetOrCreatePolicerControlPolicy retrieves the value of the PolicerControlPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos) GetOrCreatePolicerControlPolicy() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy {
	if t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	t.PolicerControlPolicy = &NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy{}
	return t.PolicerControlPolicy
}

// GetOrCreateSapEgress retrieves the value of the SapEgress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos) GetOrCreateSapEgress() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress {
	if t.SapEgress != nil {
		return t.SapEgress
	}
	t.SapEgress = &NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress{}
	return t.SapEgress
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos) GetOrCreateSchedulerPolicy() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetOrCreateVlanQosPolicy retrieves the value of the VlanQosPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos) GetOrCreateVlanQosPolicy() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_VlanQosPolicy {
	if t.VlanQosPolicy != nil {
		return t.VlanQosPolicy
	}
	t.VlanQosPolicy = &NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_VlanQosPolicy{}
	return t.VlanQosPolicy
}

// GetEgressRemarkPolicy returns the value of the EgressRemarkPolicy struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos. If the receiver or the field EgressRemarkPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos) GetEgressRemarkPolicy() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_EgressRemarkPolicy {
	if t != nil && t.EgressRemarkPolicy != nil {
		return t.EgressRemarkPolicy
	}
	return nil
}

// GetPolicerControlPolicy returns the value of the PolicerControlPolicy struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos. If the receiver or the field PolicerControlPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos) GetPolicerControlPolicy() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy {
	if t != nil && t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	return nil
}

// GetSapEgress returns the value of the SapEgress struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos. If the receiver or the field SapEgress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos) GetSapEgress() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress {
	if t != nil && t.SapEgress != nil {
		return t.SapEgress
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos) GetSchedulerPolicy() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetVlanQosPolicy returns the value of the VlanQosPolicy struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos. If the receiver or the field VlanQosPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos) GetVlanQosPolicy() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_VlanQosPolicy {
	if t != nil && t.VlanQosPolicy != nil {
		return t.VlanQosPolicy
	}
	return nil
}

// GetQinqMarkTopOnly retrieves the value of the leaf QinqMarkTopOnly from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QinqMarkTopOnly is set, it can
// safely use t.GetQinqMarkTopOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QinqMarkTopOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos) GetQinqMarkTopOnly() bool {
	if t == nil || t.QinqMarkTopOnly == nil {
		return false
	}
	return *t.QinqMarkTopOnly
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.QinqMarkTopOnly == nil {
		var v bool = false
		t.QinqMarkTopOnly = &v
	}
	t.EgressRemarkPolicy.PopulateDefaults()
	t.PolicerControlPolicy.PopulateDefaults()
	t.SapEgress.PopulateDefaults()
	t.SchedulerPolicy.PopulateDefaults()
	t.VlanQosPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_EgressRemarkPolicy represents the /nokia-conf/configure/service/vpls/sap/egress/qos/egress-remark-policy YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_EgressRemarkPolicy struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_EgressRemarkPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_EgressRemarkPolicy) IsYANGGoStruct() {}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_EgressRemarkPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_EgressRemarkPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_EgressRemarkPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_EgressRemarkPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_EgressRemarkPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_EgressRemarkPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_EgressRemarkPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_EgressRemarkPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_EgressRemarkPolicy.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_EgressRemarkPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy represents the /nokia-conf/configure/service/vpls/sap/egress/qos/policer-control-policy YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy struct {
	Overrides  *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                                         `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy) GetOverrides() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides represents the /nokia-conf/configure/service/vpls/sap/egress/qos/policer-control-policy/overrides YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides struct {
	ApplyGroups        []string                                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Root               *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root `path:"root" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides) IsYANGGoStruct() {
}

// GetOrCreateRoot retrieves the value of the Root field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides) GetOrCreateRoot() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root {
	if t.Root != nil {
		return t.Root
	}
	t.Root = &NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root{}
	return t.Root
}

// GetRoot returns the value of the Root struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides. If the receiver or the field Root is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides) GetRoot() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root {
	if t != nil && t.Root != nil {
		return t.Root
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Root.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root represents the /nokia-conf/configure/service/vpls/sap/egress/qos/policer-control-policy/overrides/root YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root struct {
	MaxRate               NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union          `path:"max-rate" module:"nokia-conf"`
	PriorityMbsThresholds *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds `path:"priority-mbs-thresholds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) IsYANGGoStruct() {
}

// GetOrCreatePriorityMbsThresholds retrieves the value of the PriorityMbsThresholds field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) GetOrCreatePriorityMbsThresholds() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	t.PriorityMbsThresholds = &NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds{}
	return t.PriorityMbsThresholds
}

// GetPriorityMbsThresholds returns the value of the PriorityMbsThresholds struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root. If the receiver or the field PriorityMbsThresholds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) GetPriorityMbsThresholds() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t != nil && t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	return nil
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) GetMaxRate() NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return nil
	}
	return t.MaxRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PriorityMbsThresholds.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds represents the /nokia-conf/configure/service/vpls/sap/egress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct {
	MinThreshSeparation NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union `path:"min-thresh-separation" module:"nokia-conf"`
	Priority            map[int32]*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority       `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) IsYANGGoStruct() {
}

// NewPriority creates a new entry in the Priority list of the
// NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) NewPriority(PriorityLevel int32) (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[int32]*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	key := PriorityLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Priority[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Priority", key)
	}

	t.Priority[key] = &NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority{
		PriorityLevel: &PriorityLevel,
	}

	return t.Priority[key], nil
}

// RenamePriority renames an entry in the list Priority within
// the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) RenamePriority(oldK, newK int32) error {
	if _, ok := t.Priority[newK]; ok {
		return fmt.Errorf("key %v already exists in Priority", newK)
	}

	e, ok := t.Priority[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Priority", oldK)
	}
	e.PriorityLevel = &newK

	t.Priority[newK] = e
	delete(t.Priority, oldK)
	return nil
}

// GetOrCreatePriority retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetOrCreatePriority(PriorityLevel int32) *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	key := PriorityLevel

	if v, ok := t.Priority[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPriority(PriorityLevel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePriority got unexpected error: %v", err))
	}
	return v
}

// GetPriority retrieves the value with the specified key from
// the Priority map field of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetPriority(PriorityLevel int32) *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	if t == nil {
		return nil
	}

	key := PriorityLevel

	if lm, ok := t.Priority[key]; ok {
		return lm
	}
	return nil
}

// DeletePriority deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) DeletePriority(PriorityLevel int32) {
	key := PriorityLevel

	delete(t.Priority, key)
}

// AppendPriority appends the supplied NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct to the
// list Priority of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) AppendPriority(v *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) error {
	if v.PriorityLevel == nil {
		return fmt.Errorf("invalid nil key received for PriorityLevel")
	}

	key := *v.PriorityLevel

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[int32]*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	if _, ok := t.Priority[key]; ok {
		return fmt.Errorf("duplicate key for list Priority %v", key)
	}

	t.Priority[key] = v
	return nil
}

// GetMinThreshSeparation retrieves the value of the leaf MinThreshSeparation from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThreshSeparation is set, it can
// safely use t.GetMinThreshSeparation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThreshSeparation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetMinThreshSeparation() NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union {
	if t == nil || t.MinThreshSeparation == nil {
		return nil
	}
	return t.MinThreshSeparation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Priority {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority represents the /nokia-conf/configure/service/vpls/sap/egress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds/priority YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct {
	ApplyGroups        []string                                                                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	MbsContribution    NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union `path:"mbs-contribution" module:"nokia-conf"`
	PriorityLevel      *int32                                                                                                                                   `path:"priority-level" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMbsContribution retrieves the value of the leaf MbsContribution from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MbsContribution is set, it can
// safely use t.GetMbsContribution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MbsContribution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetMbsContribution() NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union {
	if t == nil || t.MbsContribution == nil {
		return nil
	}
	return t.MbsContribution
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetPriorityLevel() int32 {
	if t == nil || t.PriorityLevel == nil {
		return 0
	}
	return *t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PriorityLevel == nil {
		return nil, fmt.Errorf("nil value for key PriorityLevel")
	}

	return map[string]interface{}{
		"priority-level": *t.PriorityLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress represents the /nokia-conf/configure/service/vpls/sap/egress/qos/sap-egress YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress struct {
	Overrides         *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides         `path:"overrides" module:"nokia-conf"`
	PolicyName        *string                                                                      `path:"policy-name" module:"nokia-conf"`
	PortRedirectGroup *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_PortRedirectGroup `path:"port-redirect-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress) GetOrCreateOverrides() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides{}
	return t.Overrides
}

// GetOrCreatePortRedirectGroup retrieves the value of the PortRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress) GetOrCreatePortRedirectGroup() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_PortRedirectGroup {
	if t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	t.PortRedirectGroup = &NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_PortRedirectGroup{}
	return t.PortRedirectGroup
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress) GetOverrides() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPortRedirectGroup returns the value of the PortRedirectGroup struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress. If the receiver or the field PortRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress) GetPortRedirectGroup() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_PortRedirectGroup {
	if t != nil && t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
	t.PortRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides represents the /nokia-conf/configure/service/vpls/sap/egress/qos/sap-egress/overrides YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides struct {
	HsSecondaryShaper *string                                                                                    `path:"hs-secondary-shaper" module:"nokia-conf"`
	HsWrrGroup        map[uint32]*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup `path:"hs-wrr-group" module:"nokia-conf"`
	HsmdaQueues       *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues           `path:"hsmda-queues" module:"nokia-conf"`
	Policer           map[int32]*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer     `path:"policer" module:"nokia-conf"`
	Queue             map[int32]*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue       `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides) IsYANGGoStruct() {}

// NewHsWrrGroup creates a new entry in the HsWrrGroup list of the
// NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides) NewHsWrrGroup(GroupId uint32) (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsWrrGroup == nil {
		t.HsWrrGroup = make(map[uint32]*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup)
	}

	key := GroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HsWrrGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HsWrrGroup", key)
	}

	t.HsWrrGroup[key] = &NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup{
		GroupId: &GroupId,
	}

	return t.HsWrrGroup[key], nil
}

// RenameHsWrrGroup renames an entry in the list HsWrrGroup within
// the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides) RenameHsWrrGroup(oldK, newK uint32) error {
	if _, ok := t.HsWrrGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in HsWrrGroup", newK)
	}

	e, ok := t.HsWrrGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HsWrrGroup", oldK)
	}
	e.GroupId = &newK

	t.HsWrrGroup[newK] = e
	delete(t.HsWrrGroup, oldK)
	return nil
}

// GetOrCreateHsWrrGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides) GetOrCreateHsWrrGroup(GroupId uint32) *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup {

	key := GroupId

	if v, ok := t.HsWrrGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHsWrrGroup(GroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHsWrrGroup got unexpected error: %v", err))
	}
	return v
}

// GetHsWrrGroup retrieves the value with the specified key from
// the HsWrrGroup map field of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides) GetHsWrrGroup(GroupId uint32) *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup {

	if t == nil {
		return nil
	}

	key := GroupId

	if lm, ok := t.HsWrrGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteHsWrrGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides) DeleteHsWrrGroup(GroupId uint32) {
	key := GroupId

	delete(t.HsWrrGroup, key)
}

// AppendHsWrrGroup appends the supplied NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup struct to the
// list HsWrrGroup of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides) AppendHsWrrGroup(v *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) error {
	if v.GroupId == nil {
		return fmt.Errorf("invalid nil key received for GroupId")
	}

	key := *v.GroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsWrrGroup == nil {
		t.HsWrrGroup = make(map[uint32]*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup)
	}

	if _, ok := t.HsWrrGroup[key]; ok {
		return fmt.Errorf("duplicate key for list HsWrrGroup %v", key)
	}

	t.HsWrrGroup[key] = v
	return nil
}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides) NewPolicer(PolicerId int32) (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer{
		PolicerId: &PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides) RenamePolicer(oldK, newK int32) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = &newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides) GetOrCreatePolicer(PolicerId int32) *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer {

	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides) GetPolicer(PolicerId int32) *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer {

	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides) DeletePolicer(PolicerId int32) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer struct to the
// list Policer of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides) AppendPolicer(v *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer) error {
	if v.PolicerId == nil {
		return fmt.Errorf("invalid nil key received for PolicerId")
	}

	key := *v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides) NewQueue(QueueId int32) (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue{
		QueueId: &QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides) RenameQueue(oldK, newK int32) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides) GetOrCreateQueue(QueueId int32) *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides) GetQueue(QueueId int32) *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides) DeleteQueue(QueueId int32) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue struct to the
// list Queue of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides) AppendQueue(v *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue) error {
	if v.QueueId == nil {
		return fmt.Errorf("invalid nil key received for QueueId")
	}

	key := *v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetOrCreateHsmdaQueues retrieves the value of the HsmdaQueues field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides) GetOrCreateHsmdaQueues() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues {
	if t.HsmdaQueues != nil {
		return t.HsmdaQueues
	}
	t.HsmdaQueues = &NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues{}
	return t.HsmdaQueues
}

// GetHsmdaQueues returns the value of the HsmdaQueues struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides. If the receiver or the field HsmdaQueues is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides) GetHsmdaQueues() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues {
	if t != nil && t.HsmdaQueues != nil {
		return t.HsmdaQueues
	}
	return nil
}

// GetHsSecondaryShaper retrieves the value of the leaf HsSecondaryShaper from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsSecondaryShaper is set, it can
// safely use t.GetHsSecondaryShaper() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsSecondaryShaper == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides) GetHsSecondaryShaper() string {
	if t == nil || t.HsSecondaryShaper == nil {
		return ""
	}
	return *t.HsSecondaryShaper
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.HsmdaQueues.PopulateDefaults()
	for _, e := range t.HsWrrGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup represents the /nokia-conf/configure/service/vpls/sap/egress/qos/sap-egress/overrides/hs-wrr-group YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup struct {
	ApplyGroups        []string                                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupId            *uint32                                                                                   `path:"group-id" module:"nokia-conf"`
	HsClassWeight      *int32                                                                                    `path:"hs-class-weight" module:"nokia-conf"`
	PercentRate        *float64                                                                                  `path:"percent-rate" module:"nokia-conf"`
	Rate               NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_Rate_Union `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroupId retrieves the value of the leaf GroupId from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupId is set, it can
// safely use t.GetGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetGroupId() uint32 {
	if t == nil || t.GroupId == nil {
		return 0
	}
	return *t.GroupId
}

// GetHsClassWeight retrieves the value of the leaf HsClassWeight from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsClassWeight is set, it can
// safely use t.GetHsClassWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsClassWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetHsClassWeight() int32 {
	if t == nil || t.HsClassWeight == nil {
		return 0
	}
	return *t.HsClassWeight
}

// GetPercentRate retrieves the value of the leaf PercentRate from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentRate is set, it can
// safely use t.GetPercentRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetPercentRate() float64 {
	if t == nil || t.PercentRate == nil {
		return 0.0
	}
	return *t.PercentRate
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetRate() NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_Rate_Union {
	if t == nil || t.Rate == nil {
		return nil
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupId == nil {
		return nil, fmt.Errorf("nil value for key GroupId")
	}

	return map[string]interface{}{
		"group-id": *t.GroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues represents the /nokia-conf/configure/service/vpls/sap/egress/qos/sap-egress/overrides/hsmda-queues YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues struct {
	PacketByteOffset *int32                                                                                           `path:"packet-byte-offset" module:"nokia-conf"`
	Queue            map[int32]*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue `path:"queue" module:"nokia-conf"`
	SecondaryShaper  *string                                                                                          `path:"secondary-shaper" module:"nokia-conf"`
	WrrPolicy        *string                                                                                          `path:"wrr-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) IsYANGGoStruct() {
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) NewQueue(QueueId int32) (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue{
		QueueId: &QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) RenameQueue(oldK, newK int32) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetOrCreateQueue(QueueId int32) *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetQueue(QueueId int32) *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) DeleteQueue(QueueId int32) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue struct to the
// list Queue of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) AppendQueue(v *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) error {
	if v.QueueId == nil {
		return fmt.Errorf("invalid nil key received for QueueId")
	}

	key := *v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetSecondaryShaper retrieves the value of the leaf SecondaryShaper from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondaryShaper is set, it can
// safely use t.GetSecondaryShaper() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondaryShaper == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetSecondaryShaper() string {
	if t == nil || t.SecondaryShaper == nil {
		return ""
	}
	return *t.SecondaryShaper
}

// GetWrrPolicy retrieves the value of the leaf WrrPolicy from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrPolicy is set, it can
// safely use t.GetWrrPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetWrrPolicy() string {
	if t == nil || t.WrrPolicy == nil {
		return ""
	}
	return *t.WrrPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue represents the /nokia-conf/configure/service/vpls/sap/egress/qos/sap-egress/overrides/hsmda-queues/queue YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue struct {
	ApplyGroups        []string                                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_Mbs_Union  `path:"mbs" module:"nokia-conf"`
	QueueId            *int32                                                                                           `path:"queue-id" module:"nokia-conf"`
	Rate               NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_Rate_Union `path:"rate" module:"nokia-conf"`
	SlopePolicy        *string                                                                                          `path:"slope-policy" module:"nokia-conf"`
	WrrWeight          *int32                                                                                           `path:"wrr-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetMbs() NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetQueueId() int32 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetRate() NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_Rate_Union {
	if t == nil || t.Rate == nil {
		return nil
	}
	return t.Rate
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// GetWrrWeight retrieves the value of the leaf WrrWeight from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrWeight is set, it can
// safely use t.GetWrrWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetWrrWeight() int32 {
	if t == nil || t.WrrWeight == nil {
		return 0
	}
	return *t.WrrWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueId == nil {
		return nil, fmt.Errorf("nil value for key QueueId")
	}

	return map[string]interface{}{
		"queue-id": *t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer represents the /nokia-conf/configure/service/vpls/sap/egress/qos/sap-egress/overrides/policer YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer struct {
	ApplyGroups        []string                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_Cbs_Union    `path:"cbs" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_Mbs_Union    `path:"mbs" module:"nokia-conf"`
	PacketByteOffset   *int32                                                                                   `path:"packet-byte-offset" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate `path:"percent-rate" module:"nokia-conf"`
	PolicerId          *int32                                                                                   `path:"policer-id" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate        `path:"rate" module:"nokia-conf"`
	StatMode           E_NokiaTypesQos_EgressPolicerStatMode                                                    `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer) IsYANGGoStruct() {
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetOrCreatePercentRate() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetOrCreateRate() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate{}
	return t.Rate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetPercentRate() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetRate() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetCbs() NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetMbs() NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetPolicerId retrieves the value of the leaf PolicerId from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetPolicerId() int32 {
	if t == nil || t.PolicerId == nil {
		return 0
	}
	return *t.PolicerId
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetStatMode() E_NokiaTypesQos_EgressPolicerStatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerId == nil {
		return nil, fmt.Errorf("nil value for key PolicerId")
	}

	return map[string]interface{}{
		"policer-id": *t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate represents the /nokia-conf/configure/service/vpls/sap/egress/qos/sap-egress/overrides/policer/percent-rate YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate represents the /nokia-conf/configure/service/vpls/sap/egress/qos/sap-egress/overrides/policer/rate YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate struct {
	Cir NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) GetCir() NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) GetPir() NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue represents the /nokia-conf/configure/service/vpls/sap/egress/qos/sap-egress/overrides/queue YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue struct {
	AdaptationRule     *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule    `path:"adaptation-rule" module:"nokia-conf"`
	ApplyGroups        []string                                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	AvgFrameOverhead   *float64                                                                                     `path:"avg-frame-overhead" module:"nokia-conf"`
	BurstLimit         NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_BurstLimit_Union   `path:"burst-limit" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Cbs_Union          `path:"cbs" module:"nokia-conf"`
	DropTail           *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail          `path:"drop-tail" module:"nokia-conf"`
	HsClassWeight      *int32                                                                                       `path:"hs-class-weight" module:"nokia-conf"`
	HsWredQueue        *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue       `path:"hs-wred-queue" module:"nokia-conf"`
	HsWrrWeight        *int32                                                                                       `path:"hs-wrr-weight" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Mbs_Union          `path:"mbs" module:"nokia-conf"`
	MonitorDepth       *bool                                                                                        `path:"monitor-depth" module:"nokia-conf"`
	MonitorQueueDepth  *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth `path:"monitor-queue-depth" module:"nokia-conf" yangPresence:"true"`
	Parent             *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent            `path:"parent" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate       `path:"percent-rate" module:"nokia-conf"`
	QueueId            *int32                                                                                       `path:"queue-id" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate              `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue) IsYANGGoStruct() {}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreateHsWredQueue retrieves the value of the HsWredQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateHsWredQueue() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue {
	if t.HsWredQueue != nil {
		return t.HsWredQueue
	}
	t.HsWredQueue = &NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue{}
	return t.HsWredQueue
}

// GetOrCreateMonitorQueueDepth retrieves the value of the MonitorQueueDepth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateMonitorQueueDepth() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth {
	if t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	t.MonitorQueueDepth = &NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth{}
	return t.MonitorQueueDepth
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateParent() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent{}
	return t.Parent
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreatePercentRate() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateRate() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate{}
	return t.Rate
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetAdaptationRule() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetDropTail() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetHsWredQueue returns the value of the HsWredQueue struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field HsWredQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetHsWredQueue() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue {
	if t != nil && t.HsWredQueue != nil {
		return t.HsWredQueue
	}
	return nil
}

// GetMonitorQueueDepth returns the value of the MonitorQueueDepth struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field MonitorQueueDepth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetMonitorQueueDepth() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth {
	if t != nil && t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	return nil
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetParent() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetPercentRate() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetRate() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAvgFrameOverhead retrieves the value of the leaf AvgFrameOverhead from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AvgFrameOverhead is set, it can
// safely use t.GetAvgFrameOverhead() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AvgFrameOverhead == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetAvgFrameOverhead() float64 {
	if t == nil || t.AvgFrameOverhead == nil {
		return 0.0
	}
	return *t.AvgFrameOverhead
}

// GetBurstLimit retrieves the value of the leaf BurstLimit from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BurstLimit is set, it can
// safely use t.GetBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetBurstLimit() NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_BurstLimit_Union {
	if t == nil || t.BurstLimit == nil {
		return nil
	}
	return t.BurstLimit
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetCbs() NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetHsClassWeight retrieves the value of the leaf HsClassWeight from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsClassWeight is set, it can
// safely use t.GetHsClassWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsClassWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetHsClassWeight() int32 {
	if t == nil || t.HsClassWeight == nil {
		return 0
	}
	return *t.HsClassWeight
}

// GetHsWrrWeight retrieves the value of the leaf HsWrrWeight from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsWrrWeight is set, it can
// safely use t.GetHsWrrWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsWrrWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetHsWrrWeight() int32 {
	if t == nil || t.HsWrrWeight == nil {
		return 1
	}
	return *t.HsWrrWeight
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetMbs() NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetMonitorDepth retrieves the value of the leaf MonitorDepth from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorDepth is set, it can
// safely use t.GetMonitorDepth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorDepth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetMonitorDepth() bool {
	if t == nil || t.MonitorDepth == nil {
		return false
	}
	return *t.MonitorDepth
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetQueueId() int32 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HsWrrWeight == nil {
		var v int32 = 1
		t.HsWrrWeight = &v
	}
	if t.MonitorDepth == nil {
		var v bool = false
		t.MonitorDepth = &v
	}
	t.AdaptationRule.PopulateDefaults()
	t.DropTail.PopulateDefaults()
	t.HsWredQueue.PopulateDefaults()
	t.MonitorQueueDepth.PopulateDefaults()
	t.Parent.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueId == nil {
		return nil, fmt.Errorf("nil value for key QueueId")
	}

	return map[string]interface{}{
		"queue-id": *t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule represents the /nokia-conf/configure/service/vpls/sap/egress/qos/sap-egress/overrides/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRuleOverride `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRuleOverride `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Cir == 0 {
		return 0
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Pir == 0 {
		return 0
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail represents the /nokia-conf/configure/service/vpls/sap/egress/qos/sap-egress/overrides/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail struct {
	Low *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) IsYANGGoStruct() {
}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low{}
	return t.Low
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) GetLow() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low represents the /nokia-conf/configure/service/vpls/sap/egress/qos/sap-egress/overrides/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return nil
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue represents the /nokia-conf/configure/service/vpls/sap/egress/qos/sap-egress/overrides/queue/hs-wred-queue YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue struct {
	Policy *string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) IsYANGGoStruct() {
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth represents the /nokia-conf/configure/service/vpls/sap/egress/qos/sap-egress/overrides/queue/monitor-queue-depth YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth struct {
	FastPolling        *bool    `path:"fast-polling" module:"nokia-conf"`
	ViolationThreshold *float64 `path:"violation-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) IsYANGGoStruct() {
}

// GetFastPolling retrieves the value of the leaf FastPolling from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastPolling is set, it can
// safely use t.GetFastPolling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastPolling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) GetFastPolling() bool {
	if t == nil || t.FastPolling == nil {
		return false
	}
	return *t.FastPolling
}

// GetViolationThreshold retrieves the value of the leaf ViolationThreshold from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ViolationThreshold is set, it can
// safely use t.GetViolationThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ViolationThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) GetViolationThreshold() float64 {
	if t == nil || t.ViolationThreshold == nil {
		return 0.0
	}
	return *t.ViolationThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastPolling == nil {
		var v bool = false
		t.FastPolling = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent represents the /nokia-conf/configure/service/vpls/sap/egress/qos/sap-egress/overrides/queue/parent YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate represents the /nokia-conf/configure/service/vpls/sap/egress/qos/sap-egress/overrides/queue/percent-rate YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate represents the /nokia-conf/configure/service/vpls/sap/egress/qos/sap-egress/overrides/queue/rate YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate struct {
	Cir NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) GetCir() NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) GetPir() NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_PortRedirectGroup represents the /nokia-conf/configure/service/vpls/sap/egress/qos/sap-egress/port-redirect-group YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_PortRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_PortRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_PortRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_PortRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_PortRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_PortRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_PortRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_PortRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_PortRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_PortRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_PortRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_PortRedirectGroup.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SapEgress_PortRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy represents the /nokia-conf/configure/service/vpls/sap/egress/qos/scheduler-policy YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                    `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy) GetOverrides() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides represents the /nokia-conf/configure/service/vpls/sap/egress/qos/scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides struct {
	Scheduler map[string]*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides) IsYANGGoStruct() {}

// NewScheduler creates a new entry in the Scheduler list of the
// NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides) NewScheduler(SchedulerName string) (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	key := SchedulerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler{
		SchedulerName: &SchedulerName,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides) RenameScheduler(oldK, newK string) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.SchedulerName = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides) GetOrCreateScheduler(SchedulerName string) *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler {

	key := SchedulerName

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(SchedulerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides) GetScheduler(SchedulerName string) *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler {

	if t == nil {
		return nil
	}

	key := SchedulerName

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides) DeleteScheduler(SchedulerName string) {
	key := SchedulerName

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler struct to the
// list Scheduler of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides) AppendScheduler(v *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) error {
	if v.SchedulerName == nil {
		return fmt.Errorf("invalid nil key received for SchedulerName")
	}

	key := *v.SchedulerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler represents the /nokia-conf/configure/service/vpls/sap/egress/qos/scheduler-policy/overrides/scheduler YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler struct {
	ApplyGroups        []string                                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Parent             *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent `path:"parent" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate   `path:"rate" module:"nokia-conf"`
	SchedulerName      *string                                                                                     `path:"scheduler-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) IsYANGGoStruct() {
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateParent() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent{}
	return t.Parent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateRate() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate{}
	return t.Rate
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetParent() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetRate() *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Parent.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SchedulerName == nil {
		return nil, fmt.Errorf("nil value for key SchedulerName")
	}

	return map[string]interface{}{
		"scheduler-name": *t.SchedulerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent represents the /nokia-conf/configure/service/vpls/sap/egress/qos/scheduler-policy/overrides/scheduler/parent YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate represents the /nokia-conf/configure/service/vpls/sap/egress/qos/scheduler-policy/overrides/scheduler/rate YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate struct {
	Cir NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetCir() NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetPir() NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_VlanQosPolicy represents the /nokia-conf/configure/service/vpls/sap/egress/qos/vlan-qos-policy YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_VlanQosPolicy struct {
	PolicyName   *string `path:"policy-name" module:"nokia-conf"`
	PortRedirect *bool   `path:"port-redirect" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_VlanQosPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_VlanQosPolicy) IsYANGGoStruct() {}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_VlanQosPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_VlanQosPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetPortRedirect retrieves the value of the leaf PortRedirect from the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_VlanQosPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortRedirect is set, it can
// safely use t.GetPortRedirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortRedirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_VlanQosPolicy) GetPortRedirect() bool {
	if t == nil || t.PortRedirect == nil {
		return false
	}
	return *t.PortRedirect
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_VlanQosPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_VlanQosPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortRedirect == nil {
		var v bool = false
		t.PortRedirect = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_VlanQosPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_VlanQosPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_VlanQosPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_VlanQosPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_VlanQosPolicy.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_Qos_VlanQosPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Egress_VlanManipulation represents the /nokia-conf/configure/service/vpls/sap/egress/vlan-manipulation YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Egress_VlanManipulation struct {
	Action E_NokiaTypesServices_VlanManipulationEgressActionType `path:"action" module:"nokia-conf"`
	Tag    E_NokiaTypesServices_VlanManipulationEgressVlanType   `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Egress_VlanManipulation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_VlanManipulation) IsYANGGoStruct() {}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Service_Vpls_Sap_Egress_VlanManipulation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_VlanManipulation) GetAction() E_NokiaTypesServices_VlanManipulationEgressActionType {
	if t == nil || t.Action == 0 {
		return 0
	}
	return t.Action
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Service_Vpls_Sap_Egress_VlanManipulation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_VlanManipulation) GetTag() E_NokiaTypesServices_VlanManipulationEgressVlanType {
	if t == nil || t.Tag == 0 {
		return NokiaTypesServices_VlanManipulationEgressVlanType_null
	}
	return t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Egress_VlanManipulation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_VlanManipulation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Tag == 0 {
		t.Tag = NokiaTypesServices_VlanManipulationEgressVlanType_null
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_VlanManipulation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Egress_VlanManipulation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_VlanManipulation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Egress_VlanManipulation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Egress_VlanManipulation.
func (*NokiaConf_Configure_Service_Vpls_Sap_Egress_VlanManipulation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_EthCfm represents the /nokia-conf/configure/service/vpls/sap/eth-cfm YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_EthCfm struct {
	ApplyGroups              []string                                                                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude       []string                                                                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	CollectLmmFcStats        *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_CollectLmmFcStats                                                         `path:"collect-lmm-fc-stats" module:"nokia-conf"`
	CollectLmmStats          *bool                                                                                                                  `path:"collect-lmm-stats" module:"nokia-conf"`
	Mep                      map[NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Key]*NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep               `path:"mep" module:"nokia-conf"`
	Mip                      map[NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip_PrimaryVlan_Union]*NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip `path:"mip" module:"nokia-conf"`
	SquelchIngressCtagLevels []uint32                                                                                                               `path:"squelch-ingress-ctag-levels" module:"nokia-conf"`
	SquelchIngressLevels     []uint32                                                                                                               `path:"squelch-ingress-levels" module:"nokia-conf"`
	VmepFilter               *bool                                                                                                                  `path:"vmep-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_EthCfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_EthCfm) IsYANGGoStruct() {}

// NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Key represents the key for list Mep of element /nokia-conf/configure/service/vpls/sap/eth-cfm.
type NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Key struct {
	MdAdminName string `path:"md-admin-name"`
	MaAdminName string `path:"ma-admin-name"`
	MepId       uint16 `path:"mep-id"`
}

// NewMep creates a new entry in the Mep list of the
// NokiaConf_Configure_Service_Vpls_Sap_EthCfm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm) NewMep(MdAdminName string, MaAdminName string, MepId uint16) (*NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Key]*NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep)
	}

	key := NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mep[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mep", key)
	}

	t.Mep[key] = &NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep{
		MdAdminName: &MdAdminName,
		MaAdminName: &MaAdminName,
		MepId:       &MepId,
	}

	return t.Mep[key], nil
}

// RenameMep renames an entry in the list Mep within
// the NokiaConf_Configure_Service_Vpls_Sap_EthCfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm) RenameMep(oldK, newK NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Key) error {
	if _, ok := t.Mep[newK]; ok {
		return fmt.Errorf("key %v already exists in Mep", newK)
	}

	e, ok := t.Mep[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mep", oldK)
	}
	e.MdAdminName = &newK.MdAdminName
	e.MaAdminName = &newK.MaAdminName
	e.MepId = &newK.MepId

	t.Mep[newK] = e
	delete(t.Mep, oldK)
	return nil
}

// GetOrCreateMep retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_EthCfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm) GetOrCreateMep(MdAdminName string, MaAdminName string, MepId uint16) *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep {

	key := NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if v, ok := t.Mep[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMep(MdAdminName, MaAdminName, MepId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMep got unexpected error: %v", err))
	}
	return v
}

// GetMep retrieves the value with the specified key from
// the Mep map field of NokiaConf_Configure_Service_Vpls_Sap_EthCfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm) GetMep(MdAdminName string, MaAdminName string, MepId uint16) *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if lm, ok := t.Mep[key]; ok {
		return lm
	}
	return nil
}

// DeleteMep deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_EthCfm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm) DeleteMep(MdAdminName string, MaAdminName string, MepId uint16) {
	key := NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	delete(t.Mep, key)
}

// AppendMep appends the supplied NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep struct to the
// list Mep of NokiaConf_Configure_Service_Vpls_Sap_EthCfm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm) AppendMep(v *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep) error {
	if v.MdAdminName == nil {
		return fmt.Errorf("invalid nil key for MdAdminName")
	}

	if v.MaAdminName == nil {
		return fmt.Errorf("invalid nil key for MaAdminName")
	}

	if v.MepId == nil {
		return fmt.Errorf("invalid nil key for MepId")
	}

	key := NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Key{
		MdAdminName: *v.MdAdminName,
		MaAdminName: *v.MaAdminName,
		MepId:       *v.MepId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Key]*NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep)
	}

	if _, ok := t.Mep[key]; ok {
		return fmt.Errorf("duplicate key for list Mep %v", key)
	}

	t.Mep[key] = v
	return nil
}

// NewMip creates a new entry in the Mip list of the
// NokiaConf_Configure_Service_Vpls_Sap_EthCfm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm) NewMip(PrimaryVlan NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip_PrimaryVlan_Union) (*NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mip == nil {
		t.Mip = make(map[NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip_PrimaryVlan_Union]*NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip)
	}

	key := PrimaryVlan

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mip[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mip", key)
	}

	t.Mip[key] = &NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip{
		PrimaryVlan: PrimaryVlan,
	}

	return t.Mip[key], nil
}

// RenameMip renames an entry in the list Mip within
// the NokiaConf_Configure_Service_Vpls_Sap_EthCfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm) RenameMip(oldK, newK NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip_PrimaryVlan_Union) error {
	if _, ok := t.Mip[newK]; ok {
		return fmt.Errorf("key %v already exists in Mip", newK)
	}

	e, ok := t.Mip[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mip", oldK)
	}
	e.PrimaryVlan = newK

	t.Mip[newK] = e
	delete(t.Mip, oldK)
	return nil
}

// GetOrCreateMip retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_EthCfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm) GetOrCreateMip(PrimaryVlan NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip_PrimaryVlan_Union) *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip {

	key := PrimaryVlan

	if v, ok := t.Mip[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMip(PrimaryVlan)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMip got unexpected error: %v", err))
	}
	return v
}

// GetMip retrieves the value with the specified key from
// the Mip map field of NokiaConf_Configure_Service_Vpls_Sap_EthCfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm) GetMip(PrimaryVlan NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip_PrimaryVlan_Union) *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip {

	if t == nil {
		return nil
	}

	key := PrimaryVlan

	if lm, ok := t.Mip[key]; ok {
		return lm
	}
	return nil
}

// DeleteMip deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_EthCfm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm) DeleteMip(PrimaryVlan NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip_PrimaryVlan_Union) {
	key := PrimaryVlan

	delete(t.Mip, key)
}

// AppendMip appends the supplied NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip struct to the
// list Mip of NokiaConf_Configure_Service_Vpls_Sap_EthCfm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm) AppendMip(v *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip) error {
	key := v.PrimaryVlan

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mip == nil {
		t.Mip = make(map[NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip_PrimaryVlan_Union]*NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip)
	}

	if _, ok := t.Mip[key]; ok {
		return fmt.Errorf("duplicate key for list Mip %v", key)
	}

	t.Mip[key] = v
	return nil
}

// GetOrCreateCollectLmmFcStats retrieves the value of the CollectLmmFcStats field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm) GetOrCreateCollectLmmFcStats() *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_CollectLmmFcStats {
	if t.CollectLmmFcStats != nil {
		return t.CollectLmmFcStats
	}
	t.CollectLmmFcStats = &NokiaConf_Configure_Service_Vpls_Sap_EthCfm_CollectLmmFcStats{}
	return t.CollectLmmFcStats
}

// GetCollectLmmFcStats returns the value of the CollectLmmFcStats struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_EthCfm. If the receiver or the field CollectLmmFcStats is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm) GetCollectLmmFcStats() *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_CollectLmmFcStats {
	if t != nil && t.CollectLmmFcStats != nil {
		return t.CollectLmmFcStats
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCollectLmmStats retrieves the value of the leaf CollectLmmStats from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectLmmStats is set, it can
// safely use t.GetCollectLmmStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectLmmStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm) GetCollectLmmStats() bool {
	if t == nil || t.CollectLmmStats == nil {
		return false
	}
	return *t.CollectLmmStats
}

// GetSquelchIngressCtagLevels retrieves the value of the leaf SquelchIngressCtagLevels from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SquelchIngressCtagLevels is set, it can
// safely use t.GetSquelchIngressCtagLevels() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SquelchIngressCtagLevels == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm) GetSquelchIngressCtagLevels() []uint32 {
	if t == nil || t.SquelchIngressCtagLevels == nil {
		return nil
	}
	return t.SquelchIngressCtagLevels
}

// GetSquelchIngressLevels retrieves the value of the leaf SquelchIngressLevels from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SquelchIngressLevels is set, it can
// safely use t.GetSquelchIngressLevels() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SquelchIngressLevels == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm) GetSquelchIngressLevels() []uint32 {
	if t == nil || t.SquelchIngressLevels == nil {
		return nil
	}
	return t.SquelchIngressLevels
}

// GetVmepFilter retrieves the value of the leaf VmepFilter from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VmepFilter is set, it can
// safely use t.GetVmepFilter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VmepFilter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm) GetVmepFilter() bool {
	if t == nil || t.VmepFilter == nil {
		return false
	}
	return *t.VmepFilter
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_EthCfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectLmmStats == nil {
		var v bool = false
		t.CollectLmmStats = &v
	}
	if t.VmepFilter == nil {
		var v bool = false
		t.VmepFilter = &v
	}
	t.CollectLmmFcStats.PopulateDefaults()
	for _, e := range t.Mep {
		e.PopulateDefaults()
	}
	for _, e := range t.Mip {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_EthCfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_EthCfm.
func (*NokiaConf_Configure_Service_Vpls_Sap_EthCfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_EthCfm_CollectLmmFcStats represents the /nokia-conf/configure/service/vpls/sap/eth-cfm/collect-lmm-fc-stats YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_EthCfm_CollectLmmFcStats struct {
	Fc          []E_NokiaTypesEthCfm_FcType `path:"fc" module:"nokia-conf"`
	FcInProfile []E_NokiaTypesEthCfm_FcType `path:"fc-in-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_EthCfm_CollectLmmFcStats implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_EthCfm_CollectLmmFcStats) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_CollectLmmFcStats
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_CollectLmmFcStats) GetFc() []E_NokiaTypesEthCfm_FcType {
	if t == nil || t.Fc == nil {
		return nil
	}
	return t.Fc
}

// GetFcInProfile retrieves the value of the leaf FcInProfile from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_CollectLmmFcStats
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcInProfile is set, it can
// safely use t.GetFcInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcInProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_CollectLmmFcStats) GetFcInProfile() []E_NokiaTypesEthCfm_FcType {
	if t == nil || t.FcInProfile == nil {
		return nil
	}
	return t.FcInProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_CollectLmmFcStats
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_CollectLmmFcStats) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_CollectLmmFcStats) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_EthCfm_CollectLmmFcStats"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_CollectLmmFcStats) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_CollectLmmFcStats) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_EthCfm_CollectLmmFcStats.
func (*NokiaConf_Configure_Service_Vpls_Sap_EthCfm_CollectLmmFcStats) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep represents the /nokia-conf/configure/service/vpls/sap/eth-cfm/mep YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep struct {
	AdminState           E_NokiaTypesSros_AdminState                                        `path:"admin-state" module:"nokia-conf"`
	Ais                  *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Ais               `path:"ais" module:"nokia-conf" yangPresence:"true"`
	AlarmNotification    *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_AlarmNotification `path:"alarm-notification" module:"nokia-conf"`
	ApplyGroups          []string                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Ccm                  *bool                                                              `path:"ccm" module:"nokia-conf"`
	CcmLtmPriority       *uint8                                                             `path:"ccm-ltm-priority" module:"nokia-conf"`
	CcmPaddingSize       *uint32                                                            `path:"ccm-padding-size" module:"nokia-conf"`
	CfmVlanTag           *string                                                            `path:"cfm-vlan-tag" module:"nokia-conf"`
	Csf                  *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Csf               `path:"csf" module:"nokia-conf" yangPresence:"true"`
	Description          *string                                                            `path:"description" module:"nokia-conf"`
	Direction            E_NokiaTypesEthCfm_MpDirection                                     `path:"direction" module:"nokia-conf"`
	EthTest              *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest           `path:"eth-test" module:"nokia-conf" yangPresence:"true"`
	FaultPropagation     E_NokiaTypesEthCfm_FaultPropagationType                            `path:"fault-propagation" module:"nokia-conf"`
	Grace                *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace             `path:"grace" module:"nokia-conf"`
	InstallMep           *bool                                                              `path:"install-mep" module:"nokia-conf"`
	LbmSvcActResponder   *bool                                                              `path:"lbm-svc-act-responder" module:"nokia-conf"`
	LowPriorityDefect    E_NokiaTypesEthCfm_LowestAlarmPriority                             `path:"low-priority-defect" module:"nokia-conf"`
	MaAdminName          *string                                                            `path:"ma-admin-name" module:"nokia-conf"`
	MacAddress           *string                                                            `path:"mac-address" module:"nokia-conf"`
	MdAdminName          *string                                                            `path:"md-admin-name" module:"nokia-conf"`
	MepId                *uint16                                                            `path:"mep-id" module:"nokia-conf"`
	OneWayDelayThreshold *uint32                                                            `path:"one-way-delay-threshold" module:"nokia-conf"`
	PrimaryVlan          *bool                                                              `path:"primary-vlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep) IsYANGGoStruct() {}

// GetOrCreateAis retrieves the value of the Ais field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep) GetOrCreateAis() *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Ais {
	if t.Ais != nil {
		return t.Ais
	}
	t.Ais = &NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Ais{}
	return t.Ais
}

// GetOrCreateAlarmNotification retrieves the value of the AlarmNotification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep) GetOrCreateAlarmNotification() *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_AlarmNotification {
	if t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	t.AlarmNotification = &NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_AlarmNotification{}
	return t.AlarmNotification
}

// GetOrCreateCsf retrieves the value of the Csf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep) GetOrCreateCsf() *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Csf {
	if t.Csf != nil {
		return t.Csf
	}
	t.Csf = &NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Csf{}
	return t.Csf
}

// GetOrCreateEthTest retrieves the value of the EthTest field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep) GetOrCreateEthTest() *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest {
	if t.EthTest != nil {
		return t.EthTest
	}
	t.EthTest = &NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest{}
	return t.EthTest
}

// GetOrCreateGrace retrieves the value of the Grace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep) GetOrCreateGrace() *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace {
	if t.Grace != nil {
		return t.Grace
	}
	t.Grace = &NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace{}
	return t.Grace
}

// GetAis returns the value of the Ais struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep. If the receiver or the field Ais is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep) GetAis() *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Ais {
	if t != nil && t.Ais != nil {
		return t.Ais
	}
	return nil
}

// GetAlarmNotification returns the value of the AlarmNotification struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep. If the receiver or the field AlarmNotification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep) GetAlarmNotification() *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_AlarmNotification {
	if t != nil && t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	return nil
}

// GetCsf returns the value of the Csf struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep. If the receiver or the field Csf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep) GetCsf() *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Csf {
	if t != nil && t.Csf != nil {
		return t.Csf
	}
	return nil
}

// GetEthTest returns the value of the EthTest struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep. If the receiver or the field EthTest is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep) GetEthTest() *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest {
	if t != nil && t.EthTest != nil {
		return t.EthTest
	}
	return nil
}

// GetGrace returns the value of the Grace struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep. If the receiver or the field Grace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep) GetGrace() *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace {
	if t != nil && t.Grace != nil {
		return t.Grace
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCcm retrieves the value of the leaf Ccm from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ccm is set, it can
// safely use t.GetCcm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ccm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep) GetCcm() bool {
	if t == nil || t.Ccm == nil {
		return false
	}
	return *t.Ccm
}

// GetCcmLtmPriority retrieves the value of the leaf CcmLtmPriority from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmLtmPriority is set, it can
// safely use t.GetCcmLtmPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmLtmPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep) GetCcmLtmPriority() uint8 {
	if t == nil || t.CcmLtmPriority == nil {
		return 7
	}
	return *t.CcmLtmPriority
}

// GetCcmPaddingSize retrieves the value of the leaf CcmPaddingSize from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmPaddingSize is set, it can
// safely use t.GetCcmPaddingSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmPaddingSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep) GetCcmPaddingSize() uint32 {
	if t == nil || t.CcmPaddingSize == nil {
		return 0
	}
	return *t.CcmPaddingSize
}

// GetCfmVlanTag retrieves the value of the leaf CfmVlanTag from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CfmVlanTag is set, it can
// safely use t.GetCfmVlanTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CfmVlanTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep) GetCfmVlanTag() string {
	if t == nil || t.CfmVlanTag == nil {
		return ""
	}
	return *t.CfmVlanTag
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep) GetDirection() E_NokiaTypesEthCfm_MpDirection {
	if t == nil || t.Direction == 0 {
		return NokiaTypesEthCfm_MpDirection_down
	}
	return t.Direction
}

// GetFaultPropagation retrieves the value of the leaf FaultPropagation from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FaultPropagation is set, it can
// safely use t.GetFaultPropagation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FaultPropagation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep) GetFaultPropagation() E_NokiaTypesEthCfm_FaultPropagationType {
	if t == nil || t.FaultPropagation == 0 {
		return 0
	}
	return t.FaultPropagation
}

// GetInstallMep retrieves the value of the leaf InstallMep from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstallMep is set, it can
// safely use t.GetInstallMep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstallMep == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep) GetInstallMep() bool {
	if t == nil || t.InstallMep == nil {
		return false
	}
	return *t.InstallMep
}

// GetLbmSvcActResponder retrieves the value of the leaf LbmSvcActResponder from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LbmSvcActResponder is set, it can
// safely use t.GetLbmSvcActResponder() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LbmSvcActResponder == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep) GetLbmSvcActResponder() bool {
	if t == nil || t.LbmSvcActResponder == nil {
		return false
	}
	return *t.LbmSvcActResponder
}

// GetLowPriorityDefect retrieves the value of the leaf LowPriorityDefect from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPriorityDefect is set, it can
// safely use t.GetLowPriorityDefect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPriorityDefect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep) GetLowPriorityDefect() E_NokiaTypesEthCfm_LowestAlarmPriority {
	if t == nil || t.LowPriorityDefect == 0 {
		return NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	return t.LowPriorityDefect
}

// GetMaAdminName retrieves the value of the leaf MaAdminName from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaAdminName is set, it can
// safely use t.GetMaAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep) GetMaAdminName() string {
	if t == nil || t.MaAdminName == nil {
		return ""
	}
	return *t.MaAdminName
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetMdAdminName retrieves the value of the leaf MdAdminName from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdAdminName is set, it can
// safely use t.GetMdAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep) GetMdAdminName() string {
	if t == nil || t.MdAdminName == nil {
		return ""
	}
	return *t.MdAdminName
}

// GetMepId retrieves the value of the leaf MepId from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MepId is set, it can
// safely use t.GetMepId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MepId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep) GetMepId() uint16 {
	if t == nil || t.MepId == nil {
		return 0
	}
	return *t.MepId
}

// GetOneWayDelayThreshold retrieves the value of the leaf OneWayDelayThreshold from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OneWayDelayThreshold is set, it can
// safely use t.GetOneWayDelayThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OneWayDelayThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep) GetOneWayDelayThreshold() uint32 {
	if t == nil || t.OneWayDelayThreshold == nil {
		return 3
	}
	return *t.OneWayDelayThreshold
}

// GetPrimaryVlan retrieves the value of the leaf PrimaryVlan from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrimaryVlan is set, it can
// safely use t.GetPrimaryVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrimaryVlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep) GetPrimaryVlan() bool {
	if t == nil || t.PrimaryVlan == nil {
		return false
	}
	return *t.PrimaryVlan
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Ccm == nil {
		var v bool = false
		t.Ccm = &v
	}
	if t.CcmLtmPriority == nil {
		var v uint8 = 7
		t.CcmLtmPriority = &v
	}
	if t.Direction == 0 {
		t.Direction = NokiaTypesEthCfm_MpDirection_down
	}
	if t.InstallMep == nil {
		var v bool = false
		t.InstallMep = &v
	}
	if t.LowPriorityDefect == 0 {
		t.LowPriorityDefect = NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	if t.OneWayDelayThreshold == nil {
		var v uint32 = 3
		t.OneWayDelayThreshold = &v
	}
	if t.PrimaryVlan == nil {
		var v bool = false
		t.PrimaryVlan = &v
	}
	t.Ais.PopulateDefaults()
	t.AlarmNotification.PopulateDefaults()
	t.Csf.PopulateDefaults()
	t.EthTest.PopulateDefaults()
	t.Grace.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MaAdminName == nil {
		return nil, fmt.Errorf("nil value for key MaAdminName")
	}

	if t.MdAdminName == nil {
		return nil, fmt.Errorf("nil value for key MdAdminName")
	}

	if t.MepId == nil {
		return nil, fmt.Errorf("nil value for key MepId")
	}

	return map[string]interface{}{
		"ma-admin-name": *t.MaAdminName,
		"md-admin-name": *t.MdAdminName,
		"mep-id":        *t.MepId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep.
func (*NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Ais represents the /nokia-conf/configure/service/vpls/sap/eth-cfm/mep/ais YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Ais struct {
	ClientMegLevel    []uint32                                                                `path:"client-meg-level" module:"nokia-conf"`
	InterfaceSupport  *bool                                                                   `path:"interface-support" module:"nokia-conf"`
	Interval          *uint32                                                                 `path:"interval" module:"nokia-conf"`
	LowPriorityDefect E_NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Ais_LowPriorityDefect `path:"low-priority-defect" module:"nokia-conf"`
	Priority          *uint8                                                                  `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Ais implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Ais) IsYANGGoStruct() {}

// GetClientMegLevel retrieves the value of the leaf ClientMegLevel from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientMegLevel is set, it can
// safely use t.GetClientMegLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientMegLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Ais) GetClientMegLevel() []uint32 {
	if t == nil || t.ClientMegLevel == nil {
		return nil
	}
	return t.ClientMegLevel
}

// GetInterfaceSupport retrieves the value of the leaf InterfaceSupport from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceSupport is set, it can
// safely use t.GetInterfaceSupport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceSupport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Ais) GetInterfaceSupport() bool {
	if t == nil || t.InterfaceSupport == nil {
		return false
	}
	return *t.InterfaceSupport
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Ais) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 1
	}
	return *t.Interval
}

// GetLowPriorityDefect retrieves the value of the leaf LowPriorityDefect from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPriorityDefect is set, it can
// safely use t.GetLowPriorityDefect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPriorityDefect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Ais) GetLowPriorityDefect() E_NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Ais_LowPriorityDefect {
	if t == nil || t.LowPriorityDefect == 0 {
		return NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Ais_LowPriorityDefect_all_def
	}
	return t.LowPriorityDefect
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Ais) GetPriority() uint8 {
	if t == nil || t.Priority == nil {
		return 7
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Ais
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Ais) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InterfaceSupport == nil {
		var v bool = false
		t.InterfaceSupport = &v
	}
	if t.Interval == nil {
		var v uint32 = 1
		t.Interval = &v
	}
	if t.LowPriorityDefect == 0 {
		t.LowPriorityDefect = NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Ais_LowPriorityDefect_all_def
	}
	if t.Priority == nil {
		var v uint8 = 7
		t.Priority = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Ais) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Ais"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Ais) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Ais) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Ais.
func (*NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Ais) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_AlarmNotification represents the /nokia-conf/configure/service/vpls/sap/eth-cfm/mep/alarm-notification YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_AlarmNotification struct {
	FngAlarmTime *int32 `path:"fng-alarm-time" module:"nokia-conf"`
	FngResetTime *int32 `path:"fng-reset-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_AlarmNotification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_AlarmNotification) IsYANGGoStruct() {}

// GetFngAlarmTime retrieves the value of the leaf FngAlarmTime from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngAlarmTime is set, it can
// safely use t.GetFngAlarmTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngAlarmTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_AlarmNotification) GetFngAlarmTime() int32 {
	if t == nil || t.FngAlarmTime == nil {
		return 0
	}
	return *t.FngAlarmTime
}

// GetFngResetTime retrieves the value of the leaf FngResetTime from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngResetTime is set, it can
// safely use t.GetFngResetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngResetTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_AlarmNotification) GetFngResetTime() int32 {
	if t == nil || t.FngResetTime == nil {
		return 0
	}
	return *t.FngResetTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_AlarmNotification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_AlarmNotification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_AlarmNotification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_AlarmNotification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_AlarmNotification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_AlarmNotification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_AlarmNotification.
func (*NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_AlarmNotification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Csf represents the /nokia-conf/configure/service/vpls/sap/eth-cfm/mep/csf YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Csf struct {
	Multiplier *float64 `path:"multiplier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Csf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Csf) IsYANGGoStruct() {}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Csf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Csf) GetMultiplier() float64 {
	if t == nil || t.Multiplier == nil {
		return 3.5
	}
	return *t.Multiplier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Csf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Csf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v float64 = 3.5
		t.Multiplier = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Csf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Csf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Csf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Csf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Csf.
func (*NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Csf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest represents the /nokia-conf/configure/service/vpls/sap/eth-cfm/mep/eth-test YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest struct {
	BitErrorThreshold *uint32                                                              `path:"bit-error-threshold" module:"nokia-conf"`
	TestPattern       *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest_TestPattern `path:"test-pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest) IsYANGGoStruct() {}

// GetOrCreateTestPattern retrieves the value of the TestPattern field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest) GetOrCreateTestPattern() *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest_TestPattern {
	if t.TestPattern != nil {
		return t.TestPattern
	}
	t.TestPattern = &NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest_TestPattern{}
	return t.TestPattern
}

// GetTestPattern returns the value of the TestPattern struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest. If the receiver or the field TestPattern is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest) GetTestPattern() *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest_TestPattern {
	if t != nil && t.TestPattern != nil {
		return t.TestPattern
	}
	return nil
}

// GetBitErrorThreshold retrieves the value of the leaf BitErrorThreshold from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitErrorThreshold is set, it can
// safely use t.GetBitErrorThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitErrorThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest) GetBitErrorThreshold() uint32 {
	if t == nil || t.BitErrorThreshold == nil {
		return 1
	}
	return *t.BitErrorThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BitErrorThreshold == nil {
		var v uint32 = 1
		t.BitErrorThreshold = &v
	}
	t.TestPattern.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest.
func (*NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest_TestPattern represents the /nokia-conf/configure/service/vpls/sap/eth-cfm/mep/eth-test/test-pattern YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest_TestPattern struct {
	CrcTlv  *bool                                                                         `path:"crc-tlv" module:"nokia-conf"`
	Pattern E_NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest_TestPattern_Pattern `path:"pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest_TestPattern implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest_TestPattern) IsYANGGoStruct() {}

// GetCrcTlv retrieves the value of the leaf CrcTlv from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CrcTlv is set, it can
// safely use t.GetCrcTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CrcTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest_TestPattern) GetCrcTlv() bool {
	if t == nil || t.CrcTlv == nil {
		return false
	}
	return *t.CrcTlv
}

// GetPattern retrieves the value of the leaf Pattern from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pattern is set, it can
// safely use t.GetPattern() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pattern == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest_TestPattern) GetPattern() E_NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest_TestPattern_Pattern {
	if t == nil || t.Pattern == 0 {
		return NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
	return t.Pattern
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest_TestPattern
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest_TestPattern) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CrcTlv == nil {
		var v bool = false
		t.CrcTlv = &v
	}
	if t.Pattern == 0 {
		t.Pattern = NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest_TestPattern) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest_TestPattern"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest_TestPattern) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest_TestPattern) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest_TestPattern.
func (*NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_EthTest_TestPattern) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace represents the /nokia-conf/configure/service/vpls/sap/eth-cfm/mep/grace YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace struct {
	EthEd       *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthEd       `path:"eth-ed" module:"nokia-conf"`
	EthVsmGrace *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthVsmGrace `path:"eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace) IsYANGGoStruct() {}

// GetOrCreateEthEd retrieves the value of the EthEd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace) GetOrCreateEthEd() *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthEd {
	if t.EthEd != nil {
		return t.EthEd
	}
	t.EthEd = &NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthEd{}
	return t.EthEd
}

// GetOrCreateEthVsmGrace retrieves the value of the EthVsmGrace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace) GetOrCreateEthVsmGrace() *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthVsmGrace {
	if t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	t.EthVsmGrace = &NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthVsmGrace{}
	return t.EthVsmGrace
}

// GetEthEd returns the value of the EthEd struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace. If the receiver or the field EthEd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace) GetEthEd() *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthEd {
	if t != nil && t.EthEd != nil {
		return t.EthEd
	}
	return nil
}

// GetEthVsmGrace returns the value of the EthVsmGrace struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace. If the receiver or the field EthVsmGrace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace) GetEthVsmGrace() *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthVsmGrace {
	if t != nil && t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthEd.PopulateDefaults()
	t.EthVsmGrace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace.
func (*NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthEd represents the /nokia-conf/configure/service/vpls/sap/eth-cfm/mep/grace/eth-ed YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthEd struct {
	MaxRxDefectWindow *uint32 `path:"max-rx-defect-window" module:"nokia-conf"`
	Priority          *int32  `path:"priority" module:"nokia-conf"`
	RxEthEd           *bool   `path:"rx-eth-ed" module:"nokia-conf"`
	TxEthEd           *bool   `path:"tx-eth-ed" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthEd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthEd) IsYANGGoStruct() {}

// GetMaxRxDefectWindow retrieves the value of the leaf MaxRxDefectWindow from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRxDefectWindow is set, it can
// safely use t.GetMaxRxDefectWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRxDefectWindow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthEd) GetMaxRxDefectWindow() uint32 {
	if t == nil || t.MaxRxDefectWindow == nil {
		return 0
	}
	return *t.MaxRxDefectWindow
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthEd) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetRxEthEd retrieves the value of the leaf RxEthEd from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthEd is set, it can
// safely use t.GetRxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthEd) GetRxEthEd() bool {
	if t == nil || t.RxEthEd == nil {
		return true
	}
	return *t.RxEthEd
}

// GetTxEthEd retrieves the value of the leaf TxEthEd from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthEd is set, it can
// safely use t.GetTxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthEd) GetTxEthEd() bool {
	if t == nil || t.TxEthEd == nil {
		return false
	}
	return *t.TxEthEd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthEd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthEd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthEd == nil {
		var v bool = true
		t.RxEthEd = &v
	}
	if t.TxEthEd == nil {
		var v bool = false
		t.TxEthEd = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthEd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthEd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthEd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthEd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthEd.
func (*NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthEd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthVsmGrace represents the /nokia-conf/configure/service/vpls/sap/eth-cfm/mep/grace/eth-vsm-grace YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthVsmGrace struct {
	RxEthVsmGrace *bool `path:"rx-eth-vsm-grace" module:"nokia-conf"`
	TxEthVsmGrace *bool `path:"tx-eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthVsmGrace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthVsmGrace) IsYANGGoStruct() {}

// GetRxEthVsmGrace retrieves the value of the leaf RxEthVsmGrace from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthVsmGrace is set, it can
// safely use t.GetRxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthVsmGrace) GetRxEthVsmGrace() bool {
	if t == nil || t.RxEthVsmGrace == nil {
		return true
	}
	return *t.RxEthVsmGrace
}

// GetTxEthVsmGrace retrieves the value of the leaf TxEthVsmGrace from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthVsmGrace is set, it can
// safely use t.GetTxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthVsmGrace) GetTxEthVsmGrace() bool {
	if t == nil || t.TxEthVsmGrace == nil {
		return true
	}
	return *t.TxEthVsmGrace
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthVsmGrace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthVsmGrace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthVsmGrace == nil {
		var v bool = true
		t.RxEthVsmGrace = &v
	}
	if t.TxEthVsmGrace == nil {
		var v bool = true
		t.TxEthVsmGrace = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthVsmGrace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthVsmGrace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthVsmGrace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthVsmGrace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthVsmGrace.
func (*NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mep_Grace_EthVsmGrace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip represents the /nokia-conf/configure/service/vpls/sap/eth-cfm/mip YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip struct {
	ApplyGroups        []string                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	CfmVlanTag         *string                                                           `path:"cfm-vlan-tag" module:"nokia-conf"`
	MacAddress         *string                                                           `path:"mac-address" module:"nokia-conf"`
	PrimaryVlan        NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip_PrimaryVlan_Union `path:"primary-vlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCfmVlanTag retrieves the value of the leaf CfmVlanTag from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CfmVlanTag is set, it can
// safely use t.GetCfmVlanTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CfmVlanTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip) GetCfmVlanTag() string {
	if t == nil || t.CfmVlanTag == nil {
		return ""
	}
	return *t.CfmVlanTag
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetPrimaryVlan retrieves the value of the leaf PrimaryVlan from the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrimaryVlan is set, it can
// safely use t.GetPrimaryVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrimaryVlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip) GetPrimaryVlan() NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip_PrimaryVlan_Union {
	if t == nil || t.PrimaryVlan == nil {
		return nil
	}
	return t.PrimaryVlan
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"primary-vlan": t.PrimaryVlan,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip.
func (*NokiaConf_Configure_Service_Vpls_Sap_EthCfm_Mip) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_EtreeRootLeafTag represents the /nokia-conf/configure/service/vpls/sap/etree-root-leaf-tag YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_EtreeRootLeafTag struct {
	Leaf *int32 `path:"leaf" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_EtreeRootLeafTag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_EtreeRootLeafTag) IsYANGGoStruct() {}

// GetLeaf retrieves the value of the leaf Leaf from the NokiaConf_Configure_Service_Vpls_Sap_EtreeRootLeafTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Leaf is set, it can
// safely use t.GetLeaf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Leaf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EtreeRootLeafTag) GetLeaf() int32 {
	if t == nil || t.Leaf == nil {
		return 0
	}
	return *t.Leaf
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_EtreeRootLeafTag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EtreeRootLeafTag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EtreeRootLeafTag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_EtreeRootLeafTag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EtreeRootLeafTag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_EtreeRootLeafTag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_EtreeRootLeafTag.
func (*NokiaConf_Configure_Service_Vpls_Sap_EtreeRootLeafTag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Fdb represents the /nokia-conf/configure/service/vpls/sap/fdb YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Fdb struct {
	AutoLearnMacProtect            *bool                                                  `path:"auto-learn-mac-protect" module:"nokia-conf"`
	AutoLearnMacProtectExcludeList *string                                                `path:"auto-learn-mac-protect-exclude-list" module:"nokia-conf"`
	DiscardUnknownSource           *bool                                                  `path:"discard-unknown-source" module:"nokia-conf"`
	DiscardUnprotectedDestMac      *bool                                                  `path:"discard-unprotected-dest-mac" module:"nokia-conf"`
	LimitMacMove                   E_NokiaTypesServices_LimitMacMove                      `path:"limit-mac-move" module:"nokia-conf"`
	MacLearning                    *NokiaConf_Configure_Service_Vpls_Sap_Fdb_MacLearning  `path:"mac-learning" module:"nokia-conf"`
	MacPinning                     *bool                                                  `path:"mac-pinning" module:"nokia-conf"`
	MaximumMacAddresses            *int32                                                 `path:"maximum-mac-addresses" module:"nokia-conf"`
	ProtectedSrcMacViolationAction E_NokiaTypesServices_SapProtectedSrcMacViolationAction `path:"protected-src-mac-violation-action" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Fdb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Fdb) IsYANGGoStruct() {}

// GetOrCreateMacLearning retrieves the value of the MacLearning field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Fdb) GetOrCreateMacLearning() *NokiaConf_Configure_Service_Vpls_Sap_Fdb_MacLearning {
	if t.MacLearning != nil {
		return t.MacLearning
	}
	t.MacLearning = &NokiaConf_Configure_Service_Vpls_Sap_Fdb_MacLearning{}
	return t.MacLearning
}

// GetMacLearning returns the value of the MacLearning struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Fdb. If the receiver or the field MacLearning is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Fdb) GetMacLearning() *NokiaConf_Configure_Service_Vpls_Sap_Fdb_MacLearning {
	if t != nil && t.MacLearning != nil {
		return t.MacLearning
	}
	return nil
}

// GetAutoLearnMacProtect retrieves the value of the leaf AutoLearnMacProtect from the NokiaConf_Configure_Service_Vpls_Sap_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoLearnMacProtect is set, it can
// safely use t.GetAutoLearnMacProtect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoLearnMacProtect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Fdb) GetAutoLearnMacProtect() bool {
	if t == nil || t.AutoLearnMacProtect == nil {
		return false
	}
	return *t.AutoLearnMacProtect
}

// GetAutoLearnMacProtectExcludeList retrieves the value of the leaf AutoLearnMacProtectExcludeList from the NokiaConf_Configure_Service_Vpls_Sap_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoLearnMacProtectExcludeList is set, it can
// safely use t.GetAutoLearnMacProtectExcludeList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoLearnMacProtectExcludeList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Fdb) GetAutoLearnMacProtectExcludeList() string {
	if t == nil || t.AutoLearnMacProtectExcludeList == nil {
		return ""
	}
	return *t.AutoLearnMacProtectExcludeList
}

// GetDiscardUnknownSource retrieves the value of the leaf DiscardUnknownSource from the NokiaConf_Configure_Service_Vpls_Sap_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiscardUnknownSource is set, it can
// safely use t.GetDiscardUnknownSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiscardUnknownSource == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Fdb) GetDiscardUnknownSource() bool {
	if t == nil || t.DiscardUnknownSource == nil {
		return false
	}
	return *t.DiscardUnknownSource
}

// GetDiscardUnprotectedDestMac retrieves the value of the leaf DiscardUnprotectedDestMac from the NokiaConf_Configure_Service_Vpls_Sap_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiscardUnprotectedDestMac is set, it can
// safely use t.GetDiscardUnprotectedDestMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiscardUnprotectedDestMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Fdb) GetDiscardUnprotectedDestMac() bool {
	if t == nil || t.DiscardUnprotectedDestMac == nil {
		return false
	}
	return *t.DiscardUnprotectedDestMac
}

// GetLimitMacMove retrieves the value of the leaf LimitMacMove from the NokiaConf_Configure_Service_Vpls_Sap_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LimitMacMove is set, it can
// safely use t.GetLimitMacMove() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LimitMacMove == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Fdb) GetLimitMacMove() E_NokiaTypesServices_LimitMacMove {
	if t == nil || t.LimitMacMove == 0 {
		return NokiaTypesServices_LimitMacMove_blockable
	}
	return t.LimitMacMove
}

// GetMacPinning retrieves the value of the leaf MacPinning from the NokiaConf_Configure_Service_Vpls_Sap_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacPinning is set, it can
// safely use t.GetMacPinning() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacPinning == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Fdb) GetMacPinning() bool {
	if t == nil || t.MacPinning == nil {
		return false
	}
	return *t.MacPinning
}

// GetMaximumMacAddresses retrieves the value of the leaf MaximumMacAddresses from the NokiaConf_Configure_Service_Vpls_Sap_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumMacAddresses is set, it can
// safely use t.GetMaximumMacAddresses() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumMacAddresses == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Fdb) GetMaximumMacAddresses() int32 {
	if t == nil || t.MaximumMacAddresses == nil {
		return 0
	}
	return *t.MaximumMacAddresses
}

// GetProtectedSrcMacViolationAction retrieves the value of the leaf ProtectedSrcMacViolationAction from the NokiaConf_Configure_Service_Vpls_Sap_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtectedSrcMacViolationAction is set, it can
// safely use t.GetProtectedSrcMacViolationAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtectedSrcMacViolationAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Fdb) GetProtectedSrcMacViolationAction() E_NokiaTypesServices_SapProtectedSrcMacViolationAction {
	if t == nil || t.ProtectedSrcMacViolationAction == 0 {
		return 0
	}
	return t.ProtectedSrcMacViolationAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Fdb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Fdb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AutoLearnMacProtect == nil {
		var v bool = false
		t.AutoLearnMacProtect = &v
	}
	if t.DiscardUnknownSource == nil {
		var v bool = false
		t.DiscardUnknownSource = &v
	}
	if t.DiscardUnprotectedDestMac == nil {
		var v bool = false
		t.DiscardUnprotectedDestMac = &v
	}
	if t.LimitMacMove == 0 {
		t.LimitMacMove = NokiaTypesServices_LimitMacMove_blockable
	}
	if t.MacPinning == nil {
		var v bool = false
		t.MacPinning = &v
	}
	t.MacLearning.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Fdb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Fdb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Fdb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Fdb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Fdb.
func (*NokiaConf_Configure_Service_Vpls_Sap_Fdb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Fdb_MacLearning represents the /nokia-conf/configure/service/vpls/sap/fdb/mac-learning YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Fdb_MacLearning struct {
	Aging    *bool `path:"aging" module:"nokia-conf"`
	Learning *bool `path:"learning" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Fdb_MacLearning implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Fdb_MacLearning) IsYANGGoStruct() {}

// GetAging retrieves the value of the leaf Aging from the NokiaConf_Configure_Service_Vpls_Sap_Fdb_MacLearning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aging is set, it can
// safely use t.GetAging() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aging == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Fdb_MacLearning) GetAging() bool {
	if t == nil || t.Aging == nil {
		return true
	}
	return *t.Aging
}

// GetLearning retrieves the value of the leaf Learning from the NokiaConf_Configure_Service_Vpls_Sap_Fdb_MacLearning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Learning is set, it can
// safely use t.GetLearning() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Learning == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Fdb_MacLearning) GetLearning() bool {
	if t == nil || t.Learning == nil {
		return true
	}
	return *t.Learning
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Fdb_MacLearning
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Fdb_MacLearning) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Aging == nil {
		var v bool = true
		t.Aging = &v
	}
	if t.Learning == nil {
		var v bool = true
		t.Learning = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Fdb_MacLearning) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Fdb_MacLearning"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Fdb_MacLearning) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Fdb_MacLearning) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Fdb_MacLearning.
func (*NokiaConf_Configure_Service_Vpls_Sap_Fdb_MacLearning) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_IVplsMacFlush represents the /nokia-conf/configure/service/vpls/sap/i-vpls-mac-flush YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_IVplsMacFlush struct {
	BgpEvpn *NokiaConf_Configure_Service_Vpls_Sap_IVplsMacFlush_BgpEvpn `path:"bgp-evpn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_IVplsMacFlush implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_IVplsMacFlush) IsYANGGoStruct() {}

// GetOrCreateBgpEvpn retrieves the value of the BgpEvpn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IVplsMacFlush) GetOrCreateBgpEvpn() *NokiaConf_Configure_Service_Vpls_Sap_IVplsMacFlush_BgpEvpn {
	if t.BgpEvpn != nil {
		return t.BgpEvpn
	}
	t.BgpEvpn = &NokiaConf_Configure_Service_Vpls_Sap_IVplsMacFlush_BgpEvpn{}
	return t.BgpEvpn
}

// GetBgpEvpn returns the value of the BgpEvpn struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_IVplsMacFlush. If the receiver or the field BgpEvpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IVplsMacFlush) GetBgpEvpn() *NokiaConf_Configure_Service_Vpls_Sap_IVplsMacFlush_BgpEvpn {
	if t != nil && t.BgpEvpn != nil {
		return t.BgpEvpn
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_IVplsMacFlush
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IVplsMacFlush) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BgpEvpn.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IVplsMacFlush) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_IVplsMacFlush"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IVplsMacFlush) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IVplsMacFlush) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_IVplsMacFlush.
func (*NokiaConf_Configure_Service_Vpls_Sap_IVplsMacFlush) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_IVplsMacFlush_BgpEvpn represents the /nokia-conf/configure/service/vpls/sap/i-vpls-mac-flush/bgp-evpn YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_IVplsMacFlush_BgpEvpn struct {
	SendToBvpls *bool `path:"send-to-bvpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_IVplsMacFlush_BgpEvpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_IVplsMacFlush_BgpEvpn) IsYANGGoStruct() {}

// GetSendToBvpls retrieves the value of the leaf SendToBvpls from the NokiaConf_Configure_Service_Vpls_Sap_IVplsMacFlush_BgpEvpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendToBvpls is set, it can
// safely use t.GetSendToBvpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendToBvpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IVplsMacFlush_BgpEvpn) GetSendToBvpls() bool {
	if t == nil || t.SendToBvpls == nil {
		return true
	}
	return *t.SendToBvpls
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_IVplsMacFlush_BgpEvpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IVplsMacFlush_BgpEvpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SendToBvpls == nil {
		var v bool = true
		t.SendToBvpls = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IVplsMacFlush_BgpEvpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_IVplsMacFlush_BgpEvpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IVplsMacFlush_BgpEvpn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IVplsMacFlush_BgpEvpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_IVplsMacFlush_BgpEvpn.
func (*NokiaConf_Configure_Service_Vpls_Sap_IVplsMacFlush_BgpEvpn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_IgmpHostTracking represents the /nokia-conf/configure/service/vpls/sap/igmp-host-tracking YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_IgmpHostTracking struct {
	ApplyGroups               []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string `path:"apply-groups-exclude" module:"nokia-conf"`
	ExpiryTime                *uint32  `path:"expiry-time" module:"nokia-conf"`
	ImportPolicy              *string  `path:"import-policy" module:"nokia-conf"`
	MaximumNumberGroupSources *uint32  `path:"maximum-number-group-sources" module:"nokia-conf"`
	MaximumNumberGroups       *uint32  `path:"maximum-number-groups" module:"nokia-conf"`
	MaximumNumberSources      *uint32  `path:"maximum-number-sources" module:"nokia-conf"`
	RouterAlertCheck          *bool    `path:"router-alert-check" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_IgmpHostTracking implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_IgmpHostTracking) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Sap_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpHostTracking) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Sap_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpHostTracking) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetExpiryTime retrieves the value of the leaf ExpiryTime from the NokiaConf_Configure_Service_Vpls_Sap_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExpiryTime is set, it can
// safely use t.GetExpiryTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExpiryTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpHostTracking) GetExpiryTime() uint32 {
	if t == nil || t.ExpiryTime == nil {
		return 0
	}
	return *t.ExpiryTime
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Service_Vpls_Sap_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpHostTracking) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetMaximumNumberGroupSources retrieves the value of the leaf MaximumNumberGroupSources from the NokiaConf_Configure_Service_Vpls_Sap_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroupSources is set, it can
// safely use t.GetMaximumNumberGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroupSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpHostTracking) GetMaximumNumberGroupSources() uint32 {
	if t == nil || t.MaximumNumberGroupSources == nil {
		return 0
	}
	return *t.MaximumNumberGroupSources
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Service_Vpls_Sap_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpHostTracking) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMaximumNumberSources retrieves the value of the leaf MaximumNumberSources from the NokiaConf_Configure_Service_Vpls_Sap_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberSources is set, it can
// safely use t.GetMaximumNumberSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpHostTracking) GetMaximumNumberSources() uint32 {
	if t == nil || t.MaximumNumberSources == nil {
		return 0
	}
	return *t.MaximumNumberSources
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the NokiaConf_Configure_Service_Vpls_Sap_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpHostTracking) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_IgmpHostTracking
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpHostTracking) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpHostTracking) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_IgmpHostTracking"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpHostTracking) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpHostTracking) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_IgmpHostTracking.
func (*NokiaConf_Configure_Service_Vpls_Sap_IgmpHostTracking) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping represents the /nokia-conf/configure/service/vpls/sap/igmp-snooping YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping struct {
	ApplyGroups               []string                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	FastLeave                 *bool                                                     `path:"fast-leave" module:"nokia-conf"`
	ImportPolicy              *string                                                   `path:"import-policy" module:"nokia-conf"`
	MaximumNumberGroupSources *uint32                                                   `path:"maximum-number-group-sources" module:"nokia-conf"`
	MaximumNumberGroups       *uint32                                                   `path:"maximum-number-groups" module:"nokia-conf"`
	MaximumNumberSources      *uint32                                                   `path:"maximum-number-sources" module:"nokia-conf"`
	Mcac                      *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac   `path:"mcac" module:"nokia-conf"`
	MrouterPort               *bool                                                     `path:"mrouter-port" module:"nokia-conf"`
	Mvr                       *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mvr    `path:"mvr" module:"nokia-conf"`
	QueryInterval             *uint32                                                   `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval   *uint32                                                   `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval     *uint32                                                   `path:"query-response-interval" module:"nokia-conf"`
	RobustCount               *uint32                                                   `path:"robust-count" module:"nokia-conf"`
	RouterAlertCheck          *bool                                                     `path:"router-alert-check" module:"nokia-conf"`
	SendQueries               *bool                                                     `path:"send-queries" module:"nokia-conf"`
	Static                    *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static `path:"static" module:"nokia-conf"`
	Version                   E_NokiaTypesIgmp_IgmpVersion                              `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping) IsYANGGoStruct() {}

// GetOrCreateMcac retrieves the value of the Mcac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping) GetOrCreateMcac() *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac {
	if t.Mcac != nil {
		return t.Mcac
	}
	t.Mcac = &NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac{}
	return t.Mcac
}

// GetOrCreateMvr retrieves the value of the Mvr field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping) GetOrCreateMvr() *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mvr {
	if t.Mvr != nil {
		return t.Mvr
	}
	t.Mvr = &NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mvr{}
	return t.Mvr
}

// GetOrCreateStatic retrieves the value of the Static field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping) GetOrCreateStatic() *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static {
	if t.Static != nil {
		return t.Static
	}
	t.Static = &NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static{}
	return t.Static
}

// GetMcac returns the value of the Mcac struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping. If the receiver or the field Mcac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping) GetMcac() *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac {
	if t != nil && t.Mcac != nil {
		return t.Mcac
	}
	return nil
}

// GetMvr returns the value of the Mvr struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping. If the receiver or the field Mvr is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping) GetMvr() *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mvr {
	if t != nil && t.Mvr != nil {
		return t.Mvr
	}
	return nil
}

// GetStatic returns the value of the Static struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping. If the receiver or the field Static is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping) GetStatic() *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static {
	if t != nil && t.Static != nil {
		return t.Static
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFastLeave retrieves the value of the leaf FastLeave from the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastLeave is set, it can
// safely use t.GetFastLeave() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastLeave == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping) GetFastLeave() bool {
	if t == nil || t.FastLeave == nil {
		return false
	}
	return *t.FastLeave
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetMaximumNumberGroupSources retrieves the value of the leaf MaximumNumberGroupSources from the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroupSources is set, it can
// safely use t.GetMaximumNumberGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroupSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping) GetMaximumNumberGroupSources() uint32 {
	if t == nil || t.MaximumNumberGroupSources == nil {
		return 0
	}
	return *t.MaximumNumberGroupSources
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMaximumNumberSources retrieves the value of the leaf MaximumNumberSources from the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberSources is set, it can
// safely use t.GetMaximumNumberSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping) GetMaximumNumberSources() uint32 {
	if t == nil || t.MaximumNumberSources == nil {
		return 0
	}
	return *t.MaximumNumberSources
}

// GetMrouterPort retrieves the value of the leaf MrouterPort from the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MrouterPort is set, it can
// safely use t.GetMrouterPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MrouterPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping) GetMrouterPort() bool {
	if t == nil || t.MrouterPort == nil {
		return false
	}
	return *t.MrouterPort
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 125
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 10
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 10
	}
	return *t.QueryResponseInterval
}

// GetRobustCount retrieves the value of the leaf RobustCount from the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RobustCount is set, it can
// safely use t.GetRobustCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RobustCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping) GetRobustCount() uint32 {
	if t == nil || t.RobustCount == nil {
		return 2
	}
	return *t.RobustCount
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetSendQueries retrieves the value of the leaf SendQueries from the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendQueries is set, it can
// safely use t.GetSendQueries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendQueries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping) GetSendQueries() bool {
	if t == nil || t.SendQueries == nil {
		return false
	}
	return *t.SendQueries
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping) GetVersion() E_NokiaTypesIgmp_IgmpVersion {
	if t == nil || t.Version == 0 {
		return NokiaTypesIgmp_IgmpVersion_3
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastLeave == nil {
		var v bool = false
		t.FastLeave = &v
	}
	if t.MrouterPort == nil {
		var v bool = false
		t.MrouterPort = &v
	}
	if t.QueryInterval == nil {
		var v uint32 = 125
		t.QueryInterval = &v
	}
	if t.QueryLastMemberInterval == nil {
		var v uint32 = 10
		t.QueryLastMemberInterval = &v
	}
	if t.QueryResponseInterval == nil {
		var v uint32 = 10
		t.QueryResponseInterval = &v
	}
	if t.RobustCount == nil {
		var v uint32 = 2
		t.RobustCount = &v
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.SendQueries == nil {
		var v bool = false
		t.SendQueries = &v
	}
	if t.Version == 0 {
		t.Version = NokiaTypesIgmp_IgmpVersion_3
	}
	t.Mcac.PopulateDefaults()
	t.Mvr.PopulateDefaults()
	t.Static.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping.
func (*NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac represents the /nokia-conf/configure/service/vpls/sap/igmp-snooping/mcac YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac struct {
	Bandwidth       *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_Bandwidth     `path:"bandwidth" module:"nokia-conf"`
	InterfacePolicy *string                                                               `path:"interface-policy" module:"nokia-conf"`
	McConstraints   *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints `path:"mc-constraints" module:"nokia-conf"`
	Policy          *string                                                               `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac) IsYANGGoStruct() {}

// GetOrCreateBandwidth retrieves the value of the Bandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac) GetOrCreateBandwidth() *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_Bandwidth {
	if t.Bandwidth != nil {
		return t.Bandwidth
	}
	t.Bandwidth = &NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_Bandwidth{}
	return t.Bandwidth
}

// GetOrCreateMcConstraints retrieves the value of the McConstraints field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac) GetOrCreateMcConstraints() *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints {
	if t.McConstraints != nil {
		return t.McConstraints
	}
	t.McConstraints = &NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints{}
	return t.McConstraints
}

// GetBandwidth returns the value of the Bandwidth struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac. If the receiver or the field Bandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac) GetBandwidth() *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_Bandwidth {
	if t != nil && t.Bandwidth != nil {
		return t.Bandwidth
	}
	return nil
}

// GetMcConstraints returns the value of the McConstraints struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac. If the receiver or the field McConstraints is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac) GetMcConstraints() *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints {
	if t != nil && t.McConstraints != nil {
		return t.McConstraints
	}
	return nil
}

// GetInterfacePolicy retrieves the value of the leaf InterfacePolicy from the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfacePolicy is set, it can
// safely use t.GetInterfacePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfacePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac) GetInterfacePolicy() string {
	if t == nil || t.InterfacePolicy == nil {
		return ""
	}
	return *t.InterfacePolicy
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bandwidth.PopulateDefaults()
	t.McConstraints.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac.
func (*NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_Bandwidth represents the /nokia-conf/configure/service/vpls/sap/igmp-snooping/mcac/bandwidth YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_Bandwidth struct {
	Mandatory NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_Bandwidth_Mandatory_Union `path:"mandatory" module:"nokia-conf"`
	Total     NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_Bandwidth_Total_Union     `path:"total" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_Bandwidth) IsYANGGoStruct() {}

// GetMandatory retrieves the value of the leaf Mandatory from the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mandatory is set, it can
// safely use t.GetMandatory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mandatory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_Bandwidth) GetMandatory() NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_Bandwidth_Mandatory_Union {
	if t == nil || t.Mandatory == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Mandatory
}

// GetTotal retrieves the value of the leaf Total from the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Total is set, it can
// safely use t.GetTotal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Total == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_Bandwidth) GetTotal() NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_Bandwidth_Total_Union {
	if t == nil || t.Total == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Total
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_Bandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_Bandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mandatory == nil {
		t.Mandatory = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	if t.Total == nil {
		t.Total = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_Bandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_Bandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_Bandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_Bandwidth.
func (*NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_Bandwidth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints represents the /nokia-conf/configure/service/vpls/sap/igmp-snooping/mcac/mc-constraints YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints struct {
	Level            map[uint32]*NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_Level      `path:"level" module:"nokia-conf"`
	NumberDown       map[uint32]*NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_NumberDown `path:"number-down" module:"nokia-conf"`
	UseLagPortWeight *bool                                                                                       `path:"use-lag-port-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints) IsYANGGoStruct() {}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints) NewLevel(LevelId uint32) (*NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[uint32]*NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_Level)
	}

	key := LevelId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_Level{
		LevelId: &LevelId,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints) RenameLevel(oldK, newK uint32) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.LevelId = &newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints) GetOrCreateLevel(LevelId uint32) *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_Level {

	key := LevelId

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(LevelId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints) GetLevel(LevelId uint32) *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_Level {

	if t == nil {
		return nil
	}

	key := LevelId

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints) DeleteLevel(LevelId uint32) {
	key := LevelId

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_Level struct to the
// list Level of NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints) AppendLevel(v *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_Level) error {
	if v.LevelId == nil {
		return fmt.Errorf("invalid nil key received for LevelId")
	}

	key := *v.LevelId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[uint32]*NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// NewNumberDown creates a new entry in the NumberDown list of the
// NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints) NewNumberDown(NumberLagPortDown uint32) (*NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_NumberDown, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NumberDown == nil {
		t.NumberDown = make(map[uint32]*NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_NumberDown)
	}

	key := NumberLagPortDown

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NumberDown[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NumberDown", key)
	}

	t.NumberDown[key] = &NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_NumberDown{
		NumberLagPortDown: &NumberLagPortDown,
	}

	return t.NumberDown[key], nil
}

// RenameNumberDown renames an entry in the list NumberDown within
// the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints) RenameNumberDown(oldK, newK uint32) error {
	if _, ok := t.NumberDown[newK]; ok {
		return fmt.Errorf("key %v already exists in NumberDown", newK)
	}

	e, ok := t.NumberDown[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NumberDown", oldK)
	}
	e.NumberLagPortDown = &newK

	t.NumberDown[newK] = e
	delete(t.NumberDown, oldK)
	return nil
}

// GetOrCreateNumberDown retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints) GetOrCreateNumberDown(NumberLagPortDown uint32) *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_NumberDown {

	key := NumberLagPortDown

	if v, ok := t.NumberDown[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNumberDown(NumberLagPortDown)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNumberDown got unexpected error: %v", err))
	}
	return v
}

// GetNumberDown retrieves the value with the specified key from
// the NumberDown map field of NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints) GetNumberDown(NumberLagPortDown uint32) *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_NumberDown {

	if t == nil {
		return nil
	}

	key := NumberLagPortDown

	if lm, ok := t.NumberDown[key]; ok {
		return lm
	}
	return nil
}

// DeleteNumberDown deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints) DeleteNumberDown(NumberLagPortDown uint32) {
	key := NumberLagPortDown

	delete(t.NumberDown, key)
}

// AppendNumberDown appends the supplied NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_NumberDown struct to the
// list NumberDown of NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_NumberDown already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints) AppendNumberDown(v *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_NumberDown) error {
	if v.NumberLagPortDown == nil {
		return fmt.Errorf("invalid nil key received for NumberLagPortDown")
	}

	key := *v.NumberLagPortDown

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NumberDown == nil {
		t.NumberDown = make(map[uint32]*NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_NumberDown)
	}

	if _, ok := t.NumberDown[key]; ok {
		return fmt.Errorf("duplicate key for list NumberDown %v", key)
	}

	t.NumberDown[key] = v
	return nil
}

// GetUseLagPortWeight retrieves the value of the leaf UseLagPortWeight from the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseLagPortWeight is set, it can
// safely use t.GetUseLagPortWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseLagPortWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints) GetUseLagPortWeight() bool {
	if t == nil || t.UseLagPortWeight == nil {
		return false
	}
	return *t.UseLagPortWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UseLagPortWeight == nil {
		var v bool = false
		t.UseLagPortWeight = &v
	}
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
	for _, e := range t.NumberDown {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints.
func (*NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_Level represents the /nokia-conf/configure/service/vpls/sap/igmp-snooping/mcac/mc-constraints/level YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_Level struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Bandwidth          *uint32  `path:"bandwidth" module:"nokia-conf"`
	LevelId            *uint32  `path:"level-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_Level) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_Level) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_Level) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_Level) GetBandwidth() uint32 {
	if t == nil || t.Bandwidth == nil {
		return 0
	}
	return *t.Bandwidth
}

// GetLevelId retrieves the value of the leaf LevelId from the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelId is set, it can
// safely use t.GetLevelId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_Level) GetLevelId() uint32 {
	if t == nil || t.LevelId == nil {
		return 0
	}
	return *t.LevelId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_Level) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LevelId == nil {
		return nil, fmt.Errorf("nil value for key LevelId")
	}

	return map[string]interface{}{
		"level-id": *t.LevelId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_Level.
func (*NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_NumberDown represents the /nokia-conf/configure/service/vpls/sap/igmp-snooping/mcac/mc-constraints/number-down YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_NumberDown struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Level              *uint32  `path:"level" module:"nokia-conf"`
	NumberLagPortDown  *uint32  `path:"number-lag-port-down" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_NumberDown implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_NumberDown) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_NumberDown) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_NumberDown) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_NumberDown) GetLevel() uint32 {
	if t == nil || t.Level == nil {
		return 0
	}
	return *t.Level
}

// GetNumberLagPortDown retrieves the value of the leaf NumberLagPortDown from the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NumberLagPortDown is set, it can
// safely use t.GetNumberLagPortDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NumberLagPortDown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_NumberDown) GetNumberLagPortDown() uint32 {
	if t == nil || t.NumberLagPortDown == nil {
		return 0
	}
	return *t.NumberLagPortDown
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_NumberDown
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_NumberDown) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_NumberDown struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_NumberDown) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NumberLagPortDown == nil {
		return nil, fmt.Errorf("nil value for key NumberLagPortDown")
	}

	return map[string]interface{}{
		"number-lag-port-down": *t.NumberLagPortDown,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_NumberDown) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_NumberDown"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_NumberDown) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_NumberDown) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_NumberDown.
func (*NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mcac_McConstraints_NumberDown) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mvr represents the /nokia-conf/configure/service/vpls/sap/igmp-snooping/mvr YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mvr struct {
	FromVpls *string `path:"from-vpls" module:"nokia-conf"`
	ToSap    *string `path:"to-sap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mvr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mvr) IsYANGGoStruct() {}

// GetFromVpls retrieves the value of the leaf FromVpls from the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mvr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FromVpls is set, it can
// safely use t.GetFromVpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FromVpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mvr) GetFromVpls() string {
	if t == nil || t.FromVpls == nil {
		return ""
	}
	return *t.FromVpls
}

// GetToSap retrieves the value of the leaf ToSap from the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mvr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ToSap is set, it can
// safely use t.GetToSap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ToSap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mvr) GetToSap() string {
	if t == nil || t.ToSap == nil {
		return ""
	}
	return *t.ToSap
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mvr
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mvr) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mvr) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mvr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mvr) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mvr) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mvr.
func (*NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Mvr) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static represents the /nokia-conf/configure/service/vpls/sap/igmp-snooping/static YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static struct {
	Group map[string]*NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group `path:"group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static) NewGroup(GroupAddress string) (*NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group)
	}

	key := GroupAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group{
		GroupAddress: &GroupAddress,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupAddress = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static) GetOrCreateGroup(GroupAddress string) *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group {

	key := GroupAddress

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static) GetGroup(GroupAddress string) *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group {

	if t == nil {
		return nil
	}

	key := GroupAddress

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static) DeleteGroup(GroupAddress string) {
	key := GroupAddress

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group struct to the
// list Group of NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static) AppendGroup(v *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group) error {
	if v.GroupAddress == nil {
		return fmt.Errorf("invalid nil key received for GroupAddress")
	}

	key := *v.GroupAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static.
func (*NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group represents the /nokia-conf/configure/service/vpls/sap/igmp-snooping/static/group YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group struct {
	ApplyGroups        []string                                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupAddress       *string                                                                           `path:"group-address" module:"nokia-conf"`
	Source             map[string]*NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group_Source `path:"source" module:"nokia-conf"`
	Starg              YANGEmpty                                                                         `path:"starg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group) IsYANGGoStruct() {}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group) NewSource(SourceAddress string) (*NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group) GetSource(SourceAddress string) *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group_Source struct to the
// list Source of NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group) AppendSource(v *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetStarg retrieves the value of the leaf Starg from the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group) GetStarg() YANGEmpty {
	if t == nil || t.Starg == false {
		return false
	}
	return t.Starg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupAddress == nil {
		return nil, fmt.Errorf("nil value for key GroupAddress")
	}

	return map[string]interface{}{
		"group-address": *t.GroupAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group.
func (*NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group_Source represents the /nokia-conf/configure/service/vpls/sap/igmp-snooping/static/group/source YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group_Source) IsYANGGoStruct() {}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group_Source.
func (*NokiaConf_Configure_Service_Vpls_Sap_IgmpSnooping_Static_Group_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Ingress represents the /nokia-conf/configure/service/vpls/sap/ingress YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Ingress struct {
	AggregatePolicer *NokiaConf_Configure_Service_Vpls_Sap_Ingress_AggregatePolicer `path:"aggregate-policer" module:"nokia-conf"`
	Filter           *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Filter           `path:"filter" module:"nokia-conf"`
	Qos              *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos              `path:"qos" module:"nokia-conf"`
	QtagManipulation *NokiaConf_Configure_Service_Vpls_Sap_Ingress_QtagManipulation `path:"qtag-manipulation" module:"nokia-conf"`
	VlanManipulation *NokiaConf_Configure_Service_Vpls_Sap_Ingress_VlanManipulation `path:"vlan-manipulation" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress) IsYANGGoStruct() {}

// GetOrCreateAggregatePolicer retrieves the value of the AggregatePolicer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress) GetOrCreateAggregatePolicer() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_AggregatePolicer {
	if t.AggregatePolicer != nil {
		return t.AggregatePolicer
	}
	t.AggregatePolicer = &NokiaConf_Configure_Service_Vpls_Sap_Ingress_AggregatePolicer{}
	return t.AggregatePolicer
}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Vpls_Sap_Ingress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress) GetOrCreateQos() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos{}
	return t.Qos
}

// GetOrCreateQtagManipulation retrieves the value of the QtagManipulation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress) GetOrCreateQtagManipulation() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_QtagManipulation {
	if t.QtagManipulation != nil {
		return t.QtagManipulation
	}
	t.QtagManipulation = &NokiaConf_Configure_Service_Vpls_Sap_Ingress_QtagManipulation{}
	return t.QtagManipulation
}

// GetOrCreateVlanManipulation retrieves the value of the VlanManipulation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress) GetOrCreateVlanManipulation() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_VlanManipulation {
	if t.VlanManipulation != nil {
		return t.VlanManipulation
	}
	t.VlanManipulation = &NokiaConf_Configure_Service_Vpls_Sap_Ingress_VlanManipulation{}
	return t.VlanManipulation
}

// GetAggregatePolicer returns the value of the AggregatePolicer struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Ingress. If the receiver or the field AggregatePolicer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress) GetAggregatePolicer() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_AggregatePolicer {
	if t != nil && t.AggregatePolicer != nil {
		return t.AggregatePolicer
	}
	return nil
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress) GetFilter() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress) GetQos() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetQtagManipulation returns the value of the QtagManipulation struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Ingress. If the receiver or the field QtagManipulation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress) GetQtagManipulation() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_QtagManipulation {
	if t != nil && t.QtagManipulation != nil {
		return t.QtagManipulation
	}
	return nil
}

// GetVlanManipulation returns the value of the VlanManipulation struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Ingress. If the receiver or the field VlanManipulation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress) GetVlanManipulation() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_VlanManipulation {
	if t != nil && t.VlanManipulation != nil {
		return t.VlanManipulation
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AggregatePolicer.PopulateDefaults()
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
	t.QtagManipulation.PopulateDefaults()
	t.VlanManipulation.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Ingress.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Ingress_AggregatePolicer represents the /nokia-conf/configure/service/vpls/sap/ingress/aggregate-policer YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Ingress_AggregatePolicer struct {
	Burst NokiaConf_Configure_Service_Vpls_Sap_Ingress_AggregatePolicer_Burst_Union `path:"burst" module:"nokia-conf"`
	Cbs   NokiaConf_Configure_Service_Vpls_Sap_Ingress_AggregatePolicer_Cbs_Union   `path:"cbs" module:"nokia-conf"`
	Cir   NokiaConf_Configure_Service_Vpls_Sap_Ingress_AggregatePolicer_Cir_Union   `path:"cir" module:"nokia-conf"`
	Rate  NokiaConf_Configure_Service_Vpls_Sap_Ingress_AggregatePolicer_Rate_Union  `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Ingress_AggregatePolicer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_AggregatePolicer) IsYANGGoStruct() {}

// GetBurst retrieves the value of the leaf Burst from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_AggregatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Burst is set, it can
// safely use t.GetBurst() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Burst == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_AggregatePolicer) GetBurst() NokiaConf_Configure_Service_Vpls_Sap_Ingress_AggregatePolicer_Burst_Union {
	if t == nil || t.Burst == nil {
		return NokiaTypesQos_AggrPolicerBurst_Enum_default
	}
	return t.Burst
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_AggregatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_AggregatePolicer) GetCbs() NokiaConf_Configure_Service_Vpls_Sap_Ingress_AggregatePolicer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_AggregatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_AggregatePolicer) GetCir() NokiaConf_Configure_Service_Vpls_Sap_Ingress_AggregatePolicer_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_AggregatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_AggregatePolicer) GetRate() NokiaConf_Configure_Service_Vpls_Sap_Ingress_AggregatePolicer_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaTypesQos_AggrPolicerRate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Ingress_AggregatePolicer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_AggregatePolicer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Burst == nil {
		t.Burst = NokiaTypesQos_AggrPolicerBurst_Enum_default
	}
	if t.Rate == nil {
		t.Rate = NokiaTypesQos_AggrPolicerRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_AggregatePolicer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Ingress_AggregatePolicer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_AggregatePolicer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_AggregatePolicer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Ingress_AggregatePolicer.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_AggregatePolicer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Ingress_Filter represents the /nokia-conf/configure/service/vpls/sap/ingress/filter YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Ingress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
	Mac  *string `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Filter) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Ingress_Filter.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos represents the /nokia-conf/configure/service/vpls/sap/ingress/qos YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos struct {
	MatchQinqDot1P       E_NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_MatchQinqDot1P      `path:"match-qinq-dot1p" module:"nokia-conf"`
	PolicerControlPolicy *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy `path:"policer-control-policy" module:"nokia-conf"`
	SapIngress           *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress           `path:"sap-ingress" module:"nokia-conf"`
	SchedulerPolicy      *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy      `path:"scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos) IsYANGGoStruct() {}

// GetOrCreatePolicerControlPolicy retrieves the value of the PolicerControlPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos) GetOrCreatePolicerControlPolicy() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy {
	if t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	t.PolicerControlPolicy = &NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy{}
	return t.PolicerControlPolicy
}

// GetOrCreateSapIngress retrieves the value of the SapIngress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos) GetOrCreateSapIngress() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress {
	if t.SapIngress != nil {
		return t.SapIngress
	}
	t.SapIngress = &NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress{}
	return t.SapIngress
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos) GetOrCreateSchedulerPolicy() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetPolicerControlPolicy returns the value of the PolicerControlPolicy struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos. If the receiver or the field PolicerControlPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos) GetPolicerControlPolicy() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy {
	if t != nil && t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	return nil
}

// GetSapIngress returns the value of the SapIngress struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos. If the receiver or the field SapIngress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos) GetSapIngress() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress {
	if t != nil && t.SapIngress != nil {
		return t.SapIngress
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos) GetSchedulerPolicy() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetMatchQinqDot1P retrieves the value of the leaf MatchQinqDot1P from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchQinqDot1P is set, it can
// safely use t.GetMatchQinqDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchQinqDot1P == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos) GetMatchQinqDot1P() E_NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_MatchQinqDot1P {
	if t == nil || t.MatchQinqDot1P == 0 {
		return 0
	}
	return t.MatchQinqDot1P
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PolicerControlPolicy.PopulateDefaults()
	t.SapIngress.PopulateDefaults()
	t.SchedulerPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy represents the /nokia-conf/configure/service/vpls/sap/ingress/qos/policer-control-policy YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy struct {
	Overrides  *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                                          `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy) GetOverrides() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides represents the /nokia-conf/configure/service/vpls/sap/ingress/qos/policer-control-policy/overrides YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides struct {
	ApplyGroups        []string                                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	Root               *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root `path:"root" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) IsYANGGoStruct() {
}

// GetOrCreateRoot retrieves the value of the Root field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) GetOrCreateRoot() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root {
	if t.Root != nil {
		return t.Root
	}
	t.Root = &NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root{}
	return t.Root
}

// GetRoot returns the value of the Root struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides. If the receiver or the field Root is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) GetRoot() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root {
	if t != nil && t.Root != nil {
		return t.Root
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Root.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root represents the /nokia-conf/configure/service/vpls/sap/ingress/qos/policer-control-policy/overrides/root YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root struct {
	MaxRate               NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union          `path:"max-rate" module:"nokia-conf"`
	PriorityMbsThresholds *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds `path:"priority-mbs-thresholds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) IsYANGGoStruct() {
}

// GetOrCreatePriorityMbsThresholds retrieves the value of the PriorityMbsThresholds field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) GetOrCreatePriorityMbsThresholds() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	t.PriorityMbsThresholds = &NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds{}
	return t.PriorityMbsThresholds
}

// GetPriorityMbsThresholds returns the value of the PriorityMbsThresholds struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root. If the receiver or the field PriorityMbsThresholds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) GetPriorityMbsThresholds() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t != nil && t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	return nil
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) GetMaxRate() NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return nil
	}
	return t.MaxRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PriorityMbsThresholds.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds represents the /nokia-conf/configure/service/vpls/sap/ingress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct {
	MinThreshSeparation NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union `path:"min-thresh-separation" module:"nokia-conf"`
	Priority            map[int32]*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority       `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) IsYANGGoStruct() {
}

// NewPriority creates a new entry in the Priority list of the
// NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) NewPriority(PriorityLevel int32) (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[int32]*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	key := PriorityLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Priority[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Priority", key)
	}

	t.Priority[key] = &NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority{
		PriorityLevel: &PriorityLevel,
	}

	return t.Priority[key], nil
}

// RenamePriority renames an entry in the list Priority within
// the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) RenamePriority(oldK, newK int32) error {
	if _, ok := t.Priority[newK]; ok {
		return fmt.Errorf("key %v already exists in Priority", newK)
	}

	e, ok := t.Priority[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Priority", oldK)
	}
	e.PriorityLevel = &newK

	t.Priority[newK] = e
	delete(t.Priority, oldK)
	return nil
}

// GetOrCreatePriority retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetOrCreatePriority(PriorityLevel int32) *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	key := PriorityLevel

	if v, ok := t.Priority[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPriority(PriorityLevel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePriority got unexpected error: %v", err))
	}
	return v
}

// GetPriority retrieves the value with the specified key from
// the Priority map field of NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetPriority(PriorityLevel int32) *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	if t == nil {
		return nil
	}

	key := PriorityLevel

	if lm, ok := t.Priority[key]; ok {
		return lm
	}
	return nil
}

// DeletePriority deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) DeletePriority(PriorityLevel int32) {
	key := PriorityLevel

	delete(t.Priority, key)
}

// AppendPriority appends the supplied NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct to the
// list Priority of NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) AppendPriority(v *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) error {
	if v.PriorityLevel == nil {
		return fmt.Errorf("invalid nil key received for PriorityLevel")
	}

	key := *v.PriorityLevel

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[int32]*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	if _, ok := t.Priority[key]; ok {
		return fmt.Errorf("duplicate key for list Priority %v", key)
	}

	t.Priority[key] = v
	return nil
}

// GetMinThreshSeparation retrieves the value of the leaf MinThreshSeparation from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThreshSeparation is set, it can
// safely use t.GetMinThreshSeparation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThreshSeparation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetMinThreshSeparation() NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union {
	if t == nil || t.MinThreshSeparation == nil {
		return nil
	}
	return t.MinThreshSeparation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Priority {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority represents the /nokia-conf/configure/service/vpls/sap/ingress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds/priority YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct {
	ApplyGroups        []string                                                                                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	MbsContribution    NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union `path:"mbs-contribution" module:"nokia-conf"`
	PriorityLevel      *int32                                                                                                                                    `path:"priority-level" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMbsContribution retrieves the value of the leaf MbsContribution from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MbsContribution is set, it can
// safely use t.GetMbsContribution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MbsContribution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetMbsContribution() NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union {
	if t == nil || t.MbsContribution == nil {
		return nil
	}
	return t.MbsContribution
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetPriorityLevel() int32 {
	if t == nil || t.PriorityLevel == nil {
		return 0
	}
	return *t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PriorityLevel == nil {
		return nil, fmt.Errorf("nil value for key PriorityLevel")
	}

	return map[string]interface{}{
		"priority-level": *t.PriorityLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress represents the /nokia-conf/configure/service/vpls/sap/ingress/qos/sap-ingress YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress struct {
	FpRedirectGroup *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_FpRedirectGroup `path:"fp-redirect-group" module:"nokia-conf"`
	Overrides       *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides       `path:"overrides" module:"nokia-conf"`
	PolicyName      *string                                                                      `path:"policy-name" module:"nokia-conf"`
	QueuingType     E_NokiaTypesServices_ServicesSapQueuingType                                  `path:"queuing-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress) IsYANGGoStruct() {}

// GetOrCreateFpRedirectGroup retrieves the value of the FpRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress) GetOrCreateFpRedirectGroup() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_FpRedirectGroup {
	if t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	t.FpRedirectGroup = &NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_FpRedirectGroup{}
	return t.FpRedirectGroup
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress) GetOrCreateOverrides() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides{}
	return t.Overrides
}

// GetFpRedirectGroup returns the value of the FpRedirectGroup struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress. If the receiver or the field FpRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress) GetFpRedirectGroup() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_FpRedirectGroup {
	if t != nil && t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	return nil
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress) GetOverrides() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetQueuingType retrieves the value of the leaf QueuingType from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuingType is set, it can
// safely use t.GetQueuingType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuingType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress) GetQueuingType() E_NokiaTypesServices_ServicesSapQueuingType {
	if t == nil || t.QueuingType == 0 {
		return 0
	}
	return t.QueuingType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FpRedirectGroup.PopulateDefaults()
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_FpRedirectGroup represents the /nokia-conf/configure/service/vpls/sap/ingress/qos/sap-ingress/fp-redirect-group YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_FpRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_FpRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_FpRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_FpRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_FpRedirectGroup.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides represents the /nokia-conf/configure/service/vpls/sap/ingress/qos/sap-ingress/overrides YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides struct {
	IpCriteria   *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria        `path:"ip-criteria" module:"nokia-conf"`
	Ipv6Criteria *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria      `path:"ipv6-criteria" module:"nokia-conf"`
	Policer      map[int32]*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer `path:"policer" module:"nokia-conf"`
	Queue        map[int32]*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue   `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides) IsYANGGoStruct() {}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides) NewPolicer(PolicerId int32) (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer{
		PolicerId: &PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides) RenamePolicer(oldK, newK int32) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = &newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides) GetOrCreatePolicer(PolicerId int32) *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer {

	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides) GetPolicer(PolicerId int32) *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer {

	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides) DeletePolicer(PolicerId int32) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer struct to the
// list Policer of NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides) AppendPolicer(v *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer) error {
	if v.PolicerId == nil {
		return fmt.Errorf("invalid nil key received for PolicerId")
	}

	key := *v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[int32]*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides) NewQueue(QueueId int32) (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue{
		QueueId: &QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides) RenameQueue(oldK, newK int32) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides) GetOrCreateQueue(QueueId int32) *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides) GetQueue(QueueId int32) *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides) DeleteQueue(QueueId int32) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue struct to the
// list Queue of NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides) AppendQueue(v *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue) error {
	if v.QueueId == nil {
		return fmt.Errorf("invalid nil key received for QueueId")
	}

	key := *v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[int32]*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetOrCreateIpCriteria retrieves the value of the IpCriteria field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides) GetOrCreateIpCriteria() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria {
	if t.IpCriteria != nil {
		return t.IpCriteria
	}
	t.IpCriteria = &NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria{}
	return t.IpCriteria
}

// GetOrCreateIpv6Criteria retrieves the value of the Ipv6Criteria field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides) GetOrCreateIpv6Criteria() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria {
	if t.Ipv6Criteria != nil {
		return t.Ipv6Criteria
	}
	t.Ipv6Criteria = &NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria{}
	return t.Ipv6Criteria
}

// GetIpCriteria returns the value of the IpCriteria struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides. If the receiver or the field IpCriteria is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides) GetIpCriteria() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria {
	if t != nil && t.IpCriteria != nil {
		return t.IpCriteria
	}
	return nil
}

// GetIpv6Criteria returns the value of the Ipv6Criteria struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides. If the receiver or the field Ipv6Criteria is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides) GetIpv6Criteria() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria {
	if t != nil && t.Ipv6Criteria != nil {
		return t.Ipv6Criteria
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IpCriteria.PopulateDefaults()
	t.Ipv6Criteria.PopulateDefaults()
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria represents the /nokia-conf/configure/service/vpls/sap/ingress/qos/sap-ingress/overrides/ip-criteria YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria struct {
	ActivateEntryTag *int32 `path:"activate-entry-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) IsYANGGoStruct() {
}

// GetActivateEntryTag retrieves the value of the leaf ActivateEntryTag from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActivateEntryTag is set, it can
// safely use t.GetActivateEntryTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActivateEntryTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) GetActivateEntryTag() int32 {
	if t == nil || t.ActivateEntryTag == nil {
		return 0
	}
	return *t.ActivateEntryTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria represents the /nokia-conf/configure/service/vpls/sap/ingress/qos/sap-ingress/overrides/ipv6-criteria YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria struct {
	ActivateEntryTag *int32 `path:"activate-entry-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) IsYANGGoStruct() {
}

// GetActivateEntryTag retrieves the value of the leaf ActivateEntryTag from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActivateEntryTag is set, it can
// safely use t.GetActivateEntryTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActivateEntryTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) GetActivateEntryTag() int32 {
	if t == nil || t.ActivateEntryTag == nil {
		return 0
	}
	return *t.ActivateEntryTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer represents the /nokia-conf/configure/service/vpls/sap/ingress/qos/sap-ingress/overrides/policer YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer struct {
	ApplyGroups        []string                                                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Cbs_Union    `path:"cbs" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Mbs_Union    `path:"mbs" module:"nokia-conf"`
	PacketByteOffset   *int32                                                                                     `path:"packet-byte-offset" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate `path:"percent-rate" module:"nokia-conf"`
	PolicerId          *int32                                                                                     `path:"policer-id" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate        `path:"rate" module:"nokia-conf"`
	StatMode           E_NokiaTypesQos_IngressPolicerStatMode                                                     `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer) IsYANGGoStruct() {
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetOrCreatePercentRate() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetOrCreateRate() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate{}
	return t.Rate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetPercentRate() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetRate() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetCbs() NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetMbs() NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetPolicerId retrieves the value of the leaf PolicerId from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetPolicerId() int32 {
	if t == nil || t.PolicerId == nil {
		return 0
	}
	return *t.PolicerId
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetStatMode() E_NokiaTypesQos_IngressPolicerStatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerId == nil {
		return nil, fmt.Errorf("nil value for key PolicerId")
	}

	return map[string]interface{}{
		"policer-id": *t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate represents the /nokia-conf/configure/service/vpls/sap/ingress/qos/sap-ingress/overrides/policer/percent-rate YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate represents the /nokia-conf/configure/service/vpls/sap/ingress/qos/sap-ingress/overrides/policer/rate YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate struct {
	Cir NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) GetCir() NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) GetPir() NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue represents the /nokia-conf/configure/service/vpls/sap/ingress/qos/sap-ingress/overrides/queue YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue struct {
	AdaptationRule     *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule    `path:"adaptation-rule" module:"nokia-conf"`
	ApplyGroups        []string                                                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Cbs                NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Cbs_Union          `path:"cbs" module:"nokia-conf"`
	DropTail           *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail          `path:"drop-tail" module:"nokia-conf"`
	Mbs                NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Mbs_Union          `path:"mbs" module:"nokia-conf"`
	MonitorDepth       *bool                                                                                          `path:"monitor-depth" module:"nokia-conf"`
	MonitorQueueDepth  *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth `path:"monitor-queue-depth" module:"nokia-conf" yangPresence:"true"`
	Parent             *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent            `path:"parent" module:"nokia-conf"`
	PercentRate        *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate       `path:"percent-rate" module:"nokia-conf"`
	QueueId            *int32                                                                                         `path:"queue-id" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate              `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue) IsYANGGoStruct() {
}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreateMonitorQueueDepth retrieves the value of the MonitorQueueDepth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateMonitorQueueDepth() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth {
	if t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	t.MonitorQueueDepth = &NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth{}
	return t.MonitorQueueDepth
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateParent() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent{}
	return t.Parent
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreatePercentRate() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateRate() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate{}
	return t.Rate
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetAdaptationRule() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetDropTail() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetMonitorQueueDepth returns the value of the MonitorQueueDepth struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field MonitorQueueDepth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetMonitorQueueDepth() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth {
	if t != nil && t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	return nil
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetParent() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetPercentRate() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetRate() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetCbs() NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetMbs() NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetMonitorDepth retrieves the value of the leaf MonitorDepth from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorDepth is set, it can
// safely use t.GetMonitorDepth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorDepth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetMonitorDepth() bool {
	if t == nil || t.MonitorDepth == nil {
		return false
	}
	return *t.MonitorDepth
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetQueueId() int32 {
	if t == nil || t.QueueId == nil {
		return 0
	}
	return *t.QueueId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MonitorDepth == nil {
		var v bool = false
		t.MonitorDepth = &v
	}
	t.AdaptationRule.PopulateDefaults()
	t.DropTail.PopulateDefaults()
	t.MonitorQueueDepth.PopulateDefaults()
	t.Parent.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.QueueId == nil {
		return nil, fmt.Errorf("nil value for key QueueId")
	}

	return map[string]interface{}{
		"queue-id": *t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule represents the /nokia-conf/configure/service/vpls/sap/ingress/qos/sap-ingress/overrides/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRuleOverride `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRuleOverride `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Cir == 0 {
		return 0
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Pir == 0 {
		return 0
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail represents the /nokia-conf/configure/service/vpls/sap/ingress/qos/sap-ingress/overrides/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail struct {
	Low *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) IsYANGGoStruct() {
}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low{}
	return t.Low
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) GetLow() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low represents the /nokia-conf/configure/service/vpls/sap/ingress/qos/sap-ingress/overrides/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return nil
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth represents the /nokia-conf/configure/service/vpls/sap/ingress/qos/sap-ingress/overrides/queue/monitor-queue-depth YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth struct {
	FastPolling *bool `path:"fast-polling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) IsYANGGoStruct() {
}

// GetFastPolling retrieves the value of the leaf FastPolling from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastPolling is set, it can
// safely use t.GetFastPolling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastPolling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) GetFastPolling() bool {
	if t == nil || t.FastPolling == nil {
		return false
	}
	return *t.FastPolling
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastPolling == nil {
		var v bool = false
		t.FastPolling = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent represents the /nokia-conf/configure/service/vpls/sap/ingress/qos/sap-ingress/overrides/queue/parent YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate represents the /nokia-conf/configure/service/vpls/sap/ingress/qos/sap-ingress/overrides/queue/percent-rate YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate represents the /nokia-conf/configure/service/vpls/sap/ingress/qos/sap-ingress/overrides/queue/rate YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate struct {
	Cir NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) GetCir() NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) GetPir() NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy represents the /nokia-conf/configure/service/vpls/sap/ingress/qos/scheduler-policy YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                     `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy) GetOverrides() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides represents the /nokia-conf/configure/service/vpls/sap/ingress/qos/scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides struct {
	Scheduler map[string]*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides) IsYANGGoStruct() {}

// NewScheduler creates a new entry in the Scheduler list of the
// NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides) NewScheduler(SchedulerName string) (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	key := SchedulerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler{
		SchedulerName: &SchedulerName,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides) RenameScheduler(oldK, newK string) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.SchedulerName = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides) GetOrCreateScheduler(SchedulerName string) *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler {

	key := SchedulerName

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(SchedulerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides) GetScheduler(SchedulerName string) *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler {

	if t == nil {
		return nil
	}

	key := SchedulerName

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides) DeleteScheduler(SchedulerName string) {
	key := SchedulerName

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler struct to the
// list Scheduler of NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides) AppendScheduler(v *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) error {
	if v.SchedulerName == nil {
		return fmt.Errorf("invalid nil key received for SchedulerName")
	}

	key := *v.SchedulerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler represents the /nokia-conf/configure/service/vpls/sap/ingress/qos/scheduler-policy/overrides/scheduler YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler struct {
	ApplyGroups        []string                                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Parent             *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent `path:"parent" module:"nokia-conf"`
	Rate               *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate   `path:"rate" module:"nokia-conf"`
	SchedulerName      *string                                                                                      `path:"scheduler-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) IsYANGGoStruct() {
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateParent() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent{}
	return t.Parent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateRate() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate{}
	return t.Rate
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetParent() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetRate() *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Parent.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SchedulerName == nil {
		return nil, fmt.Errorf("nil value for key SchedulerName")
	}

	return map[string]interface{}{
		"scheduler-name": *t.SchedulerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent represents the /nokia-conf/configure/service/vpls/sap/ingress/qos/scheduler-policy/overrides/scheduler/parent YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate represents the /nokia-conf/configure/service/vpls/sap/ingress/qos/scheduler-policy/overrides/scheduler/rate YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate struct {
	Cir NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetCir() NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetPir() NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Ingress_QtagManipulation represents the /nokia-conf/configure/service/vpls/sap/ingress/qtag-manipulation YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Ingress_QtagManipulation struct {
	PushDot1QVlan NokiaConf_Configure_Service_Vpls_Sap_Ingress_QtagManipulation_PushDot1QVlan_Union `path:"push-dot1q-vlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Ingress_QtagManipulation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_QtagManipulation) IsYANGGoStruct() {}

// GetPushDot1QVlan retrieves the value of the leaf PushDot1QVlan from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_QtagManipulation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PushDot1QVlan is set, it can
// safely use t.GetPushDot1QVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PushDot1QVlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_QtagManipulation) GetPushDot1QVlan() NokiaConf_Configure_Service_Vpls_Sap_Ingress_QtagManipulation_PushDot1QVlan_Union {
	if t == nil || t.PushDot1QVlan == nil {
		return nil
	}
	return t.PushDot1QVlan
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Ingress_QtagManipulation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_QtagManipulation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_QtagManipulation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Ingress_QtagManipulation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_QtagManipulation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_QtagManipulation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Ingress_QtagManipulation.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_QtagManipulation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Ingress_VlanManipulation represents the /nokia-conf/configure/service/vpls/sap/ingress/vlan-manipulation YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Ingress_VlanManipulation struct {
	Action   E_NokiaTypesServices_VlanManipulationIngressActionType                       `path:"action" module:"nokia-conf"`
	InnerTag NokiaConf_Configure_Service_Vpls_Sap_Ingress_VlanManipulation_InnerTag_Union `path:"inner-tag" module:"nokia-conf"`
	OuterTag NokiaConf_Configure_Service_Vpls_Sap_Ingress_VlanManipulation_OuterTag_Union `path:"outer-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Ingress_VlanManipulation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_VlanManipulation) IsYANGGoStruct() {}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_VlanManipulation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_VlanManipulation) GetAction() E_NokiaTypesServices_VlanManipulationIngressActionType {
	if t == nil || t.Action == 0 {
		return 0
	}
	return t.Action
}

// GetInnerTag retrieves the value of the leaf InnerTag from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_VlanManipulation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InnerTag is set, it can
// safely use t.GetInnerTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InnerTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_VlanManipulation) GetInnerTag() NokiaConf_Configure_Service_Vpls_Sap_Ingress_VlanManipulation_InnerTag_Union {
	if t == nil || t.InnerTag == nil {
		return NokiaTypesServices_VlanManipulateIngressVlanType_Enum_null
	}
	return t.InnerTag
}

// GetOuterTag retrieves the value of the leaf OuterTag from the NokiaConf_Configure_Service_Vpls_Sap_Ingress_VlanManipulation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OuterTag is set, it can
// safely use t.GetOuterTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OuterTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_VlanManipulation) GetOuterTag() NokiaConf_Configure_Service_Vpls_Sap_Ingress_VlanManipulation_OuterTag_Union {
	if t == nil || t.OuterTag == nil {
		return NokiaTypesServices_VlanManipulateIngressVlanType_Enum_null
	}
	return t.OuterTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Ingress_VlanManipulation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_VlanManipulation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InnerTag == nil {
		t.InnerTag = NokiaTypesServices_VlanManipulateIngressVlanType_Enum_null
	}
	if t.OuterTag == nil {
		t.OuterTag = NokiaTypesServices_VlanManipulateIngressVlanType_Enum_null
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_VlanManipulation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Ingress_VlanManipulation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_VlanManipulation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Ingress_VlanManipulation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Ingress_VlanManipulation.
func (*NokiaConf_Configure_Service_Vpls_Sap_Ingress_VlanManipulation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_L2Pt represents the /nokia-conf/configure/service/vpls/sap/l2pt YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_L2Pt struct {
	ForceBoundary *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary `path:"force-boundary" module:"nokia-conf" yangPresence:"true"`
	Termination   *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination   `path:"termination" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_L2Pt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_L2Pt) IsYANGGoStruct() {}

// GetOrCreateForceBoundary retrieves the value of the ForceBoundary field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt) GetOrCreateForceBoundary() *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary {
	if t.ForceBoundary != nil {
		return t.ForceBoundary
	}
	t.ForceBoundary = &NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary{}
	return t.ForceBoundary
}

// GetOrCreateTermination retrieves the value of the Termination field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt) GetOrCreateTermination() *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination {
	if t.Termination != nil {
		return t.Termination
	}
	t.Termination = &NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination{}
	return t.Termination
}

// GetForceBoundary returns the value of the ForceBoundary struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_L2Pt. If the receiver or the field ForceBoundary is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt) GetForceBoundary() *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary {
	if t != nil && t.ForceBoundary != nil {
		return t.ForceBoundary
	}
	return nil
}

// GetTermination returns the value of the Termination struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_L2Pt. If the receiver or the field Termination is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt) GetTermination() *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination {
	if t != nil && t.Termination != nil {
		return t.Termination
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_L2Pt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ForceBoundary.PopulateDefaults()
	t.Termination.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_L2Pt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_L2Pt.
func (*NokiaConf_Configure_Service_Vpls_Sap_L2Pt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary represents the /nokia-conf/configure/service/vpls/sap/l2pt/force-boundary YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary struct {
	Protocols *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary_Protocols `path:"protocols" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary) IsYANGGoStruct() {}

// GetOrCreateProtocols retrieves the value of the Protocols field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary) GetOrCreateProtocols() *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary_Protocols {
	if t.Protocols != nil {
		return t.Protocols
	}
	t.Protocols = &NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary_Protocols{}
	return t.Protocols
}

// GetProtocols returns the value of the Protocols struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary. If the receiver or the field Protocols is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary) GetProtocols() *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary_Protocols {
	if t != nil && t.Protocols != nil {
		return t.Protocols
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Protocols.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary.
func (*NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary_Protocols represents the /nokia-conf/configure/service/vpls/sap/l2pt/force-boundary/protocols YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary_Protocols struct {
	Cdp  *bool `path:"cdp" module:"nokia-conf"`
	Dtp  *bool `path:"dtp" module:"nokia-conf"`
	Pagp *bool `path:"pagp" module:"nokia-conf"`
	Stp  *bool `path:"stp" module:"nokia-conf"`
	Udld *bool `path:"udld" module:"nokia-conf"`
	Vtp  *bool `path:"vtp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary_Protocols implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary_Protocols) IsYANGGoStruct() {}

// GetCdp retrieves the value of the leaf Cdp from the NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary_Protocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cdp is set, it can
// safely use t.GetCdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cdp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary_Protocols) GetCdp() bool {
	if t == nil || t.Cdp == nil {
		return false
	}
	return *t.Cdp
}

// GetDtp retrieves the value of the leaf Dtp from the NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary_Protocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dtp is set, it can
// safely use t.GetDtp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dtp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary_Protocols) GetDtp() bool {
	if t == nil || t.Dtp == nil {
		return false
	}
	return *t.Dtp
}

// GetPagp retrieves the value of the leaf Pagp from the NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary_Protocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pagp is set, it can
// safely use t.GetPagp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pagp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary_Protocols) GetPagp() bool {
	if t == nil || t.Pagp == nil {
		return false
	}
	return *t.Pagp
}

// GetStp retrieves the value of the leaf Stp from the NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary_Protocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Stp is set, it can
// safely use t.GetStp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Stp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary_Protocols) GetStp() bool {
	if t == nil || t.Stp == nil {
		return true
	}
	return *t.Stp
}

// GetUdld retrieves the value of the leaf Udld from the NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary_Protocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Udld is set, it can
// safely use t.GetUdld() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Udld == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary_Protocols) GetUdld() bool {
	if t == nil || t.Udld == nil {
		return false
	}
	return *t.Udld
}

// GetVtp retrieves the value of the leaf Vtp from the NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary_Protocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vtp is set, it can
// safely use t.GetVtp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vtp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary_Protocols) GetVtp() bool {
	if t == nil || t.Vtp == nil {
		return false
	}
	return *t.Vtp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary_Protocols
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary_Protocols) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cdp == nil {
		var v bool = false
		t.Cdp = &v
	}
	if t.Dtp == nil {
		var v bool = false
		t.Dtp = &v
	}
	if t.Pagp == nil {
		var v bool = false
		t.Pagp = &v
	}
	if t.Stp == nil {
		var v bool = true
		t.Stp = &v
	}
	if t.Udld == nil {
		var v bool = false
		t.Udld = &v
	}
	if t.Vtp == nil {
		var v bool = false
		t.Vtp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary_Protocols) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary_Protocols"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary_Protocols) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary_Protocols) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary_Protocols.
func (*NokiaConf_Configure_Service_Vpls_Sap_L2Pt_ForceBoundary_Protocols) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination represents the /nokia-conf/configure/service/vpls/sap/l2pt/termination YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination struct {
	Protocols *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination_Protocols `path:"protocols" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination) IsYANGGoStruct() {}

// GetOrCreateProtocols retrieves the value of the Protocols field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination) GetOrCreateProtocols() *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination_Protocols {
	if t.Protocols != nil {
		return t.Protocols
	}
	t.Protocols = &NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination_Protocols{}
	return t.Protocols
}

// GetProtocols returns the value of the Protocols struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination. If the receiver or the field Protocols is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination) GetProtocols() *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination_Protocols {
	if t != nil && t.Protocols != nil {
		return t.Protocols
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Protocols.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination.
func (*NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination_Protocols represents the /nokia-conf/configure/service/vpls/sap/l2pt/termination/protocols YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination_Protocols struct {
	Cdp  *bool `path:"cdp" module:"nokia-conf"`
	Dtp  *bool `path:"dtp" module:"nokia-conf"`
	Pagp *bool `path:"pagp" module:"nokia-conf"`
	Stp  *bool `path:"stp" module:"nokia-conf"`
	Udld *bool `path:"udld" module:"nokia-conf"`
	Vtp  *bool `path:"vtp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination_Protocols implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination_Protocols) IsYANGGoStruct() {}

// GetCdp retrieves the value of the leaf Cdp from the NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination_Protocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cdp is set, it can
// safely use t.GetCdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cdp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination_Protocols) GetCdp() bool {
	if t == nil || t.Cdp == nil {
		return false
	}
	return *t.Cdp
}

// GetDtp retrieves the value of the leaf Dtp from the NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination_Protocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dtp is set, it can
// safely use t.GetDtp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dtp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination_Protocols) GetDtp() bool {
	if t == nil || t.Dtp == nil {
		return false
	}
	return *t.Dtp
}

// GetPagp retrieves the value of the leaf Pagp from the NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination_Protocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pagp is set, it can
// safely use t.GetPagp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pagp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination_Protocols) GetPagp() bool {
	if t == nil || t.Pagp == nil {
		return false
	}
	return *t.Pagp
}

// GetStp retrieves the value of the leaf Stp from the NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination_Protocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Stp is set, it can
// safely use t.GetStp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Stp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination_Protocols) GetStp() bool {
	if t == nil || t.Stp == nil {
		return true
	}
	return *t.Stp
}

// GetUdld retrieves the value of the leaf Udld from the NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination_Protocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Udld is set, it can
// safely use t.GetUdld() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Udld == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination_Protocols) GetUdld() bool {
	if t == nil || t.Udld == nil {
		return false
	}
	return *t.Udld
}

// GetVtp retrieves the value of the leaf Vtp from the NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination_Protocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vtp is set, it can
// safely use t.GetVtp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vtp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination_Protocols) GetVtp() bool {
	if t == nil || t.Vtp == nil {
		return false
	}
	return *t.Vtp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination_Protocols
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination_Protocols) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cdp == nil {
		var v bool = false
		t.Cdp = &v
	}
	if t.Dtp == nil {
		var v bool = false
		t.Dtp = &v
	}
	if t.Pagp == nil {
		var v bool = false
		t.Pagp = &v
	}
	if t.Stp == nil {
		var v bool = true
		t.Stp = &v
	}
	if t.Udld == nil {
		var v bool = false
		t.Udld = &v
	}
	if t.Vtp == nil {
		var v bool = false
		t.Vtp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination_Protocols) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination_Protocols"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination_Protocols) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination_Protocols) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination_Protocols.
func (*NokiaConf_Configure_Service_Vpls_Sap_L2Pt_Termination_Protocols) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session represents the /nokia-conf/configure/service/vpls/sap/l2tpv3-session YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session struct {
	AdminState         E_NokiaTypesSros_AdminState                                    `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	PseudoWire         *NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_PseudoWire `path:"pseudo-wire" module:"nokia-conf"`
	Router             *NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_Router     `path:"router" module:"nokia-conf"`
	VcId               *uint32                                                        `path:"vc-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session) IsYANGGoStruct() {}

// GetOrCreatePseudoWire retrieves the value of the PseudoWire field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session) GetOrCreatePseudoWire() *NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_PseudoWire {
	if t.PseudoWire != nil {
		return t.PseudoWire
	}
	t.PseudoWire = &NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_PseudoWire{}
	return t.PseudoWire
}

// GetOrCreateRouter retrieves the value of the Router field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session) GetOrCreateRouter() *NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_Router {
	if t.Router != nil {
		return t.Router
	}
	t.Router = &NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_Router{}
	return t.Router
}

// GetPseudoWire returns the value of the PseudoWire struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session. If the receiver or the field PseudoWire is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session) GetPseudoWire() *NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_PseudoWire {
	if t != nil && t.PseudoWire != nil {
		return t.PseudoWire
	}
	return nil
}

// GetRouter returns the value of the Router struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session. If the receiver or the field Router is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session) GetRouter() *NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_Router {
	if t != nil && t.Router != nil {
		return t.Router
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetVcId retrieves the value of the leaf VcId from the NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcId is set, it can
// safely use t.GetVcId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session) GetVcId() uint32 {
	if t == nil || t.VcId == nil {
		return 0
	}
	return *t.VcId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.PseudoWire.PopulateDefaults()
	t.Router.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session.
func (*NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_PseudoWire represents the /nokia-conf/configure/service/vpls/sap/l2tpv3-session/pseudo-wire YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_PseudoWire struct {
	Ethernet       YANGEmpty `path:"ethernet" module:"nokia-conf"`
	EthernetVlanId *int32    `path:"ethernet-vlan-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_PseudoWire implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_PseudoWire) IsYANGGoStruct() {}

// GetEthernet retrieves the value of the leaf Ethernet from the NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_PseudoWire
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ethernet is set, it can
// safely use t.GetEthernet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ethernet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_PseudoWire) GetEthernet() YANGEmpty {
	if t == nil || t.Ethernet == false {
		return false
	}
	return t.Ethernet
}

// GetEthernetVlanId retrieves the value of the leaf EthernetVlanId from the NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_PseudoWire
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EthernetVlanId is set, it can
// safely use t.GetEthernetVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EthernetVlanId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_PseudoWire) GetEthernetVlanId() int32 {
	if t == nil || t.EthernetVlanId == nil {
		return 0
	}
	return *t.EthernetVlanId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_PseudoWire
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_PseudoWire) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_PseudoWire) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_PseudoWire"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_PseudoWire) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_PseudoWire) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_PseudoWire.
func (*NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_PseudoWire) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_Router represents the /nokia-conf/configure/service/vpls/sap/l2tpv3-session/router YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_Router struct {
	Group          *string `path:"group" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_Router implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_Router) IsYANGGoStruct() {}

// GetGroup retrieves the value of the leaf Group from the NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_Router) GetGroup() string {
	if t == nil || t.Group == nil {
		return ""
	}
	return *t.Group
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_Router) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_Router
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_Router) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_Router) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_Router"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_Router) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_Router) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_Router.
func (*NokiaConf_Configure_Service_Vpls_Sap_L2Tpv3Session_Router) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Lag represents the /nokia-conf/configure/service/vpls/sap/lag YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Lag struct {
	LinkMapProfile *int32                                                `path:"link-map-profile" module:"nokia-conf"`
	PerLinkHash    *NokiaConf_Configure_Service_Vpls_Sap_Lag_PerLinkHash `path:"per-link-hash" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Lag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Lag) IsYANGGoStruct() {}

// GetOrCreatePerLinkHash retrieves the value of the PerLinkHash field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Lag) GetOrCreatePerLinkHash() *NokiaConf_Configure_Service_Vpls_Sap_Lag_PerLinkHash {
	if t.PerLinkHash != nil {
		return t.PerLinkHash
	}
	t.PerLinkHash = &NokiaConf_Configure_Service_Vpls_Sap_Lag_PerLinkHash{}
	return t.PerLinkHash
}

// GetPerLinkHash returns the value of the PerLinkHash struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Lag. If the receiver or the field PerLinkHash is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Lag) GetPerLinkHash() *NokiaConf_Configure_Service_Vpls_Sap_Lag_PerLinkHash {
	if t != nil && t.PerLinkHash != nil {
		return t.PerLinkHash
	}
	return nil
}

// GetLinkMapProfile retrieves the value of the leaf LinkMapProfile from the NokiaConf_Configure_Service_Vpls_Sap_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkMapProfile is set, it can
// safely use t.GetLinkMapProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkMapProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Lag) GetLinkMapProfile() int32 {
	if t == nil || t.LinkMapProfile == nil {
		return 0
	}
	return *t.LinkMapProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Lag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Lag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PerLinkHash.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Lag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Lag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Lag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Lag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Lag.
func (*NokiaConf_Configure_Service_Vpls_Sap_Lag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Lag_PerLinkHash represents the /nokia-conf/configure/service/vpls/sap/lag/per-link-hash YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Lag_PerLinkHash struct {
	Class  *int32 `path:"class" module:"nokia-conf"`
	Weight *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Lag_PerLinkHash implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Lag_PerLinkHash) IsYANGGoStruct() {}

// GetClass retrieves the value of the leaf Class from the NokiaConf_Configure_Service_Vpls_Sap_Lag_PerLinkHash
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Class is set, it can
// safely use t.GetClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Class == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Lag_PerLinkHash) GetClass() int32 {
	if t == nil || t.Class == nil {
		return 1
	}
	return *t.Class
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Service_Vpls_Sap_Lag_PerLinkHash
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Lag_PerLinkHash) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Lag_PerLinkHash
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Lag_PerLinkHash) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Class == nil {
		var v int32 = 1
		t.Class = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Lag_PerLinkHash) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Lag_PerLinkHash"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Lag_PerLinkHash) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Lag_PerLinkHash) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Lag_PerLinkHash.
func (*NokiaConf_Configure_Service_Vpls_Sap_Lag_PerLinkHash) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList represents the /nokia-conf/configure/service/vpls/sap/managed-vlan-list YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList struct {
	Range map[string]*NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList) IsYANGGoStruct() {}

// NewRange creates a new entry in the Range list of the
// NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList) NewRange(VlanRange string) (*NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList_Range, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[string]*NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList_Range)
	}

	key := VlanRange

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Range[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Range", key)
	}

	t.Range[key] = &NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList_Range{
		VlanRange: &VlanRange,
	}

	return t.Range[key], nil
}

// RenameRange renames an entry in the list Range within
// the NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList) RenameRange(oldK, newK string) error {
	if _, ok := t.Range[newK]; ok {
		return fmt.Errorf("key %v already exists in Range", newK)
	}

	e, ok := t.Range[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Range", oldK)
	}
	e.VlanRange = &newK

	t.Range[newK] = e
	delete(t.Range, oldK)
	return nil
}

// GetOrCreateRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList) GetOrCreateRange(VlanRange string) *NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList_Range {

	key := VlanRange

	if v, ok := t.Range[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRange(VlanRange)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRange got unexpected error: %v", err))
	}
	return v
}

// GetRange retrieves the value with the specified key from
// the Range map field of NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList) GetRange(VlanRange string) *NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList_Range {

	if t == nil {
		return nil
	}

	key := VlanRange

	if lm, ok := t.Range[key]; ok {
		return lm
	}
	return nil
}

// DeleteRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList) DeleteRange(VlanRange string) {
	key := VlanRange

	delete(t.Range, key)
}

// AppendRange appends the supplied NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList_Range struct to the
// list Range of NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList_Range already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList) AppendRange(v *NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList_Range) error {
	if v.VlanRange == nil {
		return fmt.Errorf("invalid nil key received for VlanRange")
	}

	key := *v.VlanRange

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[string]*NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList_Range)
	}

	if _, ok := t.Range[key]; ok {
		return fmt.Errorf("duplicate key for list Range %v", key)
	}

	t.Range[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Range {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList.
func (*NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList_Range represents the /nokia-conf/configure/service/vpls/sap/managed-vlan-list/range YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList_Range struct {
	VlanRange *string `path:"vlan-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList_Range) IsYANGGoStruct() {}

// GetVlanRange retrieves the value of the leaf VlanRange from the NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanRange is set, it can
// safely use t.GetVlanRange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanRange == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList_Range) GetVlanRange() string {
	if t == nil || t.VlanRange == nil {
		return ""
	}
	return *t.VlanRange
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList_Range struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList_Range) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VlanRange == nil {
		return nil, fmt.Errorf("nil value for key VlanRange")
	}

	return map[string]interface{}{
		"vlan-range": *t.VlanRange,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList_Range.
func (*NokiaConf_Configure_Service_Vpls_Sap_ManagedVlanList_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_McRing represents the /nokia-conf/configure/service/vpls/sap/mc-ring YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_McRing struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	RingNode           *string  `path:"ring-node" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_McRing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_McRing) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Sap_McRing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_McRing) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Sap_McRing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_McRing) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetRingNode retrieves the value of the leaf RingNode from the NokiaConf_Configure_Service_Vpls_Sap_McRing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RingNode is set, it can
// safely use t.GetRingNode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RingNode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_McRing) GetRingNode() string {
	if t == nil || t.RingNode == nil {
		return ""
	}
	return *t.RingNode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_McRing
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_McRing) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_McRing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_McRing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_McRing) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_McRing) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_McRing.
func (*NokiaConf_Configure_Service_Vpls_Sap_McRing) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_MldSnooping represents the /nokia-conf/configure/service/vpls/sap/mld-snooping YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_MldSnooping struct {
	ApplyGroups             []string                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	FastLeave               *bool                                                    `path:"fast-leave" module:"nokia-conf"`
	ImportPolicy            *string                                                  `path:"import-policy" module:"nokia-conf"`
	MaximumNumberGroups     *uint32                                                  `path:"maximum-number-groups" module:"nokia-conf"`
	MrouterPort             *bool                                                    `path:"mrouter-port" module:"nokia-conf"`
	Mvr                     *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Mvr    `path:"mvr" module:"nokia-conf"`
	QueryInterval           *uint32                                                  `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval *uint32                                                  `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval   *uint32                                                  `path:"query-response-interval" module:"nokia-conf"`
	RobustCount             *uint32                                                  `path:"robust-count" module:"nokia-conf"`
	RouterAlertCheck        *bool                                                    `path:"router-alert-check" module:"nokia-conf"`
	SendQueries             *bool                                                    `path:"send-queries" module:"nokia-conf"`
	Static                  *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static `path:"static" module:"nokia-conf"`
	Version                 E_NokiaTypesIgmp_MldVersion                              `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_MldSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_MldSnooping) IsYANGGoStruct() {}

// GetOrCreateMvr retrieves the value of the Mvr field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping) GetOrCreateMvr() *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Mvr {
	if t.Mvr != nil {
		return t.Mvr
	}
	t.Mvr = &NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Mvr{}
	return t.Mvr
}

// GetOrCreateStatic retrieves the value of the Static field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping) GetOrCreateStatic() *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static {
	if t.Static != nil {
		return t.Static
	}
	t.Static = &NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static{}
	return t.Static
}

// GetMvr returns the value of the Mvr struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_MldSnooping. If the receiver or the field Mvr is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping) GetMvr() *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Mvr {
	if t != nil && t.Mvr != nil {
		return t.Mvr
	}
	return nil
}

// GetStatic returns the value of the Static struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_MldSnooping. If the receiver or the field Static is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping) GetStatic() *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static {
	if t != nil && t.Static != nil {
		return t.Static
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Sap_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Sap_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFastLeave retrieves the value of the leaf FastLeave from the NokiaConf_Configure_Service_Vpls_Sap_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastLeave is set, it can
// safely use t.GetFastLeave() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastLeave == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping) GetFastLeave() bool {
	if t == nil || t.FastLeave == nil {
		return false
	}
	return *t.FastLeave
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Service_Vpls_Sap_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Service_Vpls_Sap_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMrouterPort retrieves the value of the leaf MrouterPort from the NokiaConf_Configure_Service_Vpls_Sap_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MrouterPort is set, it can
// safely use t.GetMrouterPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MrouterPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping) GetMrouterPort() bool {
	if t == nil || t.MrouterPort == nil {
		return false
	}
	return *t.MrouterPort
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Service_Vpls_Sap_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 125
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Service_Vpls_Sap_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 10
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Service_Vpls_Sap_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 10
	}
	return *t.QueryResponseInterval
}

// GetRobustCount retrieves the value of the leaf RobustCount from the NokiaConf_Configure_Service_Vpls_Sap_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RobustCount is set, it can
// safely use t.GetRobustCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RobustCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping) GetRobustCount() uint32 {
	if t == nil || t.RobustCount == nil {
		return 2
	}
	return *t.RobustCount
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the NokiaConf_Configure_Service_Vpls_Sap_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetSendQueries retrieves the value of the leaf SendQueries from the NokiaConf_Configure_Service_Vpls_Sap_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendQueries is set, it can
// safely use t.GetSendQueries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendQueries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping) GetSendQueries() bool {
	if t == nil || t.SendQueries == nil {
		return false
	}
	return *t.SendQueries
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Service_Vpls_Sap_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping) GetVersion() E_NokiaTypesIgmp_MldVersion {
	if t == nil || t.Version == 0 {
		return NokiaTypesIgmp_MldVersion_2
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_MldSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastLeave == nil {
		var v bool = false
		t.FastLeave = &v
	}
	if t.MrouterPort == nil {
		var v bool = false
		t.MrouterPort = &v
	}
	if t.QueryInterval == nil {
		var v uint32 = 125
		t.QueryInterval = &v
	}
	if t.QueryLastMemberInterval == nil {
		var v uint32 = 10
		t.QueryLastMemberInterval = &v
	}
	if t.QueryResponseInterval == nil {
		var v uint32 = 10
		t.QueryResponseInterval = &v
	}
	if t.RobustCount == nil {
		var v uint32 = 2
		t.RobustCount = &v
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.SendQueries == nil {
		var v bool = false
		t.SendQueries = &v
	}
	if t.Version == 0 {
		t.Version = NokiaTypesIgmp_MldVersion_2
	}
	t.Mvr.PopulateDefaults()
	t.Static.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_MldSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_MldSnooping.
func (*NokiaConf_Configure_Service_Vpls_Sap_MldSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Mvr represents the /nokia-conf/configure/service/vpls/sap/mld-snooping/mvr YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Mvr struct {
	FromVpls *string `path:"from-vpls" module:"nokia-conf"`
	ToSap    *string `path:"to-sap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Mvr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Mvr) IsYANGGoStruct() {}

// GetFromVpls retrieves the value of the leaf FromVpls from the NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Mvr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FromVpls is set, it can
// safely use t.GetFromVpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FromVpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Mvr) GetFromVpls() string {
	if t == nil || t.FromVpls == nil {
		return ""
	}
	return *t.FromVpls
}

// GetToSap retrieves the value of the leaf ToSap from the NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Mvr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ToSap is set, it can
// safely use t.GetToSap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ToSap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Mvr) GetToSap() string {
	if t == nil || t.ToSap == nil {
		return ""
	}
	return *t.ToSap
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Mvr
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Mvr) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Mvr) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Mvr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Mvr) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Mvr) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Mvr.
func (*NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Mvr) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static represents the /nokia-conf/configure/service/vpls/sap/mld-snooping/static YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static struct {
	Group map[string]*NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group `path:"group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static) NewGroup(GroupAddress string) (*NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group)
	}

	key := GroupAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group{
		GroupAddress: &GroupAddress,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupAddress = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static) GetOrCreateGroup(GroupAddress string) *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group {

	key := GroupAddress

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static) GetGroup(GroupAddress string) *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group {

	if t == nil {
		return nil
	}

	key := GroupAddress

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static) DeleteGroup(GroupAddress string) {
	key := GroupAddress

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group struct to the
// list Group of NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static) AppendGroup(v *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group) error {
	if v.GroupAddress == nil {
		return fmt.Errorf("invalid nil key received for GroupAddress")
	}

	key := *v.GroupAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static.
func (*NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group represents the /nokia-conf/configure/service/vpls/sap/mld-snooping/static/group YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group struct {
	ApplyGroups        []string                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupAddress       *string                                                                          `path:"group-address" module:"nokia-conf"`
	Source             map[string]*NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group_Source `path:"source" module:"nokia-conf"`
	Starg              YANGEmpty                                                                        `path:"starg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group) IsYANGGoStruct() {}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group) NewSource(SourceAddress string) (*NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group) GetSource(SourceAddress string) *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group_Source struct to the
// list Source of NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group) AppendSource(v *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetStarg retrieves the value of the leaf Starg from the NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group) GetStarg() YANGEmpty {
	if t == nil || t.Starg == false {
		return false
	}
	return t.Starg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupAddress == nil {
		return nil, fmt.Errorf("nil value for key GroupAddress")
	}

	return map[string]interface{}{
		"group-address": *t.GroupAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group.
func (*NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group_Source represents the /nokia-conf/configure/service/vpls/sap/mld-snooping/static/group/source YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group_Source) IsYANGGoStruct() {}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group_Source.
func (*NokiaConf_Configure_Service_Vpls_Sap_MldSnooping_Static_Group_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Mrp represents the /nokia-conf/configure/service/vpls/sap/mrp YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Mrp struct {
	JoinTime      *uint32 `path:"join-time" module:"nokia-conf"`
	LeaveAllTime  *uint32 `path:"leave-all-time" module:"nokia-conf"`
	LeaveTime     *uint32 `path:"leave-time" module:"nokia-conf"`
	PeriodicTime  *uint32 `path:"periodic-time" module:"nokia-conf"`
	PeriodicTimer *bool   `path:"periodic-timer" module:"nokia-conf"`
	Policy        *string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Mrp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Mrp) IsYANGGoStruct() {}

// GetJoinTime retrieves the value of the leaf JoinTime from the NokiaConf_Configure_Service_Vpls_Sap_Mrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if JoinTime is set, it can
// safely use t.GetJoinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.JoinTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Mrp) GetJoinTime() uint32 {
	if t == nil || t.JoinTime == nil {
		return 2
	}
	return *t.JoinTime
}

// GetLeaveAllTime retrieves the value of the leaf LeaveAllTime from the NokiaConf_Configure_Service_Vpls_Sap_Mrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LeaveAllTime is set, it can
// safely use t.GetLeaveAllTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LeaveAllTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Mrp) GetLeaveAllTime() uint32 {
	if t == nil || t.LeaveAllTime == nil {
		return 100
	}
	return *t.LeaveAllTime
}

// GetLeaveTime retrieves the value of the leaf LeaveTime from the NokiaConf_Configure_Service_Vpls_Sap_Mrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LeaveTime is set, it can
// safely use t.GetLeaveTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LeaveTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Mrp) GetLeaveTime() uint32 {
	if t == nil || t.LeaveTime == nil {
		return 30
	}
	return *t.LeaveTime
}

// GetPeriodicTime retrieves the value of the leaf PeriodicTime from the NokiaConf_Configure_Service_Vpls_Sap_Mrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeriodicTime is set, it can
// safely use t.GetPeriodicTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeriodicTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Mrp) GetPeriodicTime() uint32 {
	if t == nil || t.PeriodicTime == nil {
		return 10
	}
	return *t.PeriodicTime
}

// GetPeriodicTimer retrieves the value of the leaf PeriodicTimer from the NokiaConf_Configure_Service_Vpls_Sap_Mrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeriodicTimer is set, it can
// safely use t.GetPeriodicTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeriodicTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Mrp) GetPeriodicTimer() bool {
	if t == nil || t.PeriodicTimer == nil {
		return false
	}
	return *t.PeriodicTimer
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vpls_Sap_Mrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Mrp) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Mrp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Mrp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.JoinTime == nil {
		var v uint32 = 2
		t.JoinTime = &v
	}
	if t.LeaveAllTime == nil {
		var v uint32 = 100
		t.LeaveAllTime = &v
	}
	if t.LeaveTime == nil {
		var v uint32 = 30
		t.LeaveTime = &v
	}
	if t.PeriodicTime == nil {
		var v uint32 = 10
		t.PeriodicTime = &v
	}
	if t.PeriodicTimer == nil {
		var v bool = false
		t.PeriodicTimer = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Mrp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Mrp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Mrp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Mrp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Mrp.
func (*NokiaConf_Configure_Service_Vpls_Sap_Mrp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Pbb represents the /nokia-conf/configure/service/vpls/sap/pbb YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Pbb struct {
	FaultPropagation *NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation `path:"fault-propagation" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Pbb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Pbb) IsYANGGoStruct() {}

// GetOrCreateFaultPropagation retrieves the value of the FaultPropagation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Pbb) GetOrCreateFaultPropagation() *NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation {
	if t.FaultPropagation != nil {
		return t.FaultPropagation
	}
	t.FaultPropagation = &NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation{}
	return t.FaultPropagation
}

// GetFaultPropagation returns the value of the FaultPropagation struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_Pbb. If the receiver or the field FaultPropagation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Pbb) GetFaultPropagation() *NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation {
	if t != nil && t.FaultPropagation != nil {
		return t.FaultPropagation
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Pbb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Pbb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FaultPropagation.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Pbb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Pbb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Pbb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Pbb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Pbb.
func (*NokiaConf_Configure_Service_Vpls_Sap_Pbb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation represents the /nokia-conf/configure/service/vpls/sap/pbb/fault-propagation YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation struct {
	BackboneMacAddress map[string]*NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacAddress `path:"backbone-mac-address" module:"nokia-conf"`
	BackboneMacName    map[string]*NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacName    `path:"backbone-mac-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation) IsYANGGoStruct() {}

// NewBackboneMacAddress creates a new entry in the BackboneMacAddress list of the
// NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation) NewBackboneMacAddress(Address string) (*NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacAddress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BackboneMacAddress == nil {
		t.BackboneMacAddress = make(map[string]*NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacAddress)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BackboneMacAddress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BackboneMacAddress", key)
	}

	t.BackboneMacAddress[key] = &NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacAddress{
		Address: &Address,
	}

	return t.BackboneMacAddress[key], nil
}

// RenameBackboneMacAddress renames an entry in the list BackboneMacAddress within
// the NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation) RenameBackboneMacAddress(oldK, newK string) error {
	if _, ok := t.BackboneMacAddress[newK]; ok {
		return fmt.Errorf("key %v already exists in BackboneMacAddress", newK)
	}

	e, ok := t.BackboneMacAddress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BackboneMacAddress", oldK)
	}
	e.Address = &newK

	t.BackboneMacAddress[newK] = e
	delete(t.BackboneMacAddress, oldK)
	return nil
}

// GetOrCreateBackboneMacAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation) GetOrCreateBackboneMacAddress(Address string) *NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacAddress {

	key := Address

	if v, ok := t.BackboneMacAddress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBackboneMacAddress(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBackboneMacAddress got unexpected error: %v", err))
	}
	return v
}

// GetBackboneMacAddress retrieves the value with the specified key from
// the BackboneMacAddress map field of NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation) GetBackboneMacAddress(Address string) *NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacAddress {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.BackboneMacAddress[key]; ok {
		return lm
	}
	return nil
}

// DeleteBackboneMacAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation) DeleteBackboneMacAddress(Address string) {
	key := Address

	delete(t.BackboneMacAddress, key)
}

// AppendBackboneMacAddress appends the supplied NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacAddress struct to the
// list BackboneMacAddress of NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacAddress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation) AppendBackboneMacAddress(v *NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacAddress) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BackboneMacAddress == nil {
		t.BackboneMacAddress = make(map[string]*NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacAddress)
	}

	if _, ok := t.BackboneMacAddress[key]; ok {
		return fmt.Errorf("duplicate key for list BackboneMacAddress %v", key)
	}

	t.BackboneMacAddress[key] = v
	return nil
}

// NewBackboneMacName creates a new entry in the BackboneMacName list of the
// NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation) NewBackboneMacName(Name string) (*NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacName, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BackboneMacName == nil {
		t.BackboneMacName = make(map[string]*NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacName)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BackboneMacName[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BackboneMacName", key)
	}

	t.BackboneMacName[key] = &NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacName{
		Name: &Name,
	}

	return t.BackboneMacName[key], nil
}

// RenameBackboneMacName renames an entry in the list BackboneMacName within
// the NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation) RenameBackboneMacName(oldK, newK string) error {
	if _, ok := t.BackboneMacName[newK]; ok {
		return fmt.Errorf("key %v already exists in BackboneMacName", newK)
	}

	e, ok := t.BackboneMacName[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BackboneMacName", oldK)
	}
	e.Name = &newK

	t.BackboneMacName[newK] = e
	delete(t.BackboneMacName, oldK)
	return nil
}

// GetOrCreateBackboneMacName retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation) GetOrCreateBackboneMacName(Name string) *NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacName {

	key := Name

	if v, ok := t.BackboneMacName[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBackboneMacName(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBackboneMacName got unexpected error: %v", err))
	}
	return v
}

// GetBackboneMacName retrieves the value with the specified key from
// the BackboneMacName map field of NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation) GetBackboneMacName(Name string) *NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacName {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.BackboneMacName[key]; ok {
		return lm
	}
	return nil
}

// DeleteBackboneMacName deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation) DeleteBackboneMacName(Name string) {
	key := Name

	delete(t.BackboneMacName, key)
}

// AppendBackboneMacName appends the supplied NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacName struct to the
// list BackboneMacName of NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacName already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation) AppendBackboneMacName(v *NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacName) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BackboneMacName == nil {
		t.BackboneMacName = make(map[string]*NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacName)
	}

	if _, ok := t.BackboneMacName[key]; ok {
		return fmt.Errorf("duplicate key for list BackboneMacName %v", key)
	}

	t.BackboneMacName[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.BackboneMacAddress {
		e.PopulateDefaults()
	}
	for _, e := range t.BackboneMacName {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation.
func (*NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacAddress represents the /nokia-conf/configure/service/vpls/sap/pbb/fault-propagation/backbone-mac-address YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacAddress struct {
	Address *string `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacAddress) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacAddress) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacAddress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacAddress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacAddress.
func (*NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacName represents the /nokia-conf/configure/service/vpls/sap/pbb/fault-propagation/backbone-mac-name YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacName struct {
	Name *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacName implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacName) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacName) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacName
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacName) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacName struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacName) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacName) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacName"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacName) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacName) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacName.
func (*NokiaConf_Configure_Service_Vpls_Sap_Pbb_FaultPropagation_BackboneMacName) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_PimSnooping represents the /nokia-conf/configure/service/vpls/sap/pim-snooping YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_PimSnooping struct {
	ApplyGroups         []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string `path:"apply-groups-exclude" module:"nokia-conf"`
	MaximumNumberGroups *uint32  `path:"maximum-number-groups" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_PimSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_PimSnooping) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Sap_PimSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_PimSnooping) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Sap_PimSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_PimSnooping) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Service_Vpls_Sap_PimSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_PimSnooping) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_PimSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_PimSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_PimSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_PimSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_PimSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_PimSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_PimSnooping.
func (*NokiaConf_Configure_Service_Vpls_Sap_PimSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Spb represents the /nokia-conf/configure/service/vpls/sap/spb YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Spb struct {
	AdminState         E_NokiaTypesSros_AdminState                               `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	Level              map[int32]*NokiaConf_Configure_Service_Vpls_Sap_Spb_Level `path:"level" module:"nokia-conf"`
	LspPacingInterval  *uint32                                                   `path:"lsp-pacing-interval" module:"nokia-conf"`
	RetransmitInterval *uint32                                                   `path:"retransmit-interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Spb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Spb) IsYANGGoStruct() {}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Service_Vpls_Sap_Spb struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Spb) NewLevel(Id int32) (*NokiaConf_Configure_Service_Vpls_Sap_Spb_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[int32]*NokiaConf_Configure_Service_Vpls_Sap_Spb_Level)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Service_Vpls_Sap_Spb_Level{
		Id: &Id,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Service_Vpls_Sap_Spb struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Spb) RenameLevel(oldK, newK int32) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.Id = &newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_Spb. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Spb) GetOrCreateLevel(Id int32) *NokiaConf_Configure_Service_Vpls_Sap_Spb_Level {

	key := Id

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Service_Vpls_Sap_Spb. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Spb) GetLevel(Id int32) *NokiaConf_Configure_Service_Vpls_Sap_Spb_Level {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_Spb. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Spb) DeleteLevel(Id int32) {
	key := Id

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Service_Vpls_Sap_Spb_Level struct to the
// list Level of NokiaConf_Configure_Service_Vpls_Sap_Spb. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Sap_Spb_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Spb) AppendLevel(v *NokiaConf_Configure_Service_Vpls_Sap_Spb_Level) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[int32]*NokiaConf_Configure_Service_Vpls_Sap_Spb_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_Sap_Spb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Spb) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Sap_Spb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Spb) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Sap_Spb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Spb) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLspPacingInterval retrieves the value of the leaf LspPacingInterval from the NokiaConf_Configure_Service_Vpls_Sap_Spb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspPacingInterval is set, it can
// safely use t.GetLspPacingInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspPacingInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Spb) GetLspPacingInterval() uint32 {
	if t == nil || t.LspPacingInterval == nil {
		return 100
	}
	return *t.LspPacingInterval
}

// GetRetransmitInterval retrieves the value of the leaf RetransmitInterval from the NokiaConf_Configure_Service_Vpls_Sap_Spb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetransmitInterval is set, it can
// safely use t.GetRetransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Spb) GetRetransmitInterval() uint32 {
	if t == nil || t.RetransmitInterval == nil {
		return 5
	}
	return *t.RetransmitInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Spb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Spb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.LspPacingInterval == nil {
		var v uint32 = 100
		t.LspPacingInterval = &v
	}
	if t.RetransmitInterval == nil {
		var v uint32 = 5
		t.RetransmitInterval = &v
	}
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Spb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Spb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Spb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Spb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Spb.
func (*NokiaConf_Configure_Service_Vpls_Sap_Spb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Spb_Level represents the /nokia-conf/configure/service/vpls/sap/spb/level YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Spb_Level struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	HelloInterval      *uint32  `path:"hello-interval" module:"nokia-conf"`
	HelloMultiplier    *int32   `path:"hello-multiplier" module:"nokia-conf"`
	Id                 *int32   `path:"id" module:"nokia-conf"`
	Metric             *uint32  `path:"metric" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Spb_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Spb_Level) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Sap_Spb_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Spb_Level) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Sap_Spb_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Spb_Level) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NokiaConf_Configure_Service_Vpls_Sap_Spb_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Spb_Level) GetHelloInterval() uint32 {
	if t == nil || t.HelloInterval == nil {
		return 9
	}
	return *t.HelloInterval
}

// GetHelloMultiplier retrieves the value of the leaf HelloMultiplier from the NokiaConf_Configure_Service_Vpls_Sap_Spb_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloMultiplier is set, it can
// safely use t.GetHelloMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloMultiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Spb_Level) GetHelloMultiplier() int32 {
	if t == nil || t.HelloMultiplier == nil {
		return 3
	}
	return *t.HelloMultiplier
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Service_Vpls_Sap_Spb_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Spb_Level) GetId() int32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetMetric retrieves the value of the leaf Metric from the NokiaConf_Configure_Service_Vpls_Sap_Spb_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Spb_Level) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Spb_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Spb_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HelloInterval == nil {
		var v uint32 = 9
		t.HelloInterval = &v
	}
	if t.HelloMultiplier == nil {
		var v int32 = 3
		t.HelloMultiplier = &v
	}
	if t.Metric == nil {
		var v uint32 = 0
		t.Metric = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Sap_Spb_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Spb_Level) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Spb_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Spb_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Spb_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Spb_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Spb_Level.
func (*NokiaConf_Configure_Service_Vpls_Sap_Spb_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_StaticHost represents the /nokia-conf/configure/service/vpls/sap/static-host YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_StaticHost struct {
	Ipv4 map[NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_Key]*NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4 `path:"ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_StaticHost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_StaticHost) IsYANGGoStruct() {}

// NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_Key represents the key for list Ipv4 of element /nokia-conf/configure/service/vpls/sap/static-host.
type NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_Key struct {
	Ip  string `path:"ip"`
	Mac string `path:"mac"`
}

// NewIpv4 creates a new entry in the Ipv4 list of the
// NokiaConf_Configure_Service_Vpls_Sap_StaticHost struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost) NewIpv4(Ip string, Mac string) (*NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4 == nil {
		t.Ipv4 = make(map[NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_Key]*NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4)
	}

	key := NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_Key{
		Ip:  Ip,
		Mac: Mac,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv4[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv4", key)
	}

	t.Ipv4[key] = &NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4{
		Ip:  &Ip,
		Mac: &Mac,
	}

	return t.Ipv4[key], nil
}

// RenameIpv4 renames an entry in the list Ipv4 within
// the NokiaConf_Configure_Service_Vpls_Sap_StaticHost struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost) RenameIpv4(oldK, newK NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_Key) error {
	if _, ok := t.Ipv4[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv4", newK)
	}

	e, ok := t.Ipv4[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv4", oldK)
	}
	e.Ip = &newK.Ip
	e.Mac = &newK.Mac

	t.Ipv4[newK] = e
	delete(t.Ipv4, oldK)
	return nil
}

// GetOrCreateIpv4 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_StaticHost. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost) GetOrCreateIpv4(Ip string, Mac string) *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4 {

	key := NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_Key{
		Ip:  Ip,
		Mac: Mac,
	}

	if v, ok := t.Ipv4[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv4(Ip, Mac)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv4 got unexpected error: %v", err))
	}
	return v
}

// GetIpv4 retrieves the value with the specified key from
// the Ipv4 map field of NokiaConf_Configure_Service_Vpls_Sap_StaticHost. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost) GetIpv4(Ip string, Mac string) *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4 {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_Key{
		Ip:  Ip,
		Mac: Mac,
	}

	if lm, ok := t.Ipv4[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv4 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_StaticHost. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost) DeleteIpv4(Ip string, Mac string) {
	key := NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_Key{
		Ip:  Ip,
		Mac: Mac,
	}

	delete(t.Ipv4, key)
}

// AppendIpv4 appends the supplied NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4 struct to the
// list Ipv4 of NokiaConf_Configure_Service_Vpls_Sap_StaticHost. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost) AppendIpv4(v *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4) error {
	if v.Ip == nil {
		return fmt.Errorf("invalid nil key for Ip")
	}

	if v.Mac == nil {
		return fmt.Errorf("invalid nil key for Mac")
	}

	key := NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_Key{
		Ip:  *v.Ip,
		Mac: *v.Mac,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4 == nil {
		t.Ipv4 = make(map[NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_Key]*NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4)
	}

	if _, ok := t.Ipv4[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv4 %v", key)
	}

	t.Ipv4[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_StaticHost
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Ipv4 {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_StaticHost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_StaticHost.
func (*NokiaConf_Configure_Service_Vpls_Sap_StaticHost) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4 represents the /nokia-conf/configure/service/vpls/sap/static-host/ipv4 YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4 struct {
	AdminState         E_NokiaTypesSros_AdminState                                        `path:"admin-state" module:"nokia-conf"`
	AncpString         *string                                                            `path:"ancp-string" module:"nokia-conf"`
	AppProfile         *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_AppProfile   `path:"app-profile" module:"nokia-conf"`
	ApplyGroups        []string                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	IntDestId          *string                                                            `path:"int-dest-id" module:"nokia-conf"`
	Ip                 *string                                                            `path:"ip" module:"nokia-conf"`
	Mac                *string                                                            `path:"mac" module:"nokia-conf"`
	Shcv               *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_Shcv         `path:"shcv" module:"nokia-conf"`
	SlaProfile         *string                                                            `path:"sla-profile" module:"nokia-conf"`
	SubProfile         *string                                                            `path:"sub-profile" module:"nokia-conf"`
	SubscriberId       *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_SubscriberId `path:"subscriber-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4) IsYANGGoStruct() {}

// GetOrCreateAppProfile retrieves the value of the AppProfile field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4) GetOrCreateAppProfile() *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_AppProfile {
	if t.AppProfile != nil {
		return t.AppProfile
	}
	t.AppProfile = &NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_AppProfile{}
	return t.AppProfile
}

// GetOrCreateShcv retrieves the value of the Shcv field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4) GetOrCreateShcv() *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_Shcv {
	if t.Shcv != nil {
		return t.Shcv
	}
	t.Shcv = &NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_Shcv{}
	return t.Shcv
}

// GetOrCreateSubscriberId retrieves the value of the SubscriberId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4) GetOrCreateSubscriberId() *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_SubscriberId {
	if t.SubscriberId != nil {
		return t.SubscriberId
	}
	t.SubscriberId = &NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_SubscriberId{}
	return t.SubscriberId
}

// GetAppProfile returns the value of the AppProfile struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4. If the receiver or the field AppProfile is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4) GetAppProfile() *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_AppProfile {
	if t != nil && t.AppProfile != nil {
		return t.AppProfile
	}
	return nil
}

// GetShcv returns the value of the Shcv struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4. If the receiver or the field Shcv is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4) GetShcv() *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_Shcv {
	if t != nil && t.Shcv != nil {
		return t.Shcv
	}
	return nil
}

// GetSubscriberId returns the value of the SubscriberId struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4. If the receiver or the field SubscriberId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4) GetSubscriberId() *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_SubscriberId {
	if t != nil && t.SubscriberId != nil {
		return t.SubscriberId
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAncpString retrieves the value of the leaf AncpString from the NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AncpString is set, it can
// safely use t.GetAncpString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AncpString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4) GetAncpString() string {
	if t == nil || t.AncpString == nil {
		return ""
	}
	return *t.AncpString
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIntDestId retrieves the value of the leaf IntDestId from the NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IntDestId is set, it can
// safely use t.GetIntDestId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IntDestId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4) GetIntDestId() string {
	if t == nil || t.IntDestId == nil {
		return ""
	}
	return *t.IntDestId
}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// GetSlaProfile retrieves the value of the leaf SlaProfile from the NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlaProfile is set, it can
// safely use t.GetSlaProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlaProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4) GetSlaProfile() string {
	if t == nil || t.SlaProfile == nil {
		return ""
	}
	return *t.SlaProfile
}

// GetSubProfile retrieves the value of the leaf SubProfile from the NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubProfile is set, it can
// safely use t.GetSubProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4) GetSubProfile() string {
	if t == nil || t.SubProfile == nil {
		return ""
	}
	return *t.SubProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.AppProfile.PopulateDefaults()
	t.Shcv.PopulateDefaults()
	t.SubscriberId.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ip == nil {
		return nil, fmt.Errorf("nil value for key Ip")
	}

	if t.Mac == nil {
		return nil, fmt.Errorf("nil value for key Mac")
	}

	return map[string]interface{}{
		"ip":  *t.Ip,
		"mac": *t.Mac,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4.
func (*NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_AppProfile represents the /nokia-conf/configure/service/vpls/sap/static-host/ipv4/app-profile YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_AppProfile struct {
	Profile *string `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_AppProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_AppProfile) IsYANGGoStruct() {}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_AppProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_AppProfile) GetProfile() string {
	if t == nil || t.Profile == nil {
		return ""
	}
	return *t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_AppProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_AppProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_AppProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_AppProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_AppProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_AppProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_AppProfile.
func (*NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_AppProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_Shcv represents the /nokia-conf/configure/service/vpls/sap/static-host/ipv4/shcv YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_Shcv struct {
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_Shcv implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_Shcv) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_Shcv
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_Shcv) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_Shcv) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_Shcv"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_Shcv) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_Shcv) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_Shcv.
func (*NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_Shcv) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_SubscriberId represents the /nokia-conf/configure/service/vpls/sap/static-host/ipv4/subscriber-id YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_SubscriberId struct {
	String   *string   `path:"string" module:"nokia-conf"`
	UseSapId YANGEmpty `path:"use-sap-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_SubscriberId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_SubscriberId) IsYANGGoStruct() {}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_SubscriberId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_SubscriberId) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// GetUseSapId retrieves the value of the leaf UseSapId from the NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_SubscriberId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseSapId is set, it can
// safely use t.GetUseSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseSapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_SubscriberId) GetUseSapId() YANGEmpty {
	if t == nil || t.UseSapId == false {
		return false
	}
	return t.UseSapId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_SubscriberId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_SubscriberId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_SubscriberId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_SubscriberId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_SubscriberId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_SubscriberId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_SubscriberId.
func (*NokiaConf_Configure_Service_Vpls_Sap_StaticHost_Ipv4_SubscriberId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_StaticIsid represents the /nokia-conf/configure/service/vpls/sap/static-isid YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_StaticIsid struct {
	Range map[uint32]*NokiaConf_Configure_Service_Vpls_Sap_StaticIsid_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_StaticIsid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_StaticIsid) IsYANGGoStruct() {}

// NewRange creates a new entry in the Range list of the
// NokiaConf_Configure_Service_Vpls_Sap_StaticIsid struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticIsid) NewRange(RangeId uint32) (*NokiaConf_Configure_Service_Vpls_Sap_StaticIsid_Range, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[uint32]*NokiaConf_Configure_Service_Vpls_Sap_StaticIsid_Range)
	}

	key := RangeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Range[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Range", key)
	}

	t.Range[key] = &NokiaConf_Configure_Service_Vpls_Sap_StaticIsid_Range{
		RangeId: &RangeId,
	}

	return t.Range[key], nil
}

// RenameRange renames an entry in the list Range within
// the NokiaConf_Configure_Service_Vpls_Sap_StaticIsid struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticIsid) RenameRange(oldK, newK uint32) error {
	if _, ok := t.Range[newK]; ok {
		return fmt.Errorf("key %v already exists in Range", newK)
	}

	e, ok := t.Range[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Range", oldK)
	}
	e.RangeId = &newK

	t.Range[newK] = e
	delete(t.Range, oldK)
	return nil
}

// GetOrCreateRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_StaticIsid. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticIsid) GetOrCreateRange(RangeId uint32) *NokiaConf_Configure_Service_Vpls_Sap_StaticIsid_Range {

	key := RangeId

	if v, ok := t.Range[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRange(RangeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRange got unexpected error: %v", err))
	}
	return v
}

// GetRange retrieves the value with the specified key from
// the Range map field of NokiaConf_Configure_Service_Vpls_Sap_StaticIsid. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticIsid) GetRange(RangeId uint32) *NokiaConf_Configure_Service_Vpls_Sap_StaticIsid_Range {

	if t == nil {
		return nil
	}

	key := RangeId

	if lm, ok := t.Range[key]; ok {
		return lm
	}
	return nil
}

// DeleteRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_StaticIsid. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticIsid) DeleteRange(RangeId uint32) {
	key := RangeId

	delete(t.Range, key)
}

// AppendRange appends the supplied NokiaConf_Configure_Service_Vpls_Sap_StaticIsid_Range struct to the
// list Range of NokiaConf_Configure_Service_Vpls_Sap_StaticIsid. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Sap_StaticIsid_Range already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticIsid) AppendRange(v *NokiaConf_Configure_Service_Vpls_Sap_StaticIsid_Range) error {
	if v.RangeId == nil {
		return fmt.Errorf("invalid nil key received for RangeId")
	}

	key := *v.RangeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[uint32]*NokiaConf_Configure_Service_Vpls_Sap_StaticIsid_Range)
	}

	if _, ok := t.Range[key]; ok {
		return fmt.Errorf("duplicate key for list Range %v", key)
	}

	t.Range[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_StaticIsid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticIsid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Range {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticIsid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_StaticIsid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticIsid) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticIsid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_StaticIsid.
func (*NokiaConf_Configure_Service_Vpls_Sap_StaticIsid) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_StaticIsid_Range represents the /nokia-conf/configure/service/vpls/sap/static-isid/range YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_StaticIsid_Range struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	End                *int32   `path:"end" module:"nokia-conf"`
	RangeId            *uint32  `path:"range-id" module:"nokia-conf"`
	Start              *int32   `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_StaticIsid_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_StaticIsid_Range) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Sap_StaticIsid_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticIsid_Range) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Sap_StaticIsid_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticIsid_Range) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Service_Vpls_Sap_StaticIsid_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticIsid_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetRangeId retrieves the value of the leaf RangeId from the NokiaConf_Configure_Service_Vpls_Sap_StaticIsid_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RangeId is set, it can
// safely use t.GetRangeId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RangeId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticIsid_Range) GetRangeId() uint32 {
	if t == nil || t.RangeId == nil {
		return 0
	}
	return *t.RangeId
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Service_Vpls_Sap_StaticIsid_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticIsid_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_StaticIsid_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticIsid_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Sap_StaticIsid_Range struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticIsid_Range) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RangeId == nil {
		return nil, fmt.Errorf("nil value for key RangeId")
	}

	return map[string]interface{}{
		"range-id": *t.RangeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticIsid_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_StaticIsid_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticIsid_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_StaticIsid_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_StaticIsid_Range.
func (*NokiaConf_Configure_Service_Vpls_Sap_StaticIsid_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Stp represents the /nokia-conf/configure/service/vpls/sap/stp YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Stp struct {
	AdminState  E_NokiaTypesSros_AdminState                                      `path:"admin-state" module:"nokia-conf"`
	AutoEdge    *bool                                                            `path:"auto-edge" module:"nokia-conf"`
	EdgePort    *bool                                                            `path:"edge-port" module:"nokia-conf"`
	LinkType    E_NokiaTypesServices_StpLinkType                                 `path:"link-type" module:"nokia-conf"`
	MstInstance map[uint32]*NokiaConf_Configure_Service_Vpls_Sap_Stp_MstInstance `path:"mst-instance" module:"nokia-conf"`
	PathCost    *int32                                                           `path:"path-cost" module:"nokia-conf"`
	PortNum     *int32                                                           `path:"port-num" module:"nokia-conf"`
	Priority    *int32                                                           `path:"priority" module:"nokia-conf"`
	RootGuard   *bool                                                            `path:"root-guard" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Stp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Stp) IsYANGGoStruct() {}

// NewMstInstance creates a new entry in the MstInstance list of the
// NokiaConf_Configure_Service_Vpls_Sap_Stp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Stp) NewMstInstance(MstInstNumber uint32) (*NokiaConf_Configure_Service_Vpls_Sap_Stp_MstInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MstInstance == nil {
		t.MstInstance = make(map[uint32]*NokiaConf_Configure_Service_Vpls_Sap_Stp_MstInstance)
	}

	key := MstInstNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MstInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MstInstance", key)
	}

	t.MstInstance[key] = &NokiaConf_Configure_Service_Vpls_Sap_Stp_MstInstance{
		MstInstNumber: &MstInstNumber,
	}

	return t.MstInstance[key], nil
}

// RenameMstInstance renames an entry in the list MstInstance within
// the NokiaConf_Configure_Service_Vpls_Sap_Stp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Stp) RenameMstInstance(oldK, newK uint32) error {
	if _, ok := t.MstInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in MstInstance", newK)
	}

	e, ok := t.MstInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MstInstance", oldK)
	}
	e.MstInstNumber = &newK

	t.MstInstance[newK] = e
	delete(t.MstInstance, oldK)
	return nil
}

// GetOrCreateMstInstance retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_Stp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Stp) GetOrCreateMstInstance(MstInstNumber uint32) *NokiaConf_Configure_Service_Vpls_Sap_Stp_MstInstance {

	key := MstInstNumber

	if v, ok := t.MstInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMstInstance(MstInstNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMstInstance got unexpected error: %v", err))
	}
	return v
}

// GetMstInstance retrieves the value with the specified key from
// the MstInstance map field of NokiaConf_Configure_Service_Vpls_Sap_Stp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Stp) GetMstInstance(MstInstNumber uint32) *NokiaConf_Configure_Service_Vpls_Sap_Stp_MstInstance {

	if t == nil {
		return nil
	}

	key := MstInstNumber

	if lm, ok := t.MstInstance[key]; ok {
		return lm
	}
	return nil
}

// DeleteMstInstance deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Sap_Stp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Stp) DeleteMstInstance(MstInstNumber uint32) {
	key := MstInstNumber

	delete(t.MstInstance, key)
}

// AppendMstInstance appends the supplied NokiaConf_Configure_Service_Vpls_Sap_Stp_MstInstance struct to the
// list MstInstance of NokiaConf_Configure_Service_Vpls_Sap_Stp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Sap_Stp_MstInstance already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Stp) AppendMstInstance(v *NokiaConf_Configure_Service_Vpls_Sap_Stp_MstInstance) error {
	if v.MstInstNumber == nil {
		return fmt.Errorf("invalid nil key received for MstInstNumber")
	}

	key := *v.MstInstNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MstInstance == nil {
		t.MstInstance = make(map[uint32]*NokiaConf_Configure_Service_Vpls_Sap_Stp_MstInstance)
	}

	if _, ok := t.MstInstance[key]; ok {
		return fmt.Errorf("duplicate key for list MstInstance %v", key)
	}

	t.MstInstance[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_Sap_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Stp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetAutoEdge retrieves the value of the leaf AutoEdge from the NokiaConf_Configure_Service_Vpls_Sap_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoEdge is set, it can
// safely use t.GetAutoEdge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoEdge == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Stp) GetAutoEdge() bool {
	if t == nil || t.AutoEdge == nil {
		return true
	}
	return *t.AutoEdge
}

// GetEdgePort retrieves the value of the leaf EdgePort from the NokiaConf_Configure_Service_Vpls_Sap_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EdgePort is set, it can
// safely use t.GetEdgePort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EdgePort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Stp) GetEdgePort() bool {
	if t == nil || t.EdgePort == nil {
		return false
	}
	return *t.EdgePort
}

// GetLinkType retrieves the value of the leaf LinkType from the NokiaConf_Configure_Service_Vpls_Sap_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkType is set, it can
// safely use t.GetLinkType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Stp) GetLinkType() E_NokiaTypesServices_StpLinkType {
	if t == nil || t.LinkType == 0 {
		return NokiaTypesServices_StpLinkType_pt_pt
	}
	return t.LinkType
}

// GetPathCost retrieves the value of the leaf PathCost from the NokiaConf_Configure_Service_Vpls_Sap_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathCost is set, it can
// safely use t.GetPathCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathCost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Stp) GetPathCost() int32 {
	if t == nil || t.PathCost == nil {
		return 10
	}
	return *t.PathCost
}

// GetPortNum retrieves the value of the leaf PortNum from the NokiaConf_Configure_Service_Vpls_Sap_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortNum is set, it can
// safely use t.GetPortNum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortNum == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Stp) GetPortNum() int32 {
	if t == nil || t.PortNum == nil {
		return 0
	}
	return *t.PortNum
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Service_Vpls_Sap_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Stp) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 128
	}
	return *t.Priority
}

// GetRootGuard retrieves the value of the leaf RootGuard from the NokiaConf_Configure_Service_Vpls_Sap_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootGuard is set, it can
// safely use t.GetRootGuard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootGuard == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Stp) GetRootGuard() bool {
	if t == nil || t.RootGuard == nil {
		return false
	}
	return *t.RootGuard
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Stp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Stp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AutoEdge == nil {
		var v bool = true
		t.AutoEdge = &v
	}
	if t.EdgePort == nil {
		var v bool = false
		t.EdgePort = &v
	}
	if t.LinkType == 0 {
		t.LinkType = NokiaTypesServices_StpLinkType_pt_pt
	}
	if t.PathCost == nil {
		var v int32 = 10
		t.PathCost = &v
	}
	if t.Priority == nil {
		var v int32 = 128
		t.Priority = &v
	}
	if t.RootGuard == nil {
		var v bool = false
		t.RootGuard = &v
	}
	for _, e := range t.MstInstance {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Stp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Stp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Stp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Stp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Stp.
func (*NokiaConf_Configure_Service_Vpls_Sap_Stp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_Stp_MstInstance represents the /nokia-conf/configure/service/vpls/sap/stp/mst-instance YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_Stp_MstInstance struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	MstInstNumber      *uint32  `path:"mst-inst-number" module:"nokia-conf"`
	MstPathCost        *int32   `path:"mst-path-cost" module:"nokia-conf"`
	MstPortPriority    *int32   `path:"mst-port-priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_Stp_MstInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_Stp_MstInstance) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Sap_Stp_MstInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Stp_MstInstance) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Sap_Stp_MstInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Stp_MstInstance) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMstInstNumber retrieves the value of the leaf MstInstNumber from the NokiaConf_Configure_Service_Vpls_Sap_Stp_MstInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MstInstNumber is set, it can
// safely use t.GetMstInstNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MstInstNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Stp_MstInstance) GetMstInstNumber() uint32 {
	if t == nil || t.MstInstNumber == nil {
		return 0
	}
	return *t.MstInstNumber
}

// GetMstPathCost retrieves the value of the leaf MstPathCost from the NokiaConf_Configure_Service_Vpls_Sap_Stp_MstInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MstPathCost is set, it can
// safely use t.GetMstPathCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MstPathCost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Stp_MstInstance) GetMstPathCost() int32 {
	if t == nil || t.MstPathCost == nil {
		return 10
	}
	return *t.MstPathCost
}

// GetMstPortPriority retrieves the value of the leaf MstPortPriority from the NokiaConf_Configure_Service_Vpls_Sap_Stp_MstInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MstPortPriority is set, it can
// safely use t.GetMstPortPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MstPortPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Stp_MstInstance) GetMstPortPriority() int32 {
	if t == nil || t.MstPortPriority == nil {
		return 128
	}
	return *t.MstPortPriority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_Stp_MstInstance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Stp_MstInstance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MstPathCost == nil {
		var v int32 = 10
		t.MstPathCost = &v
	}
	if t.MstPortPriority == nil {
		var v int32 = 128
		t.MstPortPriority = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Sap_Stp_MstInstance struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Stp_MstInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MstInstNumber == nil {
		return nil, fmt.Errorf("nil value for key MstInstNumber")
	}

	return map[string]interface{}{
		"mst-inst-number": *t.MstInstNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Stp_MstInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_Stp_MstInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Stp_MstInstance) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_Stp_MstInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_Stp_MstInstance.
func (*NokiaConf_Configure_Service_Vpls_Sap_Stp_MstInstance) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt represents the /nokia-conf/configure/service/vpls/sap/sub-sla-mgmt YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt struct {
	AdminState          E_NokiaTypesSros_AdminState                                           `path:"admin-state" module:"nokia-conf"`
	Defaults            *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults             `path:"defaults" module:"nokia-conf"`
	MacDaHashing        *bool                                                                 `path:"mac-da-hashing" module:"nokia-conf"`
	SingleSubParameters *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters  `path:"single-sub-parameters" module:"nokia-conf"`
	SubIdentPolicy      *string                                                               `path:"sub-ident-policy" module:"nokia-conf"`
	SubscriberLimit     NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SubscriberLimit_Union `path:"subscriber-limit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt) IsYANGGoStruct() {}

// GetOrCreateDefaults retrieves the value of the Defaults field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt) GetOrCreateDefaults() *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults {
	if t.Defaults != nil {
		return t.Defaults
	}
	t.Defaults = &NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults{}
	return t.Defaults
}

// GetOrCreateSingleSubParameters retrieves the value of the SingleSubParameters field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt) GetOrCreateSingleSubParameters() *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters {
	if t.SingleSubParameters != nil {
		return t.SingleSubParameters
	}
	t.SingleSubParameters = &NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters{}
	return t.SingleSubParameters
}

// GetDefaults returns the value of the Defaults struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt. If the receiver or the field Defaults is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt) GetDefaults() *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults {
	if t != nil && t.Defaults != nil {
		return t.Defaults
	}
	return nil
}

// GetSingleSubParameters returns the value of the SingleSubParameters struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt. If the receiver or the field SingleSubParameters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt) GetSingleSubParameters() *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters {
	if t != nil && t.SingleSubParameters != nil {
		return t.SingleSubParameters
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetMacDaHashing retrieves the value of the leaf MacDaHashing from the NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacDaHashing is set, it can
// safely use t.GetMacDaHashing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacDaHashing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt) GetMacDaHashing() bool {
	if t == nil || t.MacDaHashing == nil {
		return false
	}
	return *t.MacDaHashing
}

// GetSubIdentPolicy retrieves the value of the leaf SubIdentPolicy from the NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubIdentPolicy is set, it can
// safely use t.GetSubIdentPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubIdentPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt) GetSubIdentPolicy() string {
	if t == nil || t.SubIdentPolicy == nil {
		return ""
	}
	return *t.SubIdentPolicy
}

// GetSubscriberLimit retrieves the value of the leaf SubscriberLimit from the NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubscriberLimit is set, it can
// safely use t.GetSubscriberLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubscriberLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt) GetSubscriberLimit() NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SubscriberLimit_Union {
	if t == nil || t.SubscriberLimit == nil {
		return UnionUint32(1)
	}
	return t.SubscriberLimit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.MacDaHashing == nil {
		var v bool = false
		t.MacDaHashing = &v
	}
	if t.SubscriberLimit == nil {
		t.SubscriberLimit = UnionUint32(1)
	}
	t.Defaults.PopulateDefaults()
	t.SingleSubParameters.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt.
func (*NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults represents the /nokia-conf/configure/service/vpls/sap/sub-sla-mgmt/defaults YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults struct {
	AppProfile   *string                                                                `path:"app-profile" module:"nokia-conf"`
	IntDestId    *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_IntDestId    `path:"int-dest-id" module:"nokia-conf"`
	SlaProfile   *string                                                                `path:"sla-profile" module:"nokia-conf"`
	SubProfile   *string                                                                `path:"sub-profile" module:"nokia-conf"`
	SubscriberId *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_SubscriberId `path:"subscriber-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults) IsYANGGoStruct() {}

// GetOrCreateIntDestId retrieves the value of the IntDestId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults) GetOrCreateIntDestId() *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_IntDestId {
	if t.IntDestId != nil {
		return t.IntDestId
	}
	t.IntDestId = &NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_IntDestId{}
	return t.IntDestId
}

// GetOrCreateSubscriberId retrieves the value of the SubscriberId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults) GetOrCreateSubscriberId() *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_SubscriberId {
	if t.SubscriberId != nil {
		return t.SubscriberId
	}
	t.SubscriberId = &NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_SubscriberId{}
	return t.SubscriberId
}

// GetIntDestId returns the value of the IntDestId struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults. If the receiver or the field IntDestId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults) GetIntDestId() *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_IntDestId {
	if t != nil && t.IntDestId != nil {
		return t.IntDestId
	}
	return nil
}

// GetSubscriberId returns the value of the SubscriberId struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults. If the receiver or the field SubscriberId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults) GetSubscriberId() *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_SubscriberId {
	if t != nil && t.SubscriberId != nil {
		return t.SubscriberId
	}
	return nil
}

// GetAppProfile retrieves the value of the leaf AppProfile from the NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfile is set, it can
// safely use t.GetAppProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults) GetAppProfile() string {
	if t == nil || t.AppProfile == nil {
		return ""
	}
	return *t.AppProfile
}

// GetSlaProfile retrieves the value of the leaf SlaProfile from the NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlaProfile is set, it can
// safely use t.GetSlaProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlaProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults) GetSlaProfile() string {
	if t == nil || t.SlaProfile == nil {
		return ""
	}
	return *t.SlaProfile
}

// GetSubProfile retrieves the value of the leaf SubProfile from the NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubProfile is set, it can
// safely use t.GetSubProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults) GetSubProfile() string {
	if t == nil || t.SubProfile == nil {
		return ""
	}
	return *t.SubProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IntDestId.PopulateDefaults()
	t.SubscriberId.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults.
func (*NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_IntDestId represents the /nokia-conf/configure/service/vpls/sap/sub-sla-mgmt/defaults/int-dest-id YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_IntDestId struct {
	String  *string   `path:"string" module:"nokia-conf"`
	TopQTag YANGEmpty `path:"top-q-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_IntDestId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_IntDestId) IsYANGGoStruct() {}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_IntDestId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_IntDestId) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// GetTopQTag retrieves the value of the leaf TopQTag from the NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_IntDestId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TopQTag is set, it can
// safely use t.GetTopQTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TopQTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_IntDestId) GetTopQTag() YANGEmpty {
	if t == nil || t.TopQTag == false {
		return false
	}
	return t.TopQTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_IntDestId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_IntDestId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_IntDestId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_IntDestId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_IntDestId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_IntDestId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_IntDestId.
func (*NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_IntDestId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_SubscriberId represents the /nokia-conf/configure/service/vpls/sap/sub-sla-mgmt/defaults/subscriber-id YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_SubscriberId struct {
	AutoId YANGEmpty `path:"auto-id" module:"nokia-conf"`
	SapId  YANGEmpty `path:"sap-id" module:"nokia-conf"`
	String *string   `path:"string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_SubscriberId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_SubscriberId) IsYANGGoStruct() {}

// GetAutoId retrieves the value of the leaf AutoId from the NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_SubscriberId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoId is set, it can
// safely use t.GetAutoId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_SubscriberId) GetAutoId() YANGEmpty {
	if t == nil || t.AutoId == false {
		return false
	}
	return t.AutoId
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_SubscriberId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_SubscriberId) GetSapId() YANGEmpty {
	if t == nil || t.SapId == false {
		return false
	}
	return t.SapId
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_SubscriberId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_SubscriberId) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_SubscriberId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_SubscriberId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_SubscriberId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_SubscriberId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_SubscriberId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_SubscriberId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_SubscriberId.
func (*NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_Defaults_SubscriberId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters represents the /nokia-conf/configure/service/vpls/sap/sub-sla-mgmt/single-sub-parameters YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters struct {
	NonSubTraffic       *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic `path:"non-sub-traffic" module:"nokia-conf" yangPresence:"true"`
	ProfiledTrafficOnly *bool                                                                              `path:"profiled-traffic-only" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters) IsYANGGoStruct() {}

// GetOrCreateNonSubTraffic retrieves the value of the NonSubTraffic field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters) GetOrCreateNonSubTraffic() *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic {
	if t.NonSubTraffic != nil {
		return t.NonSubTraffic
	}
	t.NonSubTraffic = &NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic{}
	return t.NonSubTraffic
}

// GetNonSubTraffic returns the value of the NonSubTraffic struct pointer
// from NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters. If the receiver or the field NonSubTraffic is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters) GetNonSubTraffic() *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic {
	if t != nil && t.NonSubTraffic != nil {
		return t.NonSubTraffic
	}
	return nil
}

// GetProfiledTrafficOnly retrieves the value of the leaf ProfiledTrafficOnly from the NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProfiledTrafficOnly is set, it can
// safely use t.GetProfiledTrafficOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProfiledTrafficOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters) GetProfiledTrafficOnly() bool {
	if t == nil || t.ProfiledTrafficOnly == nil {
		return false
	}
	return *t.ProfiledTrafficOnly
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ProfiledTrafficOnly == nil {
		var v bool = false
		t.ProfiledTrafficOnly = &v
	}
	t.NonSubTraffic.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters.
func (*NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic represents the /nokia-conf/configure/service/vpls/sap/sub-sla-mgmt/single-sub-parameters/non-sub-traffic YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic struct {
	AppProfile   *string `path:"app-profile" module:"nokia-conf"`
	SlaProfile   *string `path:"sla-profile" module:"nokia-conf"`
	SubProfile   *string `path:"sub-profile" module:"nokia-conf"`
	SubscriberId *string `path:"subscriber-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic) IsYANGGoStruct() {
}

// GetAppProfile retrieves the value of the leaf AppProfile from the NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfile is set, it can
// safely use t.GetAppProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic) GetAppProfile() string {
	if t == nil || t.AppProfile == nil {
		return ""
	}
	return *t.AppProfile
}

// GetSlaProfile retrieves the value of the leaf SlaProfile from the NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlaProfile is set, it can
// safely use t.GetSlaProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlaProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic) GetSlaProfile() string {
	if t == nil || t.SlaProfile == nil {
		return ""
	}
	return *t.SlaProfile
}

// GetSubProfile retrieves the value of the leaf SubProfile from the NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubProfile is set, it can
// safely use t.GetSubProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic) GetSubProfile() string {
	if t == nil || t.SubProfile == nil {
		return ""
	}
	return *t.SubProfile
}

// GetSubscriberId retrieves the value of the leaf SubscriberId from the NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubscriberId is set, it can
// safely use t.GetSubscriberId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubscriberId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic) GetSubscriberId() string {
	if t == nil || t.SubscriberId == nil {
		return ""
	}
	return *t.SubscriberId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic.
func (*NokiaConf_Configure_Service_Vpls_Sap_SubSlaMgmt_SingleSubParameters_NonSubTraffic) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Sap_TransitPolicy represents the /nokia-conf/configure/service/vpls/sap/transit-policy YANG schema element.
type NokiaConf_Configure_Service_Vpls_Sap_TransitPolicy struct {
	Ip     *uint32 `path:"ip" module:"nokia-conf"`
	Prefix *uint32 `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Sap_TransitPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Sap_TransitPolicy) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Vpls_Sap_TransitPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_TransitPolicy) GetIp() uint32 {
	if t == nil || t.Ip == nil {
		return 0
	}
	return *t.Ip
}

// GetPrefix retrieves the value of the leaf Prefix from the NokiaConf_Configure_Service_Vpls_Sap_TransitPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Sap_TransitPolicy) GetPrefix() uint32 {
	if t == nil || t.Prefix == nil {
		return 0
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Sap_TransitPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Sap_TransitPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_TransitPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Sap_TransitPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Sap_TransitPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Sap_TransitPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Sap_TransitPolicy.
func (*NokiaConf_Configure_Service_Vpls_Sap_TransitPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Spb represents the /nokia-conf/configure/service/vpls/spb YANG schema element.
type NokiaConf_Configure_Service_Vpls_Spb struct {
	AdminState         E_NokiaTypesSros_AdminState                              `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Fid                *int32                                                   `path:"fid" module:"nokia-conf"`
	IsisInstance       *int32                                                   `path:"isis-instance" module:"nokia-conf"`
	Level              map[int32]*NokiaConf_Configure_Service_Vpls_Spb_Level    `path:"level" module:"nokia-conf"`
	LspLifetime        *uint32                                                  `path:"lsp-lifetime" module:"nokia-conf"`
	LspRefreshInterval *NokiaConf_Configure_Service_Vpls_Spb_LspRefreshInterval `path:"lsp-refresh-interval" module:"nokia-conf"`
	Overload           *NokiaConf_Configure_Service_Vpls_Spb_Overload           `path:"overload" module:"nokia-conf" yangPresence:"true"`
	OverloadOnBoot     *NokiaConf_Configure_Service_Vpls_Spb_OverloadOnBoot     `path:"overload-on-boot" module:"nokia-conf" yangPresence:"true"`
	Timers             *NokiaConf_Configure_Service_Vpls_Spb_Timers             `path:"timers" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Spb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Spb) IsYANGGoStruct() {}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Service_Vpls_Spb struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Spb) NewLevel(Id int32) (*NokiaConf_Configure_Service_Vpls_Spb_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[int32]*NokiaConf_Configure_Service_Vpls_Spb_Level)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Service_Vpls_Spb_Level{
		Id: &Id,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Service_Vpls_Spb struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Spb) RenameLevel(oldK, newK int32) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.Id = &newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Spb. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Spb) GetOrCreateLevel(Id int32) *NokiaConf_Configure_Service_Vpls_Spb_Level {

	key := Id

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Service_Vpls_Spb. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Spb) GetLevel(Id int32) *NokiaConf_Configure_Service_Vpls_Spb_Level {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Spb. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Spb) DeleteLevel(Id int32) {
	key := Id

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Service_Vpls_Spb_Level struct to the
// list Level of NokiaConf_Configure_Service_Vpls_Spb. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Spb_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Spb) AppendLevel(v *NokiaConf_Configure_Service_Vpls_Spb_Level) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[int32]*NokiaConf_Configure_Service_Vpls_Spb_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// GetOrCreateLspRefreshInterval retrieves the value of the LspRefreshInterval field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Spb) GetOrCreateLspRefreshInterval() *NokiaConf_Configure_Service_Vpls_Spb_LspRefreshInterval {
	if t.LspRefreshInterval != nil {
		return t.LspRefreshInterval
	}
	t.LspRefreshInterval = &NokiaConf_Configure_Service_Vpls_Spb_LspRefreshInterval{}
	return t.LspRefreshInterval
}

// GetOrCreateOverload retrieves the value of the Overload field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Spb) GetOrCreateOverload() *NokiaConf_Configure_Service_Vpls_Spb_Overload {
	if t.Overload != nil {
		return t.Overload
	}
	t.Overload = &NokiaConf_Configure_Service_Vpls_Spb_Overload{}
	return t.Overload
}

// GetOrCreateOverloadOnBoot retrieves the value of the OverloadOnBoot field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Spb) GetOrCreateOverloadOnBoot() *NokiaConf_Configure_Service_Vpls_Spb_OverloadOnBoot {
	if t.OverloadOnBoot != nil {
		return t.OverloadOnBoot
	}
	t.OverloadOnBoot = &NokiaConf_Configure_Service_Vpls_Spb_OverloadOnBoot{}
	return t.OverloadOnBoot
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Spb) GetOrCreateTimers() *NokiaConf_Configure_Service_Vpls_Spb_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &NokiaConf_Configure_Service_Vpls_Spb_Timers{}
	return t.Timers
}

// GetLspRefreshInterval returns the value of the LspRefreshInterval struct pointer
// from NokiaConf_Configure_Service_Vpls_Spb. If the receiver or the field LspRefreshInterval is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Spb) GetLspRefreshInterval() *NokiaConf_Configure_Service_Vpls_Spb_LspRefreshInterval {
	if t != nil && t.LspRefreshInterval != nil {
		return t.LspRefreshInterval
	}
	return nil
}

// GetOverload returns the value of the Overload struct pointer
// from NokiaConf_Configure_Service_Vpls_Spb. If the receiver or the field Overload is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Spb) GetOverload() *NokiaConf_Configure_Service_Vpls_Spb_Overload {
	if t != nil && t.Overload != nil {
		return t.Overload
	}
	return nil
}

// GetOverloadOnBoot returns the value of the OverloadOnBoot struct pointer
// from NokiaConf_Configure_Service_Vpls_Spb. If the receiver or the field OverloadOnBoot is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Spb) GetOverloadOnBoot() *NokiaConf_Configure_Service_Vpls_Spb_OverloadOnBoot {
	if t != nil && t.OverloadOnBoot != nil {
		return t.OverloadOnBoot
	}
	return nil
}

// GetTimers returns the value of the Timers struct pointer
// from NokiaConf_Configure_Service_Vpls_Spb. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Spb) GetTimers() *NokiaConf_Configure_Service_Vpls_Spb_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_Spb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Spb) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Spb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Spb) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Spb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Spb) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFid retrieves the value of the leaf Fid from the NokiaConf_Configure_Service_Vpls_Spb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fid is set, it can
// safely use t.GetFid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Spb) GetFid() int32 {
	if t == nil || t.Fid == nil {
		return 1
	}
	return *t.Fid
}

// GetIsisInstance retrieves the value of the leaf IsisInstance from the NokiaConf_Configure_Service_Vpls_Spb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IsisInstance is set, it can
// safely use t.GetIsisInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IsisInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Spb) GetIsisInstance() int32 {
	if t == nil || t.IsisInstance == nil {
		return 1024
	}
	return *t.IsisInstance
}

// GetLspLifetime retrieves the value of the leaf LspLifetime from the NokiaConf_Configure_Service_Vpls_Spb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspLifetime is set, it can
// safely use t.GetLspLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Spb) GetLspLifetime() uint32 {
	if t == nil || t.LspLifetime == nil {
		return 1200
	}
	return *t.LspLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Spb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Spb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Fid == nil {
		var v int32 = 1
		t.Fid = &v
	}
	if t.IsisInstance == nil {
		var v int32 = 1024
		t.IsisInstance = &v
	}
	if t.LspLifetime == nil {
		var v uint32 = 1200
		t.LspLifetime = &v
	}
	t.LspRefreshInterval.PopulateDefaults()
	t.Overload.PopulateDefaults()
	t.OverloadOnBoot.PopulateDefaults()
	t.Timers.PopulateDefaults()
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Spb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Spb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Spb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Spb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Spb.
func (*NokiaConf_Configure_Service_Vpls_Spb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Spb_Level represents the /nokia-conf/configure/service/vpls/spb/level YANG schema element.
type NokiaConf_Configure_Service_Vpls_Spb_Level struct {
	ApplyGroups        []string                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	BridgePriority     *int32                                                               `path:"bridge-priority" module:"nokia-conf"`
	EctHighPathFid     map[int32]*NokiaConf_Configure_Service_Vpls_Spb_Level_EctHighPathFid `path:"ect-high-path-fid" module:"nokia-conf"`
	ForwardingTree     *NokiaConf_Configure_Service_Vpls_Spb_Level_ForwardingTree           `path:"forwarding-tree" module:"nokia-conf"`
	Id                 *int32                                                               `path:"id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Spb_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Spb_Level) IsYANGGoStruct() {}

// NewEctHighPathFid creates a new entry in the EctHighPathFid list of the
// NokiaConf_Configure_Service_Vpls_Spb_Level struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Level) NewEctHighPathFid(Fid int32) (*NokiaConf_Configure_Service_Vpls_Spb_Level_EctHighPathFid, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EctHighPathFid == nil {
		t.EctHighPathFid = make(map[int32]*NokiaConf_Configure_Service_Vpls_Spb_Level_EctHighPathFid)
	}

	key := Fid

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EctHighPathFid[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EctHighPathFid", key)
	}

	t.EctHighPathFid[key] = &NokiaConf_Configure_Service_Vpls_Spb_Level_EctHighPathFid{
		Fid: &Fid,
	}

	return t.EctHighPathFid[key], nil
}

// RenameEctHighPathFid renames an entry in the list EctHighPathFid within
// the NokiaConf_Configure_Service_Vpls_Spb_Level struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Level) RenameEctHighPathFid(oldK, newK int32) error {
	if _, ok := t.EctHighPathFid[newK]; ok {
		return fmt.Errorf("key %v already exists in EctHighPathFid", newK)
	}

	e, ok := t.EctHighPathFid[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in EctHighPathFid", oldK)
	}
	e.Fid = &newK

	t.EctHighPathFid[newK] = e
	delete(t.EctHighPathFid, oldK)
	return nil
}

// GetOrCreateEctHighPathFid retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Spb_Level. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Level) GetOrCreateEctHighPathFid(Fid int32) *NokiaConf_Configure_Service_Vpls_Spb_Level_EctHighPathFid {

	key := Fid

	if v, ok := t.EctHighPathFid[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEctHighPathFid(Fid)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEctHighPathFid got unexpected error: %v", err))
	}
	return v
}

// GetEctHighPathFid retrieves the value with the specified key from
// the EctHighPathFid map field of NokiaConf_Configure_Service_Vpls_Spb_Level. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Level) GetEctHighPathFid(Fid int32) *NokiaConf_Configure_Service_Vpls_Spb_Level_EctHighPathFid {

	if t == nil {
		return nil
	}

	key := Fid

	if lm, ok := t.EctHighPathFid[key]; ok {
		return lm
	}
	return nil
}

// DeleteEctHighPathFid deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Spb_Level. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Level) DeleteEctHighPathFid(Fid int32) {
	key := Fid

	delete(t.EctHighPathFid, key)
}

// AppendEctHighPathFid appends the supplied NokiaConf_Configure_Service_Vpls_Spb_Level_EctHighPathFid struct to the
// list EctHighPathFid of NokiaConf_Configure_Service_Vpls_Spb_Level. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Spb_Level_EctHighPathFid already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Level) AppendEctHighPathFid(v *NokiaConf_Configure_Service_Vpls_Spb_Level_EctHighPathFid) error {
	if v.Fid == nil {
		return fmt.Errorf("invalid nil key received for Fid")
	}

	key := *v.Fid

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EctHighPathFid == nil {
		t.EctHighPathFid = make(map[int32]*NokiaConf_Configure_Service_Vpls_Spb_Level_EctHighPathFid)
	}

	if _, ok := t.EctHighPathFid[key]; ok {
		return fmt.Errorf("duplicate key for list EctHighPathFid %v", key)
	}

	t.EctHighPathFid[key] = v
	return nil
}

// GetOrCreateForwardingTree retrieves the value of the ForwardingTree field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Level) GetOrCreateForwardingTree() *NokiaConf_Configure_Service_Vpls_Spb_Level_ForwardingTree {
	if t.ForwardingTree != nil {
		return t.ForwardingTree
	}
	t.ForwardingTree = &NokiaConf_Configure_Service_Vpls_Spb_Level_ForwardingTree{}
	return t.ForwardingTree
}

// GetForwardingTree returns the value of the ForwardingTree struct pointer
// from NokiaConf_Configure_Service_Vpls_Spb_Level. If the receiver or the field ForwardingTree is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Level) GetForwardingTree() *NokiaConf_Configure_Service_Vpls_Spb_Level_ForwardingTree {
	if t != nil && t.ForwardingTree != nil {
		return t.ForwardingTree
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Spb_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Level) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Spb_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Level) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBridgePriority retrieves the value of the leaf BridgePriority from the NokiaConf_Configure_Service_Vpls_Spb_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BridgePriority is set, it can
// safely use t.GetBridgePriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BridgePriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Level) GetBridgePriority() int32 {
	if t == nil || t.BridgePriority == nil {
		return 8
	}
	return *t.BridgePriority
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Service_Vpls_Spb_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Level) GetId() int32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Spb_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BridgePriority == nil {
		var v int32 = 8
		t.BridgePriority = &v
	}
	t.ForwardingTree.PopulateDefaults()
	for _, e := range t.EctHighPathFid {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Spb_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Level) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Spb_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Spb_Level.
func (*NokiaConf_Configure_Service_Vpls_Spb_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Spb_Level_EctHighPathFid represents the /nokia-conf/configure/service/vpls/spb/level/ect-high-path-fid YANG schema element.
type NokiaConf_Configure_Service_Vpls_Spb_Level_EctHighPathFid struct {
	Fid *int32 `path:"fid" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Spb_Level_EctHighPathFid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Spb_Level_EctHighPathFid) IsYANGGoStruct() {}

// GetFid retrieves the value of the leaf Fid from the NokiaConf_Configure_Service_Vpls_Spb_Level_EctHighPathFid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fid is set, it can
// safely use t.GetFid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Level_EctHighPathFid) GetFid() int32 {
	if t == nil || t.Fid == nil {
		return 0
	}
	return *t.Fid
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Spb_Level_EctHighPathFid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Level_EctHighPathFid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Spb_Level_EctHighPathFid struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Level_EctHighPathFid) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Fid == nil {
		return nil, fmt.Errorf("nil value for key Fid")
	}

	return map[string]interface{}{
		"fid": *t.Fid,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Level_EctHighPathFid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Spb_Level_EctHighPathFid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Level_EctHighPathFid) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Level_EctHighPathFid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Spb_Level_EctHighPathFid.
func (*NokiaConf_Configure_Service_Vpls_Spb_Level_EctHighPathFid) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Spb_Level_ForwardingTree represents the /nokia-conf/configure/service/vpls/spb/level/forwarding-tree YANG schema element.
type NokiaConf_Configure_Service_Vpls_Spb_Level_ForwardingTree struct {
	Topology E_NokiaConf_Configure_Service_Vpls_Spb_Level_ForwardingTree_Topology `path:"topology" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Spb_Level_ForwardingTree implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Spb_Level_ForwardingTree) IsYANGGoStruct() {}

// GetTopology retrieves the value of the leaf Topology from the NokiaConf_Configure_Service_Vpls_Spb_Level_ForwardingTree
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Topology is set, it can
// safely use t.GetTopology() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Topology == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Level_ForwardingTree) GetTopology() E_NokiaConf_Configure_Service_Vpls_Spb_Level_ForwardingTree_Topology {
	if t == nil || t.Topology == 0 {
		return NokiaConf_Configure_Service_Vpls_Spb_Level_ForwardingTree_Topology_spf
	}
	return t.Topology
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Spb_Level_ForwardingTree
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Level_ForwardingTree) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Topology == 0 {
		t.Topology = NokiaConf_Configure_Service_Vpls_Spb_Level_ForwardingTree_Topology_spf
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Level_ForwardingTree) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Spb_Level_ForwardingTree"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Level_ForwardingTree) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Level_ForwardingTree) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Spb_Level_ForwardingTree.
func (*NokiaConf_Configure_Service_Vpls_Spb_Level_ForwardingTree) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Spb_LspRefreshInterval represents the /nokia-conf/configure/service/vpls/spb/lsp-refresh-interval YANG schema element.
type NokiaConf_Configure_Service_Vpls_Spb_LspRefreshInterval struct {
	HalfLifetime *bool   `path:"half-lifetime" module:"nokia-conf"`
	Interval     *uint32 `path:"interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Spb_LspRefreshInterval implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Spb_LspRefreshInterval) IsYANGGoStruct() {}

// GetHalfLifetime retrieves the value of the leaf HalfLifetime from the NokiaConf_Configure_Service_Vpls_Spb_LspRefreshInterval
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HalfLifetime is set, it can
// safely use t.GetHalfLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HalfLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Spb_LspRefreshInterval) GetHalfLifetime() bool {
	if t == nil || t.HalfLifetime == nil {
		return true
	}
	return *t.HalfLifetime
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Service_Vpls_Spb_LspRefreshInterval
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Spb_LspRefreshInterval) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 600
	}
	return *t.Interval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Spb_LspRefreshInterval
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Spb_LspRefreshInterval) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HalfLifetime == nil {
		var v bool = true
		t.HalfLifetime = &v
	}
	if t.Interval == nil {
		var v uint32 = 600
		t.Interval = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Spb_LspRefreshInterval) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Spb_LspRefreshInterval"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Spb_LspRefreshInterval) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Spb_LspRefreshInterval) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Spb_LspRefreshInterval.
func (*NokiaConf_Configure_Service_Vpls_Spb_LspRefreshInterval) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Spb_Overload represents the /nokia-conf/configure/service/vpls/spb/overload YANG schema element.
type NokiaConf_Configure_Service_Vpls_Spb_Overload struct {
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Spb_Overload implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Spb_Overload) IsYANGGoStruct() {}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Service_Vpls_Spb_Overload
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Overload) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Spb_Overload
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Overload) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Timeout == nil {
		var v uint32 = 0
		t.Timeout = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Overload) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Spb_Overload"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Overload) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Overload) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Spb_Overload.
func (*NokiaConf_Configure_Service_Vpls_Spb_Overload) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Spb_OverloadOnBoot represents the /nokia-conf/configure/service/vpls/spb/overload-on-boot YANG schema element.
type NokiaConf_Configure_Service_Vpls_Spb_OverloadOnBoot struct {
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Spb_OverloadOnBoot implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Spb_OverloadOnBoot) IsYANGGoStruct() {}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Service_Vpls_Spb_OverloadOnBoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Spb_OverloadOnBoot) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Spb_OverloadOnBoot
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Spb_OverloadOnBoot) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Timeout == nil {
		var v uint32 = 0
		t.Timeout = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Spb_OverloadOnBoot) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Spb_OverloadOnBoot"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Spb_OverloadOnBoot) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Spb_OverloadOnBoot) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Spb_OverloadOnBoot.
func (*NokiaConf_Configure_Service_Vpls_Spb_OverloadOnBoot) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Spb_Timers represents the /nokia-conf/configure/service/vpls/spb/timers YANG schema element.
type NokiaConf_Configure_Service_Vpls_Spb_Timers struct {
	LspWait *NokiaConf_Configure_Service_Vpls_Spb_Timers_LspWait `path:"lsp-wait" module:"nokia-conf" yangPresence:"true"`
	SpfWait *NokiaConf_Configure_Service_Vpls_Spb_Timers_SpfWait `path:"spf-wait" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Spb_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Spb_Timers) IsYANGGoStruct() {}

// GetOrCreateLspWait retrieves the value of the LspWait field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Timers) GetOrCreateLspWait() *NokiaConf_Configure_Service_Vpls_Spb_Timers_LspWait {
	if t.LspWait != nil {
		return t.LspWait
	}
	t.LspWait = &NokiaConf_Configure_Service_Vpls_Spb_Timers_LspWait{}
	return t.LspWait
}

// GetOrCreateSpfWait retrieves the value of the SpfWait field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Timers) GetOrCreateSpfWait() *NokiaConf_Configure_Service_Vpls_Spb_Timers_SpfWait {
	if t.SpfWait != nil {
		return t.SpfWait
	}
	t.SpfWait = &NokiaConf_Configure_Service_Vpls_Spb_Timers_SpfWait{}
	return t.SpfWait
}

// GetLspWait returns the value of the LspWait struct pointer
// from NokiaConf_Configure_Service_Vpls_Spb_Timers. If the receiver or the field LspWait is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Timers) GetLspWait() *NokiaConf_Configure_Service_Vpls_Spb_Timers_LspWait {
	if t != nil && t.LspWait != nil {
		return t.LspWait
	}
	return nil
}

// GetSpfWait returns the value of the SpfWait struct pointer
// from NokiaConf_Configure_Service_Vpls_Spb_Timers. If the receiver or the field SpfWait is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Timers) GetSpfWait() *NokiaConf_Configure_Service_Vpls_Spb_Timers_SpfWait {
	if t != nil && t.SpfWait != nil {
		return t.SpfWait
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Spb_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LspWait.PopulateDefaults()
	t.SpfWait.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Spb_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Timers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Spb_Timers.
func (*NokiaConf_Configure_Service_Vpls_Spb_Timers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Spb_Timers_LspWait represents the /nokia-conf/configure/service/vpls/spb/timers/lsp-wait YANG schema element.
type NokiaConf_Configure_Service_Vpls_Spb_Timers_LspWait struct {
	InitialWait *uint32 `path:"initial-wait" module:"nokia-conf"`
	MaxWait     *uint32 `path:"max-wait" module:"nokia-conf"`
	SecondWait  *uint32 `path:"second-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Spb_Timers_LspWait implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Spb_Timers_LspWait) IsYANGGoStruct() {}

// GetInitialWait retrieves the value of the leaf InitialWait from the NokiaConf_Configure_Service_Vpls_Spb_Timers_LspWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialWait is set, it can
// safely use t.GetInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Timers_LspWait) GetInitialWait() uint32 {
	if t == nil || t.InitialWait == nil {
		return 10
	}
	return *t.InitialWait
}

// GetMaxWait retrieves the value of the leaf MaxWait from the NokiaConf_Configure_Service_Vpls_Spb_Timers_LspWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxWait is set, it can
// safely use t.GetMaxWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Timers_LspWait) GetMaxWait() uint32 {
	if t == nil || t.MaxWait == nil {
		return 5000
	}
	return *t.MaxWait
}

// GetSecondWait retrieves the value of the leaf SecondWait from the NokiaConf_Configure_Service_Vpls_Spb_Timers_LspWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondWait is set, it can
// safely use t.GetSecondWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Timers_LspWait) GetSecondWait() uint32 {
	if t == nil || t.SecondWait == nil {
		return 1000
	}
	return *t.SecondWait
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Spb_Timers_LspWait
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Timers_LspWait) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitialWait == nil {
		var v uint32 = 10
		t.InitialWait = &v
	}
	if t.MaxWait == nil {
		var v uint32 = 5000
		t.MaxWait = &v
	}
	if t.SecondWait == nil {
		var v uint32 = 1000
		t.SecondWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Timers_LspWait) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Spb_Timers_LspWait"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Timers_LspWait) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Timers_LspWait) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Spb_Timers_LspWait.
func (*NokiaConf_Configure_Service_Vpls_Spb_Timers_LspWait) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Spb_Timers_SpfWait represents the /nokia-conf/configure/service/vpls/spb/timers/spf-wait YANG schema element.
type NokiaConf_Configure_Service_Vpls_Spb_Timers_SpfWait struct {
	InitialWait *uint32 `path:"initial-wait" module:"nokia-conf"`
	MaxWait     *uint32 `path:"max-wait" module:"nokia-conf"`
	SecondWait  *uint32 `path:"second-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Spb_Timers_SpfWait implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Spb_Timers_SpfWait) IsYANGGoStruct() {}

// GetInitialWait retrieves the value of the leaf InitialWait from the NokiaConf_Configure_Service_Vpls_Spb_Timers_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialWait is set, it can
// safely use t.GetInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Timers_SpfWait) GetInitialWait() uint32 {
	if t == nil || t.InitialWait == nil {
		return 1000
	}
	return *t.InitialWait
}

// GetMaxWait retrieves the value of the leaf MaxWait from the NokiaConf_Configure_Service_Vpls_Spb_Timers_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxWait is set, it can
// safely use t.GetMaxWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Timers_SpfWait) GetMaxWait() uint32 {
	if t == nil || t.MaxWait == nil {
		return 10000
	}
	return *t.MaxWait
}

// GetSecondWait retrieves the value of the leaf SecondWait from the NokiaConf_Configure_Service_Vpls_Spb_Timers_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondWait is set, it can
// safely use t.GetSecondWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Timers_SpfWait) GetSecondWait() uint32 {
	if t == nil || t.SecondWait == nil {
		return 1000
	}
	return *t.SecondWait
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Spb_Timers_SpfWait
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Timers_SpfWait) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitialWait == nil {
		var v uint32 = 1000
		t.InitialWait = &v
	}
	if t.MaxWait == nil {
		var v uint32 = 10000
		t.MaxWait = &v
	}
	if t.SecondWait == nil {
		var v uint32 = 1000
		t.SecondWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Timers_SpfWait) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Spb_Timers_SpfWait"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Timers_SpfWait) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Spb_Timers_SpfWait) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Spb_Timers_SpfWait.
func (*NokiaConf_Configure_Service_Vpls_Spb_Timers_SpfWait) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpbmControlVpls represents the /nokia-conf/configure/service/vpls/spbm-control-vpls YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpbmControlVpls struct {
	Fid         *int32  `path:"fid" module:"nokia-conf"`
	ServiceName *string `path:"service-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpbmControlVpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpbmControlVpls) IsYANGGoStruct() {}

// GetFid retrieves the value of the leaf Fid from the NokiaConf_Configure_Service_Vpls_SpbmControlVpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fid is set, it can
// safely use t.GetFid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpbmControlVpls) GetFid() int32 {
	if t == nil || t.Fid == nil {
		return 0
	}
	return *t.Fid
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Service_Vpls_SpbmControlVpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpbmControlVpls) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpbmControlVpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpbmControlVpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpbmControlVpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpbmControlVpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpbmControlVpls) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpbmControlVpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpbmControlVpls.
func (*NokiaConf_Configure_Service_Vpls_SpbmControlVpls) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SplitHorizonGroup represents the /nokia-conf/configure/service/vpls/split-horizon-group YANG schema element.
type NokiaConf_Configure_Service_Vpls_SplitHorizonGroup struct {
	ApplyGroups        []string                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                 `path:"description" module:"nokia-conf"`
	Fdb                *NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb `path:"fdb" module:"nokia-conf"`
	Residential        *bool                                                   `path:"residential" module:"nokia-conf"`
	ShgName            *string                                                 `path:"shg-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SplitHorizonGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SplitHorizonGroup) IsYANGGoStruct() {}

// GetOrCreateFdb retrieves the value of the Fdb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SplitHorizonGroup) GetOrCreateFdb() *NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb {
	if t.Fdb != nil {
		return t.Fdb
	}
	t.Fdb = &NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb{}
	return t.Fdb
}

// GetFdb returns the value of the Fdb struct pointer
// from NokiaConf_Configure_Service_Vpls_SplitHorizonGroup. If the receiver or the field Fdb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SplitHorizonGroup) GetFdb() *NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb {
	if t != nil && t.Fdb != nil {
		return t.Fdb
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_SplitHorizonGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SplitHorizonGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_SplitHorizonGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SplitHorizonGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vpls_SplitHorizonGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SplitHorizonGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetResidential retrieves the value of the leaf Residential from the NokiaConf_Configure_Service_Vpls_SplitHorizonGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Residential is set, it can
// safely use t.GetResidential() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Residential == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SplitHorizonGroup) GetResidential() bool {
	if t == nil || t.Residential == nil {
		return false
	}
	return *t.Residential
}

// GetShgName retrieves the value of the leaf ShgName from the NokiaConf_Configure_Service_Vpls_SplitHorizonGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ShgName is set, it can
// safely use t.GetShgName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ShgName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SplitHorizonGroup) GetShgName() string {
	if t == nil || t.ShgName == nil {
		return ""
	}
	return *t.ShgName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SplitHorizonGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SplitHorizonGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Residential == nil {
		var v bool = false
		t.Residential = &v
	}
	t.Fdb.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_SplitHorizonGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_SplitHorizonGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ShgName == nil {
		return nil, fmt.Errorf("nil value for key ShgName")
	}

	return map[string]interface{}{
		"shg-name": *t.ShgName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SplitHorizonGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SplitHorizonGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SplitHorizonGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SplitHorizonGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SplitHorizonGroup.
func (*NokiaConf_Configure_Service_Vpls_SplitHorizonGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb represents the /nokia-conf/configure/service/vpls/split-horizon-group/fdb YANG schema element.
type NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb struct {
	Saps *NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb_Saps `path:"saps" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb) IsYANGGoStruct() {}

// GetOrCreateSaps retrieves the value of the Saps field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb) GetOrCreateSaps() *NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb_Saps {
	if t.Saps != nil {
		return t.Saps
	}
	t.Saps = &NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb_Saps{}
	return t.Saps
}

// GetSaps returns the value of the Saps struct pointer
// from NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb. If the receiver or the field Saps is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb) GetSaps() *NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb_Saps {
	if t != nil && t.Saps != nil {
		return t.Saps
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Saps.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb.
func (*NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb_Saps represents the /nokia-conf/configure/service/vpls/split-horizon-group/fdb/saps YANG schema element.
type NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb_Saps struct {
	AutoLearnMacProtect            *bool                                                  `path:"auto-learn-mac-protect" module:"nokia-conf"`
	AutoLearnMacProtectExcludeList *string                                                `path:"auto-learn-mac-protect-exclude-list" module:"nokia-conf"`
	DiscardUnprotectedDestMac      *bool                                                  `path:"discard-unprotected-dest-mac" module:"nokia-conf"`
	ProtectedSrcMacViolationAction E_NokiaTypesServices_SapProtectedSrcMacViolationAction `path:"protected-src-mac-violation-action" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb_Saps implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb_Saps) IsYANGGoStruct() {}

// GetAutoLearnMacProtect retrieves the value of the leaf AutoLearnMacProtect from the NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb_Saps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoLearnMacProtect is set, it can
// safely use t.GetAutoLearnMacProtect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoLearnMacProtect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb_Saps) GetAutoLearnMacProtect() bool {
	if t == nil || t.AutoLearnMacProtect == nil {
		return false
	}
	return *t.AutoLearnMacProtect
}

// GetAutoLearnMacProtectExcludeList retrieves the value of the leaf AutoLearnMacProtectExcludeList from the NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb_Saps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoLearnMacProtectExcludeList is set, it can
// safely use t.GetAutoLearnMacProtectExcludeList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoLearnMacProtectExcludeList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb_Saps) GetAutoLearnMacProtectExcludeList() string {
	if t == nil || t.AutoLearnMacProtectExcludeList == nil {
		return ""
	}
	return *t.AutoLearnMacProtectExcludeList
}

// GetDiscardUnprotectedDestMac retrieves the value of the leaf DiscardUnprotectedDestMac from the NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb_Saps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiscardUnprotectedDestMac is set, it can
// safely use t.GetDiscardUnprotectedDestMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiscardUnprotectedDestMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb_Saps) GetDiscardUnprotectedDestMac() bool {
	if t == nil || t.DiscardUnprotectedDestMac == nil {
		return false
	}
	return *t.DiscardUnprotectedDestMac
}

// GetProtectedSrcMacViolationAction retrieves the value of the leaf ProtectedSrcMacViolationAction from the NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb_Saps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtectedSrcMacViolationAction is set, it can
// safely use t.GetProtectedSrcMacViolationAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtectedSrcMacViolationAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb_Saps) GetProtectedSrcMacViolationAction() E_NokiaTypesServices_SapProtectedSrcMacViolationAction {
	if t == nil || t.ProtectedSrcMacViolationAction == 0 {
		return 0
	}
	return t.ProtectedSrcMacViolationAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb_Saps
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb_Saps) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AutoLearnMacProtect == nil {
		var v bool = false
		t.AutoLearnMacProtect = &v
	}
	if t.DiscardUnprotectedDestMac == nil {
		var v bool = false
		t.DiscardUnprotectedDestMac = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb_Saps) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb_Saps"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb_Saps) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb_Saps) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb_Saps.
func (*NokiaConf_Configure_Service_Vpls_SplitHorizonGroup_Fdb_Saps) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp represents the /nokia-conf/configure/service/vpls/spoke-sdp YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp struct {
	AccountingPolicy       *uint32                                                       `path:"accounting-policy" module:"nokia-conf"`
	AdminState             E_NokiaTypesSros_AdminState                                   `path:"admin-state" module:"nokia-conf"`
	AppProfile             *string                                                       `path:"app-profile" module:"nokia-conf"`
	ApplyGroups            []string                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Bfd                    *NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd                `path:"bfd" module:"nokia-conf"`
	BfdLiveness            *NokiaConf_Configure_Service_Vpls_SpokeSdp_BfdLiveness        `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	BfdTemplate            *string                                                       `path:"bfd-template" module:"nokia-conf"`
	BlockOnMeshFailure     *bool                                                         `path:"block-on-mesh-failure" module:"nokia-conf"`
	BpduTranslation        E_NokiaTypesServices_BpduTranslation                          `path:"bpdu-translation" module:"nokia-conf"`
	CollectStats           *bool                                                         `path:"collect-stats" module:"nokia-conf"`
	ControlWord            *bool                                                         `path:"control-word" module:"nokia-conf"`
	CpuProtection          *NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection      `path:"cpu-protection" module:"nokia-conf"`
	Description            *string                                                       `path:"description" module:"nokia-conf"`
	Dhcp                   *NokiaConf_Configure_Service_Vpls_SpokeSdp_Dhcp               `path:"dhcp" module:"nokia-conf"`
	Egress                 *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress             `path:"egress" module:"nokia-conf"`
	Endpoint               *NokiaConf_Configure_Service_Vpls_SpokeSdp_Endpoint           `path:"endpoint" module:"nokia-conf"`
	EntropyLabel           YANGEmpty                                                     `path:"entropy-label" module:"nokia-conf"`
	EthCfm                 *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm             `path:"eth-cfm" module:"nokia-conf"`
	EtreeLeaf              *bool                                                         `path:"etree-leaf" module:"nokia-conf"`
	EtreeRootLeafTag       *bool                                                         `path:"etree-root-leaf-tag" module:"nokia-conf"`
	Fdb                    *NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb                `path:"fdb" module:"nokia-conf"`
	ForceVcForwarding      E_NokiaConf_Configure_Service_Vpls_SpokeSdp_ForceVcForwarding `path:"force-vc-forwarding" module:"nokia-conf"`
	HashLabel              *NokiaConf_Configure_Service_Vpls_SpokeSdp_HashLabel          `path:"hash-label" module:"nokia-conf" yangPresence:"true"`
	IVplsMacFlush          *NokiaConf_Configure_Service_Vpls_SpokeSdp_IVplsMacFlush      `path:"i-vpls-mac-flush" module:"nokia-conf"`
	IgmpSnooping           *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping       `path:"igmp-snooping" module:"nokia-conf"`
	IgnoreStandbySignaling *bool                                                         `path:"ignore-standby-signaling" module:"nokia-conf"`
	Ingress                *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress            `path:"ingress" module:"nokia-conf"`
	L2Pt                   *NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt               `path:"l2pt" module:"nokia-conf"`
	MldSnooping            *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping        `path:"mld-snooping" module:"nokia-conf"`
	MonitorOperGroup       *string                                                       `path:"monitor-oper-group" module:"nokia-conf"`
	Mrp                    *NokiaConf_Configure_Service_Vpls_SpokeSdp_Mrp                `path:"mrp" module:"nokia-conf"`
	MulticastSource        *bool                                                         `path:"multicast-source" module:"nokia-conf"`
	OperGroup              *string                                                       `path:"oper-group" module:"nokia-conf"`
	Pbb                    *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb                `path:"pbb" module:"nokia-conf"`
	PimSnooping            *NokiaConf_Configure_Service_Vpls_SpokeSdp_PimSnooping        `path:"pim-snooping" module:"nokia-conf"`
	PwStatus               *NokiaConf_Configure_Service_Vpls_SpokeSdp_PwStatus           `path:"pw-status" module:"nokia-conf"`
	SdpBindId              *string                                                       `path:"sdp-bind-id" module:"nokia-conf"`
	Spb                    *NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb                `path:"spb" module:"nokia-conf" yangPresence:"true"`
	SplitHorizonGroup      *string                                                       `path:"split-horizon-group" module:"nokia-conf"`
	StaticIsid             *NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid         `path:"static-isid" module:"nokia-conf"`
	Stp                    *NokiaConf_Configure_Service_Vpls_SpokeSdp_Stp                `path:"stp" module:"nokia-conf"`
	TransitPolicy          *NokiaConf_Configure_Service_Vpls_SpokeSdp_TransitPolicy      `path:"transit-policy" module:"nokia-conf" yangPresence:"true"`
	VcType                 E_NokiaTypesServices_VplsSdpBindVcType                        `path:"vc-type" module:"nokia-conf"`
	VlanVcTag              *uint32                                                       `path:"vlan-vc-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp) IsYANGGoStruct() {}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetOrCreateBfd() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd{}
	return t.Bfd
}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetOrCreateBfdLiveness() *NokiaConf_Configure_Service_Vpls_SpokeSdp_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Service_Vpls_SpokeSdp_BfdLiveness{}
	return t.BfdLiveness
}

// GetOrCreateCpuProtection retrieves the value of the CpuProtection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetOrCreateCpuProtection() *NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection {
	if t.CpuProtection != nil {
		return t.CpuProtection
	}
	t.CpuProtection = &NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection{}
	return t.CpuProtection
}

// GetOrCreateDhcp retrieves the value of the Dhcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetOrCreateDhcp() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Dhcp {
	if t.Dhcp != nil {
		return t.Dhcp
	}
	t.Dhcp = &NokiaConf_Configure_Service_Vpls_SpokeSdp_Dhcp{}
	return t.Dhcp
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetOrCreateEgress() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress{}
	return t.Egress
}

// GetOrCreateEndpoint retrieves the value of the Endpoint field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetOrCreateEndpoint() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Endpoint {
	if t.Endpoint != nil {
		return t.Endpoint
	}
	t.Endpoint = &NokiaConf_Configure_Service_Vpls_SpokeSdp_Endpoint{}
	return t.Endpoint
}

// GetOrCreateEthCfm retrieves the value of the EthCfm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetOrCreateEthCfm() *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm {
	if t.EthCfm != nil {
		return t.EthCfm
	}
	t.EthCfm = &NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm{}
	return t.EthCfm
}

// GetOrCreateFdb retrieves the value of the Fdb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetOrCreateFdb() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb {
	if t.Fdb != nil {
		return t.Fdb
	}
	t.Fdb = &NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb{}
	return t.Fdb
}

// GetOrCreateHashLabel retrieves the value of the HashLabel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetOrCreateHashLabel() *NokiaConf_Configure_Service_Vpls_SpokeSdp_HashLabel {
	if t.HashLabel != nil {
		return t.HashLabel
	}
	t.HashLabel = &NokiaConf_Configure_Service_Vpls_SpokeSdp_HashLabel{}
	return t.HashLabel
}

// GetOrCreateIVplsMacFlush retrieves the value of the IVplsMacFlush field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetOrCreateIVplsMacFlush() *NokiaConf_Configure_Service_Vpls_SpokeSdp_IVplsMacFlush {
	if t.IVplsMacFlush != nil {
		return t.IVplsMacFlush
	}
	t.IVplsMacFlush = &NokiaConf_Configure_Service_Vpls_SpokeSdp_IVplsMacFlush{}
	return t.IVplsMacFlush
}

// GetOrCreateIgmpSnooping retrieves the value of the IgmpSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetOrCreateIgmpSnooping() *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping {
	if t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	t.IgmpSnooping = &NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping{}
	return t.IgmpSnooping
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetOrCreateIngress() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress{}
	return t.Ingress
}

// GetOrCreateL2Pt retrieves the value of the L2Pt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetOrCreateL2Pt() *NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt {
	if t.L2Pt != nil {
		return t.L2Pt
	}
	t.L2Pt = &NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt{}
	return t.L2Pt
}

// GetOrCreateMldSnooping retrieves the value of the MldSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetOrCreateMldSnooping() *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping {
	if t.MldSnooping != nil {
		return t.MldSnooping
	}
	t.MldSnooping = &NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping{}
	return t.MldSnooping
}

// GetOrCreateMrp retrieves the value of the Mrp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetOrCreateMrp() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Mrp {
	if t.Mrp != nil {
		return t.Mrp
	}
	t.Mrp = &NokiaConf_Configure_Service_Vpls_SpokeSdp_Mrp{}
	return t.Mrp
}

// GetOrCreatePbb retrieves the value of the Pbb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetOrCreatePbb() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb {
	if t.Pbb != nil {
		return t.Pbb
	}
	t.Pbb = &NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb{}
	return t.Pbb
}

// GetOrCreatePimSnooping retrieves the value of the PimSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetOrCreatePimSnooping() *NokiaConf_Configure_Service_Vpls_SpokeSdp_PimSnooping {
	if t.PimSnooping != nil {
		return t.PimSnooping
	}
	t.PimSnooping = &NokiaConf_Configure_Service_Vpls_SpokeSdp_PimSnooping{}
	return t.PimSnooping
}

// GetOrCreatePwStatus retrieves the value of the PwStatus field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetOrCreatePwStatus() *NokiaConf_Configure_Service_Vpls_SpokeSdp_PwStatus {
	if t.PwStatus != nil {
		return t.PwStatus
	}
	t.PwStatus = &NokiaConf_Configure_Service_Vpls_SpokeSdp_PwStatus{}
	return t.PwStatus
}

// GetOrCreateSpb retrieves the value of the Spb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetOrCreateSpb() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb {
	if t.Spb != nil {
		return t.Spb
	}
	t.Spb = &NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb{}
	return t.Spb
}

// GetOrCreateStaticIsid retrieves the value of the StaticIsid field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetOrCreateStaticIsid() *NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid {
	if t.StaticIsid != nil {
		return t.StaticIsid
	}
	t.StaticIsid = &NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid{}
	return t.StaticIsid
}

// GetOrCreateStp retrieves the value of the Stp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetOrCreateStp() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Stp {
	if t.Stp != nil {
		return t.Stp
	}
	t.Stp = &NokiaConf_Configure_Service_Vpls_SpokeSdp_Stp{}
	return t.Stp
}

// GetOrCreateTransitPolicy retrieves the value of the TransitPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetOrCreateTransitPolicy() *NokiaConf_Configure_Service_Vpls_SpokeSdp_TransitPolicy {
	if t.TransitPolicy != nil {
		return t.TransitPolicy
	}
	t.TransitPolicy = &NokiaConf_Configure_Service_Vpls_SpokeSdp_TransitPolicy{}
	return t.TransitPolicy
}

// GetBfd returns the value of the Bfd struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetBfd() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetBfdLiveness() *NokiaConf_Configure_Service_Vpls_SpokeSdp_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetCpuProtection returns the value of the CpuProtection struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp. If the receiver or the field CpuProtection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetCpuProtection() *NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection {
	if t != nil && t.CpuProtection != nil {
		return t.CpuProtection
	}
	return nil
}

// GetDhcp returns the value of the Dhcp struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp. If the receiver or the field Dhcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetDhcp() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Dhcp {
	if t != nil && t.Dhcp != nil {
		return t.Dhcp
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetEgress() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetEndpoint returns the value of the Endpoint struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp. If the receiver or the field Endpoint is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetEndpoint() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Endpoint {
	if t != nil && t.Endpoint != nil {
		return t.Endpoint
	}
	return nil
}

// GetEthCfm returns the value of the EthCfm struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp. If the receiver or the field EthCfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetEthCfm() *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm {
	if t != nil && t.EthCfm != nil {
		return t.EthCfm
	}
	return nil
}

// GetFdb returns the value of the Fdb struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp. If the receiver or the field Fdb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetFdb() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb {
	if t != nil && t.Fdb != nil {
		return t.Fdb
	}
	return nil
}

// GetHashLabel returns the value of the HashLabel struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp. If the receiver or the field HashLabel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetHashLabel() *NokiaConf_Configure_Service_Vpls_SpokeSdp_HashLabel {
	if t != nil && t.HashLabel != nil {
		return t.HashLabel
	}
	return nil
}

// GetIVplsMacFlush returns the value of the IVplsMacFlush struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp. If the receiver or the field IVplsMacFlush is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetIVplsMacFlush() *NokiaConf_Configure_Service_Vpls_SpokeSdp_IVplsMacFlush {
	if t != nil && t.IVplsMacFlush != nil {
		return t.IVplsMacFlush
	}
	return nil
}

// GetIgmpSnooping returns the value of the IgmpSnooping struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp. If the receiver or the field IgmpSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetIgmpSnooping() *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping {
	if t != nil && t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetIngress() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetL2Pt returns the value of the L2Pt struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp. If the receiver or the field L2Pt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetL2Pt() *NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt {
	if t != nil && t.L2Pt != nil {
		return t.L2Pt
	}
	return nil
}

// GetMldSnooping returns the value of the MldSnooping struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp. If the receiver or the field MldSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetMldSnooping() *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping {
	if t != nil && t.MldSnooping != nil {
		return t.MldSnooping
	}
	return nil
}

// GetMrp returns the value of the Mrp struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp. If the receiver or the field Mrp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetMrp() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Mrp {
	if t != nil && t.Mrp != nil {
		return t.Mrp
	}
	return nil
}

// GetPbb returns the value of the Pbb struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp. If the receiver or the field Pbb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetPbb() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb {
	if t != nil && t.Pbb != nil {
		return t.Pbb
	}
	return nil
}

// GetPimSnooping returns the value of the PimSnooping struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp. If the receiver or the field PimSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetPimSnooping() *NokiaConf_Configure_Service_Vpls_SpokeSdp_PimSnooping {
	if t != nil && t.PimSnooping != nil {
		return t.PimSnooping
	}
	return nil
}

// GetPwStatus returns the value of the PwStatus struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp. If the receiver or the field PwStatus is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetPwStatus() *NokiaConf_Configure_Service_Vpls_SpokeSdp_PwStatus {
	if t != nil && t.PwStatus != nil {
		return t.PwStatus
	}
	return nil
}

// GetSpb returns the value of the Spb struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp. If the receiver or the field Spb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetSpb() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb {
	if t != nil && t.Spb != nil {
		return t.Spb
	}
	return nil
}

// GetStaticIsid returns the value of the StaticIsid struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp. If the receiver or the field StaticIsid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetStaticIsid() *NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid {
	if t != nil && t.StaticIsid != nil {
		return t.StaticIsid
	}
	return nil
}

// GetStp returns the value of the Stp struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp. If the receiver or the field Stp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetStp() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Stp {
	if t != nil && t.Stp != nil {
		return t.Stp
	}
	return nil
}

// GetTransitPolicy returns the value of the TransitPolicy struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp. If the receiver or the field TransitPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetTransitPolicy() *NokiaConf_Configure_Service_Vpls_SpokeSdp_TransitPolicy {
	if t != nil && t.TransitPolicy != nil {
		return t.TransitPolicy
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Service_Vpls_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAppProfile retrieves the value of the leaf AppProfile from the NokiaConf_Configure_Service_Vpls_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfile is set, it can
// safely use t.GetAppProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetAppProfile() string {
	if t == nil || t.AppProfile == nil {
		return ""
	}
	return *t.AppProfile
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBfdTemplate retrieves the value of the leaf BfdTemplate from the NokiaConf_Configure_Service_Vpls_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdTemplate is set, it can
// safely use t.GetBfdTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetBfdTemplate() string {
	if t == nil || t.BfdTemplate == nil {
		return ""
	}
	return *t.BfdTemplate
}

// GetBlockOnMeshFailure retrieves the value of the leaf BlockOnMeshFailure from the NokiaConf_Configure_Service_Vpls_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockOnMeshFailure is set, it can
// safely use t.GetBlockOnMeshFailure() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockOnMeshFailure == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetBlockOnMeshFailure() bool {
	if t == nil || t.BlockOnMeshFailure == nil {
		return false
	}
	return *t.BlockOnMeshFailure
}

// GetBpduTranslation retrieves the value of the leaf BpduTranslation from the NokiaConf_Configure_Service_Vpls_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BpduTranslation is set, it can
// safely use t.GetBpduTranslation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BpduTranslation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetBpduTranslation() E_NokiaTypesServices_BpduTranslation {
	if t == nil || t.BpduTranslation == 0 {
		return 0
	}
	return t.BpduTranslation
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Service_Vpls_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetControlWord retrieves the value of the leaf ControlWord from the NokiaConf_Configure_Service_Vpls_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ControlWord is set, it can
// safely use t.GetControlWord() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ControlWord == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetControlWord() bool {
	if t == nil || t.ControlWord == nil {
		return false
	}
	return *t.ControlWord
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vpls_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntropyLabel retrieves the value of the leaf EntropyLabel from the NokiaConf_Configure_Service_Vpls_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntropyLabel is set, it can
// safely use t.GetEntropyLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntropyLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetEntropyLabel() YANGEmpty {
	if t == nil || t.EntropyLabel == false {
		return false
	}
	return t.EntropyLabel
}

// GetEtreeLeaf retrieves the value of the leaf EtreeLeaf from the NokiaConf_Configure_Service_Vpls_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EtreeLeaf is set, it can
// safely use t.GetEtreeLeaf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EtreeLeaf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetEtreeLeaf() bool {
	if t == nil || t.EtreeLeaf == nil {
		return false
	}
	return *t.EtreeLeaf
}

// GetEtreeRootLeafTag retrieves the value of the leaf EtreeRootLeafTag from the NokiaConf_Configure_Service_Vpls_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EtreeRootLeafTag is set, it can
// safely use t.GetEtreeRootLeafTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EtreeRootLeafTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetEtreeRootLeafTag() bool {
	if t == nil || t.EtreeRootLeafTag == nil {
		return false
	}
	return *t.EtreeRootLeafTag
}

// GetForceVcForwarding retrieves the value of the leaf ForceVcForwarding from the NokiaConf_Configure_Service_Vpls_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForceVcForwarding is set, it can
// safely use t.GetForceVcForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForceVcForwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetForceVcForwarding() E_NokiaConf_Configure_Service_Vpls_SpokeSdp_ForceVcForwarding {
	if t == nil || t.ForceVcForwarding == 0 {
		return 0
	}
	return t.ForceVcForwarding
}

// GetIgnoreStandbySignaling retrieves the value of the leaf IgnoreStandbySignaling from the NokiaConf_Configure_Service_Vpls_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreStandbySignaling is set, it can
// safely use t.GetIgnoreStandbySignaling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreStandbySignaling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetIgnoreStandbySignaling() bool {
	if t == nil || t.IgnoreStandbySignaling == nil {
		return false
	}
	return *t.IgnoreStandbySignaling
}

// GetMonitorOperGroup retrieves the value of the leaf MonitorOperGroup from the NokiaConf_Configure_Service_Vpls_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorOperGroup is set, it can
// safely use t.GetMonitorOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorOperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetMonitorOperGroup() string {
	if t == nil || t.MonitorOperGroup == nil {
		return ""
	}
	return *t.MonitorOperGroup
}

// GetMulticastSource retrieves the value of the leaf MulticastSource from the NokiaConf_Configure_Service_Vpls_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastSource is set, it can
// safely use t.GetMulticastSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastSource == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetMulticastSource() bool {
	if t == nil || t.MulticastSource == nil {
		return false
	}
	return *t.MulticastSource
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Service_Vpls_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_Service_Vpls_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// GetSplitHorizonGroup retrieves the value of the leaf SplitHorizonGroup from the NokiaConf_Configure_Service_Vpls_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SplitHorizonGroup is set, it can
// safely use t.GetSplitHorizonGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SplitHorizonGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetSplitHorizonGroup() string {
	if t == nil || t.SplitHorizonGroup == nil {
		return ""
	}
	return *t.SplitHorizonGroup
}

// GetVcType retrieves the value of the leaf VcType from the NokiaConf_Configure_Service_Vpls_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcType is set, it can
// safely use t.GetVcType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetVcType() E_NokiaTypesServices_VplsSdpBindVcType {
	if t == nil || t.VcType == 0 {
		return NokiaTypesServices_VplsSdpBindVcType_ether
	}
	return t.VcType
}

// GetVlanVcTag retrieves the value of the leaf VlanVcTag from the NokiaConf_Configure_Service_Vpls_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanVcTag is set, it can
// safely use t.GetVlanVcTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanVcTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) GetVlanVcTag() uint32 {
	if t == nil || t.VlanVcTag == nil {
		return 0
	}
	return *t.VlanVcTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.BlockOnMeshFailure == nil {
		var v bool = false
		t.BlockOnMeshFailure = &v
	}
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.ControlWord == nil {
		var v bool = false
		t.ControlWord = &v
	}
	if t.EtreeLeaf == nil {
		var v bool = false
		t.EtreeLeaf = &v
	}
	if t.EtreeRootLeafTag == nil {
		var v bool = false
		t.EtreeRootLeafTag = &v
	}
	if t.IgnoreStandbySignaling == nil {
		var v bool = false
		t.IgnoreStandbySignaling = &v
	}
	if t.MulticastSource == nil {
		var v bool = false
		t.MulticastSource = &v
	}
	if t.VcType == 0 {
		t.VcType = NokiaTypesServices_VplsSdpBindVcType_ether
	}
	t.Bfd.PopulateDefaults()
	t.BfdLiveness.PopulateDefaults()
	t.CpuProtection.PopulateDefaults()
	t.Dhcp.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.Endpoint.PopulateDefaults()
	t.EthCfm.PopulateDefaults()
	t.Fdb.PopulateDefaults()
	t.HashLabel.PopulateDefaults()
	t.IVplsMacFlush.PopulateDefaults()
	t.IgmpSnooping.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.L2Pt.PopulateDefaults()
	t.MldSnooping.PopulateDefaults()
	t.Mrp.PopulateDefaults()
	t.Pbb.PopulateDefaults()
	t.PimSnooping.PopulateDefaults()
	t.PwStatus.PopulateDefaults()
	t.Spb.PopulateDefaults()
	t.StaticIsid.PopulateDefaults()
	t.Stp.PopulateDefaults()
	t.TransitPolicy.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_SpokeSdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SdpBindId == nil {
		return nil, fmt.Errorf("nil value for key SdpBindId")
	}

	return map[string]interface{}{
		"sdp-bind-id": *t.SdpBindId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd represents the /nokia-conf/configure/service/vpls/spoke-sdp/bfd YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd struct {
	BfdLiveness    *NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd_BfdLiveness `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	BfdTemplate    *string                                                    `path:"bfd-template" module:"nokia-conf"`
	FailureAction  E_NokiaTypesServices_SbindBfdFailAction                    `path:"failure-action" module:"nokia-conf"`
	WaitForUpTimer *uint32                                                    `path:"wait-for-up-timer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd) IsYANGGoStruct() {}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd) GetOrCreateBfdLiveness() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd_BfdLiveness{}
	return t.BfdLiveness
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd) GetBfdLiveness() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetBfdTemplate retrieves the value of the leaf BfdTemplate from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdTemplate is set, it can
// safely use t.GetBfdTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd) GetBfdTemplate() string {
	if t == nil || t.BfdTemplate == nil {
		return ""
	}
	return *t.BfdTemplate
}

// GetFailureAction retrieves the value of the leaf FailureAction from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FailureAction is set, it can
// safely use t.GetFailureAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FailureAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd) GetFailureAction() E_NokiaTypesServices_SbindBfdFailAction {
	if t == nil || t.FailureAction == 0 {
		return NokiaTypesServices_SbindBfdFailAction_none
	}
	return t.FailureAction
}

// GetWaitForUpTimer retrieves the value of the leaf WaitForUpTimer from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WaitForUpTimer is set, it can
// safely use t.GetWaitForUpTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WaitForUpTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd) GetWaitForUpTimer() uint32 {
	if t == nil || t.WaitForUpTimer == nil {
		return 0
	}
	return *t.WaitForUpTimer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FailureAction == 0 {
		t.FailureAction = NokiaTypesServices_SbindBfdFailAction_none
	}
	t.BfdLiveness.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_BfdLiveness represents the /nokia-conf/configure/service/vpls/spoke-sdp/bfd-liveness YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_BfdLiveness struct {
	Encap E_NokiaTypesServices_BfdEncap `path:"encap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_BfdLiveness) IsYANGGoStruct() {}

// GetEncap retrieves the value of the leaf Encap from the NokiaConf_Configure_Service_Vpls_SpokeSdp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Encap is set, it can
// safely use t.GetEncap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Encap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_BfdLiveness) GetEncap() E_NokiaTypesServices_BfdEncap {
	if t == nil || t.Encap == 0 {
		return NokiaTypesServices_BfdEncap_ipv4
	}
	return t.Encap
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Encap == 0 {
		t.Encap = NokiaTypesServices_BfdEncap_ipv4
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_BfdLiveness.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd_BfdLiveness represents the /nokia-conf/configure/service/vpls/spoke-sdp/bfd/bfd-liveness YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd_BfdLiveness struct {
	Encap E_NokiaTypesServices_BfdEncap `path:"encap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd_BfdLiveness) IsYANGGoStruct() {}

// GetEncap retrieves the value of the leaf Encap from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Encap is set, it can
// safely use t.GetEncap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Encap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd_BfdLiveness) GetEncap() E_NokiaTypesServices_BfdEncap {
	if t == nil || t.Encap == 0 {
		return NokiaTypesServices_BfdEncap_ipv4
	}
	return t.Encap
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Encap == 0 {
		t.Encap = NokiaTypesServices_BfdEncap_ipv4
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd_BfdLiveness.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Bfd_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection represents the /nokia-conf/configure/service/vpls/spoke-sdp/cpu-protection YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection struct {
	EthCfmMonitoring *NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection_EthCfmMonitoring `path:"eth-cfm-monitoring" module:"nokia-conf" yangPresence:"true"`
	MacMonitoring    YANGEmpty                                                                 `path:"mac-monitoring" module:"nokia-conf"`
	PolicyId         *uint32                                                                   `path:"policy-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection) IsYANGGoStruct() {}

// GetOrCreateEthCfmMonitoring retrieves the value of the EthCfmMonitoring field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection) GetOrCreateEthCfmMonitoring() *NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection_EthCfmMonitoring {
	if t.EthCfmMonitoring != nil {
		return t.EthCfmMonitoring
	}
	t.EthCfmMonitoring = &NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection_EthCfmMonitoring{}
	return t.EthCfmMonitoring
}

// GetEthCfmMonitoring returns the value of the EthCfmMonitoring struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection. If the receiver or the field EthCfmMonitoring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection) GetEthCfmMonitoring() *NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection_EthCfmMonitoring {
	if t != nil && t.EthCfmMonitoring != nil {
		return t.EthCfmMonitoring
	}
	return nil
}

// GetMacMonitoring retrieves the value of the leaf MacMonitoring from the NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacMonitoring is set, it can
// safely use t.GetMacMonitoring() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacMonitoring == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection) GetMacMonitoring() YANGEmpty {
	if t == nil || t.MacMonitoring == false {
		return false
	}
	return t.MacMonitoring
}

// GetPolicyId retrieves the value of the leaf PolicyId from the NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyId is set, it can
// safely use t.GetPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection) GetPolicyId() uint32 {
	if t == nil || t.PolicyId == nil {
		return 0
	}
	return *t.PolicyId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthCfmMonitoring.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection_EthCfmMonitoring represents the /nokia-conf/configure/service/vpls/spoke-sdp/cpu-protection/eth-cfm-monitoring YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection_EthCfmMonitoring struct {
	Aggregate YANGEmpty `path:"aggregate" module:"nokia-conf"`
	Car       YANGEmpty `path:"car" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection_EthCfmMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection_EthCfmMonitoring) IsYANGGoStruct() {}

// GetAggregate retrieves the value of the leaf Aggregate from the NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection_EthCfmMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aggregate is set, it can
// safely use t.GetAggregate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aggregate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection_EthCfmMonitoring) GetAggregate() YANGEmpty {
	if t == nil || t.Aggregate == false {
		return false
	}
	return t.Aggregate
}

// GetCar retrieves the value of the leaf Car from the NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection_EthCfmMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Car is set, it can
// safely use t.GetCar() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Car == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection_EthCfmMonitoring) GetCar() YANGEmpty {
	if t == nil || t.Car == false {
		return false
	}
	return t.Car
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection_EthCfmMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection_EthCfmMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection_EthCfmMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection_EthCfmMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection_EthCfmMonitoring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection_EthCfmMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection_EthCfmMonitoring.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_CpuProtection_EthCfmMonitoring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_Dhcp represents the /nokia-conf/configure/service/vpls/spoke-sdp/dhcp YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_Dhcp struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string  `path:"description" module:"nokia-conf"`
	Snoop              *bool    `path:"snoop" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_Dhcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Dhcp) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Dhcp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Dhcp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Dhcp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSnoop retrieves the value of the leaf Snoop from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Snoop is set, it can
// safely use t.GetSnoop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Snoop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Dhcp) GetSnoop() bool {
	if t == nil || t.Snoop == nil {
		return false
	}
	return *t.Snoop
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_Dhcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Dhcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Snoop == nil {
		var v bool = false
		t.Snoop = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Dhcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_Dhcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Dhcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Dhcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_Dhcp.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Dhcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress represents the /nokia-conf/configure/service/vpls/spoke-sdp/egress YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress struct {
	Filter                     *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Filter                     `path:"filter" module:"nokia-conf"`
	MfibAllowedMdaDestinations *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations `path:"mfib-allowed-mda-destinations" module:"nokia-conf"`
	Qos                        *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos                        `path:"qos" module:"nokia-conf"`
	VcLabel                    *uint32                                                                      `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress) GetOrCreateFilter() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Filter{}
	return t.Filter
}

// GetOrCreateMfibAllowedMdaDestinations retrieves the value of the MfibAllowedMdaDestinations field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress) GetOrCreateMfibAllowedMdaDestinations() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations {
	if t.MfibAllowedMdaDestinations != nil {
		return t.MfibAllowedMdaDestinations
	}
	t.MfibAllowedMdaDestinations = &NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations{}
	return t.MfibAllowedMdaDestinations
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress) GetOrCreateQos() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress) GetFilter() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetMfibAllowedMdaDestinations returns the value of the MfibAllowedMdaDestinations struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress. If the receiver or the field MfibAllowedMdaDestinations is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress) GetMfibAllowedMdaDestinations() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations {
	if t != nil && t.MfibAllowedMdaDestinations != nil {
		return t.MfibAllowedMdaDestinations
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress) GetQos() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.MfibAllowedMdaDestinations.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Filter represents the /nokia-conf/configure/service/vpls/spoke-sdp/egress/filter YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
	Mac  *string `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Filter) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Filter.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations represents the /nokia-conf/configure/service/vpls/spoke-sdp/egress/mfib-allowed-mda-destinations YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations struct {
	Mda map[string]*NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations_Mda `path:"mda" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations) IsYANGGoStruct() {
}

// NewMda creates a new entry in the Mda list of the
// NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations) NewMda(MdaId string) (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations_Mda, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mda == nil {
		t.Mda = make(map[string]*NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations_Mda)
	}

	key := MdaId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mda[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mda", key)
	}

	t.Mda[key] = &NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations_Mda{
		MdaId: &MdaId,
	}

	return t.Mda[key], nil
}

// RenameMda renames an entry in the list Mda within
// the NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations) RenameMda(oldK, newK string) error {
	if _, ok := t.Mda[newK]; ok {
		return fmt.Errorf("key %v already exists in Mda", newK)
	}

	e, ok := t.Mda[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mda", oldK)
	}
	e.MdaId = &newK

	t.Mda[newK] = e
	delete(t.Mda, oldK)
	return nil
}

// GetOrCreateMda retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations) GetOrCreateMda(MdaId string) *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations_Mda {

	key := MdaId

	if v, ok := t.Mda[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMda(MdaId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMda got unexpected error: %v", err))
	}
	return v
}

// GetMda retrieves the value with the specified key from
// the Mda map field of NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations) GetMda(MdaId string) *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations_Mda {

	if t == nil {
		return nil
	}

	key := MdaId

	if lm, ok := t.Mda[key]; ok {
		return lm
	}
	return nil
}

// DeleteMda deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations) DeleteMda(MdaId string) {
	key := MdaId

	delete(t.Mda, key)
}

// AppendMda appends the supplied NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations_Mda struct to the
// list Mda of NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations_Mda already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations) AppendMda(v *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations_Mda) error {
	if v.MdaId == nil {
		return fmt.Errorf("invalid nil key received for MdaId")
	}

	key := *v.MdaId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mda == nil {
		t.Mda = make(map[string]*NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations_Mda)
	}

	if _, ok := t.Mda[key]; ok {
		return fmt.Errorf("duplicate key for list Mda %v", key)
	}

	t.Mda[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Mda {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations_Mda represents the /nokia-conf/configure/service/vpls/spoke-sdp/egress/mfib-allowed-mda-destinations/mda YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations_Mda struct {
	MdaId *string `path:"mda-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations_Mda implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations_Mda) IsYANGGoStruct() {
}

// GetMdaId retrieves the value of the leaf MdaId from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdaId is set, it can
// safely use t.GetMdaId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdaId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations_Mda) GetMdaId() string {
	if t == nil || t.MdaId == nil {
		return ""
	}
	return *t.MdaId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations_Mda
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations_Mda) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations_Mda struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations_Mda) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MdaId == nil {
		return nil, fmt.Errorf("nil value for key MdaId")
	}

	return map[string]interface{}{
		"mda-id": *t.MdaId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations_Mda) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations_Mda"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations_Mda) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations_Mda) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations_Mda.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_MfibAllowedMdaDestinations_Mda) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos represents the /nokia-conf/configure/service/vpls/spoke-sdp/egress/qos YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos struct {
	Network *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network `path:"network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos) IsYANGGoStruct() {}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos) GetOrCreateNetwork() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network{}
	return t.Network
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos) GetNetwork() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Network.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network represents the /nokia-conf/configure/service/vpls/spoke-sdp/egress/qos/network YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network struct {
	PolicyName        *string                                                                         `path:"policy-name" module:"nokia-conf"`
	PortRedirectGroup *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network_PortRedirectGroup `path:"port-redirect-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network) IsYANGGoStruct() {}

// GetOrCreatePortRedirectGroup retrieves the value of the PortRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network) GetOrCreatePortRedirectGroup() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network_PortRedirectGroup {
	if t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	t.PortRedirectGroup = &NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network_PortRedirectGroup{}
	return t.PortRedirectGroup
}

// GetPortRedirectGroup returns the value of the PortRedirectGroup struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network. If the receiver or the field PortRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network) GetPortRedirectGroup() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network_PortRedirectGroup {
	if t != nil && t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network_PortRedirectGroup represents the /nokia-conf/configure/service/vpls/spoke-sdp/egress/qos/network/port-redirect-group YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network_PortRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network_PortRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network_PortRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network_PortRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network_PortRedirectGroup.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_Endpoint represents the /nokia-conf/configure/service/vpls/spoke-sdp/endpoint YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_Endpoint struct {
	Name       *string                                                             `path:"name" module:"nokia-conf"`
	Precedence NokiaConf_Configure_Service_Vpls_SpokeSdp_Endpoint_Precedence_Union `path:"precedence" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_Endpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Endpoint) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Endpoint) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPrecedence retrieves the value of the leaf Precedence from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Precedence is set, it can
// safely use t.GetPrecedence() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Precedence == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Endpoint) GetPrecedence() NokiaConf_Configure_Service_Vpls_SpokeSdp_Endpoint_Precedence_Union {
	if t == nil || t.Precedence == nil {
		return UnionUint32(4)
	}
	return t.Precedence
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_Endpoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Endpoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Precedence == nil {
		t.Precedence = UnionUint32(4)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Endpoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_Endpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Endpoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Endpoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_Endpoint.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Endpoint) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm represents the /nokia-conf/configure/service/vpls/spoke-sdp/eth-cfm YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm struct {
	ApplyGroups              []string                                                                                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude       []string                                                                                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	CollectLmmFcStats        *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_CollectLmmFcStats                                                              `path:"collect-lmm-fc-stats" module:"nokia-conf"`
	CollectLmmStats          *bool                                                                                                                            `path:"collect-lmm-stats" module:"nokia-conf"`
	Mep                      map[NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Key]*NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep               `path:"mep" module:"nokia-conf"`
	Mip                      map[NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip_PrimaryVlan_Union]*NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip `path:"mip" module:"nokia-conf"`
	SquelchIngressCtagLevels []uint32                                                                                                                         `path:"squelch-ingress-ctag-levels" module:"nokia-conf"`
	SquelchIngressLevels     []uint32                                                                                                                         `path:"squelch-ingress-levels" module:"nokia-conf"`
	VmepFilter               *bool                                                                                                                            `path:"vmep-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm) IsYANGGoStruct() {}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Key represents the key for list Mep of element /nokia-conf/configure/service/vpls/spoke-sdp/eth-cfm.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Key struct {
	MdAdminName string `path:"md-admin-name"`
	MaAdminName string `path:"ma-admin-name"`
	MepId       uint16 `path:"mep-id"`
}

// NewMep creates a new entry in the Mep list of the
// NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm) NewMep(MdAdminName string, MaAdminName string, MepId uint16) (*NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Key]*NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep)
	}

	key := NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mep[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mep", key)
	}

	t.Mep[key] = &NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep{
		MdAdminName: &MdAdminName,
		MaAdminName: &MaAdminName,
		MepId:       &MepId,
	}

	return t.Mep[key], nil
}

// RenameMep renames an entry in the list Mep within
// the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm) RenameMep(oldK, newK NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Key) error {
	if _, ok := t.Mep[newK]; ok {
		return fmt.Errorf("key %v already exists in Mep", newK)
	}

	e, ok := t.Mep[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mep", oldK)
	}
	e.MdAdminName = &newK.MdAdminName
	e.MaAdminName = &newK.MaAdminName
	e.MepId = &newK.MepId

	t.Mep[newK] = e
	delete(t.Mep, oldK)
	return nil
}

// GetOrCreateMep retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm) GetOrCreateMep(MdAdminName string, MaAdminName string, MepId uint16) *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep {

	key := NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if v, ok := t.Mep[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMep(MdAdminName, MaAdminName, MepId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMep got unexpected error: %v", err))
	}
	return v
}

// GetMep retrieves the value with the specified key from
// the Mep map field of NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm) GetMep(MdAdminName string, MaAdminName string, MepId uint16) *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if lm, ok := t.Mep[key]; ok {
		return lm
	}
	return nil
}

// DeleteMep deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm) DeleteMep(MdAdminName string, MaAdminName string, MepId uint16) {
	key := NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	delete(t.Mep, key)
}

// AppendMep appends the supplied NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep struct to the
// list Mep of NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm) AppendMep(v *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep) error {
	if v.MdAdminName == nil {
		return fmt.Errorf("invalid nil key for MdAdminName")
	}

	if v.MaAdminName == nil {
		return fmt.Errorf("invalid nil key for MaAdminName")
	}

	if v.MepId == nil {
		return fmt.Errorf("invalid nil key for MepId")
	}

	key := NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Key{
		MdAdminName: *v.MdAdminName,
		MaAdminName: *v.MaAdminName,
		MepId:       *v.MepId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Key]*NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep)
	}

	if _, ok := t.Mep[key]; ok {
		return fmt.Errorf("duplicate key for list Mep %v", key)
	}

	t.Mep[key] = v
	return nil
}

// NewMip creates a new entry in the Mip list of the
// NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm) NewMip(PrimaryVlan NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip_PrimaryVlan_Union) (*NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mip == nil {
		t.Mip = make(map[NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip_PrimaryVlan_Union]*NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip)
	}

	key := PrimaryVlan

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mip[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mip", key)
	}

	t.Mip[key] = &NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip{
		PrimaryVlan: PrimaryVlan,
	}

	return t.Mip[key], nil
}

// RenameMip renames an entry in the list Mip within
// the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm) RenameMip(oldK, newK NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip_PrimaryVlan_Union) error {
	if _, ok := t.Mip[newK]; ok {
		return fmt.Errorf("key %v already exists in Mip", newK)
	}

	e, ok := t.Mip[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mip", oldK)
	}
	e.PrimaryVlan = newK

	t.Mip[newK] = e
	delete(t.Mip, oldK)
	return nil
}

// GetOrCreateMip retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm) GetOrCreateMip(PrimaryVlan NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip_PrimaryVlan_Union) *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip {

	key := PrimaryVlan

	if v, ok := t.Mip[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMip(PrimaryVlan)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMip got unexpected error: %v", err))
	}
	return v
}

// GetMip retrieves the value with the specified key from
// the Mip map field of NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm) GetMip(PrimaryVlan NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip_PrimaryVlan_Union) *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip {

	if t == nil {
		return nil
	}

	key := PrimaryVlan

	if lm, ok := t.Mip[key]; ok {
		return lm
	}
	return nil
}

// DeleteMip deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm) DeleteMip(PrimaryVlan NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip_PrimaryVlan_Union) {
	key := PrimaryVlan

	delete(t.Mip, key)
}

// AppendMip appends the supplied NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip struct to the
// list Mip of NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm) AppendMip(v *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip) error {
	key := v.PrimaryVlan

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mip == nil {
		t.Mip = make(map[NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip_PrimaryVlan_Union]*NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip)
	}

	if _, ok := t.Mip[key]; ok {
		return fmt.Errorf("duplicate key for list Mip %v", key)
	}

	t.Mip[key] = v
	return nil
}

// GetOrCreateCollectLmmFcStats retrieves the value of the CollectLmmFcStats field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm) GetOrCreateCollectLmmFcStats() *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_CollectLmmFcStats {
	if t.CollectLmmFcStats != nil {
		return t.CollectLmmFcStats
	}
	t.CollectLmmFcStats = &NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_CollectLmmFcStats{}
	return t.CollectLmmFcStats
}

// GetCollectLmmFcStats returns the value of the CollectLmmFcStats struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm. If the receiver or the field CollectLmmFcStats is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm) GetCollectLmmFcStats() *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_CollectLmmFcStats {
	if t != nil && t.CollectLmmFcStats != nil {
		return t.CollectLmmFcStats
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCollectLmmStats retrieves the value of the leaf CollectLmmStats from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectLmmStats is set, it can
// safely use t.GetCollectLmmStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectLmmStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm) GetCollectLmmStats() bool {
	if t == nil || t.CollectLmmStats == nil {
		return false
	}
	return *t.CollectLmmStats
}

// GetSquelchIngressCtagLevels retrieves the value of the leaf SquelchIngressCtagLevels from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SquelchIngressCtagLevels is set, it can
// safely use t.GetSquelchIngressCtagLevels() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SquelchIngressCtagLevels == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm) GetSquelchIngressCtagLevels() []uint32 {
	if t == nil || t.SquelchIngressCtagLevels == nil {
		return nil
	}
	return t.SquelchIngressCtagLevels
}

// GetSquelchIngressLevels retrieves the value of the leaf SquelchIngressLevels from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SquelchIngressLevels is set, it can
// safely use t.GetSquelchIngressLevels() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SquelchIngressLevels == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm) GetSquelchIngressLevels() []uint32 {
	if t == nil || t.SquelchIngressLevels == nil {
		return nil
	}
	return t.SquelchIngressLevels
}

// GetVmepFilter retrieves the value of the leaf VmepFilter from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VmepFilter is set, it can
// safely use t.GetVmepFilter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VmepFilter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm) GetVmepFilter() bool {
	if t == nil || t.VmepFilter == nil {
		return false
	}
	return *t.VmepFilter
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectLmmStats == nil {
		var v bool = false
		t.CollectLmmStats = &v
	}
	if t.VmepFilter == nil {
		var v bool = false
		t.VmepFilter = &v
	}
	t.CollectLmmFcStats.PopulateDefaults()
	for _, e := range t.Mep {
		e.PopulateDefaults()
	}
	for _, e := range t.Mip {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_CollectLmmFcStats represents the /nokia-conf/configure/service/vpls/spoke-sdp/eth-cfm/collect-lmm-fc-stats YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_CollectLmmFcStats struct {
	Fc          []E_NokiaTypesEthCfm_FcType `path:"fc" module:"nokia-conf"`
	FcInProfile []E_NokiaTypesEthCfm_FcType `path:"fc-in-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_CollectLmmFcStats implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_CollectLmmFcStats) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_CollectLmmFcStats
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_CollectLmmFcStats) GetFc() []E_NokiaTypesEthCfm_FcType {
	if t == nil || t.Fc == nil {
		return nil
	}
	return t.Fc
}

// GetFcInProfile retrieves the value of the leaf FcInProfile from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_CollectLmmFcStats
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcInProfile is set, it can
// safely use t.GetFcInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcInProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_CollectLmmFcStats) GetFcInProfile() []E_NokiaTypesEthCfm_FcType {
	if t == nil || t.FcInProfile == nil {
		return nil
	}
	return t.FcInProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_CollectLmmFcStats
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_CollectLmmFcStats) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_CollectLmmFcStats) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_CollectLmmFcStats"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_CollectLmmFcStats) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_CollectLmmFcStats) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_CollectLmmFcStats.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_CollectLmmFcStats) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep represents the /nokia-conf/configure/service/vpls/spoke-sdp/eth-cfm/mep YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep struct {
	AdminState           E_NokiaTypesSros_AdminState                                             `path:"admin-state" module:"nokia-conf"`
	Ais                  *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Ais               `path:"ais" module:"nokia-conf" yangPresence:"true"`
	AlarmNotification    *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_AlarmNotification `path:"alarm-notification" module:"nokia-conf"`
	ApplyGroups          []string                                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	Ccm                  *bool                                                                   `path:"ccm" module:"nokia-conf"`
	CcmLtmPriority       *uint8                                                                  `path:"ccm-ltm-priority" module:"nokia-conf"`
	CcmPaddingSize       *uint32                                                                 `path:"ccm-padding-size" module:"nokia-conf"`
	CfmVlanTag           *string                                                                 `path:"cfm-vlan-tag" module:"nokia-conf"`
	Csf                  *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Csf               `path:"csf" module:"nokia-conf" yangPresence:"true"`
	Description          *string                                                                 `path:"description" module:"nokia-conf"`
	Direction            E_NokiaTypesEthCfm_MpDirection                                          `path:"direction" module:"nokia-conf"`
	EthTest              *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest           `path:"eth-test" module:"nokia-conf" yangPresence:"true"`
	FaultPropagation     E_NokiaTypesEthCfm_FaultPropagationType                                 `path:"fault-propagation" module:"nokia-conf"`
	Grace                *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace             `path:"grace" module:"nokia-conf"`
	InstallMep           *bool                                                                   `path:"install-mep" module:"nokia-conf"`
	LbmSvcActResponder   *bool                                                                   `path:"lbm-svc-act-responder" module:"nokia-conf"`
	LowPriorityDefect    E_NokiaTypesEthCfm_LowestAlarmPriority                                  `path:"low-priority-defect" module:"nokia-conf"`
	MaAdminName          *string                                                                 `path:"ma-admin-name" module:"nokia-conf"`
	MacAddress           *string                                                                 `path:"mac-address" module:"nokia-conf"`
	MdAdminName          *string                                                                 `path:"md-admin-name" module:"nokia-conf"`
	MepId                *uint16                                                                 `path:"mep-id" module:"nokia-conf"`
	OneWayDelayThreshold *uint32                                                                 `path:"one-way-delay-threshold" module:"nokia-conf"`
	PrimaryVlan          *bool                                                                   `path:"primary-vlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep) IsYANGGoStruct() {}

// GetOrCreateAis retrieves the value of the Ais field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep) GetOrCreateAis() *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Ais {
	if t.Ais != nil {
		return t.Ais
	}
	t.Ais = &NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Ais{}
	return t.Ais
}

// GetOrCreateAlarmNotification retrieves the value of the AlarmNotification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep) GetOrCreateAlarmNotification() *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_AlarmNotification {
	if t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	t.AlarmNotification = &NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_AlarmNotification{}
	return t.AlarmNotification
}

// GetOrCreateCsf retrieves the value of the Csf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep) GetOrCreateCsf() *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Csf {
	if t.Csf != nil {
		return t.Csf
	}
	t.Csf = &NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Csf{}
	return t.Csf
}

// GetOrCreateEthTest retrieves the value of the EthTest field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep) GetOrCreateEthTest() *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest {
	if t.EthTest != nil {
		return t.EthTest
	}
	t.EthTest = &NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest{}
	return t.EthTest
}

// GetOrCreateGrace retrieves the value of the Grace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep) GetOrCreateGrace() *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace {
	if t.Grace != nil {
		return t.Grace
	}
	t.Grace = &NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace{}
	return t.Grace
}

// GetAis returns the value of the Ais struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep. If the receiver or the field Ais is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep) GetAis() *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Ais {
	if t != nil && t.Ais != nil {
		return t.Ais
	}
	return nil
}

// GetAlarmNotification returns the value of the AlarmNotification struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep. If the receiver or the field AlarmNotification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep) GetAlarmNotification() *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_AlarmNotification {
	if t != nil && t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	return nil
}

// GetCsf returns the value of the Csf struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep. If the receiver or the field Csf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep) GetCsf() *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Csf {
	if t != nil && t.Csf != nil {
		return t.Csf
	}
	return nil
}

// GetEthTest returns the value of the EthTest struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep. If the receiver or the field EthTest is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep) GetEthTest() *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest {
	if t != nil && t.EthTest != nil {
		return t.EthTest
	}
	return nil
}

// GetGrace returns the value of the Grace struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep. If the receiver or the field Grace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep) GetGrace() *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace {
	if t != nil && t.Grace != nil {
		return t.Grace
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCcm retrieves the value of the leaf Ccm from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ccm is set, it can
// safely use t.GetCcm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ccm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep) GetCcm() bool {
	if t == nil || t.Ccm == nil {
		return false
	}
	return *t.Ccm
}

// GetCcmLtmPriority retrieves the value of the leaf CcmLtmPriority from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmLtmPriority is set, it can
// safely use t.GetCcmLtmPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmLtmPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep) GetCcmLtmPriority() uint8 {
	if t == nil || t.CcmLtmPriority == nil {
		return 7
	}
	return *t.CcmLtmPriority
}

// GetCcmPaddingSize retrieves the value of the leaf CcmPaddingSize from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmPaddingSize is set, it can
// safely use t.GetCcmPaddingSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmPaddingSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep) GetCcmPaddingSize() uint32 {
	if t == nil || t.CcmPaddingSize == nil {
		return 0
	}
	return *t.CcmPaddingSize
}

// GetCfmVlanTag retrieves the value of the leaf CfmVlanTag from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CfmVlanTag is set, it can
// safely use t.GetCfmVlanTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CfmVlanTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep) GetCfmVlanTag() string {
	if t == nil || t.CfmVlanTag == nil {
		return ""
	}
	return *t.CfmVlanTag
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep) GetDirection() E_NokiaTypesEthCfm_MpDirection {
	if t == nil || t.Direction == 0 {
		return NokiaTypesEthCfm_MpDirection_down
	}
	return t.Direction
}

// GetFaultPropagation retrieves the value of the leaf FaultPropagation from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FaultPropagation is set, it can
// safely use t.GetFaultPropagation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FaultPropagation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep) GetFaultPropagation() E_NokiaTypesEthCfm_FaultPropagationType {
	if t == nil || t.FaultPropagation == 0 {
		return 0
	}
	return t.FaultPropagation
}

// GetInstallMep retrieves the value of the leaf InstallMep from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstallMep is set, it can
// safely use t.GetInstallMep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstallMep == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep) GetInstallMep() bool {
	if t == nil || t.InstallMep == nil {
		return false
	}
	return *t.InstallMep
}

// GetLbmSvcActResponder retrieves the value of the leaf LbmSvcActResponder from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LbmSvcActResponder is set, it can
// safely use t.GetLbmSvcActResponder() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LbmSvcActResponder == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep) GetLbmSvcActResponder() bool {
	if t == nil || t.LbmSvcActResponder == nil {
		return false
	}
	return *t.LbmSvcActResponder
}

// GetLowPriorityDefect retrieves the value of the leaf LowPriorityDefect from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPriorityDefect is set, it can
// safely use t.GetLowPriorityDefect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPriorityDefect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep) GetLowPriorityDefect() E_NokiaTypesEthCfm_LowestAlarmPriority {
	if t == nil || t.LowPriorityDefect == 0 {
		return NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	return t.LowPriorityDefect
}

// GetMaAdminName retrieves the value of the leaf MaAdminName from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaAdminName is set, it can
// safely use t.GetMaAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep) GetMaAdminName() string {
	if t == nil || t.MaAdminName == nil {
		return ""
	}
	return *t.MaAdminName
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetMdAdminName retrieves the value of the leaf MdAdminName from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdAdminName is set, it can
// safely use t.GetMdAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep) GetMdAdminName() string {
	if t == nil || t.MdAdminName == nil {
		return ""
	}
	return *t.MdAdminName
}

// GetMepId retrieves the value of the leaf MepId from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MepId is set, it can
// safely use t.GetMepId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MepId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep) GetMepId() uint16 {
	if t == nil || t.MepId == nil {
		return 0
	}
	return *t.MepId
}

// GetOneWayDelayThreshold retrieves the value of the leaf OneWayDelayThreshold from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OneWayDelayThreshold is set, it can
// safely use t.GetOneWayDelayThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OneWayDelayThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep) GetOneWayDelayThreshold() uint32 {
	if t == nil || t.OneWayDelayThreshold == nil {
		return 3
	}
	return *t.OneWayDelayThreshold
}

// GetPrimaryVlan retrieves the value of the leaf PrimaryVlan from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrimaryVlan is set, it can
// safely use t.GetPrimaryVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrimaryVlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep) GetPrimaryVlan() bool {
	if t == nil || t.PrimaryVlan == nil {
		return false
	}
	return *t.PrimaryVlan
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Ccm == nil {
		var v bool = false
		t.Ccm = &v
	}
	if t.CcmLtmPriority == nil {
		var v uint8 = 7
		t.CcmLtmPriority = &v
	}
	if t.Direction == 0 {
		t.Direction = NokiaTypesEthCfm_MpDirection_down
	}
	if t.InstallMep == nil {
		var v bool = false
		t.InstallMep = &v
	}
	if t.LowPriorityDefect == 0 {
		t.LowPriorityDefect = NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	if t.OneWayDelayThreshold == nil {
		var v uint32 = 3
		t.OneWayDelayThreshold = &v
	}
	if t.PrimaryVlan == nil {
		var v bool = false
		t.PrimaryVlan = &v
	}
	t.Ais.PopulateDefaults()
	t.AlarmNotification.PopulateDefaults()
	t.Csf.PopulateDefaults()
	t.EthTest.PopulateDefaults()
	t.Grace.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MaAdminName == nil {
		return nil, fmt.Errorf("nil value for key MaAdminName")
	}

	if t.MdAdminName == nil {
		return nil, fmt.Errorf("nil value for key MdAdminName")
	}

	if t.MepId == nil {
		return nil, fmt.Errorf("nil value for key MepId")
	}

	return map[string]interface{}{
		"ma-admin-name": *t.MaAdminName,
		"md-admin-name": *t.MdAdminName,
		"mep-id":        *t.MepId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Ais represents the /nokia-conf/configure/service/vpls/spoke-sdp/eth-cfm/mep/ais YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Ais struct {
	ClientMegLevel    []uint32                                                                     `path:"client-meg-level" module:"nokia-conf"`
	InterfaceSupport  *bool                                                                        `path:"interface-support" module:"nokia-conf"`
	Interval          *uint32                                                                      `path:"interval" module:"nokia-conf"`
	LowPriorityDefect E_NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Ais_LowPriorityDefect `path:"low-priority-defect" module:"nokia-conf"`
	Priority          *uint8                                                                       `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Ais implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Ais) IsYANGGoStruct() {}

// GetClientMegLevel retrieves the value of the leaf ClientMegLevel from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientMegLevel is set, it can
// safely use t.GetClientMegLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientMegLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Ais) GetClientMegLevel() []uint32 {
	if t == nil || t.ClientMegLevel == nil {
		return nil
	}
	return t.ClientMegLevel
}

// GetInterfaceSupport retrieves the value of the leaf InterfaceSupport from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceSupport is set, it can
// safely use t.GetInterfaceSupport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceSupport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Ais) GetInterfaceSupport() bool {
	if t == nil || t.InterfaceSupport == nil {
		return false
	}
	return *t.InterfaceSupport
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Ais) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 1
	}
	return *t.Interval
}

// GetLowPriorityDefect retrieves the value of the leaf LowPriorityDefect from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPriorityDefect is set, it can
// safely use t.GetLowPriorityDefect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPriorityDefect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Ais) GetLowPriorityDefect() E_NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Ais_LowPriorityDefect {
	if t == nil || t.LowPriorityDefect == 0 {
		return NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Ais_LowPriorityDefect_all_def
	}
	return t.LowPriorityDefect
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Ais) GetPriority() uint8 {
	if t == nil || t.Priority == nil {
		return 7
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Ais
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Ais) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InterfaceSupport == nil {
		var v bool = false
		t.InterfaceSupport = &v
	}
	if t.Interval == nil {
		var v uint32 = 1
		t.Interval = &v
	}
	if t.LowPriorityDefect == 0 {
		t.LowPriorityDefect = NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Ais_LowPriorityDefect_all_def
	}
	if t.Priority == nil {
		var v uint8 = 7
		t.Priority = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Ais) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Ais"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Ais) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Ais) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Ais.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Ais) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_AlarmNotification represents the /nokia-conf/configure/service/vpls/spoke-sdp/eth-cfm/mep/alarm-notification YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_AlarmNotification struct {
	FngAlarmTime *int32 `path:"fng-alarm-time" module:"nokia-conf"`
	FngResetTime *int32 `path:"fng-reset-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_AlarmNotification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_AlarmNotification) IsYANGGoStruct() {}

// GetFngAlarmTime retrieves the value of the leaf FngAlarmTime from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngAlarmTime is set, it can
// safely use t.GetFngAlarmTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngAlarmTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_AlarmNotification) GetFngAlarmTime() int32 {
	if t == nil || t.FngAlarmTime == nil {
		return 0
	}
	return *t.FngAlarmTime
}

// GetFngResetTime retrieves the value of the leaf FngResetTime from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngResetTime is set, it can
// safely use t.GetFngResetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngResetTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_AlarmNotification) GetFngResetTime() int32 {
	if t == nil || t.FngResetTime == nil {
		return 0
	}
	return *t.FngResetTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_AlarmNotification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_AlarmNotification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_AlarmNotification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_AlarmNotification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_AlarmNotification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_AlarmNotification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_AlarmNotification.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_AlarmNotification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Csf represents the /nokia-conf/configure/service/vpls/spoke-sdp/eth-cfm/mep/csf YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Csf struct {
	Multiplier *float64 `path:"multiplier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Csf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Csf) IsYANGGoStruct() {}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Csf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Csf) GetMultiplier() float64 {
	if t == nil || t.Multiplier == nil {
		return 3.5
	}
	return *t.Multiplier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Csf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Csf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v float64 = 3.5
		t.Multiplier = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Csf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Csf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Csf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Csf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Csf.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Csf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest represents the /nokia-conf/configure/service/vpls/spoke-sdp/eth-cfm/mep/eth-test YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest struct {
	BitErrorThreshold *uint32                                                                   `path:"bit-error-threshold" module:"nokia-conf"`
	TestPattern       *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest_TestPattern `path:"test-pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest) IsYANGGoStruct() {}

// GetOrCreateTestPattern retrieves the value of the TestPattern field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest) GetOrCreateTestPattern() *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest_TestPattern {
	if t.TestPattern != nil {
		return t.TestPattern
	}
	t.TestPattern = &NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest_TestPattern{}
	return t.TestPattern
}

// GetTestPattern returns the value of the TestPattern struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest. If the receiver or the field TestPattern is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest) GetTestPattern() *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest_TestPattern {
	if t != nil && t.TestPattern != nil {
		return t.TestPattern
	}
	return nil
}

// GetBitErrorThreshold retrieves the value of the leaf BitErrorThreshold from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitErrorThreshold is set, it can
// safely use t.GetBitErrorThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitErrorThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest) GetBitErrorThreshold() uint32 {
	if t == nil || t.BitErrorThreshold == nil {
		return 1
	}
	return *t.BitErrorThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BitErrorThreshold == nil {
		var v uint32 = 1
		t.BitErrorThreshold = &v
	}
	t.TestPattern.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest_TestPattern represents the /nokia-conf/configure/service/vpls/spoke-sdp/eth-cfm/mep/eth-test/test-pattern YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest_TestPattern struct {
	CrcTlv  *bool                                                                              `path:"crc-tlv" module:"nokia-conf"`
	Pattern E_NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest_TestPattern_Pattern `path:"pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest_TestPattern implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) IsYANGGoStruct() {}

// GetCrcTlv retrieves the value of the leaf CrcTlv from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CrcTlv is set, it can
// safely use t.GetCrcTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CrcTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) GetCrcTlv() bool {
	if t == nil || t.CrcTlv == nil {
		return false
	}
	return *t.CrcTlv
}

// GetPattern retrieves the value of the leaf Pattern from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pattern is set, it can
// safely use t.GetPattern() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pattern == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) GetPattern() E_NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest_TestPattern_Pattern {
	if t == nil || t.Pattern == 0 {
		return NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
	return t.Pattern
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest_TestPattern
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CrcTlv == nil {
		var v bool = false
		t.CrcTlv = &v
	}
	if t.Pattern == 0 {
		t.Pattern = NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest_TestPattern"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest_TestPattern.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace represents the /nokia-conf/configure/service/vpls/spoke-sdp/eth-cfm/mep/grace YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace struct {
	EthEd       *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthEd       `path:"eth-ed" module:"nokia-conf"`
	EthVsmGrace *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace `path:"eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace) IsYANGGoStruct() {}

// GetOrCreateEthEd retrieves the value of the EthEd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace) GetOrCreateEthEd() *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthEd {
	if t.EthEd != nil {
		return t.EthEd
	}
	t.EthEd = &NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthEd{}
	return t.EthEd
}

// GetOrCreateEthVsmGrace retrieves the value of the EthVsmGrace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace) GetOrCreateEthVsmGrace() *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace {
	if t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	t.EthVsmGrace = &NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace{}
	return t.EthVsmGrace
}

// GetEthEd returns the value of the EthEd struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace. If the receiver or the field EthEd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace) GetEthEd() *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthEd {
	if t != nil && t.EthEd != nil {
		return t.EthEd
	}
	return nil
}

// GetEthVsmGrace returns the value of the EthVsmGrace struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace. If the receiver or the field EthVsmGrace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace) GetEthVsmGrace() *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace {
	if t != nil && t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthEd.PopulateDefaults()
	t.EthVsmGrace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthEd represents the /nokia-conf/configure/service/vpls/spoke-sdp/eth-cfm/mep/grace/eth-ed YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthEd struct {
	MaxRxDefectWindow *uint32 `path:"max-rx-defect-window" module:"nokia-conf"`
	Priority          *int32  `path:"priority" module:"nokia-conf"`
	RxEthEd           *bool   `path:"rx-eth-ed" module:"nokia-conf"`
	TxEthEd           *bool   `path:"tx-eth-ed" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthEd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthEd) IsYANGGoStruct() {}

// GetMaxRxDefectWindow retrieves the value of the leaf MaxRxDefectWindow from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRxDefectWindow is set, it can
// safely use t.GetMaxRxDefectWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRxDefectWindow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthEd) GetMaxRxDefectWindow() uint32 {
	if t == nil || t.MaxRxDefectWindow == nil {
		return 0
	}
	return *t.MaxRxDefectWindow
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthEd) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetRxEthEd retrieves the value of the leaf RxEthEd from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthEd is set, it can
// safely use t.GetRxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthEd) GetRxEthEd() bool {
	if t == nil || t.RxEthEd == nil {
		return true
	}
	return *t.RxEthEd
}

// GetTxEthEd retrieves the value of the leaf TxEthEd from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthEd is set, it can
// safely use t.GetTxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthEd) GetTxEthEd() bool {
	if t == nil || t.TxEthEd == nil {
		return false
	}
	return *t.TxEthEd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthEd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthEd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthEd == nil {
		var v bool = true
		t.RxEthEd = &v
	}
	if t.TxEthEd == nil {
		var v bool = false
		t.TxEthEd = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthEd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthEd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthEd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthEd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthEd.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthEd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace represents the /nokia-conf/configure/service/vpls/spoke-sdp/eth-cfm/mep/grace/eth-vsm-grace YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace struct {
	RxEthVsmGrace *bool `path:"rx-eth-vsm-grace" module:"nokia-conf"`
	TxEthVsmGrace *bool `path:"tx-eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) IsYANGGoStruct() {}

// GetRxEthVsmGrace retrieves the value of the leaf RxEthVsmGrace from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthVsmGrace is set, it can
// safely use t.GetRxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) GetRxEthVsmGrace() bool {
	if t == nil || t.RxEthVsmGrace == nil {
		return true
	}
	return *t.RxEthVsmGrace
}

// GetTxEthVsmGrace retrieves the value of the leaf TxEthVsmGrace from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthVsmGrace is set, it can
// safely use t.GetTxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) GetTxEthVsmGrace() bool {
	if t == nil || t.TxEthVsmGrace == nil {
		return true
	}
	return *t.TxEthVsmGrace
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthVsmGrace == nil {
		var v bool = true
		t.RxEthVsmGrace = &v
	}
	if t.TxEthVsmGrace == nil {
		var v bool = true
		t.TxEthVsmGrace = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip represents the /nokia-conf/configure/service/vpls/spoke-sdp/eth-cfm/mip YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip struct {
	ApplyGroups        []string                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	CfmVlanTag         *string                                                                `path:"cfm-vlan-tag" module:"nokia-conf"`
	MacAddress         *string                                                                `path:"mac-address" module:"nokia-conf"`
	PrimaryVlan        NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip_PrimaryVlan_Union `path:"primary-vlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCfmVlanTag retrieves the value of the leaf CfmVlanTag from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CfmVlanTag is set, it can
// safely use t.GetCfmVlanTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CfmVlanTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip) GetCfmVlanTag() string {
	if t == nil || t.CfmVlanTag == nil {
		return ""
	}
	return *t.CfmVlanTag
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetPrimaryVlan retrieves the value of the leaf PrimaryVlan from the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrimaryVlan is set, it can
// safely use t.GetPrimaryVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrimaryVlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip) GetPrimaryVlan() NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip_PrimaryVlan_Union {
	if t == nil || t.PrimaryVlan == nil {
		return nil
	}
	return t.PrimaryVlan
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"primary-vlan": t.PrimaryVlan,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_EthCfm_Mip) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb represents the /nokia-conf/configure/service/vpls/spoke-sdp/fdb YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb struct {
	AutoLearnMacProtect            *bool                                                      `path:"auto-learn-mac-protect" module:"nokia-conf"`
	AutoLearnMacProtectExcludeList *string                                                    `path:"auto-learn-mac-protect-exclude-list" module:"nokia-conf"`
	DiscardUnknownSource           *bool                                                      `path:"discard-unknown-source" module:"nokia-conf"`
	LimitMacMove                   E_NokiaTypesServices_LimitMacMove                          `path:"limit-mac-move" module:"nokia-conf"`
	MacLearning                    *NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb_MacLearning `path:"mac-learning" module:"nokia-conf"`
	MacPinning                     *bool                                                      `path:"mac-pinning" module:"nokia-conf"`
	MaximumMacAddresses            *int32                                                     `path:"maximum-mac-addresses" module:"nokia-conf"`
	ProtectedSrcMacViolationAction E_NokiaTypesServices_SdpProtectedSrcMacViolationAction     `path:"protected-src-mac-violation-action" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb) IsYANGGoStruct() {}

// GetOrCreateMacLearning retrieves the value of the MacLearning field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb) GetOrCreateMacLearning() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb_MacLearning {
	if t.MacLearning != nil {
		return t.MacLearning
	}
	t.MacLearning = &NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb_MacLearning{}
	return t.MacLearning
}

// GetMacLearning returns the value of the MacLearning struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb. If the receiver or the field MacLearning is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb) GetMacLearning() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb_MacLearning {
	if t != nil && t.MacLearning != nil {
		return t.MacLearning
	}
	return nil
}

// GetAutoLearnMacProtect retrieves the value of the leaf AutoLearnMacProtect from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoLearnMacProtect is set, it can
// safely use t.GetAutoLearnMacProtect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoLearnMacProtect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb) GetAutoLearnMacProtect() bool {
	if t == nil || t.AutoLearnMacProtect == nil {
		return false
	}
	return *t.AutoLearnMacProtect
}

// GetAutoLearnMacProtectExcludeList retrieves the value of the leaf AutoLearnMacProtectExcludeList from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoLearnMacProtectExcludeList is set, it can
// safely use t.GetAutoLearnMacProtectExcludeList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoLearnMacProtectExcludeList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb) GetAutoLearnMacProtectExcludeList() string {
	if t == nil || t.AutoLearnMacProtectExcludeList == nil {
		return ""
	}
	return *t.AutoLearnMacProtectExcludeList
}

// GetDiscardUnknownSource retrieves the value of the leaf DiscardUnknownSource from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiscardUnknownSource is set, it can
// safely use t.GetDiscardUnknownSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiscardUnknownSource == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb) GetDiscardUnknownSource() bool {
	if t == nil || t.DiscardUnknownSource == nil {
		return false
	}
	return *t.DiscardUnknownSource
}

// GetLimitMacMove retrieves the value of the leaf LimitMacMove from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LimitMacMove is set, it can
// safely use t.GetLimitMacMove() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LimitMacMove == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb) GetLimitMacMove() E_NokiaTypesServices_LimitMacMove {
	if t == nil || t.LimitMacMove == 0 {
		return NokiaTypesServices_LimitMacMove_blockable
	}
	return t.LimitMacMove
}

// GetMacPinning retrieves the value of the leaf MacPinning from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacPinning is set, it can
// safely use t.GetMacPinning() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacPinning == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb) GetMacPinning() bool {
	if t == nil || t.MacPinning == nil {
		return false
	}
	return *t.MacPinning
}

// GetMaximumMacAddresses retrieves the value of the leaf MaximumMacAddresses from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumMacAddresses is set, it can
// safely use t.GetMaximumMacAddresses() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumMacAddresses == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb) GetMaximumMacAddresses() int32 {
	if t == nil || t.MaximumMacAddresses == nil {
		return 0
	}
	return *t.MaximumMacAddresses
}

// GetProtectedSrcMacViolationAction retrieves the value of the leaf ProtectedSrcMacViolationAction from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtectedSrcMacViolationAction is set, it can
// safely use t.GetProtectedSrcMacViolationAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtectedSrcMacViolationAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb) GetProtectedSrcMacViolationAction() E_NokiaTypesServices_SdpProtectedSrcMacViolationAction {
	if t == nil || t.ProtectedSrcMacViolationAction == 0 {
		return 0
	}
	return t.ProtectedSrcMacViolationAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AutoLearnMacProtect == nil {
		var v bool = false
		t.AutoLearnMacProtect = &v
	}
	if t.DiscardUnknownSource == nil {
		var v bool = false
		t.DiscardUnknownSource = &v
	}
	if t.LimitMacMove == 0 {
		t.LimitMacMove = NokiaTypesServices_LimitMacMove_blockable
	}
	if t.MacPinning == nil {
		var v bool = false
		t.MacPinning = &v
	}
	t.MacLearning.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb_MacLearning represents the /nokia-conf/configure/service/vpls/spoke-sdp/fdb/mac-learning YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb_MacLearning struct {
	Aging    *bool `path:"aging" module:"nokia-conf"`
	Learning *bool `path:"learning" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb_MacLearning implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb_MacLearning) IsYANGGoStruct() {}

// GetAging retrieves the value of the leaf Aging from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb_MacLearning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aging is set, it can
// safely use t.GetAging() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aging == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb_MacLearning) GetAging() bool {
	if t == nil || t.Aging == nil {
		return true
	}
	return *t.Aging
}

// GetLearning retrieves the value of the leaf Learning from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb_MacLearning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Learning is set, it can
// safely use t.GetLearning() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Learning == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb_MacLearning) GetLearning() bool {
	if t == nil || t.Learning == nil {
		return true
	}
	return *t.Learning
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb_MacLearning
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb_MacLearning) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Aging == nil {
		var v bool = true
		t.Aging = &v
	}
	if t.Learning == nil {
		var v bool = true
		t.Learning = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb_MacLearning) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb_MacLearning"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb_MacLearning) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb_MacLearning) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb_MacLearning.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Fdb_MacLearning) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_HashLabel represents the /nokia-conf/configure/service/vpls/spoke-sdp/hash-label YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_HashLabel struct {
	SignalCapability YANGEmpty `path:"signal-capability" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_HashLabel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_HashLabel) IsYANGGoStruct() {}

// GetSignalCapability retrieves the value of the leaf SignalCapability from the NokiaConf_Configure_Service_Vpls_SpokeSdp_HashLabel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SignalCapability is set, it can
// safely use t.GetSignalCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SignalCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_HashLabel) GetSignalCapability() YANGEmpty {
	if t == nil || t.SignalCapability == false {
		return false
	}
	return t.SignalCapability
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_HashLabel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_HashLabel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_HashLabel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_HashLabel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_HashLabel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_HashLabel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_HashLabel.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_HashLabel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_IVplsMacFlush represents the /nokia-conf/configure/service/vpls/spoke-sdp/i-vpls-mac-flush YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_IVplsMacFlush struct {
	BgpEvpn *NokiaConf_Configure_Service_Vpls_SpokeSdp_IVplsMacFlush_BgpEvpn `path:"bgp-evpn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_IVplsMacFlush implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_IVplsMacFlush) IsYANGGoStruct() {}

// GetOrCreateBgpEvpn retrieves the value of the BgpEvpn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IVplsMacFlush) GetOrCreateBgpEvpn() *NokiaConf_Configure_Service_Vpls_SpokeSdp_IVplsMacFlush_BgpEvpn {
	if t.BgpEvpn != nil {
		return t.BgpEvpn
	}
	t.BgpEvpn = &NokiaConf_Configure_Service_Vpls_SpokeSdp_IVplsMacFlush_BgpEvpn{}
	return t.BgpEvpn
}

// GetBgpEvpn returns the value of the BgpEvpn struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp_IVplsMacFlush. If the receiver or the field BgpEvpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IVplsMacFlush) GetBgpEvpn() *NokiaConf_Configure_Service_Vpls_SpokeSdp_IVplsMacFlush_BgpEvpn {
	if t != nil && t.BgpEvpn != nil {
		return t.BgpEvpn
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_IVplsMacFlush
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IVplsMacFlush) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BgpEvpn.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IVplsMacFlush) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_IVplsMacFlush"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IVplsMacFlush) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IVplsMacFlush) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_IVplsMacFlush.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_IVplsMacFlush) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_IVplsMacFlush_BgpEvpn represents the /nokia-conf/configure/service/vpls/spoke-sdp/i-vpls-mac-flush/bgp-evpn YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_IVplsMacFlush_BgpEvpn struct {
	SendToBvpls *bool `path:"send-to-bvpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_IVplsMacFlush_BgpEvpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_IVplsMacFlush_BgpEvpn) IsYANGGoStruct() {}

// GetSendToBvpls retrieves the value of the leaf SendToBvpls from the NokiaConf_Configure_Service_Vpls_SpokeSdp_IVplsMacFlush_BgpEvpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendToBvpls is set, it can
// safely use t.GetSendToBvpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendToBvpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IVplsMacFlush_BgpEvpn) GetSendToBvpls() bool {
	if t == nil || t.SendToBvpls == nil {
		return true
	}
	return *t.SendToBvpls
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_IVplsMacFlush_BgpEvpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IVplsMacFlush_BgpEvpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SendToBvpls == nil {
		var v bool = true
		t.SendToBvpls = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IVplsMacFlush_BgpEvpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_IVplsMacFlush_BgpEvpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IVplsMacFlush_BgpEvpn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IVplsMacFlush_BgpEvpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_IVplsMacFlush_BgpEvpn.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_IVplsMacFlush_BgpEvpn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping represents the /nokia-conf/configure/service/vpls/spoke-sdp/igmp-snooping YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping struct {
	ApplyGroups               []string                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	FastLeave                 *bool                                                          `path:"fast-leave" module:"nokia-conf"`
	ImportPolicy              *string                                                        `path:"import-policy" module:"nokia-conf"`
	MaximumNumberGroupSources *uint32                                                        `path:"maximum-number-group-sources" module:"nokia-conf"`
	MaximumNumberGroups       *uint32                                                        `path:"maximum-number-groups" module:"nokia-conf"`
	MaximumNumberSources      *uint32                                                        `path:"maximum-number-sources" module:"nokia-conf"`
	Mcac                      *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac   `path:"mcac" module:"nokia-conf"`
	MrouterPort               *bool                                                          `path:"mrouter-port" module:"nokia-conf"`
	QueryInterval             *uint32                                                        `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval   *uint32                                                        `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval     *uint32                                                        `path:"query-response-interval" module:"nokia-conf"`
	RobustCount               *uint32                                                        `path:"robust-count" module:"nokia-conf"`
	RouterAlertCheck          *bool                                                          `path:"router-alert-check" module:"nokia-conf"`
	SendQueries               *bool                                                          `path:"send-queries" module:"nokia-conf"`
	Static                    *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static `path:"static" module:"nokia-conf"`
	Version                   E_NokiaTypesIgmp_IgmpVersion                                   `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping) IsYANGGoStruct() {}

// GetOrCreateMcac retrieves the value of the Mcac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping) GetOrCreateMcac() *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac {
	if t.Mcac != nil {
		return t.Mcac
	}
	t.Mcac = &NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac{}
	return t.Mcac
}

// GetOrCreateStatic retrieves the value of the Static field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping) GetOrCreateStatic() *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static {
	if t.Static != nil {
		return t.Static
	}
	t.Static = &NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static{}
	return t.Static
}

// GetMcac returns the value of the Mcac struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping. If the receiver or the field Mcac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping) GetMcac() *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac {
	if t != nil && t.Mcac != nil {
		return t.Mcac
	}
	return nil
}

// GetStatic returns the value of the Static struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping. If the receiver or the field Static is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping) GetStatic() *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static {
	if t != nil && t.Static != nil {
		return t.Static
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFastLeave retrieves the value of the leaf FastLeave from the NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastLeave is set, it can
// safely use t.GetFastLeave() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastLeave == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping) GetFastLeave() bool {
	if t == nil || t.FastLeave == nil {
		return false
	}
	return *t.FastLeave
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetMaximumNumberGroupSources retrieves the value of the leaf MaximumNumberGroupSources from the NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroupSources is set, it can
// safely use t.GetMaximumNumberGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroupSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping) GetMaximumNumberGroupSources() uint32 {
	if t == nil || t.MaximumNumberGroupSources == nil {
		return 0
	}
	return *t.MaximumNumberGroupSources
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMaximumNumberSources retrieves the value of the leaf MaximumNumberSources from the NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberSources is set, it can
// safely use t.GetMaximumNumberSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping) GetMaximumNumberSources() uint32 {
	if t == nil || t.MaximumNumberSources == nil {
		return 0
	}
	return *t.MaximumNumberSources
}

// GetMrouterPort retrieves the value of the leaf MrouterPort from the NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MrouterPort is set, it can
// safely use t.GetMrouterPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MrouterPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping) GetMrouterPort() bool {
	if t == nil || t.MrouterPort == nil {
		return false
	}
	return *t.MrouterPort
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 125
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 10
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 10
	}
	return *t.QueryResponseInterval
}

// GetRobustCount retrieves the value of the leaf RobustCount from the NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RobustCount is set, it can
// safely use t.GetRobustCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RobustCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping) GetRobustCount() uint32 {
	if t == nil || t.RobustCount == nil {
		return 2
	}
	return *t.RobustCount
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetSendQueries retrieves the value of the leaf SendQueries from the NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendQueries is set, it can
// safely use t.GetSendQueries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendQueries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping) GetSendQueries() bool {
	if t == nil || t.SendQueries == nil {
		return false
	}
	return *t.SendQueries
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping) GetVersion() E_NokiaTypesIgmp_IgmpVersion {
	if t == nil || t.Version == 0 {
		return NokiaTypesIgmp_IgmpVersion_3
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastLeave == nil {
		var v bool = false
		t.FastLeave = &v
	}
	if t.MrouterPort == nil {
		var v bool = false
		t.MrouterPort = &v
	}
	if t.QueryInterval == nil {
		var v uint32 = 125
		t.QueryInterval = &v
	}
	if t.QueryLastMemberInterval == nil {
		var v uint32 = 10
		t.QueryLastMemberInterval = &v
	}
	if t.QueryResponseInterval == nil {
		var v uint32 = 10
		t.QueryResponseInterval = &v
	}
	if t.RobustCount == nil {
		var v uint32 = 2
		t.RobustCount = &v
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.SendQueries == nil {
		var v bool = false
		t.SendQueries = &v
	}
	if t.Version == 0 {
		t.Version = NokiaTypesIgmp_IgmpVersion_3
	}
	t.Mcac.PopulateDefaults()
	t.Static.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac represents the /nokia-conf/configure/service/vpls/spoke-sdp/igmp-snooping/mcac YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac struct {
	Bandwidth       *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac_Bandwidth `path:"bandwidth" module:"nokia-conf"`
	InterfacePolicy *string                                                                `path:"interface-policy" module:"nokia-conf"`
	Policy          *string                                                                `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac) IsYANGGoStruct() {}

// GetOrCreateBandwidth retrieves the value of the Bandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac) GetOrCreateBandwidth() *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac_Bandwidth {
	if t.Bandwidth != nil {
		return t.Bandwidth
	}
	t.Bandwidth = &NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac_Bandwidth{}
	return t.Bandwidth
}

// GetBandwidth returns the value of the Bandwidth struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac. If the receiver or the field Bandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac) GetBandwidth() *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac_Bandwidth {
	if t != nil && t.Bandwidth != nil {
		return t.Bandwidth
	}
	return nil
}

// GetInterfacePolicy retrieves the value of the leaf InterfacePolicy from the NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfacePolicy is set, it can
// safely use t.GetInterfacePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfacePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac) GetInterfacePolicy() string {
	if t == nil || t.InterfacePolicy == nil {
		return ""
	}
	return *t.InterfacePolicy
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bandwidth.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac_Bandwidth represents the /nokia-conf/configure/service/vpls/spoke-sdp/igmp-snooping/mcac/bandwidth YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac_Bandwidth struct {
	Mandatory NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac_Bandwidth_Mandatory_Union `path:"mandatory" module:"nokia-conf"`
	Total     NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac_Bandwidth_Total_Union     `path:"total" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac_Bandwidth) IsYANGGoStruct() {}

// GetMandatory retrieves the value of the leaf Mandatory from the NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mandatory is set, it can
// safely use t.GetMandatory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mandatory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac_Bandwidth) GetMandatory() NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac_Bandwidth_Mandatory_Union {
	if t == nil || t.Mandatory == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Mandatory
}

// GetTotal retrieves the value of the leaf Total from the NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Total is set, it can
// safely use t.GetTotal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Total == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac_Bandwidth) GetTotal() NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac_Bandwidth_Total_Union {
	if t == nil || t.Total == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Total
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac_Bandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac_Bandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mandatory == nil {
		t.Mandatory = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	if t.Total == nil {
		t.Total = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac_Bandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac_Bandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac_Bandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac_Bandwidth.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Mcac_Bandwidth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static represents the /nokia-conf/configure/service/vpls/spoke-sdp/igmp-snooping/static YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static struct {
	Group map[string]*NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group `path:"group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static) NewGroup(GroupAddress string) (*NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group)
	}

	key := GroupAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group{
		GroupAddress: &GroupAddress,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupAddress = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static) GetOrCreateGroup(GroupAddress string) *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group {

	key := GroupAddress

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static) GetGroup(GroupAddress string) *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group {

	if t == nil {
		return nil
	}

	key := GroupAddress

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static) DeleteGroup(GroupAddress string) {
	key := GroupAddress

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group struct to the
// list Group of NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static) AppendGroup(v *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group) error {
	if v.GroupAddress == nil {
		return fmt.Errorf("invalid nil key received for GroupAddress")
	}

	key := *v.GroupAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group represents the /nokia-conf/configure/service/vpls/spoke-sdp/igmp-snooping/static/group YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group struct {
	ApplyGroups        []string                                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupAddress       *string                                                                                `path:"group-address" module:"nokia-conf"`
	Source             map[string]*NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group_Source `path:"source" module:"nokia-conf"`
	Starg              YANGEmpty                                                                              `path:"starg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group) IsYANGGoStruct() {}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group) NewSource(SourceAddress string) (*NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group) GetSource(SourceAddress string) *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group_Source struct to the
// list Source of NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group) AppendSource(v *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetStarg retrieves the value of the leaf Starg from the NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group) GetStarg() YANGEmpty {
	if t == nil || t.Starg == false {
		return false
	}
	return t.Starg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupAddress == nil {
		return nil, fmt.Errorf("nil value for key GroupAddress")
	}

	return map[string]interface{}{
		"group-address": *t.GroupAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group_Source represents the /nokia-conf/configure/service/vpls/spoke-sdp/igmp-snooping/static/group/source YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group_Source) IsYANGGoStruct() {}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group_Source.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_IgmpSnooping_Static_Group_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress represents the /nokia-conf/configure/service/vpls/spoke-sdp/ingress YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress struct {
	Filter  *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Filter `path:"filter" module:"nokia-conf"`
	Qos     *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos    `path:"qos" module:"nokia-conf"`
	VcLabel *uint32                                                   `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress) GetOrCreateQos() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress) GetFilter() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress) GetQos() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Filter represents the /nokia-conf/configure/service/vpls/spoke-sdp/ingress/filter YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
	Mac  *string `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Filter) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Filter.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos represents the /nokia-conf/configure/service/vpls/spoke-sdp/ingress/qos YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos struct {
	Network *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network `path:"network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos) IsYANGGoStruct() {}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos) GetOrCreateNetwork() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network{}
	return t.Network
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos) GetNetwork() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Network.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network represents the /nokia-conf/configure/service/vpls/spoke-sdp/ingress/qos/network YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network struct {
	FpRedirectGroup *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup `path:"fp-redirect-group" module:"nokia-conf"`
	PolicyName      *string                                                                        `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network) IsYANGGoStruct() {}

// GetOrCreateFpRedirectGroup retrieves the value of the FpRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network) GetOrCreateFpRedirectGroup() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup {
	if t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	t.FpRedirectGroup = &NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup{}
	return t.FpRedirectGroup
}

// GetFpRedirectGroup returns the value of the FpRedirectGroup struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network. If the receiver or the field FpRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network) GetFpRedirectGroup() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup {
	if t != nil && t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FpRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup represents the /nokia-conf/configure/service/vpls/spoke-sdp/ingress/qos/network/fp-redirect-group YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt represents the /nokia-conf/configure/service/vpls/spoke-sdp/l2pt YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt struct {
	Termination *NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination `path:"termination" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt) IsYANGGoStruct() {}

// GetOrCreateTermination retrieves the value of the Termination field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt) GetOrCreateTermination() *NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination {
	if t.Termination != nil {
		return t.Termination
	}
	t.Termination = &NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination{}
	return t.Termination
}

// GetTermination returns the value of the Termination struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt. If the receiver or the field Termination is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt) GetTermination() *NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination {
	if t != nil && t.Termination != nil {
		return t.Termination
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Termination.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination represents the /nokia-conf/configure/service/vpls/spoke-sdp/l2pt/termination YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination struct {
	Protocols *NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination_Protocols `path:"protocols" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination) IsYANGGoStruct() {}

// GetOrCreateProtocols retrieves the value of the Protocols field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination) GetOrCreateProtocols() *NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination_Protocols {
	if t.Protocols != nil {
		return t.Protocols
	}
	t.Protocols = &NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination_Protocols{}
	return t.Protocols
}

// GetProtocols returns the value of the Protocols struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination. If the receiver or the field Protocols is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination) GetProtocols() *NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination_Protocols {
	if t != nil && t.Protocols != nil {
		return t.Protocols
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Protocols.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination_Protocols represents the /nokia-conf/configure/service/vpls/spoke-sdp/l2pt/termination/protocols YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination_Protocols struct {
	Cdp  *bool `path:"cdp" module:"nokia-conf"`
	Dtp  *bool `path:"dtp" module:"nokia-conf"`
	Pagp *bool `path:"pagp" module:"nokia-conf"`
	Stp  *bool `path:"stp" module:"nokia-conf"`
	Udld *bool `path:"udld" module:"nokia-conf"`
	Vtp  *bool `path:"vtp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination_Protocols implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination_Protocols) IsYANGGoStruct() {}

// GetCdp retrieves the value of the leaf Cdp from the NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination_Protocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cdp is set, it can
// safely use t.GetCdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cdp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination_Protocols) GetCdp() bool {
	if t == nil || t.Cdp == nil {
		return false
	}
	return *t.Cdp
}

// GetDtp retrieves the value of the leaf Dtp from the NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination_Protocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dtp is set, it can
// safely use t.GetDtp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dtp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination_Protocols) GetDtp() bool {
	if t == nil || t.Dtp == nil {
		return false
	}
	return *t.Dtp
}

// GetPagp retrieves the value of the leaf Pagp from the NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination_Protocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pagp is set, it can
// safely use t.GetPagp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pagp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination_Protocols) GetPagp() bool {
	if t == nil || t.Pagp == nil {
		return false
	}
	return *t.Pagp
}

// GetStp retrieves the value of the leaf Stp from the NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination_Protocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Stp is set, it can
// safely use t.GetStp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Stp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination_Protocols) GetStp() bool {
	if t == nil || t.Stp == nil {
		return true
	}
	return *t.Stp
}

// GetUdld retrieves the value of the leaf Udld from the NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination_Protocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Udld is set, it can
// safely use t.GetUdld() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Udld == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination_Protocols) GetUdld() bool {
	if t == nil || t.Udld == nil {
		return false
	}
	return *t.Udld
}

// GetVtp retrieves the value of the leaf Vtp from the NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination_Protocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vtp is set, it can
// safely use t.GetVtp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vtp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination_Protocols) GetVtp() bool {
	if t == nil || t.Vtp == nil {
		return false
	}
	return *t.Vtp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination_Protocols
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination_Protocols) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cdp == nil {
		var v bool = false
		t.Cdp = &v
	}
	if t.Dtp == nil {
		var v bool = false
		t.Dtp = &v
	}
	if t.Pagp == nil {
		var v bool = false
		t.Pagp = &v
	}
	if t.Stp == nil {
		var v bool = true
		t.Stp = &v
	}
	if t.Udld == nil {
		var v bool = false
		t.Udld = &v
	}
	if t.Vtp == nil {
		var v bool = false
		t.Vtp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination_Protocols) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination_Protocols"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination_Protocols) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination_Protocols) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination_Protocols.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_L2Pt_Termination_Protocols) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping represents the /nokia-conf/configure/service/vpls/spoke-sdp/mld-snooping YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping struct {
	ApplyGroups             []string                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	FastLeave               *bool                                                         `path:"fast-leave" module:"nokia-conf"`
	ImportPolicy            *string                                                       `path:"import-policy" module:"nokia-conf"`
	MaximumNumberGroups     *uint32                                                       `path:"maximum-number-groups" module:"nokia-conf"`
	MrouterPort             *bool                                                         `path:"mrouter-port" module:"nokia-conf"`
	QueryInterval           *uint32                                                       `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval *uint32                                                       `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval   *uint32                                                       `path:"query-response-interval" module:"nokia-conf"`
	RobustCount             *uint32                                                       `path:"robust-count" module:"nokia-conf"`
	RouterAlertCheck        *bool                                                         `path:"router-alert-check" module:"nokia-conf"`
	SendQueries             *bool                                                         `path:"send-queries" module:"nokia-conf"`
	Static                  *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static `path:"static" module:"nokia-conf"`
	Version                 E_NokiaTypesIgmp_MldVersion                                   `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping) IsYANGGoStruct() {}

// GetOrCreateStatic retrieves the value of the Static field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping) GetOrCreateStatic() *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static {
	if t.Static != nil {
		return t.Static
	}
	t.Static = &NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static{}
	return t.Static
}

// GetStatic returns the value of the Static struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping. If the receiver or the field Static is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping) GetStatic() *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static {
	if t != nil && t.Static != nil {
		return t.Static
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetFastLeave retrieves the value of the leaf FastLeave from the NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastLeave is set, it can
// safely use t.GetFastLeave() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastLeave == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping) GetFastLeave() bool {
	if t == nil || t.FastLeave == nil {
		return false
	}
	return *t.FastLeave
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMrouterPort retrieves the value of the leaf MrouterPort from the NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MrouterPort is set, it can
// safely use t.GetMrouterPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MrouterPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping) GetMrouterPort() bool {
	if t == nil || t.MrouterPort == nil {
		return false
	}
	return *t.MrouterPort
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 125
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 10
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 10
	}
	return *t.QueryResponseInterval
}

// GetRobustCount retrieves the value of the leaf RobustCount from the NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RobustCount is set, it can
// safely use t.GetRobustCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RobustCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping) GetRobustCount() uint32 {
	if t == nil || t.RobustCount == nil {
		return 2
	}
	return *t.RobustCount
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetSendQueries retrieves the value of the leaf SendQueries from the NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendQueries is set, it can
// safely use t.GetSendQueries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendQueries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping) GetSendQueries() bool {
	if t == nil || t.SendQueries == nil {
		return false
	}
	return *t.SendQueries
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping) GetVersion() E_NokiaTypesIgmp_MldVersion {
	if t == nil || t.Version == 0 {
		return NokiaTypesIgmp_MldVersion_2
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastLeave == nil {
		var v bool = false
		t.FastLeave = &v
	}
	if t.MrouterPort == nil {
		var v bool = false
		t.MrouterPort = &v
	}
	if t.QueryInterval == nil {
		var v uint32 = 125
		t.QueryInterval = &v
	}
	if t.QueryLastMemberInterval == nil {
		var v uint32 = 10
		t.QueryLastMemberInterval = &v
	}
	if t.QueryResponseInterval == nil {
		var v uint32 = 10
		t.QueryResponseInterval = &v
	}
	if t.RobustCount == nil {
		var v uint32 = 2
		t.RobustCount = &v
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.SendQueries == nil {
		var v bool = false
		t.SendQueries = &v
	}
	if t.Version == 0 {
		t.Version = NokiaTypesIgmp_MldVersion_2
	}
	t.Static.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static represents the /nokia-conf/configure/service/vpls/spoke-sdp/mld-snooping/static YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static struct {
	Group map[string]*NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group `path:"group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static) NewGroup(GroupAddress string) (*NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group)
	}

	key := GroupAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group{
		GroupAddress: &GroupAddress,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupAddress = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static) GetOrCreateGroup(GroupAddress string) *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group {

	key := GroupAddress

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static) GetGroup(GroupAddress string) *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group {

	if t == nil {
		return nil
	}

	key := GroupAddress

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static) DeleteGroup(GroupAddress string) {
	key := GroupAddress

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group struct to the
// list Group of NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static) AppendGroup(v *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group) error {
	if v.GroupAddress == nil {
		return fmt.Errorf("invalid nil key received for GroupAddress")
	}

	key := *v.GroupAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group represents the /nokia-conf/configure/service/vpls/spoke-sdp/mld-snooping/static/group YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group struct {
	ApplyGroups        []string                                                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	GroupAddress       *string                                                                               `path:"group-address" module:"nokia-conf"`
	Source             map[string]*NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group_Source `path:"source" module:"nokia-conf"`
	Starg              YANGEmpty                                                                             `path:"starg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group) IsYANGGoStruct() {}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group) NewSource(SourceAddress string) (*NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group) GetSource(SourceAddress string) *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group_Source struct to the
// list Source of NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group) AppendSource(v *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetStarg retrieves the value of the leaf Starg from the NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group) GetStarg() YANGEmpty {
	if t == nil || t.Starg == false {
		return false
	}
	return t.Starg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupAddress == nil {
		return nil, fmt.Errorf("nil value for key GroupAddress")
	}

	return map[string]interface{}{
		"group-address": *t.GroupAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group_Source represents the /nokia-conf/configure/service/vpls/spoke-sdp/mld-snooping/static/group/source YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group_Source) IsYANGGoStruct() {}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group_Source.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_MldSnooping_Static_Group_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_Mrp represents the /nokia-conf/configure/service/vpls/spoke-sdp/mrp YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_Mrp struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	JoinTime           *uint32  `path:"join-time" module:"nokia-conf"`
	LeaveAllTime       *uint32  `path:"leave-all-time" module:"nokia-conf"`
	LeaveTime          *uint32  `path:"leave-time" module:"nokia-conf"`
	PeriodicTime       *uint32  `path:"periodic-time" module:"nokia-conf"`
	PeriodicTimer      *bool    `path:"periodic-timer" module:"nokia-conf"`
	Policy             *string  `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_Mrp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Mrp) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Mrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Mrp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Mrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Mrp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetJoinTime retrieves the value of the leaf JoinTime from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Mrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if JoinTime is set, it can
// safely use t.GetJoinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.JoinTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Mrp) GetJoinTime() uint32 {
	if t == nil || t.JoinTime == nil {
		return 2
	}
	return *t.JoinTime
}

// GetLeaveAllTime retrieves the value of the leaf LeaveAllTime from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Mrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LeaveAllTime is set, it can
// safely use t.GetLeaveAllTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LeaveAllTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Mrp) GetLeaveAllTime() uint32 {
	if t == nil || t.LeaveAllTime == nil {
		return 100
	}
	return *t.LeaveAllTime
}

// GetLeaveTime retrieves the value of the leaf LeaveTime from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Mrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LeaveTime is set, it can
// safely use t.GetLeaveTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LeaveTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Mrp) GetLeaveTime() uint32 {
	if t == nil || t.LeaveTime == nil {
		return 30
	}
	return *t.LeaveTime
}

// GetPeriodicTime retrieves the value of the leaf PeriodicTime from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Mrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeriodicTime is set, it can
// safely use t.GetPeriodicTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeriodicTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Mrp) GetPeriodicTime() uint32 {
	if t == nil || t.PeriodicTime == nil {
		return 10
	}
	return *t.PeriodicTime
}

// GetPeriodicTimer retrieves the value of the leaf PeriodicTimer from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Mrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeriodicTimer is set, it can
// safely use t.GetPeriodicTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeriodicTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Mrp) GetPeriodicTimer() bool {
	if t == nil || t.PeriodicTimer == nil {
		return false
	}
	return *t.PeriodicTimer
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Mrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Mrp) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_Mrp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Mrp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.JoinTime == nil {
		var v uint32 = 2
		t.JoinTime = &v
	}
	if t.LeaveAllTime == nil {
		var v uint32 = 100
		t.LeaveAllTime = &v
	}
	if t.LeaveTime == nil {
		var v uint32 = 30
		t.LeaveTime = &v
	}
	if t.PeriodicTime == nil {
		var v uint32 = 10
		t.PeriodicTime = &v
	}
	if t.PeriodicTimer == nil {
		var v bool = false
		t.PeriodicTimer = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Mrp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_Mrp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Mrp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Mrp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_Mrp.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Mrp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb represents the /nokia-conf/configure/service/vpls/spoke-sdp/pbb YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb struct {
	FaultPropagation *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation `path:"fault-propagation" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb) IsYANGGoStruct() {}

// GetOrCreateFaultPropagation retrieves the value of the FaultPropagation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb) GetOrCreateFaultPropagation() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation {
	if t.FaultPropagation != nil {
		return t.FaultPropagation
	}
	t.FaultPropagation = &NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation{}
	return t.FaultPropagation
}

// GetFaultPropagation returns the value of the FaultPropagation struct pointer
// from NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb. If the receiver or the field FaultPropagation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb) GetFaultPropagation() *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation {
	if t != nil && t.FaultPropagation != nil {
		return t.FaultPropagation
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FaultPropagation.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation represents the /nokia-conf/configure/service/vpls/spoke-sdp/pbb/fault-propagation YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation struct {
	BackboneMacAddress map[string]*NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacAddress `path:"backbone-mac-address" module:"nokia-conf"`
	BackboneMacName    map[string]*NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacName    `path:"backbone-mac-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation) IsYANGGoStruct() {}

// NewBackboneMacAddress creates a new entry in the BackboneMacAddress list of the
// NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation) NewBackboneMacAddress(Address string) (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacAddress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BackboneMacAddress == nil {
		t.BackboneMacAddress = make(map[string]*NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacAddress)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BackboneMacAddress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BackboneMacAddress", key)
	}

	t.BackboneMacAddress[key] = &NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacAddress{
		Address: &Address,
	}

	return t.BackboneMacAddress[key], nil
}

// RenameBackboneMacAddress renames an entry in the list BackboneMacAddress within
// the NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation) RenameBackboneMacAddress(oldK, newK string) error {
	if _, ok := t.BackboneMacAddress[newK]; ok {
		return fmt.Errorf("key %v already exists in BackboneMacAddress", newK)
	}

	e, ok := t.BackboneMacAddress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BackboneMacAddress", oldK)
	}
	e.Address = &newK

	t.BackboneMacAddress[newK] = e
	delete(t.BackboneMacAddress, oldK)
	return nil
}

// GetOrCreateBackboneMacAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation) GetOrCreateBackboneMacAddress(Address string) *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacAddress {

	key := Address

	if v, ok := t.BackboneMacAddress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBackboneMacAddress(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBackboneMacAddress got unexpected error: %v", err))
	}
	return v
}

// GetBackboneMacAddress retrieves the value with the specified key from
// the BackboneMacAddress map field of NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation) GetBackboneMacAddress(Address string) *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacAddress {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.BackboneMacAddress[key]; ok {
		return lm
	}
	return nil
}

// DeleteBackboneMacAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation) DeleteBackboneMacAddress(Address string) {
	key := Address

	delete(t.BackboneMacAddress, key)
}

// AppendBackboneMacAddress appends the supplied NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacAddress struct to the
// list BackboneMacAddress of NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacAddress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation) AppendBackboneMacAddress(v *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacAddress) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BackboneMacAddress == nil {
		t.BackboneMacAddress = make(map[string]*NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacAddress)
	}

	if _, ok := t.BackboneMacAddress[key]; ok {
		return fmt.Errorf("duplicate key for list BackboneMacAddress %v", key)
	}

	t.BackboneMacAddress[key] = v
	return nil
}

// NewBackboneMacName creates a new entry in the BackboneMacName list of the
// NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation) NewBackboneMacName(Name string) (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacName, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BackboneMacName == nil {
		t.BackboneMacName = make(map[string]*NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacName)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BackboneMacName[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BackboneMacName", key)
	}

	t.BackboneMacName[key] = &NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacName{
		Name: &Name,
	}

	return t.BackboneMacName[key], nil
}

// RenameBackboneMacName renames an entry in the list BackboneMacName within
// the NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation) RenameBackboneMacName(oldK, newK string) error {
	if _, ok := t.BackboneMacName[newK]; ok {
		return fmt.Errorf("key %v already exists in BackboneMacName", newK)
	}

	e, ok := t.BackboneMacName[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BackboneMacName", oldK)
	}
	e.Name = &newK

	t.BackboneMacName[newK] = e
	delete(t.BackboneMacName, oldK)
	return nil
}

// GetOrCreateBackboneMacName retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation) GetOrCreateBackboneMacName(Name string) *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacName {

	key := Name

	if v, ok := t.BackboneMacName[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBackboneMacName(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBackboneMacName got unexpected error: %v", err))
	}
	return v
}

// GetBackboneMacName retrieves the value with the specified key from
// the BackboneMacName map field of NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation) GetBackboneMacName(Name string) *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacName {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.BackboneMacName[key]; ok {
		return lm
	}
	return nil
}

// DeleteBackboneMacName deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation) DeleteBackboneMacName(Name string) {
	key := Name

	delete(t.BackboneMacName, key)
}

// AppendBackboneMacName appends the supplied NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacName struct to the
// list BackboneMacName of NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacName already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation) AppendBackboneMacName(v *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacName) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BackboneMacName == nil {
		t.BackboneMacName = make(map[string]*NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacName)
	}

	if _, ok := t.BackboneMacName[key]; ok {
		return fmt.Errorf("duplicate key for list BackboneMacName %v", key)
	}

	t.BackboneMacName[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.BackboneMacAddress {
		e.PopulateDefaults()
	}
	for _, e := range t.BackboneMacName {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacAddress represents the /nokia-conf/configure/service/vpls/spoke-sdp/pbb/fault-propagation/backbone-mac-address YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacAddress struct {
	Address *string `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacAddress) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacAddress) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacAddress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacAddress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacAddress.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacName represents the /nokia-conf/configure/service/vpls/spoke-sdp/pbb/fault-propagation/backbone-mac-name YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacName struct {
	Name *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacName implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacName) IsYANGGoStruct() {
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacName) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacName
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacName) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacName struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacName) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacName) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacName"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacName) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacName) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacName.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Pbb_FaultPropagation_BackboneMacName) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_PimSnooping represents the /nokia-conf/configure/service/vpls/spoke-sdp/pim-snooping YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_PimSnooping struct {
	ApplyGroups         []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string `path:"apply-groups-exclude" module:"nokia-conf"`
	MaximumNumberGroups *uint32  `path:"maximum-number-groups" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_PimSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_PimSnooping) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_SpokeSdp_PimSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_PimSnooping) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_SpokeSdp_PimSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_PimSnooping) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Service_Vpls_SpokeSdp_PimSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_PimSnooping) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_PimSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_PimSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_PimSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_PimSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_PimSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_PimSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_PimSnooping.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_PimSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_PwStatus represents the /nokia-conf/configure/service/vpls/spoke-sdp/pw-status YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_PwStatus struct {
	Signaling *bool `path:"signaling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_PwStatus implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_PwStatus) IsYANGGoStruct() {}

// GetSignaling retrieves the value of the leaf Signaling from the NokiaConf_Configure_Service_Vpls_SpokeSdp_PwStatus
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Signaling is set, it can
// safely use t.GetSignaling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Signaling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_PwStatus) GetSignaling() bool {
	if t == nil || t.Signaling == nil {
		return true
	}
	return *t.Signaling
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_PwStatus
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_PwStatus) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Signaling == nil {
		var v bool = true
		t.Signaling = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_PwStatus) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_PwStatus"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_PwStatus) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_PwStatus) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_PwStatus.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_PwStatus) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb represents the /nokia-conf/configure/service/vpls/spoke-sdp/spb YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb struct {
	AdminState         E_NokiaTypesSros_AdminState                                    `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Level              map[int32]*NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb_Level `path:"level" module:"nokia-conf"`
	LspPacingInterval  *uint32                                                        `path:"lsp-pacing-interval" module:"nokia-conf"`
	RetransmitInterval *uint32                                                        `path:"retransmit-interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb) IsYANGGoStruct() {}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb) NewLevel(Id int32) (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[int32]*NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb_Level)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb_Level{
		Id: &Id,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb) RenameLevel(oldK, newK int32) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.Id = &newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb) GetOrCreateLevel(Id int32) *NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb_Level {

	key := Id

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb) GetLevel(Id int32) *NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb_Level {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb) DeleteLevel(Id int32) {
	key := Id

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb_Level struct to the
// list Level of NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb) AppendLevel(v *NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb_Level) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[int32]*NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLspPacingInterval retrieves the value of the leaf LspPacingInterval from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspPacingInterval is set, it can
// safely use t.GetLspPacingInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspPacingInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb) GetLspPacingInterval() uint32 {
	if t == nil || t.LspPacingInterval == nil {
		return 100
	}
	return *t.LspPacingInterval
}

// GetRetransmitInterval retrieves the value of the leaf RetransmitInterval from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetransmitInterval is set, it can
// safely use t.GetRetransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb) GetRetransmitInterval() uint32 {
	if t == nil || t.RetransmitInterval == nil {
		return 5
	}
	return *t.RetransmitInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.LspPacingInterval == nil {
		var v uint32 = 100
		t.LspPacingInterval = &v
	}
	if t.RetransmitInterval == nil {
		var v uint32 = 5
		t.RetransmitInterval = &v
	}
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb_Level represents the /nokia-conf/configure/service/vpls/spoke-sdp/spb/level YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb_Level struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	HelloInterval      *uint32  `path:"hello-interval" module:"nokia-conf"`
	HelloMultiplier    *int32   `path:"hello-multiplier" module:"nokia-conf"`
	Id                 *int32   `path:"id" module:"nokia-conf"`
	Metric             *uint32  `path:"metric" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb_Level) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb_Level) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb_Level) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb_Level) GetHelloInterval() uint32 {
	if t == nil || t.HelloInterval == nil {
		return 9
	}
	return *t.HelloInterval
}

// GetHelloMultiplier retrieves the value of the leaf HelloMultiplier from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloMultiplier is set, it can
// safely use t.GetHelloMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloMultiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb_Level) GetHelloMultiplier() int32 {
	if t == nil || t.HelloMultiplier == nil {
		return 3
	}
	return *t.HelloMultiplier
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb_Level) GetId() int32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetMetric retrieves the value of the leaf Metric from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb_Level) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HelloInterval == nil {
		var v uint32 = 9
		t.HelloInterval = &v
	}
	if t.HelloMultiplier == nil {
		var v int32 = 3
		t.HelloMultiplier = &v
	}
	if t.Metric == nil {
		var v uint32 = 0
		t.Metric = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb_Level) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb_Level.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Spb_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid represents the /nokia-conf/configure/service/vpls/spoke-sdp/static-isid YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid struct {
	Range map[uint32]*NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid) IsYANGGoStruct() {}

// NewRange creates a new entry in the Range list of the
// NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid) NewRange(RangeId uint32) (*NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid_Range, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[uint32]*NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid_Range)
	}

	key := RangeId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Range[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Range", key)
	}

	t.Range[key] = &NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid_Range{
		RangeId: &RangeId,
	}

	return t.Range[key], nil
}

// RenameRange renames an entry in the list Range within
// the NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid) RenameRange(oldK, newK uint32) error {
	if _, ok := t.Range[newK]; ok {
		return fmt.Errorf("key %v already exists in Range", newK)
	}

	e, ok := t.Range[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Range", oldK)
	}
	e.RangeId = &newK

	t.Range[newK] = e
	delete(t.Range, oldK)
	return nil
}

// GetOrCreateRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid) GetOrCreateRange(RangeId uint32) *NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid_Range {

	key := RangeId

	if v, ok := t.Range[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRange(RangeId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRange got unexpected error: %v", err))
	}
	return v
}

// GetRange retrieves the value with the specified key from
// the Range map field of NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid) GetRange(RangeId uint32) *NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid_Range {

	if t == nil {
		return nil
	}

	key := RangeId

	if lm, ok := t.Range[key]; ok {
		return lm
	}
	return nil
}

// DeleteRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid) DeleteRange(RangeId uint32) {
	key := RangeId

	delete(t.Range, key)
}

// AppendRange appends the supplied NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid_Range struct to the
// list Range of NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid_Range already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid) AppendRange(v *NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid_Range) error {
	if v.RangeId == nil {
		return fmt.Errorf("invalid nil key received for RangeId")
	}

	key := *v.RangeId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[uint32]*NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid_Range)
	}

	if _, ok := t.Range[key]; ok {
		return fmt.Errorf("duplicate key for list Range %v", key)
	}

	t.Range[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Range {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid_Range represents the /nokia-conf/configure/service/vpls/spoke-sdp/static-isid/range YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid_Range struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	End                *int32   `path:"end" module:"nokia-conf"`
	RangeId            *uint32  `path:"range-id" module:"nokia-conf"`
	Start              *int32   `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid_Range) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid_Range) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid_Range) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetRangeId retrieves the value of the leaf RangeId from the NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RangeId is set, it can
// safely use t.GetRangeId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RangeId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid_Range) GetRangeId() uint32 {
	if t == nil || t.RangeId == nil {
		return 0
	}
	return *t.RangeId
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid_Range struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid_Range) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RangeId == nil {
		return nil, fmt.Errorf("nil value for key RangeId")
	}

	return map[string]interface{}{
		"range-id": *t.RangeId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid_Range.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_StaticIsid_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_Stp represents the /nokia-conf/configure/service/vpls/spoke-sdp/stp YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_Stp struct {
	AdminState E_NokiaTypesSros_AdminState      `path:"admin-state" module:"nokia-conf"`
	AutoEdge   *bool                            `path:"auto-edge" module:"nokia-conf"`
	EdgePort   *bool                            `path:"edge-port" module:"nokia-conf"`
	LinkType   E_NokiaTypesServices_StpLinkType `path:"link-type" module:"nokia-conf"`
	PathCost   *int32                           `path:"path-cost" module:"nokia-conf"`
	PortNum    *int32                           `path:"port-num" module:"nokia-conf"`
	Priority   *int32                           `path:"priority" module:"nokia-conf"`
	RootGuard  *bool                            `path:"root-guard" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_Stp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Stp) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Stp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetAutoEdge retrieves the value of the leaf AutoEdge from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoEdge is set, it can
// safely use t.GetAutoEdge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoEdge == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Stp) GetAutoEdge() bool {
	if t == nil || t.AutoEdge == nil {
		return true
	}
	return *t.AutoEdge
}

// GetEdgePort retrieves the value of the leaf EdgePort from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EdgePort is set, it can
// safely use t.GetEdgePort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EdgePort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Stp) GetEdgePort() bool {
	if t == nil || t.EdgePort == nil {
		return false
	}
	return *t.EdgePort
}

// GetLinkType retrieves the value of the leaf LinkType from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkType is set, it can
// safely use t.GetLinkType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Stp) GetLinkType() E_NokiaTypesServices_StpLinkType {
	if t == nil || t.LinkType == 0 {
		return NokiaTypesServices_StpLinkType_pt_pt
	}
	return t.LinkType
}

// GetPathCost retrieves the value of the leaf PathCost from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathCost is set, it can
// safely use t.GetPathCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathCost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Stp) GetPathCost() int32 {
	if t == nil || t.PathCost == nil {
		return 10
	}
	return *t.PathCost
}

// GetPortNum retrieves the value of the leaf PortNum from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortNum is set, it can
// safely use t.GetPortNum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortNum == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Stp) GetPortNum() int32 {
	if t == nil || t.PortNum == nil {
		return 0
	}
	return *t.PortNum
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Stp) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 128
	}
	return *t.Priority
}

// GetRootGuard retrieves the value of the leaf RootGuard from the NokiaConf_Configure_Service_Vpls_SpokeSdp_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootGuard is set, it can
// safely use t.GetRootGuard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootGuard == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Stp) GetRootGuard() bool {
	if t == nil || t.RootGuard == nil {
		return false
	}
	return *t.RootGuard
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_Stp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Stp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AutoEdge == nil {
		var v bool = true
		t.AutoEdge = &v
	}
	if t.EdgePort == nil {
		var v bool = false
		t.EdgePort = &v
	}
	if t.LinkType == 0 {
		t.LinkType = NokiaTypesServices_StpLinkType_pt_pt
	}
	if t.PathCost == nil {
		var v int32 = 10
		t.PathCost = &v
	}
	if t.Priority == nil {
		var v int32 = 128
		t.Priority = &v
	}
	if t.RootGuard == nil {
		var v bool = false
		t.RootGuard = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Stp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_Stp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Stp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_Stp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_Stp.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_Stp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_SpokeSdp_TransitPolicy represents the /nokia-conf/configure/service/vpls/spoke-sdp/transit-policy YANG schema element.
type NokiaConf_Configure_Service_Vpls_SpokeSdp_TransitPolicy struct {
	Prefix *uint32 `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_SpokeSdp_TransitPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_TransitPolicy) IsYANGGoStruct() {}

// GetPrefix retrieves the value of the leaf Prefix from the NokiaConf_Configure_Service_Vpls_SpokeSdp_TransitPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_TransitPolicy) GetPrefix() uint32 {
	if t == nil || t.Prefix == nil {
		return 0
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_SpokeSdp_TransitPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_TransitPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_TransitPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_SpokeSdp_TransitPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_TransitPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_SpokeSdp_TransitPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_SpokeSdp_TransitPolicy.
func (*NokiaConf_Configure_Service_Vpls_SpokeSdp_TransitPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Stp represents the /nokia-conf/configure/service/vpls/stp YANG schema element.
type NokiaConf_Configure_Service_Vpls_Stp struct {
	AdminState     E_NokiaTypesSros_AdminState                                  `path:"admin-state" module:"nokia-conf"`
	ForwardDelay   *int32                                                       `path:"forward-delay" module:"nokia-conf"`
	HelloTime      *int32                                                       `path:"hello-time" module:"nokia-conf"`
	HoldCount      *int32                                                       `path:"hold-count" module:"nokia-conf"`
	MaximumAge     *int32                                                       `path:"maximum-age" module:"nokia-conf"`
	Mode           E_NokiaConf_Configure_Service_Vpls_Stp_Mode                  `path:"mode" module:"nokia-conf"`
	MstInstance    map[uint32]*NokiaConf_Configure_Service_Vpls_Stp_MstInstance `path:"mst-instance" module:"nokia-conf"`
	MstMaximumHops *int32                                                       `path:"mst-maximum-hops" module:"nokia-conf"`
	MstName        *string                                                      `path:"mst-name" module:"nokia-conf"`
	MstRevision    *int32                                                       `path:"mst-revision" module:"nokia-conf"`
	Priority       *int32                                                       `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Stp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Stp) IsYANGGoStruct() {}

// NewMstInstance creates a new entry in the MstInstance list of the
// NokiaConf_Configure_Service_Vpls_Stp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Stp) NewMstInstance(MstInstNumber uint32) (*NokiaConf_Configure_Service_Vpls_Stp_MstInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MstInstance == nil {
		t.MstInstance = make(map[uint32]*NokiaConf_Configure_Service_Vpls_Stp_MstInstance)
	}

	key := MstInstNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MstInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MstInstance", key)
	}

	t.MstInstance[key] = &NokiaConf_Configure_Service_Vpls_Stp_MstInstance{
		MstInstNumber: &MstInstNumber,
	}

	return t.MstInstance[key], nil
}

// RenameMstInstance renames an entry in the list MstInstance within
// the NokiaConf_Configure_Service_Vpls_Stp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Stp) RenameMstInstance(oldK, newK uint32) error {
	if _, ok := t.MstInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in MstInstance", newK)
	}

	e, ok := t.MstInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MstInstance", oldK)
	}
	e.MstInstNumber = &newK

	t.MstInstance[newK] = e
	delete(t.MstInstance, oldK)
	return nil
}

// GetOrCreateMstInstance retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Stp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Stp) GetOrCreateMstInstance(MstInstNumber uint32) *NokiaConf_Configure_Service_Vpls_Stp_MstInstance {

	key := MstInstNumber

	if v, ok := t.MstInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMstInstance(MstInstNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMstInstance got unexpected error: %v", err))
	}
	return v
}

// GetMstInstance retrieves the value with the specified key from
// the MstInstance map field of NokiaConf_Configure_Service_Vpls_Stp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Stp) GetMstInstance(MstInstNumber uint32) *NokiaConf_Configure_Service_Vpls_Stp_MstInstance {

	if t == nil {
		return nil
	}

	key := MstInstNumber

	if lm, ok := t.MstInstance[key]; ok {
		return lm
	}
	return nil
}

// DeleteMstInstance deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Stp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Stp) DeleteMstInstance(MstInstNumber uint32) {
	key := MstInstNumber

	delete(t.MstInstance, key)
}

// AppendMstInstance appends the supplied NokiaConf_Configure_Service_Vpls_Stp_MstInstance struct to the
// list MstInstance of NokiaConf_Configure_Service_Vpls_Stp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Stp_MstInstance already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Stp) AppendMstInstance(v *NokiaConf_Configure_Service_Vpls_Stp_MstInstance) error {
	if v.MstInstNumber == nil {
		return fmt.Errorf("invalid nil key received for MstInstNumber")
	}

	key := *v.MstInstNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MstInstance == nil {
		t.MstInstance = make(map[uint32]*NokiaConf_Configure_Service_Vpls_Stp_MstInstance)
	}

	if _, ok := t.MstInstance[key]; ok {
		return fmt.Errorf("duplicate key for list MstInstance %v", key)
	}

	t.MstInstance[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Stp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetForwardDelay retrieves the value of the leaf ForwardDelay from the NokiaConf_Configure_Service_Vpls_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardDelay is set, it can
// safely use t.GetForwardDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Stp) GetForwardDelay() int32 {
	if t == nil || t.ForwardDelay == nil {
		return 15
	}
	return *t.ForwardDelay
}

// GetHelloTime retrieves the value of the leaf HelloTime from the NokiaConf_Configure_Service_Vpls_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloTime is set, it can
// safely use t.GetHelloTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Stp) GetHelloTime() int32 {
	if t == nil || t.HelloTime == nil {
		return 2
	}
	return *t.HelloTime
}

// GetHoldCount retrieves the value of the leaf HoldCount from the NokiaConf_Configure_Service_Vpls_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldCount is set, it can
// safely use t.GetHoldCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Stp) GetHoldCount() int32 {
	if t == nil || t.HoldCount == nil {
		return 6
	}
	return *t.HoldCount
}

// GetMaximumAge retrieves the value of the leaf MaximumAge from the NokiaConf_Configure_Service_Vpls_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumAge is set, it can
// safely use t.GetMaximumAge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumAge == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Stp) GetMaximumAge() int32 {
	if t == nil || t.MaximumAge == nil {
		return 20
	}
	return *t.MaximumAge
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Service_Vpls_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Stp) GetMode() E_NokiaConf_Configure_Service_Vpls_Stp_Mode {
	if t == nil || t.Mode == 0 {
		return NokiaConf_Configure_Service_Vpls_Stp_Mode_rstp
	}
	return t.Mode
}

// GetMstMaximumHops retrieves the value of the leaf MstMaximumHops from the NokiaConf_Configure_Service_Vpls_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MstMaximumHops is set, it can
// safely use t.GetMstMaximumHops() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MstMaximumHops == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Stp) GetMstMaximumHops() int32 {
	if t == nil || t.MstMaximumHops == nil {
		return 20
	}
	return *t.MstMaximumHops
}

// GetMstName retrieves the value of the leaf MstName from the NokiaConf_Configure_Service_Vpls_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MstName is set, it can
// safely use t.GetMstName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MstName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Stp) GetMstName() string {
	if t == nil || t.MstName == nil {
		return ""
	}
	return *t.MstName
}

// GetMstRevision retrieves the value of the leaf MstRevision from the NokiaConf_Configure_Service_Vpls_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MstRevision is set, it can
// safely use t.GetMstRevision() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MstRevision == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Stp) GetMstRevision() int32 {
	if t == nil || t.MstRevision == nil {
		return 0
	}
	return *t.MstRevision
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Service_Vpls_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Stp) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 32768
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Stp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Stp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ForwardDelay == nil {
		var v int32 = 15
		t.ForwardDelay = &v
	}
	if t.HelloTime == nil {
		var v int32 = 2
		t.HelloTime = &v
	}
	if t.HoldCount == nil {
		var v int32 = 6
		t.HoldCount = &v
	}
	if t.MaximumAge == nil {
		var v int32 = 20
		t.MaximumAge = &v
	}
	if t.Mode == 0 {
		t.Mode = NokiaConf_Configure_Service_Vpls_Stp_Mode_rstp
	}
	if t.MstMaximumHops == nil {
		var v int32 = 20
		t.MstMaximumHops = &v
	}
	if t.Priority == nil {
		var v int32 = 32768
		t.Priority = &v
	}
	for _, e := range t.MstInstance {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Stp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Stp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Stp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Stp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Stp.
func (*NokiaConf_Configure_Service_Vpls_Stp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Stp_MstInstance represents the /nokia-conf/configure/service/vpls/stp/mst-instance YANG schema element.
type NokiaConf_Configure_Service_Vpls_Stp_MstInstance struct {
	ApplyGroups        []string                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	MstInstNumber      *uint32                                                                `path:"mst-inst-number" module:"nokia-conf"`
	MstPriority        *int32                                                                 `path:"mst-priority" module:"nokia-conf"`
	VlanRange          map[string]*NokiaConf_Configure_Service_Vpls_Stp_MstInstance_VlanRange `path:"vlan-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Stp_MstInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Stp_MstInstance) IsYANGGoStruct() {}

// NewVlanRange creates a new entry in the VlanRange list of the
// NokiaConf_Configure_Service_Vpls_Stp_MstInstance struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Stp_MstInstance) NewVlanRange(Range string) (*NokiaConf_Configure_Service_Vpls_Stp_MstInstance_VlanRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VlanRange == nil {
		t.VlanRange = make(map[string]*NokiaConf_Configure_Service_Vpls_Stp_MstInstance_VlanRange)
	}

	key := Range

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VlanRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VlanRange", key)
	}

	t.VlanRange[key] = &NokiaConf_Configure_Service_Vpls_Stp_MstInstance_VlanRange{
		Range: &Range,
	}

	return t.VlanRange[key], nil
}

// RenameVlanRange renames an entry in the list VlanRange within
// the NokiaConf_Configure_Service_Vpls_Stp_MstInstance struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Stp_MstInstance) RenameVlanRange(oldK, newK string) error {
	if _, ok := t.VlanRange[newK]; ok {
		return fmt.Errorf("key %v already exists in VlanRange", newK)
	}

	e, ok := t.VlanRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VlanRange", oldK)
	}
	e.Range = &newK

	t.VlanRange[newK] = e
	delete(t.VlanRange, oldK)
	return nil
}

// GetOrCreateVlanRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Stp_MstInstance. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Stp_MstInstance) GetOrCreateVlanRange(Range string) *NokiaConf_Configure_Service_Vpls_Stp_MstInstance_VlanRange {

	key := Range

	if v, ok := t.VlanRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVlanRange(Range)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVlanRange got unexpected error: %v", err))
	}
	return v
}

// GetVlanRange retrieves the value with the specified key from
// the VlanRange map field of NokiaConf_Configure_Service_Vpls_Stp_MstInstance. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Stp_MstInstance) GetVlanRange(Range string) *NokiaConf_Configure_Service_Vpls_Stp_MstInstance_VlanRange {

	if t == nil {
		return nil
	}

	key := Range

	if lm, ok := t.VlanRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteVlanRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Stp_MstInstance. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Stp_MstInstance) DeleteVlanRange(Range string) {
	key := Range

	delete(t.VlanRange, key)
}

// AppendVlanRange appends the supplied NokiaConf_Configure_Service_Vpls_Stp_MstInstance_VlanRange struct to the
// list VlanRange of NokiaConf_Configure_Service_Vpls_Stp_MstInstance. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Stp_MstInstance_VlanRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Stp_MstInstance) AppendVlanRange(v *NokiaConf_Configure_Service_Vpls_Stp_MstInstance_VlanRange) error {
	if v.Range == nil {
		return fmt.Errorf("invalid nil key received for Range")
	}

	key := *v.Range

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VlanRange == nil {
		t.VlanRange = make(map[string]*NokiaConf_Configure_Service_Vpls_Stp_MstInstance_VlanRange)
	}

	if _, ok := t.VlanRange[key]; ok {
		return fmt.Errorf("duplicate key for list VlanRange %v", key)
	}

	t.VlanRange[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Stp_MstInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Stp_MstInstance) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Stp_MstInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Stp_MstInstance) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetMstInstNumber retrieves the value of the leaf MstInstNumber from the NokiaConf_Configure_Service_Vpls_Stp_MstInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MstInstNumber is set, it can
// safely use t.GetMstInstNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MstInstNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Stp_MstInstance) GetMstInstNumber() uint32 {
	if t == nil || t.MstInstNumber == nil {
		return 0
	}
	return *t.MstInstNumber
}

// GetMstPriority retrieves the value of the leaf MstPriority from the NokiaConf_Configure_Service_Vpls_Stp_MstInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MstPriority is set, it can
// safely use t.GetMstPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MstPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Stp_MstInstance) GetMstPriority() int32 {
	if t == nil || t.MstPriority == nil {
		return 32768
	}
	return *t.MstPriority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Stp_MstInstance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Stp_MstInstance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MstPriority == nil {
		var v int32 = 32768
		t.MstPriority = &v
	}
	for _, e := range t.VlanRange {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Stp_MstInstance struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Stp_MstInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MstInstNumber == nil {
		return nil, fmt.Errorf("nil value for key MstInstNumber")
	}

	return map[string]interface{}{
		"mst-inst-number": *t.MstInstNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Stp_MstInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Stp_MstInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Stp_MstInstance) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Stp_MstInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Stp_MstInstance.
func (*NokiaConf_Configure_Service_Vpls_Stp_MstInstance) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Stp_MstInstance_VlanRange represents the /nokia-conf/configure/service/vpls/stp/mst-instance/vlan-range YANG schema element.
type NokiaConf_Configure_Service_Vpls_Stp_MstInstance_VlanRange struct {
	Range *string `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Stp_MstInstance_VlanRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Stp_MstInstance_VlanRange) IsYANGGoStruct() {}

// GetRange retrieves the value of the leaf Range from the NokiaConf_Configure_Service_Vpls_Stp_MstInstance_VlanRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Range is set, it can
// safely use t.GetRange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Range == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Stp_MstInstance_VlanRange) GetRange() string {
	if t == nil || t.Range == nil {
		return ""
	}
	return *t.Range
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Stp_MstInstance_VlanRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Stp_MstInstance_VlanRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Stp_MstInstance_VlanRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Stp_MstInstance_VlanRange) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Range == nil {
		return nil, fmt.Errorf("nil value for key Range")
	}

	return map[string]interface{}{
		"range": *t.Range,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Stp_MstInstance_VlanRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Stp_MstInstance_VlanRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Stp_MstInstance_VlanRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Stp_MstInstance_VlanRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Stp_MstInstance_VlanRange.
func (*NokiaConf_Configure_Service_Vpls_Stp_MstInstance_VlanRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Vxlan represents the /nokia-conf/configure/service/vpls/vxlan YANG schema element.
type NokiaConf_Configure_Service_Vpls_Vxlan struct {
	Instance   map[uint32]*NokiaConf_Configure_Service_Vpls_Vxlan_Instance `path:"instance" module:"nokia-conf"`
	SourceVtep *string                                                     `path:"source-vtep" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Vxlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Vxlan) IsYANGGoStruct() {}

// NewInstance creates a new entry in the Instance list of the
// NokiaConf_Configure_Service_Vpls_Vxlan struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan) NewInstance(VxlanInstance uint32) (*NokiaConf_Configure_Service_Vpls_Vxlan_Instance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Instance == nil {
		t.Instance = make(map[uint32]*NokiaConf_Configure_Service_Vpls_Vxlan_Instance)
	}

	key := VxlanInstance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Instance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Instance", key)
	}

	t.Instance[key] = &NokiaConf_Configure_Service_Vpls_Vxlan_Instance{
		VxlanInstance: &VxlanInstance,
	}

	return t.Instance[key], nil
}

// RenameInstance renames an entry in the list Instance within
// the NokiaConf_Configure_Service_Vpls_Vxlan struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan) RenameInstance(oldK, newK uint32) error {
	if _, ok := t.Instance[newK]; ok {
		return fmt.Errorf("key %v already exists in Instance", newK)
	}

	e, ok := t.Instance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Instance", oldK)
	}
	e.VxlanInstance = &newK

	t.Instance[newK] = e
	delete(t.Instance, oldK)
	return nil
}

// GetOrCreateInstance retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Vxlan. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan) GetOrCreateInstance(VxlanInstance uint32) *NokiaConf_Configure_Service_Vpls_Vxlan_Instance {

	key := VxlanInstance

	if v, ok := t.Instance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInstance(VxlanInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInstance got unexpected error: %v", err))
	}
	return v
}

// GetInstance retrieves the value with the specified key from
// the Instance map field of NokiaConf_Configure_Service_Vpls_Vxlan. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan) GetInstance(VxlanInstance uint32) *NokiaConf_Configure_Service_Vpls_Vxlan_Instance {

	if t == nil {
		return nil
	}

	key := VxlanInstance

	if lm, ok := t.Instance[key]; ok {
		return lm
	}
	return nil
}

// DeleteInstance deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Vxlan. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan) DeleteInstance(VxlanInstance uint32) {
	key := VxlanInstance

	delete(t.Instance, key)
}

// AppendInstance appends the supplied NokiaConf_Configure_Service_Vpls_Vxlan_Instance struct to the
// list Instance of NokiaConf_Configure_Service_Vpls_Vxlan. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Vxlan_Instance already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan) AppendInstance(v *NokiaConf_Configure_Service_Vpls_Vxlan_Instance) error {
	if v.VxlanInstance == nil {
		return fmt.Errorf("invalid nil key received for VxlanInstance")
	}

	key := *v.VxlanInstance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Instance == nil {
		t.Instance = make(map[uint32]*NokiaConf_Configure_Service_Vpls_Vxlan_Instance)
	}

	if _, ok := t.Instance[key]; ok {
		return fmt.Errorf("duplicate key for list Instance %v", key)
	}

	t.Instance[key] = v
	return nil
}

// GetSourceVtep retrieves the value of the leaf SourceVtep from the NokiaConf_Configure_Service_Vpls_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceVtep is set, it can
// safely use t.GetSourceVtep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceVtep == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan) GetSourceVtep() string {
	if t == nil || t.SourceVtep == nil {
		return ""
	}
	return *t.SourceVtep
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Vxlan
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Instance {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Vxlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Vxlan.
func (*NokiaConf_Configure_Service_Vpls_Vxlan) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Vxlan_Instance represents the /nokia-conf/configure/service/vpls/vxlan/instance YANG schema element.
type NokiaConf_Configure_Service_Vpls_Vxlan_Instance struct {
	ApplyGroups         []string                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	AssistedReplication *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication   `path:"assisted-replication" module:"nokia-conf"`
	EgressVtep          map[string]*NokiaConf_Configure_Service_Vpls_Vxlan_Instance_EgressVtep `path:"egress-vtep" module:"nokia-conf"`
	Fdb                 *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb                   `path:"fdb" module:"nokia-conf"`
	IgmpSnooping        *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_IgmpSnooping          `path:"igmp-snooping" module:"nokia-conf"`
	MldSnooping         *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_MldSnooping           `path:"mld-snooping" module:"nokia-conf"`
	Network             *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network               `path:"network" module:"nokia-conf"`
	RxDiscardOnNdf      E_NokiaConf_Configure_Service_Vpls_Vxlan_Instance_RxDiscardOnNdf       `path:"rx-discard-on-ndf" module:"nokia-conf"`
	SourceVtepSecurity  *bool                                                                  `path:"source-vtep-security" module:"nokia-conf"`
	Vni                 *uint32                                                                `path:"vni" module:"nokia-conf"`
	VxlanInstance       *uint32                                                                `path:"vxlan-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Vxlan_Instance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Vxlan_Instance) IsYANGGoStruct() {}

// NewEgressVtep creates a new entry in the EgressVtep list of the
// NokiaConf_Configure_Service_Vpls_Vxlan_Instance struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance) NewEgressVtep(IpAddress string) (*NokiaConf_Configure_Service_Vpls_Vxlan_Instance_EgressVtep, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EgressVtep == nil {
		t.EgressVtep = make(map[string]*NokiaConf_Configure_Service_Vpls_Vxlan_Instance_EgressVtep)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EgressVtep[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EgressVtep", key)
	}

	t.EgressVtep[key] = &NokiaConf_Configure_Service_Vpls_Vxlan_Instance_EgressVtep{
		IpAddress: &IpAddress,
	}

	return t.EgressVtep[key], nil
}

// RenameEgressVtep renames an entry in the list EgressVtep within
// the NokiaConf_Configure_Service_Vpls_Vxlan_Instance struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance) RenameEgressVtep(oldK, newK string) error {
	if _, ok := t.EgressVtep[newK]; ok {
		return fmt.Errorf("key %v already exists in EgressVtep", newK)
	}

	e, ok := t.EgressVtep[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in EgressVtep", oldK)
	}
	e.IpAddress = &newK

	t.EgressVtep[newK] = e
	delete(t.EgressVtep, oldK)
	return nil
}

// GetOrCreateEgressVtep retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Vxlan_Instance. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance) GetOrCreateEgressVtep(IpAddress string) *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_EgressVtep {

	key := IpAddress

	if v, ok := t.EgressVtep[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEgressVtep(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEgressVtep got unexpected error: %v", err))
	}
	return v
}

// GetEgressVtep retrieves the value with the specified key from
// the EgressVtep map field of NokiaConf_Configure_Service_Vpls_Vxlan_Instance. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance) GetEgressVtep(IpAddress string) *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_EgressVtep {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.EgressVtep[key]; ok {
		return lm
	}
	return nil
}

// DeleteEgressVtep deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vpls_Vxlan_Instance. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance) DeleteEgressVtep(IpAddress string) {
	key := IpAddress

	delete(t.EgressVtep, key)
}

// AppendEgressVtep appends the supplied NokiaConf_Configure_Service_Vpls_Vxlan_Instance_EgressVtep struct to the
// list EgressVtep of NokiaConf_Configure_Service_Vpls_Vxlan_Instance. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vpls_Vxlan_Instance_EgressVtep already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance) AppendEgressVtep(v *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_EgressVtep) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EgressVtep == nil {
		t.EgressVtep = make(map[string]*NokiaConf_Configure_Service_Vpls_Vxlan_Instance_EgressVtep)
	}

	if _, ok := t.EgressVtep[key]; ok {
		return fmt.Errorf("duplicate key for list EgressVtep %v", key)
	}

	t.EgressVtep[key] = v
	return nil
}

// GetOrCreateAssistedReplication retrieves the value of the AssistedReplication field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance) GetOrCreateAssistedReplication() *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication {
	if t.AssistedReplication != nil {
		return t.AssistedReplication
	}
	t.AssistedReplication = &NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication{}
	return t.AssistedReplication
}

// GetOrCreateFdb retrieves the value of the Fdb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance) GetOrCreateFdb() *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb {
	if t.Fdb != nil {
		return t.Fdb
	}
	t.Fdb = &NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb{}
	return t.Fdb
}

// GetOrCreateIgmpSnooping retrieves the value of the IgmpSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance) GetOrCreateIgmpSnooping() *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_IgmpSnooping {
	if t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	t.IgmpSnooping = &NokiaConf_Configure_Service_Vpls_Vxlan_Instance_IgmpSnooping{}
	return t.IgmpSnooping
}

// GetOrCreateMldSnooping retrieves the value of the MldSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance) GetOrCreateMldSnooping() *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_MldSnooping {
	if t.MldSnooping != nil {
		return t.MldSnooping
	}
	t.MldSnooping = &NokiaConf_Configure_Service_Vpls_Vxlan_Instance_MldSnooping{}
	return t.MldSnooping
}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance) GetOrCreateNetwork() *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network{}
	return t.Network
}

// GetAssistedReplication returns the value of the AssistedReplication struct pointer
// from NokiaConf_Configure_Service_Vpls_Vxlan_Instance. If the receiver or the field AssistedReplication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance) GetAssistedReplication() *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication {
	if t != nil && t.AssistedReplication != nil {
		return t.AssistedReplication
	}
	return nil
}

// GetFdb returns the value of the Fdb struct pointer
// from NokiaConf_Configure_Service_Vpls_Vxlan_Instance. If the receiver or the field Fdb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance) GetFdb() *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb {
	if t != nil && t.Fdb != nil {
		return t.Fdb
	}
	return nil
}

// GetIgmpSnooping returns the value of the IgmpSnooping struct pointer
// from NokiaConf_Configure_Service_Vpls_Vxlan_Instance. If the receiver or the field IgmpSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance) GetIgmpSnooping() *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_IgmpSnooping {
	if t != nil && t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	return nil
}

// GetMldSnooping returns the value of the MldSnooping struct pointer
// from NokiaConf_Configure_Service_Vpls_Vxlan_Instance. If the receiver or the field MldSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance) GetMldSnooping() *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_MldSnooping {
	if t != nil && t.MldSnooping != nil {
		return t.MldSnooping
	}
	return nil
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Service_Vpls_Vxlan_Instance. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance) GetNetwork() *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_Vxlan_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_Vxlan_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetRxDiscardOnNdf retrieves the value of the leaf RxDiscardOnNdf from the NokiaConf_Configure_Service_Vpls_Vxlan_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxDiscardOnNdf is set, it can
// safely use t.GetRxDiscardOnNdf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxDiscardOnNdf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance) GetRxDiscardOnNdf() E_NokiaConf_Configure_Service_Vpls_Vxlan_Instance_RxDiscardOnNdf {
	if t == nil || t.RxDiscardOnNdf == 0 {
		return NokiaConf_Configure_Service_Vpls_Vxlan_Instance_RxDiscardOnNdf_bm
	}
	return t.RxDiscardOnNdf
}

// GetSourceVtepSecurity retrieves the value of the leaf SourceVtepSecurity from the NokiaConf_Configure_Service_Vpls_Vxlan_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceVtepSecurity is set, it can
// safely use t.GetSourceVtepSecurity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceVtepSecurity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance) GetSourceVtepSecurity() bool {
	if t == nil || t.SourceVtepSecurity == nil {
		return false
	}
	return *t.SourceVtepSecurity
}

// GetVni retrieves the value of the leaf Vni from the NokiaConf_Configure_Service_Vpls_Vxlan_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vni is set, it can
// safely use t.GetVni() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vni == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance) GetVni() uint32 {
	if t == nil || t.Vni == nil {
		return 0
	}
	return *t.Vni
}

// GetVxlanInstance retrieves the value of the leaf VxlanInstance from the NokiaConf_Configure_Service_Vpls_Vxlan_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VxlanInstance is set, it can
// safely use t.GetVxlanInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VxlanInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance) GetVxlanInstance() uint32 {
	if t == nil || t.VxlanInstance == nil {
		return 0
	}
	return *t.VxlanInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Vxlan_Instance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxDiscardOnNdf == 0 {
		t.RxDiscardOnNdf = NokiaConf_Configure_Service_Vpls_Vxlan_Instance_RxDiscardOnNdf_bm
	}
	if t.SourceVtepSecurity == nil {
		var v bool = false
		t.SourceVtepSecurity = &v
	}
	t.AssistedReplication.PopulateDefaults()
	t.Fdb.PopulateDefaults()
	t.IgmpSnooping.PopulateDefaults()
	t.MldSnooping.PopulateDefaults()
	t.Network.PopulateDefaults()
	for _, e := range t.EgressVtep {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Vxlan_Instance struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VxlanInstance == nil {
		return nil, fmt.Errorf("nil value for key VxlanInstance")
	}

	return map[string]interface{}{
		"vxlan-instance": *t.VxlanInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Vxlan_Instance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Vxlan_Instance.
func (*NokiaConf_Configure_Service_Vpls_Vxlan_Instance) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication represents the /nokia-conf/configure/service/vpls/vxlan/instance/assisted-replication YANG schema element.
type NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication struct {
	Leaf       *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication_Leaf `path:"leaf" module:"nokia-conf" yangPresence:"true"`
	Replicator YANGEmpty                                                                 `path:"replicator" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication) IsYANGGoStruct() {}

// GetOrCreateLeaf retrieves the value of the Leaf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication) GetOrCreateLeaf() *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication_Leaf {
	if t.Leaf != nil {
		return t.Leaf
	}
	t.Leaf = &NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication_Leaf{}
	return t.Leaf
}

// GetLeaf returns the value of the Leaf struct pointer
// from NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication. If the receiver or the field Leaf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication) GetLeaf() *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication_Leaf {
	if t != nil && t.Leaf != nil {
		return t.Leaf
	}
	return nil
}

// GetReplicator retrieves the value of the leaf Replicator from the NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Replicator is set, it can
// safely use t.GetReplicator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Replicator == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication) GetReplicator() YANGEmpty {
	if t == nil || t.Replicator == false {
		return false
	}
	return t.Replicator
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Leaf.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication.
func (*NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication_Leaf represents the /nokia-conf/configure/service/vpls/vxlan/instance/assisted-replication/leaf YANG schema element.
type NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication_Leaf struct {
	Acttime *uint32 `path:"acttime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication_Leaf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication_Leaf) IsYANGGoStruct() {}

// GetActtime retrieves the value of the leaf Acttime from the NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication_Leaf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Acttime is set, it can
// safely use t.GetActtime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Acttime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication_Leaf) GetActtime() uint32 {
	if t == nil || t.Acttime == nil {
		return 0
	}
	return *t.Acttime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication_Leaf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication_Leaf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication_Leaf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication_Leaf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication_Leaf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication_Leaf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication_Leaf.
func (*NokiaConf_Configure_Service_Vpls_Vxlan_Instance_AssistedReplication_Leaf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Vxlan_Instance_EgressVtep represents the /nokia-conf/configure/service/vpls/vxlan/instance/egress-vtep YANG schema element.
type NokiaConf_Configure_Service_Vpls_Vxlan_Instance_EgressVtep struct {
	IpAddress *string `path:"ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Vxlan_Instance_EgressVtep implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Vxlan_Instance_EgressVtep) IsYANGGoStruct() {}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Service_Vpls_Vxlan_Instance_EgressVtep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_EgressVtep) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Vxlan_Instance_EgressVtep
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_EgressVtep) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vpls_Vxlan_Instance_EgressVtep struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_EgressVtep) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_EgressVtep) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Vxlan_Instance_EgressVtep"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_EgressVtep) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_EgressVtep) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Vxlan_Instance_EgressVtep.
func (*NokiaConf_Configure_Service_Vpls_Vxlan_Instance_EgressVtep) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb represents the /nokia-conf/configure/service/vpls/vxlan/instance/fdb YANG schema element.
type NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb struct {
	DiscardUnknownSource           *bool                                                            `path:"discard-unknown-source" module:"nokia-conf"`
	MacLearning                    *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb_MacLearning `path:"mac-learning" module:"nokia-conf"`
	MaximumMacAddresses            *int32                                                           `path:"maximum-mac-addresses" module:"nokia-conf"`
	ProtectedSrcMacViolationAction E_NokiaTypesServices_ProtectedSrcMacViolationDfAction            `path:"protected-src-mac-violation-action" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb) IsYANGGoStruct() {}

// GetOrCreateMacLearning retrieves the value of the MacLearning field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb) GetOrCreateMacLearning() *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb_MacLearning {
	if t.MacLearning != nil {
		return t.MacLearning
	}
	t.MacLearning = &NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb_MacLearning{}
	return t.MacLearning
}

// GetMacLearning returns the value of the MacLearning struct pointer
// from NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb. If the receiver or the field MacLearning is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb) GetMacLearning() *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb_MacLearning {
	if t != nil && t.MacLearning != nil {
		return t.MacLearning
	}
	return nil
}

// GetDiscardUnknownSource retrieves the value of the leaf DiscardUnknownSource from the NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiscardUnknownSource is set, it can
// safely use t.GetDiscardUnknownSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiscardUnknownSource == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb) GetDiscardUnknownSource() bool {
	if t == nil || t.DiscardUnknownSource == nil {
		return false
	}
	return *t.DiscardUnknownSource
}

// GetMaximumMacAddresses retrieves the value of the leaf MaximumMacAddresses from the NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumMacAddresses is set, it can
// safely use t.GetMaximumMacAddresses() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumMacAddresses == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb) GetMaximumMacAddresses() int32 {
	if t == nil || t.MaximumMacAddresses == nil {
		return 0
	}
	return *t.MaximumMacAddresses
}

// GetProtectedSrcMacViolationAction retrieves the value of the leaf ProtectedSrcMacViolationAction from the NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtectedSrcMacViolationAction is set, it can
// safely use t.GetProtectedSrcMacViolationAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtectedSrcMacViolationAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb) GetProtectedSrcMacViolationAction() E_NokiaTypesServices_ProtectedSrcMacViolationDfAction {
	if t == nil || t.ProtectedSrcMacViolationAction == 0 {
		return 0
	}
	return t.ProtectedSrcMacViolationAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DiscardUnknownSource == nil {
		var v bool = false
		t.DiscardUnknownSource = &v
	}
	t.MacLearning.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb.
func (*NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb_MacLearning represents the /nokia-conf/configure/service/vpls/vxlan/instance/fdb/mac-learning YANG schema element.
type NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb_MacLearning struct {
	Aging    *bool `path:"aging" module:"nokia-conf"`
	Learning *bool `path:"learning" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb_MacLearning implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb_MacLearning) IsYANGGoStruct() {}

// GetAging retrieves the value of the leaf Aging from the NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb_MacLearning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aging is set, it can
// safely use t.GetAging() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aging == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb_MacLearning) GetAging() bool {
	if t == nil || t.Aging == nil {
		return false
	}
	return *t.Aging
}

// GetLearning retrieves the value of the leaf Learning from the NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb_MacLearning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Learning is set, it can
// safely use t.GetLearning() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Learning == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb_MacLearning) GetLearning() bool {
	if t == nil || t.Learning == nil {
		return false
	}
	return *t.Learning
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb_MacLearning
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb_MacLearning) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Aging == nil {
		var v bool = false
		t.Aging = &v
	}
	if t.Learning == nil {
		var v bool = false
		t.Learning = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb_MacLearning) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb_MacLearning"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb_MacLearning) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb_MacLearning) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb_MacLearning.
func (*NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Fdb_MacLearning) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Vxlan_Instance_IgmpSnooping represents the /nokia-conf/configure/service/vpls/vxlan/instance/igmp-snooping YANG schema element.
type NokiaConf_Configure_Service_Vpls_Vxlan_Instance_IgmpSnooping struct {
	MrouterPort *bool `path:"mrouter-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Vxlan_Instance_IgmpSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Vxlan_Instance_IgmpSnooping) IsYANGGoStruct() {}

// GetMrouterPort retrieves the value of the leaf MrouterPort from the NokiaConf_Configure_Service_Vpls_Vxlan_Instance_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MrouterPort is set, it can
// safely use t.GetMrouterPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MrouterPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_IgmpSnooping) GetMrouterPort() bool {
	if t == nil || t.MrouterPort == nil {
		return false
	}
	return *t.MrouterPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Vxlan_Instance_IgmpSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_IgmpSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MrouterPort == nil {
		var v bool = false
		t.MrouterPort = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_IgmpSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Vxlan_Instance_IgmpSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_IgmpSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_IgmpSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Vxlan_Instance_IgmpSnooping.
func (*NokiaConf_Configure_Service_Vpls_Vxlan_Instance_IgmpSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Vxlan_Instance_MldSnooping represents the /nokia-conf/configure/service/vpls/vxlan/instance/mld-snooping YANG schema element.
type NokiaConf_Configure_Service_Vpls_Vxlan_Instance_MldSnooping struct {
	MrouterPort *bool `path:"mrouter-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Vxlan_Instance_MldSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Vxlan_Instance_MldSnooping) IsYANGGoStruct() {}

// GetMrouterPort retrieves the value of the leaf MrouterPort from the NokiaConf_Configure_Service_Vpls_Vxlan_Instance_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MrouterPort is set, it can
// safely use t.GetMrouterPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MrouterPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_MldSnooping) GetMrouterPort() bool {
	if t == nil || t.MrouterPort == nil {
		return false
	}
	return *t.MrouterPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Vxlan_Instance_MldSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_MldSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MrouterPort == nil {
		var v bool = false
		t.MrouterPort = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_MldSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Vxlan_Instance_MldSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_MldSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_MldSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Vxlan_Instance_MldSnooping.
func (*NokiaConf_Configure_Service_Vpls_Vxlan_Instance_MldSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network represents the /nokia-conf/configure/service/vpls/vxlan/instance/network YANG schema element.
type NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network struct {
	Ingress *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress `path:"ingress" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network) IsYANGGoStruct() {}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network) GetOrCreateIngress() *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress{}
	return t.Ingress
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network) GetIngress() *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ingress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network.
func (*NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress represents the /nokia-conf/configure/service/vpls/vxlan/instance/network/ingress YANG schema element.
type NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress struct {
	Qos *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress) IsYANGGoStruct() {}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress) GetOrCreateQos() *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos{}
	return t.Qos
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress) GetQos() *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress.
func (*NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos represents the /nokia-conf/configure/service/vpls/vxlan/instance/network/ingress/qos YANG schema element.
type NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos struct {
	Network *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network `path:"network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos) IsYANGGoStruct() {}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos) GetOrCreateNetwork() *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network{}
	return t.Network
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos) GetNetwork() *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Network.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos.
func (*NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network represents the /nokia-conf/configure/service/vpls/vxlan/instance/network/ingress/qos/network YANG schema element.
type NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network struct {
	FpRedirectGroup *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network_FpRedirectGroup `path:"fp-redirect-group" module:"nokia-conf"`
	PolicyName      *string                                                                                      `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network) IsYANGGoStruct() {
}

// GetOrCreateFpRedirectGroup retrieves the value of the FpRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network) GetOrCreateFpRedirectGroup() *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network_FpRedirectGroup {
	if t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	t.FpRedirectGroup = &NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network_FpRedirectGroup{}
	return t.FpRedirectGroup
}

// GetFpRedirectGroup returns the value of the FpRedirectGroup struct pointer
// from NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network. If the receiver or the field FpRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network) GetFpRedirectGroup() *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network_FpRedirectGroup {
	if t != nil && t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FpRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network.
func (*NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network_FpRedirectGroup represents the /nokia-conf/configure/service/vpls/vxlan/instance/network/ingress/qos/network/fp-redirect-group YANG schema element.
type NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network_FpRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network_FpRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network_FpRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network_FpRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network_FpRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network_FpRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network_FpRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network_FpRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network_FpRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network_FpRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network_FpRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network_FpRedirectGroup.
func (*NokiaConf_Configure_Service_Vpls_Vxlan_Instance_Network_Ingress_Qos_Network_FpRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vpls_WlanGw represents the /nokia-conf/configure/service/vpls/wlan-gw YANG schema element.
type NokiaConf_Configure_Service_Vpls_WlanGw struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                     `path:"description" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vpls_WlanGw implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vpls_WlanGw) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vpls_WlanGw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_WlanGw) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vpls_WlanGw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_WlanGw) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vpls_WlanGw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_WlanGw) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vpls_WlanGw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vpls_WlanGw) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vpls_WlanGw
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vpls_WlanGw) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_WlanGw) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vpls_WlanGw"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vpls_WlanGw) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vpls_WlanGw) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vpls_WlanGw.
func (*NokiaConf_Configure_Service_Vpls_WlanGw) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn represents the /nokia-conf/configure/service/vprn YANG schema element.
type NokiaConf_Configure_Service_Vprn struct {
	AaInterface         map[string]*NokiaConf_Configure_Service_Vprn_AaInterface         `path:"aa-interface" module:"nokia-conf"`
	Aaa                 *NokiaConf_Configure_Service_Vprn_Aaa                            `path:"aaa" module:"nokia-conf"`
	AarpInterface       map[string]*NokiaConf_Configure_Service_Vprn_AarpInterface       `path:"aarp-interface" module:"nokia-conf"`
	AdminState          E_NokiaTypesSros_AdminState                                      `path:"admin-state" module:"nokia-conf"`
	Aggregates          *NokiaConf_Configure_Service_Vprn_Aggregates                     `path:"aggregates" module:"nokia-conf"`
	AllowExportBgpVpn   *bool                                                            `path:"allow-export-bgp-vpn" module:"nokia-conf"`
	ApplyGroups         []string                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	AutoBindTunnel      *NokiaConf_Configure_Service_Vprn_AutoBindTunnel                 `path:"auto-bind-tunnel" module:"nokia-conf"`
	AutonomousSystem    *uint32                                                          `path:"autonomous-system" module:"nokia-conf"`
	Bgp                 *NokiaConf_Configure_Service_Vprn_Bgp                            `path:"bgp" module:"nokia-conf" yangPresence:"true"`
	BgpEvpn             *NokiaConf_Configure_Service_Vprn_BgpEvpn                        `path:"bgp-evpn" module:"nokia-conf"`
	BgpIpvpn            *NokiaConf_Configure_Service_Vprn_BgpIpvpn                       `path:"bgp-ipvpn" module:"nokia-conf"`
	BgpSharedQueue      *NokiaConf_Configure_Service_Vprn_BgpSharedQueue                 `path:"bgp-shared-queue" module:"nokia-conf" yangPresence:"true"`
	BgpVpnBackup        *NokiaConf_Configure_Service_Vprn_BgpVpnBackup                   `path:"bgp-vpn-backup" module:"nokia-conf"`
	CarrierCarrierVpn   *bool                                                            `path:"carrier-carrier-vpn" module:"nokia-conf"`
	ClassForwarding     *bool                                                            `path:"class-forwarding" module:"nokia-conf"`
	Confederation       *NokiaConf_Configure_Service_Vprn_Confederation                  `path:"confederation" module:"nokia-conf"`
	Customer            *string                                                          `path:"customer" module:"nokia-conf"`
	DPathLengthIgnore   *bool                                                            `path:"d-path-length-ignore" module:"nokia-conf"`
	Description         *string                                                          `path:"description" module:"nokia-conf"`
	DhcpServer          *NokiaConf_Configure_Service_Vprn_DhcpServer                     `path:"dhcp-server" module:"nokia-conf"`
	Dns                 *NokiaConf_Configure_Service_Vprn_Dns                            `path:"dns" module:"nokia-conf" yangPresence:"true"`
	Ecmp                *uint32                                                          `path:"ecmp" module:"nokia-conf"`
	EcmpUnequalCost     *bool                                                            `path:"ecmp-unequal-cost" module:"nokia-conf"`
	EntropyLabel        *bool                                                            `path:"entropy-label" module:"nokia-conf"`
	EthCfm              *NokiaConf_Configure_Service_Vprn_EthCfm                         `path:"eth-cfm" module:"nokia-conf"`
	ExportInactiveBgp   *bool                                                            `path:"export-inactive-bgp" module:"nokia-conf"`
	FibPriority         E_NokiaConf_Configure_Service_Vprn_FibPriority                   `path:"fib-priority" module:"nokia-conf"`
	Firewall            *NokiaConf_Configure_Service_Vprn_Firewall                       `path:"firewall" module:"nokia-conf"`
	Flowspec            *NokiaConf_Configure_Service_Vprn_Flowspec                       `path:"flowspec" module:"nokia-conf"`
	GrtLeaking          *NokiaConf_Configure_Service_Vprn_GrtLeaking                     `path:"grt-leaking" module:"nokia-conf"`
	Gsmp                *NokiaConf_Configure_Service_Vprn_Gsmp                           `path:"gsmp" module:"nokia-conf"`
	Gtp                 *NokiaConf_Configure_Service_Vprn_Gtp                            `path:"gtp" module:"nokia-conf"`
	HashLabel           *bool                                                            `path:"hash-label" module:"nokia-conf"`
	Igmp                *NokiaConf_Configure_Service_Vprn_Igmp                           `path:"igmp" module:"nokia-conf" yangPresence:"true"`
	IgmpHostTracking    *NokiaConf_Configure_Service_Vprn_IgmpHostTracking               `path:"igmp-host-tracking" module:"nokia-conf"`
	IgnoreNhMetric      *bool                                                            `path:"ignore-nh-metric" module:"nokia-conf"`
	Interface           map[string]*NokiaConf_Configure_Service_Vprn_Interface           `path:"interface" module:"nokia-conf"`
	IpMirrorInterface   map[string]*NokiaConf_Configure_Service_Vprn_IpMirrorInterface   `path:"ip-mirror-interface" module:"nokia-conf"`
	Ipsec               *NokiaConf_Configure_Service_Vprn_Ipsec                          `path:"ipsec" module:"nokia-conf"`
	Ipv6                *NokiaConf_Configure_Service_Vprn_Ipv6                           `path:"ipv6" module:"nokia-conf"`
	Isis                map[int32]*NokiaConf_Configure_Service_Vprn_Isis                 `path:"isis" module:"nokia-conf"`
	L2Tp                *NokiaConf_Configure_Service_Vprn_L2Tp                           `path:"l2tp" module:"nokia-conf" yangPresence:"true"`
	LabelMode           E_NokiaConf_Configure_Service_Vprn_LabelMode                     `path:"label-mode" module:"nokia-conf"`
	LocalRoutesDomainId *string                                                          `path:"local-routes-domain-id" module:"nokia-conf"`
	Log                 *NokiaConf_Configure_Service_Vprn_Log                            `path:"log" module:"nokia-conf"`
	Management          *NokiaConf_Configure_Service_Vprn_Management                     `path:"management" module:"nokia-conf" yangPresence:"true"`
	MaximumIpv4Routes   *NokiaConf_Configure_Service_Vprn_MaximumIpv4Routes              `path:"maximum-ipv4-routes" module:"nokia-conf"`
	MaximumIpv6Routes   *NokiaConf_Configure_Service_Vprn_MaximumIpv6Routes              `path:"maximum-ipv6-routes" module:"nokia-conf"`
	McMaximumRoutes     *NokiaConf_Configure_Service_Vprn_McMaximumRoutes                `path:"mc-maximum-routes" module:"nokia-conf"`
	Mld                 *NokiaConf_Configure_Service_Vprn_Mld                            `path:"mld" module:"nokia-conf" yangPresence:"true"`
	Msdp                *NokiaConf_Configure_Service_Vprn_Msdp                           `path:"msdp" module:"nokia-conf" yangPresence:"true"`
	MssAdjust           *NokiaConf_Configure_Service_Vprn_MssAdjust                      `path:"mss-adjust" module:"nokia-conf" yangPresence:"true"`
	Mtrace2             *NokiaConf_Configure_Service_Vprn_Mtrace2                        `path:"mtrace2" module:"nokia-conf"`
	MulticastInfoPolicy *string                                                          `path:"multicast-info-policy" module:"nokia-conf"`
	Mvpn                *NokiaConf_Configure_Service_Vprn_Mvpn                           `path:"mvpn" module:"nokia-conf" yangPresence:"true"`
	Nat                 *NokiaConf_Configure_Service_Vprn_Nat                            `path:"nat" module:"nokia-conf" yangPresence:"true"`
	Network             *NokiaConf_Configure_Service_Vprn_Network                        `path:"network" module:"nokia-conf"`
	NetworkInterface    map[string]*NokiaConf_Configure_Service_Vprn_NetworkInterface    `path:"network-interface" module:"nokia-conf"`
	Ntp                 *NokiaConf_Configure_Service_Vprn_Ntp                            `path:"ntp" module:"nokia-conf" yangPresence:"true"`
	Ospf                map[uint32]*NokiaConf_Configure_Service_Vprn_Ospf                `path:"ospf" module:"nokia-conf"`
	Ospf3               map[uint32]*NokiaConf_Configure_Service_Vprn_Ospf3               `path:"ospf3" module:"nokia-conf"`
	Pcp                 *NokiaConf_Configure_Service_Vprn_Pcp                            `path:"pcp" module:"nokia-conf"`
	Pim                 *NokiaConf_Configure_Service_Vprn_Pim                            `path:"pim" module:"nokia-conf" yangPresence:"true"`
	Radius              *NokiaConf_Configure_Service_Vprn_Radius                         `path:"radius" module:"nokia-conf"`
	Reassembly          *NokiaConf_Configure_Service_Vprn_Reassembly                     `path:"reassembly" module:"nokia-conf" yangPresence:"true"`
	RedundantInterface  map[string]*NokiaConf_Configure_Service_Vprn_RedundantInterface  `path:"redundant-interface" module:"nokia-conf"`
	Rip                 *NokiaConf_Configure_Service_Vprn_Rip                            `path:"rip" module:"nokia-conf" yangPresence:"true"`
	Ripng               *NokiaConf_Configure_Service_Vprn_Ripng                          `path:"ripng" module:"nokia-conf" yangPresence:"true"`
	RouteDistinguisher  NokiaConf_Configure_Service_Vprn_RouteDistinguisher_Union        `path:"route-distinguisher" module:"nokia-conf"`
	RouterId            *string                                                          `path:"router-id" module:"nokia-conf"`
	SegmentRoutingV6    map[int32]*NokiaConf_Configure_Service_Vprn_SegmentRoutingV6     `path:"segment-routing-v6" module:"nokia-conf"`
	SelectiveFib        *bool                                                            `path:"selective-fib" module:"nokia-conf"`
	ServiceId           *uint32                                                          `path:"service-id" module:"nokia-conf"`
	ServiceName         *string                                                          `path:"service-name" module:"nokia-conf"`
	SfmOverload         *NokiaConf_Configure_Service_Vprn_SfmOverload                    `path:"sfm-overload" module:"nokia-conf" yangPresence:"true"`
	SgtQos              *NokiaConf_Configure_Service_Vprn_SgtQos                         `path:"sgt-qos" module:"nokia-conf"`
	Snmp                *NokiaConf_Configure_Service_Vprn_Snmp                           `path:"snmp" module:"nokia-conf"`
	SourceAddress       *NokiaConf_Configure_Service_Vprn_SourceAddress                  `path:"source-address" module:"nokia-conf"`
	SpokeSdp            map[string]*NokiaConf_Configure_Service_Vprn_SpokeSdp            `path:"spoke-sdp" module:"nokia-conf"`
	StaticRoutes        *NokiaConf_Configure_Service_Vprn_StaticRoutes                   `path:"static-routes" module:"nokia-conf"`
	SubscriberInterface map[string]*NokiaConf_Configure_Service_Vprn_SubscriberInterface `path:"subscriber-interface" module:"nokia-conf"`
	SubscriberMgmt      *NokiaConf_Configure_Service_Vprn_SubscriberMgmt                 `path:"subscriber-mgmt" module:"nokia-conf"`
	TtlPropagate        *NokiaConf_Configure_Service_Vprn_TtlPropagate                   `path:"ttl-propagate" module:"nokia-conf"`
	TwampLight          *NokiaConf_Configure_Service_Vprn_TwampLight                     `path:"twamp-light" module:"nokia-conf"`
	VideoInterface      map[string]*NokiaConf_Configure_Service_Vprn_VideoInterface      `path:"video-interface" module:"nokia-conf"`
	VprnType            E_NokiaConf_Configure_Service_Vprn_VprnType                      `path:"vprn-type" module:"nokia-conf"`
	VrfExport           *NokiaConf_Configure_Service_Vprn_VrfExport                      `path:"vrf-export" module:"nokia-conf" yangPresence:"true"`
	VrfImport           *NokiaConf_Configure_Service_Vprn_VrfImport                      `path:"vrf-import" module:"nokia-conf" yangPresence:"true"`
	VrfTarget           *NokiaConf_Configure_Service_Vprn_VrfTarget                      `path:"vrf-target" module:"nokia-conf"`
	Vxlan               *NokiaConf_Configure_Service_Vprn_Vxlan                          `path:"vxlan" module:"nokia-conf"`
	WeightedEcmp        E_NokiaConf_Configure_Service_Vprn_WeightedEcmp                  `path:"weighted-ecmp" module:"nokia-conf"`
	WlanGw              *NokiaConf_Configure_Service_Vprn_WlanGw                         `path:"wlan-gw" module:"nokia-conf" yangPresence:"true"`
	Wpp                 *NokiaConf_Configure_Service_Vprn_Wpp                            `path:"wpp" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn) IsYANGGoStruct() {}

// NewAaInterface creates a new entry in the AaInterface list of the
// NokiaConf_Configure_Service_Vprn struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn) NewAaInterface(InterfaceName string) (*NokiaConf_Configure_Service_Vprn_AaInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AaInterface == nil {
		t.AaInterface = make(map[string]*NokiaConf_Configure_Service_Vprn_AaInterface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AaInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AaInterface", key)
	}

	t.AaInterface[key] = &NokiaConf_Configure_Service_Vprn_AaInterface{
		InterfaceName: &InterfaceName,
	}

	return t.AaInterface[key], nil
}

// RenameAaInterface renames an entry in the list AaInterface within
// the NokiaConf_Configure_Service_Vprn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn) RenameAaInterface(oldK, newK string) error {
	if _, ok := t.AaInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in AaInterface", newK)
	}

	e, ok := t.AaInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AaInterface", oldK)
	}
	e.InterfaceName = &newK

	t.AaInterface[newK] = e
	delete(t.AaInterface, oldK)
	return nil
}

// GetOrCreateAaInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateAaInterface(InterfaceName string) *NokiaConf_Configure_Service_Vprn_AaInterface {

	key := InterfaceName

	if v, ok := t.AaInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAaInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAaInterface got unexpected error: %v", err))
	}
	return v
}

// GetAaInterface retrieves the value with the specified key from
// the AaInterface map field of NokiaConf_Configure_Service_Vprn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetAaInterface(InterfaceName string) *NokiaConf_Configure_Service_Vprn_AaInterface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.AaInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteAaInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn) DeleteAaInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.AaInterface, key)
}

// AppendAaInterface appends the supplied NokiaConf_Configure_Service_Vprn_AaInterface struct to the
// list AaInterface of NokiaConf_Configure_Service_Vprn. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_AaInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn) AppendAaInterface(v *NokiaConf_Configure_Service_Vprn_AaInterface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AaInterface == nil {
		t.AaInterface = make(map[string]*NokiaConf_Configure_Service_Vprn_AaInterface)
	}

	if _, ok := t.AaInterface[key]; ok {
		return fmt.Errorf("duplicate key for list AaInterface %v", key)
	}

	t.AaInterface[key] = v
	return nil
}

// NewAarpInterface creates a new entry in the AarpInterface list of the
// NokiaConf_Configure_Service_Vprn struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn) NewAarpInterface(InterfaceName string) (*NokiaConf_Configure_Service_Vprn_AarpInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AarpInterface == nil {
		t.AarpInterface = make(map[string]*NokiaConf_Configure_Service_Vprn_AarpInterface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AarpInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AarpInterface", key)
	}

	t.AarpInterface[key] = &NokiaConf_Configure_Service_Vprn_AarpInterface{
		InterfaceName: &InterfaceName,
	}

	return t.AarpInterface[key], nil
}

// RenameAarpInterface renames an entry in the list AarpInterface within
// the NokiaConf_Configure_Service_Vprn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn) RenameAarpInterface(oldK, newK string) error {
	if _, ok := t.AarpInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in AarpInterface", newK)
	}

	e, ok := t.AarpInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AarpInterface", oldK)
	}
	e.InterfaceName = &newK

	t.AarpInterface[newK] = e
	delete(t.AarpInterface, oldK)
	return nil
}

// GetOrCreateAarpInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateAarpInterface(InterfaceName string) *NokiaConf_Configure_Service_Vprn_AarpInterface {

	key := InterfaceName

	if v, ok := t.AarpInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAarpInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAarpInterface got unexpected error: %v", err))
	}
	return v
}

// GetAarpInterface retrieves the value with the specified key from
// the AarpInterface map field of NokiaConf_Configure_Service_Vprn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetAarpInterface(InterfaceName string) *NokiaConf_Configure_Service_Vprn_AarpInterface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.AarpInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteAarpInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn) DeleteAarpInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.AarpInterface, key)
}

// AppendAarpInterface appends the supplied NokiaConf_Configure_Service_Vprn_AarpInterface struct to the
// list AarpInterface of NokiaConf_Configure_Service_Vprn. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_AarpInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn) AppendAarpInterface(v *NokiaConf_Configure_Service_Vprn_AarpInterface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AarpInterface == nil {
		t.AarpInterface = make(map[string]*NokiaConf_Configure_Service_Vprn_AarpInterface)
	}

	if _, ok := t.AarpInterface[key]; ok {
		return fmt.Errorf("duplicate key for list AarpInterface %v", key)
	}

	t.AarpInterface[key] = v
	return nil
}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Service_Vprn struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn) NewInterface(InterfaceName string) (*NokiaConf_Configure_Service_Vprn_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Service_Vprn_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Service_Vprn_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Service_Vprn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateInterface(InterfaceName string) *NokiaConf_Configure_Service_Vprn_Interface {

	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Service_Vprn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetInterface(InterfaceName string) *NokiaConf_Configure_Service_Vprn_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Service_Vprn_Interface struct to the
// list Interface of NokiaConf_Configure_Service_Vprn. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn) AppendInterface(v *NokiaConf_Configure_Service_Vprn_Interface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Service_Vprn_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewIpMirrorInterface creates a new entry in the IpMirrorInterface list of the
// NokiaConf_Configure_Service_Vprn struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn) NewIpMirrorInterface(InterfaceName string) (*NokiaConf_Configure_Service_Vprn_IpMirrorInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpMirrorInterface == nil {
		t.IpMirrorInterface = make(map[string]*NokiaConf_Configure_Service_Vprn_IpMirrorInterface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IpMirrorInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IpMirrorInterface", key)
	}

	t.IpMirrorInterface[key] = &NokiaConf_Configure_Service_Vprn_IpMirrorInterface{
		InterfaceName: &InterfaceName,
	}

	return t.IpMirrorInterface[key], nil
}

// RenameIpMirrorInterface renames an entry in the list IpMirrorInterface within
// the NokiaConf_Configure_Service_Vprn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn) RenameIpMirrorInterface(oldK, newK string) error {
	if _, ok := t.IpMirrorInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in IpMirrorInterface", newK)
	}

	e, ok := t.IpMirrorInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IpMirrorInterface", oldK)
	}
	e.InterfaceName = &newK

	t.IpMirrorInterface[newK] = e
	delete(t.IpMirrorInterface, oldK)
	return nil
}

// GetOrCreateIpMirrorInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateIpMirrorInterface(InterfaceName string) *NokiaConf_Configure_Service_Vprn_IpMirrorInterface {

	key := InterfaceName

	if v, ok := t.IpMirrorInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpMirrorInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpMirrorInterface got unexpected error: %v", err))
	}
	return v
}

// GetIpMirrorInterface retrieves the value with the specified key from
// the IpMirrorInterface map field of NokiaConf_Configure_Service_Vprn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetIpMirrorInterface(InterfaceName string) *NokiaConf_Configure_Service_Vprn_IpMirrorInterface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.IpMirrorInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpMirrorInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn) DeleteIpMirrorInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.IpMirrorInterface, key)
}

// AppendIpMirrorInterface appends the supplied NokiaConf_Configure_Service_Vprn_IpMirrorInterface struct to the
// list IpMirrorInterface of NokiaConf_Configure_Service_Vprn. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_IpMirrorInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn) AppendIpMirrorInterface(v *NokiaConf_Configure_Service_Vprn_IpMirrorInterface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpMirrorInterface == nil {
		t.IpMirrorInterface = make(map[string]*NokiaConf_Configure_Service_Vprn_IpMirrorInterface)
	}

	if _, ok := t.IpMirrorInterface[key]; ok {
		return fmt.Errorf("duplicate key for list IpMirrorInterface %v", key)
	}

	t.IpMirrorInterface[key] = v
	return nil
}

// NewIsis creates a new entry in the Isis list of the
// NokiaConf_Configure_Service_Vprn struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn) NewIsis(IsisInstance int32) (*NokiaConf_Configure_Service_Vprn_Isis, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Isis == nil {
		t.Isis = make(map[int32]*NokiaConf_Configure_Service_Vprn_Isis)
	}

	key := IsisInstance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Isis[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Isis", key)
	}

	t.Isis[key] = &NokiaConf_Configure_Service_Vprn_Isis{
		IsisInstance: &IsisInstance,
	}

	return t.Isis[key], nil
}

// RenameIsis renames an entry in the list Isis within
// the NokiaConf_Configure_Service_Vprn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn) RenameIsis(oldK, newK int32) error {
	if _, ok := t.Isis[newK]; ok {
		return fmt.Errorf("key %v already exists in Isis", newK)
	}

	e, ok := t.Isis[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Isis", oldK)
	}
	e.IsisInstance = &newK

	t.Isis[newK] = e
	delete(t.Isis, oldK)
	return nil
}

// GetOrCreateIsis retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateIsis(IsisInstance int32) *NokiaConf_Configure_Service_Vprn_Isis {

	key := IsisInstance

	if v, ok := t.Isis[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIsis(IsisInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIsis got unexpected error: %v", err))
	}
	return v
}

// GetIsis retrieves the value with the specified key from
// the Isis map field of NokiaConf_Configure_Service_Vprn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetIsis(IsisInstance int32) *NokiaConf_Configure_Service_Vprn_Isis {

	if t == nil {
		return nil
	}

	key := IsisInstance

	if lm, ok := t.Isis[key]; ok {
		return lm
	}
	return nil
}

// DeleteIsis deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn) DeleteIsis(IsisInstance int32) {
	key := IsisInstance

	delete(t.Isis, key)
}

// AppendIsis appends the supplied NokiaConf_Configure_Service_Vprn_Isis struct to the
// list Isis of NokiaConf_Configure_Service_Vprn. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Isis already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn) AppendIsis(v *NokiaConf_Configure_Service_Vprn_Isis) error {
	if v.IsisInstance == nil {
		return fmt.Errorf("invalid nil key received for IsisInstance")
	}

	key := *v.IsisInstance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Isis == nil {
		t.Isis = make(map[int32]*NokiaConf_Configure_Service_Vprn_Isis)
	}

	if _, ok := t.Isis[key]; ok {
		return fmt.Errorf("duplicate key for list Isis %v", key)
	}

	t.Isis[key] = v
	return nil
}

// NewNetworkInterface creates a new entry in the NetworkInterface list of the
// NokiaConf_Configure_Service_Vprn struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn) NewNetworkInterface(InterfaceName string) (*NokiaConf_Configure_Service_Vprn_NetworkInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkInterface == nil {
		t.NetworkInterface = make(map[string]*NokiaConf_Configure_Service_Vprn_NetworkInterface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NetworkInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NetworkInterface", key)
	}

	t.NetworkInterface[key] = &NokiaConf_Configure_Service_Vprn_NetworkInterface{
		InterfaceName: &InterfaceName,
	}

	return t.NetworkInterface[key], nil
}

// RenameNetworkInterface renames an entry in the list NetworkInterface within
// the NokiaConf_Configure_Service_Vprn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn) RenameNetworkInterface(oldK, newK string) error {
	if _, ok := t.NetworkInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in NetworkInterface", newK)
	}

	e, ok := t.NetworkInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NetworkInterface", oldK)
	}
	e.InterfaceName = &newK

	t.NetworkInterface[newK] = e
	delete(t.NetworkInterface, oldK)
	return nil
}

// GetOrCreateNetworkInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateNetworkInterface(InterfaceName string) *NokiaConf_Configure_Service_Vprn_NetworkInterface {

	key := InterfaceName

	if v, ok := t.NetworkInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNetworkInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNetworkInterface got unexpected error: %v", err))
	}
	return v
}

// GetNetworkInterface retrieves the value with the specified key from
// the NetworkInterface map field of NokiaConf_Configure_Service_Vprn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetNetworkInterface(InterfaceName string) *NokiaConf_Configure_Service_Vprn_NetworkInterface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.NetworkInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteNetworkInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn) DeleteNetworkInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.NetworkInterface, key)
}

// AppendNetworkInterface appends the supplied NokiaConf_Configure_Service_Vprn_NetworkInterface struct to the
// list NetworkInterface of NokiaConf_Configure_Service_Vprn. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_NetworkInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn) AppendNetworkInterface(v *NokiaConf_Configure_Service_Vprn_NetworkInterface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkInterface == nil {
		t.NetworkInterface = make(map[string]*NokiaConf_Configure_Service_Vprn_NetworkInterface)
	}

	if _, ok := t.NetworkInterface[key]; ok {
		return fmt.Errorf("duplicate key for list NetworkInterface %v", key)
	}

	t.NetworkInterface[key] = v
	return nil
}

// NewOspf creates a new entry in the Ospf list of the
// NokiaConf_Configure_Service_Vprn struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn) NewOspf(OspfInstance uint32) (*NokiaConf_Configure_Service_Vprn_Ospf, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ospf == nil {
		t.Ospf = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Ospf)
	}

	key := OspfInstance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ospf[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ospf", key)
	}

	t.Ospf[key] = &NokiaConf_Configure_Service_Vprn_Ospf{
		OspfInstance: &OspfInstance,
	}

	return t.Ospf[key], nil
}

// RenameOspf renames an entry in the list Ospf within
// the NokiaConf_Configure_Service_Vprn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn) RenameOspf(oldK, newK uint32) error {
	if _, ok := t.Ospf[newK]; ok {
		return fmt.Errorf("key %v already exists in Ospf", newK)
	}

	e, ok := t.Ospf[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ospf", oldK)
	}
	e.OspfInstance = &newK

	t.Ospf[newK] = e
	delete(t.Ospf, oldK)
	return nil
}

// GetOrCreateOspf retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateOspf(OspfInstance uint32) *NokiaConf_Configure_Service_Vprn_Ospf {

	key := OspfInstance

	if v, ok := t.Ospf[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOspf(OspfInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOspf got unexpected error: %v", err))
	}
	return v
}

// GetOspf retrieves the value with the specified key from
// the Ospf map field of NokiaConf_Configure_Service_Vprn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetOspf(OspfInstance uint32) *NokiaConf_Configure_Service_Vprn_Ospf {

	if t == nil {
		return nil
	}

	key := OspfInstance

	if lm, ok := t.Ospf[key]; ok {
		return lm
	}
	return nil
}

// DeleteOspf deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn) DeleteOspf(OspfInstance uint32) {
	key := OspfInstance

	delete(t.Ospf, key)
}

// AppendOspf appends the supplied NokiaConf_Configure_Service_Vprn_Ospf struct to the
// list Ospf of NokiaConf_Configure_Service_Vprn. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Ospf already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn) AppendOspf(v *NokiaConf_Configure_Service_Vprn_Ospf) error {
	if v.OspfInstance == nil {
		return fmt.Errorf("invalid nil key received for OspfInstance")
	}

	key := *v.OspfInstance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ospf == nil {
		t.Ospf = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Ospf)
	}

	if _, ok := t.Ospf[key]; ok {
		return fmt.Errorf("duplicate key for list Ospf %v", key)
	}

	t.Ospf[key] = v
	return nil
}

// NewOspf3 creates a new entry in the Ospf3 list of the
// NokiaConf_Configure_Service_Vprn struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn) NewOspf3(OspfInstance uint32) (*NokiaConf_Configure_Service_Vprn_Ospf3, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ospf3 == nil {
		t.Ospf3 = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Ospf3)
	}

	key := OspfInstance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ospf3[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ospf3", key)
	}

	t.Ospf3[key] = &NokiaConf_Configure_Service_Vprn_Ospf3{
		OspfInstance: &OspfInstance,
	}

	return t.Ospf3[key], nil
}

// RenameOspf3 renames an entry in the list Ospf3 within
// the NokiaConf_Configure_Service_Vprn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn) RenameOspf3(oldK, newK uint32) error {
	if _, ok := t.Ospf3[newK]; ok {
		return fmt.Errorf("key %v already exists in Ospf3", newK)
	}

	e, ok := t.Ospf3[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ospf3", oldK)
	}
	e.OspfInstance = &newK

	t.Ospf3[newK] = e
	delete(t.Ospf3, oldK)
	return nil
}

// GetOrCreateOspf3 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateOspf3(OspfInstance uint32) *NokiaConf_Configure_Service_Vprn_Ospf3 {

	key := OspfInstance

	if v, ok := t.Ospf3[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOspf3(OspfInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOspf3 got unexpected error: %v", err))
	}
	return v
}

// GetOspf3 retrieves the value with the specified key from
// the Ospf3 map field of NokiaConf_Configure_Service_Vprn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetOspf3(OspfInstance uint32) *NokiaConf_Configure_Service_Vprn_Ospf3 {

	if t == nil {
		return nil
	}

	key := OspfInstance

	if lm, ok := t.Ospf3[key]; ok {
		return lm
	}
	return nil
}

// DeleteOspf3 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn) DeleteOspf3(OspfInstance uint32) {
	key := OspfInstance

	delete(t.Ospf3, key)
}

// AppendOspf3 appends the supplied NokiaConf_Configure_Service_Vprn_Ospf3 struct to the
// list Ospf3 of NokiaConf_Configure_Service_Vprn. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Ospf3 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn) AppendOspf3(v *NokiaConf_Configure_Service_Vprn_Ospf3) error {
	if v.OspfInstance == nil {
		return fmt.Errorf("invalid nil key received for OspfInstance")
	}

	key := *v.OspfInstance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ospf3 == nil {
		t.Ospf3 = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Ospf3)
	}

	if _, ok := t.Ospf3[key]; ok {
		return fmt.Errorf("duplicate key for list Ospf3 %v", key)
	}

	t.Ospf3[key] = v
	return nil
}

// NewRedundantInterface creates a new entry in the RedundantInterface list of the
// NokiaConf_Configure_Service_Vprn struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn) NewRedundantInterface(InterfaceName string) (*NokiaConf_Configure_Service_Vprn_RedundantInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RedundantInterface == nil {
		t.RedundantInterface = make(map[string]*NokiaConf_Configure_Service_Vprn_RedundantInterface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RedundantInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RedundantInterface", key)
	}

	t.RedundantInterface[key] = &NokiaConf_Configure_Service_Vprn_RedundantInterface{
		InterfaceName: &InterfaceName,
	}

	return t.RedundantInterface[key], nil
}

// RenameRedundantInterface renames an entry in the list RedundantInterface within
// the NokiaConf_Configure_Service_Vprn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn) RenameRedundantInterface(oldK, newK string) error {
	if _, ok := t.RedundantInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in RedundantInterface", newK)
	}

	e, ok := t.RedundantInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RedundantInterface", oldK)
	}
	e.InterfaceName = &newK

	t.RedundantInterface[newK] = e
	delete(t.RedundantInterface, oldK)
	return nil
}

// GetOrCreateRedundantInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateRedundantInterface(InterfaceName string) *NokiaConf_Configure_Service_Vprn_RedundantInterface {

	key := InterfaceName

	if v, ok := t.RedundantInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRedundantInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRedundantInterface got unexpected error: %v", err))
	}
	return v
}

// GetRedundantInterface retrieves the value with the specified key from
// the RedundantInterface map field of NokiaConf_Configure_Service_Vprn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetRedundantInterface(InterfaceName string) *NokiaConf_Configure_Service_Vprn_RedundantInterface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.RedundantInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteRedundantInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn) DeleteRedundantInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.RedundantInterface, key)
}

// AppendRedundantInterface appends the supplied NokiaConf_Configure_Service_Vprn_RedundantInterface struct to the
// list RedundantInterface of NokiaConf_Configure_Service_Vprn. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_RedundantInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn) AppendRedundantInterface(v *NokiaConf_Configure_Service_Vprn_RedundantInterface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RedundantInterface == nil {
		t.RedundantInterface = make(map[string]*NokiaConf_Configure_Service_Vprn_RedundantInterface)
	}

	if _, ok := t.RedundantInterface[key]; ok {
		return fmt.Errorf("duplicate key for list RedundantInterface %v", key)
	}

	t.RedundantInterface[key] = v
	return nil
}

// NewSegmentRoutingV6 creates a new entry in the SegmentRoutingV6 list of the
// NokiaConf_Configure_Service_Vprn struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn) NewSegmentRoutingV6(Instance int32) (*NokiaConf_Configure_Service_Vprn_SegmentRoutingV6, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SegmentRoutingV6 == nil {
		t.SegmentRoutingV6 = make(map[int32]*NokiaConf_Configure_Service_Vprn_SegmentRoutingV6)
	}

	key := Instance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SegmentRoutingV6[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SegmentRoutingV6", key)
	}

	t.SegmentRoutingV6[key] = &NokiaConf_Configure_Service_Vprn_SegmentRoutingV6{
		Instance: &Instance,
	}

	return t.SegmentRoutingV6[key], nil
}

// RenameSegmentRoutingV6 renames an entry in the list SegmentRoutingV6 within
// the NokiaConf_Configure_Service_Vprn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn) RenameSegmentRoutingV6(oldK, newK int32) error {
	if _, ok := t.SegmentRoutingV6[newK]; ok {
		return fmt.Errorf("key %v already exists in SegmentRoutingV6", newK)
	}

	e, ok := t.SegmentRoutingV6[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SegmentRoutingV6", oldK)
	}
	e.Instance = &newK

	t.SegmentRoutingV6[newK] = e
	delete(t.SegmentRoutingV6, oldK)
	return nil
}

// GetOrCreateSegmentRoutingV6 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateSegmentRoutingV6(Instance int32) *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6 {

	key := Instance

	if v, ok := t.SegmentRoutingV6[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSegmentRoutingV6(Instance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSegmentRoutingV6 got unexpected error: %v", err))
	}
	return v
}

// GetSegmentRoutingV6 retrieves the value with the specified key from
// the SegmentRoutingV6 map field of NokiaConf_Configure_Service_Vprn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetSegmentRoutingV6(Instance int32) *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6 {

	if t == nil {
		return nil
	}

	key := Instance

	if lm, ok := t.SegmentRoutingV6[key]; ok {
		return lm
	}
	return nil
}

// DeleteSegmentRoutingV6 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn) DeleteSegmentRoutingV6(Instance int32) {
	key := Instance

	delete(t.SegmentRoutingV6, key)
}

// AppendSegmentRoutingV6 appends the supplied NokiaConf_Configure_Service_Vprn_SegmentRoutingV6 struct to the
// list SegmentRoutingV6 of NokiaConf_Configure_Service_Vprn. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_SegmentRoutingV6 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn) AppendSegmentRoutingV6(v *NokiaConf_Configure_Service_Vprn_SegmentRoutingV6) error {
	if v.Instance == nil {
		return fmt.Errorf("invalid nil key received for Instance")
	}

	key := *v.Instance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SegmentRoutingV6 == nil {
		t.SegmentRoutingV6 = make(map[int32]*NokiaConf_Configure_Service_Vprn_SegmentRoutingV6)
	}

	if _, ok := t.SegmentRoutingV6[key]; ok {
		return fmt.Errorf("duplicate key for list SegmentRoutingV6 %v", key)
	}

	t.SegmentRoutingV6[key] = v
	return nil
}

// NewSpokeSdp creates a new entry in the SpokeSdp list of the
// NokiaConf_Configure_Service_Vprn struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn) NewSpokeSdp(SdpBindId string) (*NokiaConf_Configure_Service_Vprn_SpokeSdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Service_Vprn_SpokeSdp)
	}

	key := SdpBindId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SpokeSdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SpokeSdp", key)
	}

	t.SpokeSdp[key] = &NokiaConf_Configure_Service_Vprn_SpokeSdp{
		SdpBindId: &SdpBindId,
	}

	return t.SpokeSdp[key], nil
}

// RenameSpokeSdp renames an entry in the list SpokeSdp within
// the NokiaConf_Configure_Service_Vprn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn) RenameSpokeSdp(oldK, newK string) error {
	if _, ok := t.SpokeSdp[newK]; ok {
		return fmt.Errorf("key %v already exists in SpokeSdp", newK)
	}

	e, ok := t.SpokeSdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SpokeSdp", oldK)
	}
	e.SdpBindId = &newK

	t.SpokeSdp[newK] = e
	delete(t.SpokeSdp, oldK)
	return nil
}

// GetOrCreateSpokeSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateSpokeSdp(SdpBindId string) *NokiaConf_Configure_Service_Vprn_SpokeSdp {

	key := SdpBindId

	if v, ok := t.SpokeSdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSpokeSdp(SdpBindId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSpokeSdp got unexpected error: %v", err))
	}
	return v
}

// GetSpokeSdp retrieves the value with the specified key from
// the SpokeSdp map field of NokiaConf_Configure_Service_Vprn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetSpokeSdp(SdpBindId string) *NokiaConf_Configure_Service_Vprn_SpokeSdp {

	if t == nil {
		return nil
	}

	key := SdpBindId

	if lm, ok := t.SpokeSdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteSpokeSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn) DeleteSpokeSdp(SdpBindId string) {
	key := SdpBindId

	delete(t.SpokeSdp, key)
}

// AppendSpokeSdp appends the supplied NokiaConf_Configure_Service_Vprn_SpokeSdp struct to the
// list SpokeSdp of NokiaConf_Configure_Service_Vprn. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_SpokeSdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn) AppendSpokeSdp(v *NokiaConf_Configure_Service_Vprn_SpokeSdp) error {
	if v.SdpBindId == nil {
		return fmt.Errorf("invalid nil key received for SdpBindId")
	}

	key := *v.SdpBindId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Service_Vprn_SpokeSdp)
	}

	if _, ok := t.SpokeSdp[key]; ok {
		return fmt.Errorf("duplicate key for list SpokeSdp %v", key)
	}

	t.SpokeSdp[key] = v
	return nil
}

// NewSubscriberInterface creates a new entry in the SubscriberInterface list of the
// NokiaConf_Configure_Service_Vprn struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn) NewSubscriberInterface(InterfaceName string) (*NokiaConf_Configure_Service_Vprn_SubscriberInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SubscriberInterface == nil {
		t.SubscriberInterface = make(map[string]*NokiaConf_Configure_Service_Vprn_SubscriberInterface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SubscriberInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SubscriberInterface", key)
	}

	t.SubscriberInterface[key] = &NokiaConf_Configure_Service_Vprn_SubscriberInterface{
		InterfaceName: &InterfaceName,
	}

	return t.SubscriberInterface[key], nil
}

// RenameSubscriberInterface renames an entry in the list SubscriberInterface within
// the NokiaConf_Configure_Service_Vprn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn) RenameSubscriberInterface(oldK, newK string) error {
	if _, ok := t.SubscriberInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in SubscriberInterface", newK)
	}

	e, ok := t.SubscriberInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SubscriberInterface", oldK)
	}
	e.InterfaceName = &newK

	t.SubscriberInterface[newK] = e
	delete(t.SubscriberInterface, oldK)
	return nil
}

// GetOrCreateSubscriberInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateSubscriberInterface(InterfaceName string) *NokiaConf_Configure_Service_Vprn_SubscriberInterface {

	key := InterfaceName

	if v, ok := t.SubscriberInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubscriberInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubscriberInterface got unexpected error: %v", err))
	}
	return v
}

// GetSubscriberInterface retrieves the value with the specified key from
// the SubscriberInterface map field of NokiaConf_Configure_Service_Vprn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetSubscriberInterface(InterfaceName string) *NokiaConf_Configure_Service_Vprn_SubscriberInterface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.SubscriberInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteSubscriberInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn) DeleteSubscriberInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.SubscriberInterface, key)
}

// AppendSubscriberInterface appends the supplied NokiaConf_Configure_Service_Vprn_SubscriberInterface struct to the
// list SubscriberInterface of NokiaConf_Configure_Service_Vprn. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_SubscriberInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn) AppendSubscriberInterface(v *NokiaConf_Configure_Service_Vprn_SubscriberInterface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SubscriberInterface == nil {
		t.SubscriberInterface = make(map[string]*NokiaConf_Configure_Service_Vprn_SubscriberInterface)
	}

	if _, ok := t.SubscriberInterface[key]; ok {
		return fmt.Errorf("duplicate key for list SubscriberInterface %v", key)
	}

	t.SubscriberInterface[key] = v
	return nil
}

// NewVideoInterface creates a new entry in the VideoInterface list of the
// NokiaConf_Configure_Service_Vprn struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn) NewVideoInterface(InterfaceName string) (*NokiaConf_Configure_Service_Vprn_VideoInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VideoInterface == nil {
		t.VideoInterface = make(map[string]*NokiaConf_Configure_Service_Vprn_VideoInterface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VideoInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VideoInterface", key)
	}

	t.VideoInterface[key] = &NokiaConf_Configure_Service_Vprn_VideoInterface{
		InterfaceName: &InterfaceName,
	}

	return t.VideoInterface[key], nil
}

// RenameVideoInterface renames an entry in the list VideoInterface within
// the NokiaConf_Configure_Service_Vprn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn) RenameVideoInterface(oldK, newK string) error {
	if _, ok := t.VideoInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in VideoInterface", newK)
	}

	e, ok := t.VideoInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VideoInterface", oldK)
	}
	e.InterfaceName = &newK

	t.VideoInterface[newK] = e
	delete(t.VideoInterface, oldK)
	return nil
}

// GetOrCreateVideoInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateVideoInterface(InterfaceName string) *NokiaConf_Configure_Service_Vprn_VideoInterface {

	key := InterfaceName

	if v, ok := t.VideoInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVideoInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVideoInterface got unexpected error: %v", err))
	}
	return v
}

// GetVideoInterface retrieves the value with the specified key from
// the VideoInterface map field of NokiaConf_Configure_Service_Vprn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetVideoInterface(InterfaceName string) *NokiaConf_Configure_Service_Vprn_VideoInterface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.VideoInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteVideoInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn) DeleteVideoInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.VideoInterface, key)
}

// AppendVideoInterface appends the supplied NokiaConf_Configure_Service_Vprn_VideoInterface struct to the
// list VideoInterface of NokiaConf_Configure_Service_Vprn. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_VideoInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn) AppendVideoInterface(v *NokiaConf_Configure_Service_Vprn_VideoInterface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VideoInterface == nil {
		t.VideoInterface = make(map[string]*NokiaConf_Configure_Service_Vprn_VideoInterface)
	}

	if _, ok := t.VideoInterface[key]; ok {
		return fmt.Errorf("duplicate key for list VideoInterface %v", key)
	}

	t.VideoInterface[key] = v
	return nil
}

// GetOrCreateAaa retrieves the value of the Aaa field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateAaa() *NokiaConf_Configure_Service_Vprn_Aaa {
	if t.Aaa != nil {
		return t.Aaa
	}
	t.Aaa = &NokiaConf_Configure_Service_Vprn_Aaa{}
	return t.Aaa
}

// GetOrCreateAggregates retrieves the value of the Aggregates field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateAggregates() *NokiaConf_Configure_Service_Vprn_Aggregates {
	if t.Aggregates != nil {
		return t.Aggregates
	}
	t.Aggregates = &NokiaConf_Configure_Service_Vprn_Aggregates{}
	return t.Aggregates
}

// GetOrCreateAutoBindTunnel retrieves the value of the AutoBindTunnel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateAutoBindTunnel() *NokiaConf_Configure_Service_Vprn_AutoBindTunnel {
	if t.AutoBindTunnel != nil {
		return t.AutoBindTunnel
	}
	t.AutoBindTunnel = &NokiaConf_Configure_Service_Vprn_AutoBindTunnel{}
	return t.AutoBindTunnel
}

// GetOrCreateBgp retrieves the value of the Bgp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateBgp() *NokiaConf_Configure_Service_Vprn_Bgp {
	if t.Bgp != nil {
		return t.Bgp
	}
	t.Bgp = &NokiaConf_Configure_Service_Vprn_Bgp{}
	return t.Bgp
}

// GetOrCreateBgpEvpn retrieves the value of the BgpEvpn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateBgpEvpn() *NokiaConf_Configure_Service_Vprn_BgpEvpn {
	if t.BgpEvpn != nil {
		return t.BgpEvpn
	}
	t.BgpEvpn = &NokiaConf_Configure_Service_Vprn_BgpEvpn{}
	return t.BgpEvpn
}

// GetOrCreateBgpIpvpn retrieves the value of the BgpIpvpn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateBgpIpvpn() *NokiaConf_Configure_Service_Vprn_BgpIpvpn {
	if t.BgpIpvpn != nil {
		return t.BgpIpvpn
	}
	t.BgpIpvpn = &NokiaConf_Configure_Service_Vprn_BgpIpvpn{}
	return t.BgpIpvpn
}

// GetOrCreateBgpSharedQueue retrieves the value of the BgpSharedQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateBgpSharedQueue() *NokiaConf_Configure_Service_Vprn_BgpSharedQueue {
	if t.BgpSharedQueue != nil {
		return t.BgpSharedQueue
	}
	t.BgpSharedQueue = &NokiaConf_Configure_Service_Vprn_BgpSharedQueue{}
	return t.BgpSharedQueue
}

// GetOrCreateBgpVpnBackup retrieves the value of the BgpVpnBackup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateBgpVpnBackup() *NokiaConf_Configure_Service_Vprn_BgpVpnBackup {
	if t.BgpVpnBackup != nil {
		return t.BgpVpnBackup
	}
	t.BgpVpnBackup = &NokiaConf_Configure_Service_Vprn_BgpVpnBackup{}
	return t.BgpVpnBackup
}

// GetOrCreateConfederation retrieves the value of the Confederation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateConfederation() *NokiaConf_Configure_Service_Vprn_Confederation {
	if t.Confederation != nil {
		return t.Confederation
	}
	t.Confederation = &NokiaConf_Configure_Service_Vprn_Confederation{}
	return t.Confederation
}

// GetOrCreateDhcpServer retrieves the value of the DhcpServer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateDhcpServer() *NokiaConf_Configure_Service_Vprn_DhcpServer {
	if t.DhcpServer != nil {
		return t.DhcpServer
	}
	t.DhcpServer = &NokiaConf_Configure_Service_Vprn_DhcpServer{}
	return t.DhcpServer
}

// GetOrCreateDns retrieves the value of the Dns field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateDns() *NokiaConf_Configure_Service_Vprn_Dns {
	if t.Dns != nil {
		return t.Dns
	}
	t.Dns = &NokiaConf_Configure_Service_Vprn_Dns{}
	return t.Dns
}

// GetOrCreateEthCfm retrieves the value of the EthCfm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateEthCfm() *NokiaConf_Configure_Service_Vprn_EthCfm {
	if t.EthCfm != nil {
		return t.EthCfm
	}
	t.EthCfm = &NokiaConf_Configure_Service_Vprn_EthCfm{}
	return t.EthCfm
}

// GetOrCreateFirewall retrieves the value of the Firewall field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateFirewall() *NokiaConf_Configure_Service_Vprn_Firewall {
	if t.Firewall != nil {
		return t.Firewall
	}
	t.Firewall = &NokiaConf_Configure_Service_Vprn_Firewall{}
	return t.Firewall
}

// GetOrCreateFlowspec retrieves the value of the Flowspec field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateFlowspec() *NokiaConf_Configure_Service_Vprn_Flowspec {
	if t.Flowspec != nil {
		return t.Flowspec
	}
	t.Flowspec = &NokiaConf_Configure_Service_Vprn_Flowspec{}
	return t.Flowspec
}

// GetOrCreateGrtLeaking retrieves the value of the GrtLeaking field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateGrtLeaking() *NokiaConf_Configure_Service_Vprn_GrtLeaking {
	if t.GrtLeaking != nil {
		return t.GrtLeaking
	}
	t.GrtLeaking = &NokiaConf_Configure_Service_Vprn_GrtLeaking{}
	return t.GrtLeaking
}

// GetOrCreateGsmp retrieves the value of the Gsmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateGsmp() *NokiaConf_Configure_Service_Vprn_Gsmp {
	if t.Gsmp != nil {
		return t.Gsmp
	}
	t.Gsmp = &NokiaConf_Configure_Service_Vprn_Gsmp{}
	return t.Gsmp
}

// GetOrCreateGtp retrieves the value of the Gtp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateGtp() *NokiaConf_Configure_Service_Vprn_Gtp {
	if t.Gtp != nil {
		return t.Gtp
	}
	t.Gtp = &NokiaConf_Configure_Service_Vprn_Gtp{}
	return t.Gtp
}

// GetOrCreateIgmp retrieves the value of the Igmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateIgmp() *NokiaConf_Configure_Service_Vprn_Igmp {
	if t.Igmp != nil {
		return t.Igmp
	}
	t.Igmp = &NokiaConf_Configure_Service_Vprn_Igmp{}
	return t.Igmp
}

// GetOrCreateIgmpHostTracking retrieves the value of the IgmpHostTracking field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateIgmpHostTracking() *NokiaConf_Configure_Service_Vprn_IgmpHostTracking {
	if t.IgmpHostTracking != nil {
		return t.IgmpHostTracking
	}
	t.IgmpHostTracking = &NokiaConf_Configure_Service_Vprn_IgmpHostTracking{}
	return t.IgmpHostTracking
}

// GetOrCreateIpsec retrieves the value of the Ipsec field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateIpsec() *NokiaConf_Configure_Service_Vprn_Ipsec {
	if t.Ipsec != nil {
		return t.Ipsec
	}
	t.Ipsec = &NokiaConf_Configure_Service_Vprn_Ipsec{}
	return t.Ipsec
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateIpv6() *NokiaConf_Configure_Service_Vprn_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Service_Vprn_Ipv6{}
	return t.Ipv6
}

// GetOrCreateL2Tp retrieves the value of the L2Tp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateL2Tp() *NokiaConf_Configure_Service_Vprn_L2Tp {
	if t.L2Tp != nil {
		return t.L2Tp
	}
	t.L2Tp = &NokiaConf_Configure_Service_Vprn_L2Tp{}
	return t.L2Tp
}

// GetOrCreateLog retrieves the value of the Log field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateLog() *NokiaConf_Configure_Service_Vprn_Log {
	if t.Log != nil {
		return t.Log
	}
	t.Log = &NokiaConf_Configure_Service_Vprn_Log{}
	return t.Log
}

// GetOrCreateManagement retrieves the value of the Management field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateManagement() *NokiaConf_Configure_Service_Vprn_Management {
	if t.Management != nil {
		return t.Management
	}
	t.Management = &NokiaConf_Configure_Service_Vprn_Management{}
	return t.Management
}

// GetOrCreateMaximumIpv4Routes retrieves the value of the MaximumIpv4Routes field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateMaximumIpv4Routes() *NokiaConf_Configure_Service_Vprn_MaximumIpv4Routes {
	if t.MaximumIpv4Routes != nil {
		return t.MaximumIpv4Routes
	}
	t.MaximumIpv4Routes = &NokiaConf_Configure_Service_Vprn_MaximumIpv4Routes{}
	return t.MaximumIpv4Routes
}

// GetOrCreateMaximumIpv6Routes retrieves the value of the MaximumIpv6Routes field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateMaximumIpv6Routes() *NokiaConf_Configure_Service_Vprn_MaximumIpv6Routes {
	if t.MaximumIpv6Routes != nil {
		return t.MaximumIpv6Routes
	}
	t.MaximumIpv6Routes = &NokiaConf_Configure_Service_Vprn_MaximumIpv6Routes{}
	return t.MaximumIpv6Routes
}

// GetOrCreateMcMaximumRoutes retrieves the value of the McMaximumRoutes field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateMcMaximumRoutes() *NokiaConf_Configure_Service_Vprn_McMaximumRoutes {
	if t.McMaximumRoutes != nil {
		return t.McMaximumRoutes
	}
	t.McMaximumRoutes = &NokiaConf_Configure_Service_Vprn_McMaximumRoutes{}
	return t.McMaximumRoutes
}

// GetOrCreateMld retrieves the value of the Mld field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateMld() *NokiaConf_Configure_Service_Vprn_Mld {
	if t.Mld != nil {
		return t.Mld
	}
	t.Mld = &NokiaConf_Configure_Service_Vprn_Mld{}
	return t.Mld
}

// GetOrCreateMsdp retrieves the value of the Msdp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateMsdp() *NokiaConf_Configure_Service_Vprn_Msdp {
	if t.Msdp != nil {
		return t.Msdp
	}
	t.Msdp = &NokiaConf_Configure_Service_Vprn_Msdp{}
	return t.Msdp
}

// GetOrCreateMssAdjust retrieves the value of the MssAdjust field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateMssAdjust() *NokiaConf_Configure_Service_Vprn_MssAdjust {
	if t.MssAdjust != nil {
		return t.MssAdjust
	}
	t.MssAdjust = &NokiaConf_Configure_Service_Vprn_MssAdjust{}
	return t.MssAdjust
}

// GetOrCreateMtrace2 retrieves the value of the Mtrace2 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateMtrace2() *NokiaConf_Configure_Service_Vprn_Mtrace2 {
	if t.Mtrace2 != nil {
		return t.Mtrace2
	}
	t.Mtrace2 = &NokiaConf_Configure_Service_Vprn_Mtrace2{}
	return t.Mtrace2
}

// GetOrCreateMvpn retrieves the value of the Mvpn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateMvpn() *NokiaConf_Configure_Service_Vprn_Mvpn {
	if t.Mvpn != nil {
		return t.Mvpn
	}
	t.Mvpn = &NokiaConf_Configure_Service_Vprn_Mvpn{}
	return t.Mvpn
}

// GetOrCreateNat retrieves the value of the Nat field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateNat() *NokiaConf_Configure_Service_Vprn_Nat {
	if t.Nat != nil {
		return t.Nat
	}
	t.Nat = &NokiaConf_Configure_Service_Vprn_Nat{}
	return t.Nat
}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateNetwork() *NokiaConf_Configure_Service_Vprn_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Service_Vprn_Network{}
	return t.Network
}

// GetOrCreateNtp retrieves the value of the Ntp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateNtp() *NokiaConf_Configure_Service_Vprn_Ntp {
	if t.Ntp != nil {
		return t.Ntp
	}
	t.Ntp = &NokiaConf_Configure_Service_Vprn_Ntp{}
	return t.Ntp
}

// GetOrCreatePcp retrieves the value of the Pcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreatePcp() *NokiaConf_Configure_Service_Vprn_Pcp {
	if t.Pcp != nil {
		return t.Pcp
	}
	t.Pcp = &NokiaConf_Configure_Service_Vprn_Pcp{}
	return t.Pcp
}

// GetOrCreatePim retrieves the value of the Pim field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreatePim() *NokiaConf_Configure_Service_Vprn_Pim {
	if t.Pim != nil {
		return t.Pim
	}
	t.Pim = &NokiaConf_Configure_Service_Vprn_Pim{}
	return t.Pim
}

// GetOrCreateRadius retrieves the value of the Radius field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateRadius() *NokiaConf_Configure_Service_Vprn_Radius {
	if t.Radius != nil {
		return t.Radius
	}
	t.Radius = &NokiaConf_Configure_Service_Vprn_Radius{}
	return t.Radius
}

// GetOrCreateReassembly retrieves the value of the Reassembly field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateReassembly() *NokiaConf_Configure_Service_Vprn_Reassembly {
	if t.Reassembly != nil {
		return t.Reassembly
	}
	t.Reassembly = &NokiaConf_Configure_Service_Vprn_Reassembly{}
	return t.Reassembly
}

// GetOrCreateRip retrieves the value of the Rip field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateRip() *NokiaConf_Configure_Service_Vprn_Rip {
	if t.Rip != nil {
		return t.Rip
	}
	t.Rip = &NokiaConf_Configure_Service_Vprn_Rip{}
	return t.Rip
}

// GetOrCreateRipng retrieves the value of the Ripng field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateRipng() *NokiaConf_Configure_Service_Vprn_Ripng {
	if t.Ripng != nil {
		return t.Ripng
	}
	t.Ripng = &NokiaConf_Configure_Service_Vprn_Ripng{}
	return t.Ripng
}

// GetOrCreateSfmOverload retrieves the value of the SfmOverload field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateSfmOverload() *NokiaConf_Configure_Service_Vprn_SfmOverload {
	if t.SfmOverload != nil {
		return t.SfmOverload
	}
	t.SfmOverload = &NokiaConf_Configure_Service_Vprn_SfmOverload{}
	return t.SfmOverload
}

// GetOrCreateSgtQos retrieves the value of the SgtQos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateSgtQos() *NokiaConf_Configure_Service_Vprn_SgtQos {
	if t.SgtQos != nil {
		return t.SgtQos
	}
	t.SgtQos = &NokiaConf_Configure_Service_Vprn_SgtQos{}
	return t.SgtQos
}

// GetOrCreateSnmp retrieves the value of the Snmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateSnmp() *NokiaConf_Configure_Service_Vprn_Snmp {
	if t.Snmp != nil {
		return t.Snmp
	}
	t.Snmp = &NokiaConf_Configure_Service_Vprn_Snmp{}
	return t.Snmp
}

// GetOrCreateSourceAddress retrieves the value of the SourceAddress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateSourceAddress() *NokiaConf_Configure_Service_Vprn_SourceAddress {
	if t.SourceAddress != nil {
		return t.SourceAddress
	}
	t.SourceAddress = &NokiaConf_Configure_Service_Vprn_SourceAddress{}
	return t.SourceAddress
}

// GetOrCreateStaticRoutes retrieves the value of the StaticRoutes field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateStaticRoutes() *NokiaConf_Configure_Service_Vprn_StaticRoutes {
	if t.StaticRoutes != nil {
		return t.StaticRoutes
	}
	t.StaticRoutes = &NokiaConf_Configure_Service_Vprn_StaticRoutes{}
	return t.StaticRoutes
}

// GetOrCreateSubscriberMgmt retrieves the value of the SubscriberMgmt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateSubscriberMgmt() *NokiaConf_Configure_Service_Vprn_SubscriberMgmt {
	if t.SubscriberMgmt != nil {
		return t.SubscriberMgmt
	}
	t.SubscriberMgmt = &NokiaConf_Configure_Service_Vprn_SubscriberMgmt{}
	return t.SubscriberMgmt
}

// GetOrCreateTtlPropagate retrieves the value of the TtlPropagate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateTtlPropagate() *NokiaConf_Configure_Service_Vprn_TtlPropagate {
	if t.TtlPropagate != nil {
		return t.TtlPropagate
	}
	t.TtlPropagate = &NokiaConf_Configure_Service_Vprn_TtlPropagate{}
	return t.TtlPropagate
}

// GetOrCreateTwampLight retrieves the value of the TwampLight field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateTwampLight() *NokiaConf_Configure_Service_Vprn_TwampLight {
	if t.TwampLight != nil {
		return t.TwampLight
	}
	t.TwampLight = &NokiaConf_Configure_Service_Vprn_TwampLight{}
	return t.TwampLight
}

// GetOrCreateVrfExport retrieves the value of the VrfExport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateVrfExport() *NokiaConf_Configure_Service_Vprn_VrfExport {
	if t.VrfExport != nil {
		return t.VrfExport
	}
	t.VrfExport = &NokiaConf_Configure_Service_Vprn_VrfExport{}
	return t.VrfExport
}

// GetOrCreateVrfImport retrieves the value of the VrfImport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateVrfImport() *NokiaConf_Configure_Service_Vprn_VrfImport {
	if t.VrfImport != nil {
		return t.VrfImport
	}
	t.VrfImport = &NokiaConf_Configure_Service_Vprn_VrfImport{}
	return t.VrfImport
}

// GetOrCreateVrfTarget retrieves the value of the VrfTarget field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateVrfTarget() *NokiaConf_Configure_Service_Vprn_VrfTarget {
	if t.VrfTarget != nil {
		return t.VrfTarget
	}
	t.VrfTarget = &NokiaConf_Configure_Service_Vprn_VrfTarget{}
	return t.VrfTarget
}

// GetOrCreateVxlan retrieves the value of the Vxlan field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateVxlan() *NokiaConf_Configure_Service_Vprn_Vxlan {
	if t.Vxlan != nil {
		return t.Vxlan
	}
	t.Vxlan = &NokiaConf_Configure_Service_Vprn_Vxlan{}
	return t.Vxlan
}

// GetOrCreateWlanGw retrieves the value of the WlanGw field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateWlanGw() *NokiaConf_Configure_Service_Vprn_WlanGw {
	if t.WlanGw != nil {
		return t.WlanGw
	}
	t.WlanGw = &NokiaConf_Configure_Service_Vprn_WlanGw{}
	return t.WlanGw
}

// GetOrCreateWpp retrieves the value of the Wpp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn) GetOrCreateWpp() *NokiaConf_Configure_Service_Vprn_Wpp {
	if t.Wpp != nil {
		return t.Wpp
	}
	t.Wpp = &NokiaConf_Configure_Service_Vprn_Wpp{}
	return t.Wpp
}

// GetAaa returns the value of the Aaa struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field Aaa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetAaa() *NokiaConf_Configure_Service_Vprn_Aaa {
	if t != nil && t.Aaa != nil {
		return t.Aaa
	}
	return nil
}

// GetAggregates returns the value of the Aggregates struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field Aggregates is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetAggregates() *NokiaConf_Configure_Service_Vprn_Aggregates {
	if t != nil && t.Aggregates != nil {
		return t.Aggregates
	}
	return nil
}

// GetAutoBindTunnel returns the value of the AutoBindTunnel struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field AutoBindTunnel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetAutoBindTunnel() *NokiaConf_Configure_Service_Vprn_AutoBindTunnel {
	if t != nil && t.AutoBindTunnel != nil {
		return t.AutoBindTunnel
	}
	return nil
}

// GetBgp returns the value of the Bgp struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field Bgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetBgp() *NokiaConf_Configure_Service_Vprn_Bgp {
	if t != nil && t.Bgp != nil {
		return t.Bgp
	}
	return nil
}

// GetBgpEvpn returns the value of the BgpEvpn struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field BgpEvpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetBgpEvpn() *NokiaConf_Configure_Service_Vprn_BgpEvpn {
	if t != nil && t.BgpEvpn != nil {
		return t.BgpEvpn
	}
	return nil
}

// GetBgpIpvpn returns the value of the BgpIpvpn struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field BgpIpvpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetBgpIpvpn() *NokiaConf_Configure_Service_Vprn_BgpIpvpn {
	if t != nil && t.BgpIpvpn != nil {
		return t.BgpIpvpn
	}
	return nil
}

// GetBgpSharedQueue returns the value of the BgpSharedQueue struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field BgpSharedQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetBgpSharedQueue() *NokiaConf_Configure_Service_Vprn_BgpSharedQueue {
	if t != nil && t.BgpSharedQueue != nil {
		return t.BgpSharedQueue
	}
	return nil
}

// GetBgpVpnBackup returns the value of the BgpVpnBackup struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field BgpVpnBackup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetBgpVpnBackup() *NokiaConf_Configure_Service_Vprn_BgpVpnBackup {
	if t != nil && t.BgpVpnBackup != nil {
		return t.BgpVpnBackup
	}
	return nil
}

// GetConfederation returns the value of the Confederation struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field Confederation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetConfederation() *NokiaConf_Configure_Service_Vprn_Confederation {
	if t != nil && t.Confederation != nil {
		return t.Confederation
	}
	return nil
}

// GetDhcpServer returns the value of the DhcpServer struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field DhcpServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetDhcpServer() *NokiaConf_Configure_Service_Vprn_DhcpServer {
	if t != nil && t.DhcpServer != nil {
		return t.DhcpServer
	}
	return nil
}

// GetDns returns the value of the Dns struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field Dns is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetDns() *NokiaConf_Configure_Service_Vprn_Dns {
	if t != nil && t.Dns != nil {
		return t.Dns
	}
	return nil
}

// GetEthCfm returns the value of the EthCfm struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field EthCfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetEthCfm() *NokiaConf_Configure_Service_Vprn_EthCfm {
	if t != nil && t.EthCfm != nil {
		return t.EthCfm
	}
	return nil
}

// GetFirewall returns the value of the Firewall struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field Firewall is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetFirewall() *NokiaConf_Configure_Service_Vprn_Firewall {
	if t != nil && t.Firewall != nil {
		return t.Firewall
	}
	return nil
}

// GetFlowspec returns the value of the Flowspec struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field Flowspec is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetFlowspec() *NokiaConf_Configure_Service_Vprn_Flowspec {
	if t != nil && t.Flowspec != nil {
		return t.Flowspec
	}
	return nil
}

// GetGrtLeaking returns the value of the GrtLeaking struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field GrtLeaking is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetGrtLeaking() *NokiaConf_Configure_Service_Vprn_GrtLeaking {
	if t != nil && t.GrtLeaking != nil {
		return t.GrtLeaking
	}
	return nil
}

// GetGsmp returns the value of the Gsmp struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field Gsmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetGsmp() *NokiaConf_Configure_Service_Vprn_Gsmp {
	if t != nil && t.Gsmp != nil {
		return t.Gsmp
	}
	return nil
}

// GetGtp returns the value of the Gtp struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field Gtp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetGtp() *NokiaConf_Configure_Service_Vprn_Gtp {
	if t != nil && t.Gtp != nil {
		return t.Gtp
	}
	return nil
}

// GetIgmp returns the value of the Igmp struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field Igmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetIgmp() *NokiaConf_Configure_Service_Vprn_Igmp {
	if t != nil && t.Igmp != nil {
		return t.Igmp
	}
	return nil
}

// GetIgmpHostTracking returns the value of the IgmpHostTracking struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field IgmpHostTracking is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetIgmpHostTracking() *NokiaConf_Configure_Service_Vprn_IgmpHostTracking {
	if t != nil && t.IgmpHostTracking != nil {
		return t.IgmpHostTracking
	}
	return nil
}

// GetIpsec returns the value of the Ipsec struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field Ipsec is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetIpsec() *NokiaConf_Configure_Service_Vprn_Ipsec {
	if t != nil && t.Ipsec != nil {
		return t.Ipsec
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetIpv6() *NokiaConf_Configure_Service_Vprn_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetL2Tp returns the value of the L2Tp struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field L2Tp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetL2Tp() *NokiaConf_Configure_Service_Vprn_L2Tp {
	if t != nil && t.L2Tp != nil {
		return t.L2Tp
	}
	return nil
}

// GetLog returns the value of the Log struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field Log is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetLog() *NokiaConf_Configure_Service_Vprn_Log {
	if t != nil && t.Log != nil {
		return t.Log
	}
	return nil
}

// GetManagement returns the value of the Management struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field Management is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetManagement() *NokiaConf_Configure_Service_Vprn_Management {
	if t != nil && t.Management != nil {
		return t.Management
	}
	return nil
}

// GetMaximumIpv4Routes returns the value of the MaximumIpv4Routes struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field MaximumIpv4Routes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetMaximumIpv4Routes() *NokiaConf_Configure_Service_Vprn_MaximumIpv4Routes {
	if t != nil && t.MaximumIpv4Routes != nil {
		return t.MaximumIpv4Routes
	}
	return nil
}

// GetMaximumIpv6Routes returns the value of the MaximumIpv6Routes struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field MaximumIpv6Routes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetMaximumIpv6Routes() *NokiaConf_Configure_Service_Vprn_MaximumIpv6Routes {
	if t != nil && t.MaximumIpv6Routes != nil {
		return t.MaximumIpv6Routes
	}
	return nil
}

// GetMcMaximumRoutes returns the value of the McMaximumRoutes struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field McMaximumRoutes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetMcMaximumRoutes() *NokiaConf_Configure_Service_Vprn_McMaximumRoutes {
	if t != nil && t.McMaximumRoutes != nil {
		return t.McMaximumRoutes
	}
	return nil
}

// GetMld returns the value of the Mld struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field Mld is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetMld() *NokiaConf_Configure_Service_Vprn_Mld {
	if t != nil && t.Mld != nil {
		return t.Mld
	}
	return nil
}

// GetMsdp returns the value of the Msdp struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field Msdp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetMsdp() *NokiaConf_Configure_Service_Vprn_Msdp {
	if t != nil && t.Msdp != nil {
		return t.Msdp
	}
	return nil
}

// GetMssAdjust returns the value of the MssAdjust struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field MssAdjust is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetMssAdjust() *NokiaConf_Configure_Service_Vprn_MssAdjust {
	if t != nil && t.MssAdjust != nil {
		return t.MssAdjust
	}
	return nil
}

// GetMtrace2 returns the value of the Mtrace2 struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field Mtrace2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetMtrace2() *NokiaConf_Configure_Service_Vprn_Mtrace2 {
	if t != nil && t.Mtrace2 != nil {
		return t.Mtrace2
	}
	return nil
}

// GetMvpn returns the value of the Mvpn struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field Mvpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetMvpn() *NokiaConf_Configure_Service_Vprn_Mvpn {
	if t != nil && t.Mvpn != nil {
		return t.Mvpn
	}
	return nil
}

// GetNat returns the value of the Nat struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field Nat is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetNat() *NokiaConf_Configure_Service_Vprn_Nat {
	if t != nil && t.Nat != nil {
		return t.Nat
	}
	return nil
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetNetwork() *NokiaConf_Configure_Service_Vprn_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// GetNtp returns the value of the Ntp struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field Ntp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetNtp() *NokiaConf_Configure_Service_Vprn_Ntp {
	if t != nil && t.Ntp != nil {
		return t.Ntp
	}
	return nil
}

// GetPcp returns the value of the Pcp struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field Pcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetPcp() *NokiaConf_Configure_Service_Vprn_Pcp {
	if t != nil && t.Pcp != nil {
		return t.Pcp
	}
	return nil
}

// GetPim returns the value of the Pim struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field Pim is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetPim() *NokiaConf_Configure_Service_Vprn_Pim {
	if t != nil && t.Pim != nil {
		return t.Pim
	}
	return nil
}

// GetRadius returns the value of the Radius struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field Radius is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetRadius() *NokiaConf_Configure_Service_Vprn_Radius {
	if t != nil && t.Radius != nil {
		return t.Radius
	}
	return nil
}

// GetReassembly returns the value of the Reassembly struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field Reassembly is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetReassembly() *NokiaConf_Configure_Service_Vprn_Reassembly {
	if t != nil && t.Reassembly != nil {
		return t.Reassembly
	}
	return nil
}

// GetRip returns the value of the Rip struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field Rip is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetRip() *NokiaConf_Configure_Service_Vprn_Rip {
	if t != nil && t.Rip != nil {
		return t.Rip
	}
	return nil
}

// GetRipng returns the value of the Ripng struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field Ripng is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetRipng() *NokiaConf_Configure_Service_Vprn_Ripng {
	if t != nil && t.Ripng != nil {
		return t.Ripng
	}
	return nil
}

// GetSfmOverload returns the value of the SfmOverload struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field SfmOverload is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetSfmOverload() *NokiaConf_Configure_Service_Vprn_SfmOverload {
	if t != nil && t.SfmOverload != nil {
		return t.SfmOverload
	}
	return nil
}

// GetSgtQos returns the value of the SgtQos struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field SgtQos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetSgtQos() *NokiaConf_Configure_Service_Vprn_SgtQos {
	if t != nil && t.SgtQos != nil {
		return t.SgtQos
	}
	return nil
}

// GetSnmp returns the value of the Snmp struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field Snmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetSnmp() *NokiaConf_Configure_Service_Vprn_Snmp {
	if t != nil && t.Snmp != nil {
		return t.Snmp
	}
	return nil
}

// GetSourceAddress returns the value of the SourceAddress struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field SourceAddress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetSourceAddress() *NokiaConf_Configure_Service_Vprn_SourceAddress {
	if t != nil && t.SourceAddress != nil {
		return t.SourceAddress
	}
	return nil
}

// GetStaticRoutes returns the value of the StaticRoutes struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field StaticRoutes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetStaticRoutes() *NokiaConf_Configure_Service_Vprn_StaticRoutes {
	if t != nil && t.StaticRoutes != nil {
		return t.StaticRoutes
	}
	return nil
}

// GetSubscriberMgmt returns the value of the SubscriberMgmt struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field SubscriberMgmt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetSubscriberMgmt() *NokiaConf_Configure_Service_Vprn_SubscriberMgmt {
	if t != nil && t.SubscriberMgmt != nil {
		return t.SubscriberMgmt
	}
	return nil
}

// GetTtlPropagate returns the value of the TtlPropagate struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field TtlPropagate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetTtlPropagate() *NokiaConf_Configure_Service_Vprn_TtlPropagate {
	if t != nil && t.TtlPropagate != nil {
		return t.TtlPropagate
	}
	return nil
}

// GetTwampLight returns the value of the TwampLight struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field TwampLight is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetTwampLight() *NokiaConf_Configure_Service_Vprn_TwampLight {
	if t != nil && t.TwampLight != nil {
		return t.TwampLight
	}
	return nil
}

// GetVrfExport returns the value of the VrfExport struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field VrfExport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetVrfExport() *NokiaConf_Configure_Service_Vprn_VrfExport {
	if t != nil && t.VrfExport != nil {
		return t.VrfExport
	}
	return nil
}

// GetVrfImport returns the value of the VrfImport struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field VrfImport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetVrfImport() *NokiaConf_Configure_Service_Vprn_VrfImport {
	if t != nil && t.VrfImport != nil {
		return t.VrfImport
	}
	return nil
}

// GetVrfTarget returns the value of the VrfTarget struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field VrfTarget is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetVrfTarget() *NokiaConf_Configure_Service_Vprn_VrfTarget {
	if t != nil && t.VrfTarget != nil {
		return t.VrfTarget
	}
	return nil
}

// GetVxlan returns the value of the Vxlan struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field Vxlan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetVxlan() *NokiaConf_Configure_Service_Vprn_Vxlan {
	if t != nil && t.Vxlan != nil {
		return t.Vxlan
	}
	return nil
}

// GetWlanGw returns the value of the WlanGw struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field WlanGw is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetWlanGw() *NokiaConf_Configure_Service_Vprn_WlanGw {
	if t != nil && t.WlanGw != nil {
		return t.WlanGw
	}
	return nil
}

// GetWpp returns the value of the Wpp struct pointer
// from NokiaConf_Configure_Service_Vprn. If the receiver or the field Wpp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn) GetWpp() *NokiaConf_Configure_Service_Vprn_Wpp {
	if t != nil && t.Wpp != nil {
		return t.Wpp
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAllowExportBgpVpn retrieves the value of the leaf AllowExportBgpVpn from the NokiaConf_Configure_Service_Vprn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowExportBgpVpn is set, it can
// safely use t.GetAllowExportBgpVpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowExportBgpVpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn) GetAllowExportBgpVpn() bool {
	if t == nil || t.AllowExportBgpVpn == nil {
		return false
	}
	return *t.AllowExportBgpVpn
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAutonomousSystem retrieves the value of the leaf AutonomousSystem from the NokiaConf_Configure_Service_Vprn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutonomousSystem is set, it can
// safely use t.GetAutonomousSystem() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutonomousSystem == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn) GetAutonomousSystem() uint32 {
	if t == nil || t.AutonomousSystem == nil {
		return 0
	}
	return *t.AutonomousSystem
}

// GetCarrierCarrierVpn retrieves the value of the leaf CarrierCarrierVpn from the NokiaConf_Configure_Service_Vprn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CarrierCarrierVpn is set, it can
// safely use t.GetCarrierCarrierVpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CarrierCarrierVpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn) GetCarrierCarrierVpn() bool {
	if t == nil || t.CarrierCarrierVpn == nil {
		return false
	}
	return *t.CarrierCarrierVpn
}

// GetClassForwarding retrieves the value of the leaf ClassForwarding from the NokiaConf_Configure_Service_Vprn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassForwarding is set, it can
// safely use t.GetClassForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassForwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn) GetClassForwarding() bool {
	if t == nil || t.ClassForwarding == nil {
		return false
	}
	return *t.ClassForwarding
}

// GetCustomer retrieves the value of the leaf Customer from the NokiaConf_Configure_Service_Vprn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Customer is set, it can
// safely use t.GetCustomer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Customer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn) GetCustomer() string {
	if t == nil || t.Customer == nil {
		return ""
	}
	return *t.Customer
}

// GetDPathLengthIgnore retrieves the value of the leaf DPathLengthIgnore from the NokiaConf_Configure_Service_Vprn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DPathLengthIgnore is set, it can
// safely use t.GetDPathLengthIgnore() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DPathLengthIgnore == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn) GetDPathLengthIgnore() bool {
	if t == nil || t.DPathLengthIgnore == nil {
		return false
	}
	return *t.DPathLengthIgnore
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEcmp retrieves the value of the leaf Ecmp from the NokiaConf_Configure_Service_Vprn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ecmp is set, it can
// safely use t.GetEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ecmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn) GetEcmp() uint32 {
	if t == nil || t.Ecmp == nil {
		return 1
	}
	return *t.Ecmp
}

// GetEcmpUnequalCost retrieves the value of the leaf EcmpUnequalCost from the NokiaConf_Configure_Service_Vprn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcmpUnequalCost is set, it can
// safely use t.GetEcmpUnequalCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcmpUnequalCost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn) GetEcmpUnequalCost() bool {
	if t == nil || t.EcmpUnequalCost == nil {
		return false
	}
	return *t.EcmpUnequalCost
}

// GetEntropyLabel retrieves the value of the leaf EntropyLabel from the NokiaConf_Configure_Service_Vprn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntropyLabel is set, it can
// safely use t.GetEntropyLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntropyLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn) GetEntropyLabel() bool {
	if t == nil || t.EntropyLabel == nil {
		return false
	}
	return *t.EntropyLabel
}

// GetExportInactiveBgp retrieves the value of the leaf ExportInactiveBgp from the NokiaConf_Configure_Service_Vprn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportInactiveBgp is set, it can
// safely use t.GetExportInactiveBgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportInactiveBgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn) GetExportInactiveBgp() bool {
	if t == nil || t.ExportInactiveBgp == nil {
		return false
	}
	return *t.ExportInactiveBgp
}

// GetFibPriority retrieves the value of the leaf FibPriority from the NokiaConf_Configure_Service_Vprn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FibPriority is set, it can
// safely use t.GetFibPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FibPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn) GetFibPriority() E_NokiaConf_Configure_Service_Vprn_FibPriority {
	if t == nil || t.FibPriority == 0 {
		return NokiaConf_Configure_Service_Vprn_FibPriority_standard
	}
	return t.FibPriority
}

// GetHashLabel retrieves the value of the leaf HashLabel from the NokiaConf_Configure_Service_Vprn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HashLabel is set, it can
// safely use t.GetHashLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HashLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn) GetHashLabel() bool {
	if t == nil || t.HashLabel == nil {
		return false
	}
	return *t.HashLabel
}

// GetIgnoreNhMetric retrieves the value of the leaf IgnoreNhMetric from the NokiaConf_Configure_Service_Vprn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreNhMetric is set, it can
// safely use t.GetIgnoreNhMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreNhMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn) GetIgnoreNhMetric() bool {
	if t == nil || t.IgnoreNhMetric == nil {
		return false
	}
	return *t.IgnoreNhMetric
}

// GetLabelMode retrieves the value of the leaf LabelMode from the NokiaConf_Configure_Service_Vprn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelMode is set, it can
// safely use t.GetLabelMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn) GetLabelMode() E_NokiaConf_Configure_Service_Vprn_LabelMode {
	if t == nil || t.LabelMode == 0 {
		return NokiaConf_Configure_Service_Vprn_LabelMode_vrf
	}
	return t.LabelMode
}

// GetLocalRoutesDomainId retrieves the value of the leaf LocalRoutesDomainId from the NokiaConf_Configure_Service_Vprn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalRoutesDomainId is set, it can
// safely use t.GetLocalRoutesDomainId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalRoutesDomainId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn) GetLocalRoutesDomainId() string {
	if t == nil || t.LocalRoutesDomainId == nil {
		return ""
	}
	return *t.LocalRoutesDomainId
}

// GetMulticastInfoPolicy retrieves the value of the leaf MulticastInfoPolicy from the NokiaConf_Configure_Service_Vprn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastInfoPolicy is set, it can
// safely use t.GetMulticastInfoPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastInfoPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn) GetMulticastInfoPolicy() string {
	if t == nil || t.MulticastInfoPolicy == nil {
		return ""
	}
	return *t.MulticastInfoPolicy
}

// GetRouteDistinguisher retrieves the value of the leaf RouteDistinguisher from the NokiaConf_Configure_Service_Vprn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteDistinguisher is set, it can
// safely use t.GetRouteDistinguisher() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteDistinguisher == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn) GetRouteDistinguisher() NokiaConf_Configure_Service_Vprn_RouteDistinguisher_Union {
	if t == nil || t.RouteDistinguisher == nil {
		return nil
	}
	return t.RouteDistinguisher
}

// GetRouterId retrieves the value of the leaf RouterId from the NokiaConf_Configure_Service_Vprn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterId is set, it can
// safely use t.GetRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn) GetRouterId() string {
	if t == nil || t.RouterId == nil {
		return ""
	}
	return *t.RouterId
}

// GetSelectiveFib retrieves the value of the leaf SelectiveFib from the NokiaConf_Configure_Service_Vprn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SelectiveFib is set, it can
// safely use t.GetSelectiveFib() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SelectiveFib == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn) GetSelectiveFib() bool {
	if t == nil || t.SelectiveFib == nil {
		return true
	}
	return *t.SelectiveFib
}

// GetServiceId retrieves the value of the leaf ServiceId from the NokiaConf_Configure_Service_Vprn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceId is set, it can
// safely use t.GetServiceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn) GetServiceId() uint32 {
	if t == nil || t.ServiceId == nil {
		return 0
	}
	return *t.ServiceId
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Service_Vprn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// GetVprnType retrieves the value of the leaf VprnType from the NokiaConf_Configure_Service_Vprn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VprnType is set, it can
// safely use t.GetVprnType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VprnType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn) GetVprnType() E_NokiaConf_Configure_Service_Vprn_VprnType {
	if t == nil || t.VprnType == 0 {
		return NokiaConf_Configure_Service_Vprn_VprnType_regular
	}
	return t.VprnType
}

// GetWeightedEcmp retrieves the value of the leaf WeightedEcmp from the NokiaConf_Configure_Service_Vprn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WeightedEcmp is set, it can
// safely use t.GetWeightedEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WeightedEcmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn) GetWeightedEcmp() E_NokiaConf_Configure_Service_Vprn_WeightedEcmp {
	if t == nil || t.WeightedEcmp == 0 {
		return NokiaConf_Configure_Service_Vprn_WeightedEcmp_false
	}
	return t.WeightedEcmp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AllowExportBgpVpn == nil {
		var v bool = false
		t.AllowExportBgpVpn = &v
	}
	if t.CarrierCarrierVpn == nil {
		var v bool = false
		t.CarrierCarrierVpn = &v
	}
	if t.ClassForwarding == nil {
		var v bool = false
		t.ClassForwarding = &v
	}
	if t.DPathLengthIgnore == nil {
		var v bool = false
		t.DPathLengthIgnore = &v
	}
	if t.Ecmp == nil {
		var v uint32 = 1
		t.Ecmp = &v
	}
	if t.EcmpUnequalCost == nil {
		var v bool = false
		t.EcmpUnequalCost = &v
	}
	if t.EntropyLabel == nil {
		var v bool = false
		t.EntropyLabel = &v
	}
	if t.ExportInactiveBgp == nil {
		var v bool = false
		t.ExportInactiveBgp = &v
	}
	if t.FibPriority == 0 {
		t.FibPriority = NokiaConf_Configure_Service_Vprn_FibPriority_standard
	}
	if t.HashLabel == nil {
		var v bool = false
		t.HashLabel = &v
	}
	if t.IgnoreNhMetric == nil {
		var v bool = false
		t.IgnoreNhMetric = &v
	}
	if t.LabelMode == 0 {
		t.LabelMode = NokiaConf_Configure_Service_Vprn_LabelMode_vrf
	}
	if t.SelectiveFib == nil {
		var v bool = true
		t.SelectiveFib = &v
	}
	if t.VprnType == 0 {
		t.VprnType = NokiaConf_Configure_Service_Vprn_VprnType_regular
	}
	if t.WeightedEcmp == 0 {
		t.WeightedEcmp = NokiaConf_Configure_Service_Vprn_WeightedEcmp_false
	}
	t.Aaa.PopulateDefaults()
	t.Aggregates.PopulateDefaults()
	t.AutoBindTunnel.PopulateDefaults()
	t.Bgp.PopulateDefaults()
	t.BgpEvpn.PopulateDefaults()
	t.BgpIpvpn.PopulateDefaults()
	t.BgpSharedQueue.PopulateDefaults()
	t.BgpVpnBackup.PopulateDefaults()
	t.Confederation.PopulateDefaults()
	t.DhcpServer.PopulateDefaults()
	t.Dns.PopulateDefaults()
	t.EthCfm.PopulateDefaults()
	t.Firewall.PopulateDefaults()
	t.Flowspec.PopulateDefaults()
	t.GrtLeaking.PopulateDefaults()
	t.Gsmp.PopulateDefaults()
	t.Gtp.PopulateDefaults()
	t.Igmp.PopulateDefaults()
	t.IgmpHostTracking.PopulateDefaults()
	t.Ipsec.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	t.L2Tp.PopulateDefaults()
	t.Log.PopulateDefaults()
	t.Management.PopulateDefaults()
	t.MaximumIpv4Routes.PopulateDefaults()
	t.MaximumIpv6Routes.PopulateDefaults()
	t.McMaximumRoutes.PopulateDefaults()
	t.Mld.PopulateDefaults()
	t.Msdp.PopulateDefaults()
	t.MssAdjust.PopulateDefaults()
	t.Mtrace2.PopulateDefaults()
	t.Mvpn.PopulateDefaults()
	t.Nat.PopulateDefaults()
	t.Network.PopulateDefaults()
	t.Ntp.PopulateDefaults()
	t.Pcp.PopulateDefaults()
	t.Pim.PopulateDefaults()
	t.Radius.PopulateDefaults()
	t.Reassembly.PopulateDefaults()
	t.Rip.PopulateDefaults()
	t.Ripng.PopulateDefaults()
	t.SfmOverload.PopulateDefaults()
	t.SgtQos.PopulateDefaults()
	t.Snmp.PopulateDefaults()
	t.SourceAddress.PopulateDefaults()
	t.StaticRoutes.PopulateDefaults()
	t.SubscriberMgmt.PopulateDefaults()
	t.TtlPropagate.PopulateDefaults()
	t.TwampLight.PopulateDefaults()
	t.VrfExport.PopulateDefaults()
	t.VrfImport.PopulateDefaults()
	t.VrfTarget.PopulateDefaults()
	t.Vxlan.PopulateDefaults()
	t.WlanGw.PopulateDefaults()
	t.Wpp.PopulateDefaults()
	for _, e := range t.AaInterface {
		e.PopulateDefaults()
	}
	for _, e := range t.AarpInterface {
		e.PopulateDefaults()
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.IpMirrorInterface {
		e.PopulateDefaults()
	}
	for _, e := range t.Isis {
		e.PopulateDefaults()
	}
	for _, e := range t.NetworkInterface {
		e.PopulateDefaults()
	}
	for _, e := range t.Ospf {
		e.PopulateDefaults()
	}
	for _, e := range t.Ospf3 {
		e.PopulateDefaults()
	}
	for _, e := range t.RedundantInterface {
		e.PopulateDefaults()
	}
	for _, e := range t.SegmentRoutingV6 {
		e.PopulateDefaults()
	}
	for _, e := range t.SpokeSdp {
		e.PopulateDefaults()
	}
	for _, e := range t.SubscriberInterface {
		e.PopulateDefaults()
	}
	for _, e := range t.VideoInterface {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ServiceName == nil {
		return nil, fmt.Errorf("nil value for key ServiceName")
	}

	return map[string]interface{}{
		"service-name": *t.ServiceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn.
func (*NokiaConf_Configure_Service_Vprn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_AaInterface represents the /nokia-conf/configure/service/vprn/aa-interface YANG schema element.
type NokiaConf_Configure_Service_Vprn_AaInterface struct {
	AdminState         E_NokiaTypesSros_AdminState                                  `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                      `path:"description" module:"nokia-conf"`
	InterfaceName      *string                                                      `path:"interface-name" module:"nokia-conf"`
	IpMtu              *uint32                                                      `path:"ip-mtu" module:"nokia-conf"`
	Ipv4               *NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4           `path:"ipv4" module:"nokia-conf"`
	Sap                map[string]*NokiaConf_Configure_Service_Vprn_AaInterface_Sap `path:"sap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_AaInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_AaInterface) IsYANGGoStruct() {}

// NewSap creates a new entry in the Sap list of the
// NokiaConf_Configure_Service_Vprn_AaInterface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface) NewSap(SapId string) (*NokiaConf_Configure_Service_Vprn_AaInterface_Sap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Service_Vprn_AaInterface_Sap)
	}

	key := SapId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sap", key)
	}

	t.Sap[key] = &NokiaConf_Configure_Service_Vprn_AaInterface_Sap{
		SapId: &SapId,
	}

	return t.Sap[key], nil
}

// RenameSap renames an entry in the list Sap within
// the NokiaConf_Configure_Service_Vprn_AaInterface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface) RenameSap(oldK, newK string) error {
	if _, ok := t.Sap[newK]; ok {
		return fmt.Errorf("key %v already exists in Sap", newK)
	}

	e, ok := t.Sap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sap", oldK)
	}
	e.SapId = &newK

	t.Sap[newK] = e
	delete(t.Sap, oldK)
	return nil
}

// GetOrCreateSap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_AaInterface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface) GetOrCreateSap(SapId string) *NokiaConf_Configure_Service_Vprn_AaInterface_Sap {

	key := SapId

	if v, ok := t.Sap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSap(SapId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSap got unexpected error: %v", err))
	}
	return v
}

// GetSap retrieves the value with the specified key from
// the Sap map field of NokiaConf_Configure_Service_Vprn_AaInterface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface) GetSap(SapId string) *NokiaConf_Configure_Service_Vprn_AaInterface_Sap {

	if t == nil {
		return nil
	}

	key := SapId

	if lm, ok := t.Sap[key]; ok {
		return lm
	}
	return nil
}

// DeleteSap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_AaInterface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface) DeleteSap(SapId string) {
	key := SapId

	delete(t.Sap, key)
}

// AppendSap appends the supplied NokiaConf_Configure_Service_Vprn_AaInterface_Sap struct to the
// list Sap of NokiaConf_Configure_Service_Vprn_AaInterface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_AaInterface_Sap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface) AppendSap(v *NokiaConf_Configure_Service_Vprn_AaInterface_Sap) error {
	if v.SapId == nil {
		return fmt.Errorf("invalid nil key received for SapId")
	}

	key := *v.SapId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Service_Vprn_AaInterface_Sap)
	}

	if _, ok := t.Sap[key]; ok {
		return fmt.Errorf("duplicate key for list Sap %v", key)
	}

	t.Sap[key] = v
	return nil
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface) GetOrCreateIpv4() *NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4{}
	return t.Ipv4
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Service_Vprn_AaInterface. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface) GetIpv4() *NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_AaInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_AaInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_AaInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_AaInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Service_Vprn_AaInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetIpMtu retrieves the value of the leaf IpMtu from the NokiaConf_Configure_Service_Vprn_AaInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpMtu is set, it can
// safely use t.GetIpMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface) GetIpMtu() uint32 {
	if t == nil || t.IpMtu == nil {
		return 0
	}
	return *t.IpMtu
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_AaInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	t.Ipv4.PopulateDefaults()
	for _, e := range t.Sap {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_AaInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_AaInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_AaInterface.
func (*NokiaConf_Configure_Service_Vprn_AaInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4 represents the /nokia-conf/configure/service/vprn/aa-interface/ipv4 YANG schema element.
type NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4 struct {
	Primary *NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4_Primary `path:"primary" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4) IsYANGGoStruct() {}

// GetOrCreatePrimary retrieves the value of the Primary field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4) GetOrCreatePrimary() *NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4_Primary {
	if t.Primary != nil {
		return t.Primary
	}
	t.Primary = &NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4_Primary{}
	return t.Primary
}

// GetPrimary returns the value of the Primary struct pointer
// from NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4. If the receiver or the field Primary is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4) GetPrimary() *NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4_Primary {
	if t != nil && t.Primary != nil {
		return t.Primary
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Primary.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4.
func (*NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4_Primary represents the /nokia-conf/configure/service/vprn/aa-interface/ipv4/primary YANG schema element.
type NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4_Primary struct {
	Address            *string  `path:"address" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	PrefixLength       *uint32  `path:"prefix-length" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4_Primary implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4_Primary) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4_Primary) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4_Primary) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4_Primary) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4_Primary) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4_Primary
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4_Primary) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4_Primary) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4_Primary"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4_Primary) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4_Primary) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4_Primary.
func (*NokiaConf_Configure_Service_Vprn_AaInterface_Ipv4_Primary) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_AaInterface_Sap represents the /nokia-conf/configure/service/vprn/aa-interface/sap YANG schema element.
type NokiaConf_Configure_Service_Vprn_AaInterface_Sap struct {
	AdminState         E_NokiaTypesSros_AdminState                                    `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                       `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                       `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                        `path:"description" module:"nokia-conf"`
	Egress             *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress       `path:"egress" module:"nokia-conf"`
	FwdWholesale       *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_FwdWholesale `path:"fwd-wholesale" module:"nokia-conf"`
	Ingress            *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress      `path:"ingress" module:"nokia-conf"`
	Lag                *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Lag          `path:"lag" module:"nokia-conf"`
	SapId              *string                                                        `path:"sap-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_AaInterface_Sap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_AaInterface_Sap) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap) GetOrCreateEgress() *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress{}
	return t.Egress
}

// GetOrCreateFwdWholesale retrieves the value of the FwdWholesale field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap) GetOrCreateFwdWholesale() *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_FwdWholesale {
	if t.FwdWholesale != nil {
		return t.FwdWholesale
	}
	t.FwdWholesale = &NokiaConf_Configure_Service_Vprn_AaInterface_Sap_FwdWholesale{}
	return t.FwdWholesale
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap) GetOrCreateIngress() *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress{}
	return t.Ingress
}

// GetOrCreateLag retrieves the value of the Lag field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap) GetOrCreateLag() *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Lag {
	if t.Lag != nil {
		return t.Lag
	}
	t.Lag = &NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Lag{}
	return t.Lag
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Service_Vprn_AaInterface_Sap. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap) GetEgress() *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetFwdWholesale returns the value of the FwdWholesale struct pointer
// from NokiaConf_Configure_Service_Vprn_AaInterface_Sap. If the receiver or the field FwdWholesale is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap) GetFwdWholesale() *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_FwdWholesale {
	if t != nil && t.FwdWholesale != nil {
		return t.FwdWholesale
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Service_Vprn_AaInterface_Sap. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap) GetIngress() *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetLag returns the value of the Lag struct pointer
// from NokiaConf_Configure_Service_Vprn_AaInterface_Sap. If the receiver or the field Lag is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap) GetLag() *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Lag {
	if t != nil && t.Lag != nil {
		return t.Lag
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_AaInterface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_AaInterface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_AaInterface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_AaInterface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Service_Vprn_AaInterface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_AaInterface_Sap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	t.Egress.PopulateDefaults()
	t.FwdWholesale.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.Lag.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_AaInterface_Sap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SapId == nil {
		return nil, fmt.Errorf("nil value for key SapId")
	}

	return map[string]interface{}{
		"sap-id": *t.SapId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_AaInterface_Sap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_AaInterface_Sap.
func (*NokiaConf_Configure_Service_Vprn_AaInterface_Sap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress represents the /nokia-conf/configure/service/vprn/aa-interface/sap/egress YANG schema element.
type NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress struct {
	Filter *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Filter `path:"filter" module:"nokia-conf"`
	Qos    *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Qos    `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress) GetOrCreateFilter() *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress) GetOrCreateQos() *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress) GetFilter() *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress) GetQos() *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress.
func (*NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Filter represents the /nokia-conf/configure/service/vprn/aa-interface/sap/egress/filter YANG schema element.
type NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Filter struct {
	Ip *string `path:"ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Filter.
func (*NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Qos represents the /nokia-conf/configure/service/vprn/aa-interface/sap/egress/qos YANG schema element.
type NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Qos struct {
	SapEgress *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Qos_SapEgress `path:"sap-egress" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Qos) IsYANGGoStruct() {}

// GetOrCreateSapEgress retrieves the value of the SapEgress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Qos) GetOrCreateSapEgress() *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Qos_SapEgress {
	if t.SapEgress != nil {
		return t.SapEgress
	}
	t.SapEgress = &NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Qos_SapEgress{}
	return t.SapEgress
}

// GetSapEgress returns the value of the SapEgress struct pointer
// from NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Qos. If the receiver or the field SapEgress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Qos) GetSapEgress() *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Qos_SapEgress {
	if t != nil && t.SapEgress != nil {
		return t.SapEgress
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SapEgress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Qos.
func (*NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Qos_SapEgress represents the /nokia-conf/configure/service/vprn/aa-interface/sap/egress/qos/sap-egress YANG schema element.
type NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Qos_SapEgress struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Qos_SapEgress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Qos_SapEgress) IsYANGGoStruct() {}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Qos_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Qos_SapEgress) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Qos_SapEgress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Qos_SapEgress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Qos_SapEgress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Qos_SapEgress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Qos_SapEgress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Qos_SapEgress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Qos_SapEgress.
func (*NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Egress_Qos_SapEgress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_AaInterface_Sap_FwdWholesale represents the /nokia-conf/configure/service/vprn/aa-interface/sap/fwd-wholesale YANG schema element.
type NokiaConf_Configure_Service_Vprn_AaInterface_Sap_FwdWholesale struct {
	PppoeService *string `path:"pppoe-service" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_AaInterface_Sap_FwdWholesale implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_AaInterface_Sap_FwdWholesale) IsYANGGoStruct() {}

// GetPppoeService retrieves the value of the leaf PppoeService from the NokiaConf_Configure_Service_Vprn_AaInterface_Sap_FwdWholesale
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PppoeService is set, it can
// safely use t.GetPppoeService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PppoeService == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_FwdWholesale) GetPppoeService() string {
	if t == nil || t.PppoeService == nil {
		return ""
	}
	return *t.PppoeService
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_AaInterface_Sap_FwdWholesale
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_FwdWholesale) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_FwdWholesale) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_AaInterface_Sap_FwdWholesale"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_FwdWholesale) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_FwdWholesale) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_AaInterface_Sap_FwdWholesale.
func (*NokiaConf_Configure_Service_Vprn_AaInterface_Sap_FwdWholesale) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress represents the /nokia-conf/configure/service/vprn/aa-interface/sap/ingress YANG schema element.
type NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress struct {
	IpFilterPair *bool                                                         `path:"ip-filter-pair" module:"nokia-conf"`
	Qos          *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress) IsYANGGoStruct() {}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress) GetOrCreateQos() *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos{}
	return t.Qos
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress) GetQos() *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetIpFilterPair retrieves the value of the leaf IpFilterPair from the NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpFilterPair is set, it can
// safely use t.GetIpFilterPair() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpFilterPair == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress) GetIpFilterPair() bool {
	if t == nil || t.IpFilterPair == nil {
		return false
	}
	return *t.IpFilterPair
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IpFilterPair == nil {
		var v bool = false
		t.IpFilterPair = &v
	}
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress.
func (*NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos represents the /nokia-conf/configure/service/vprn/aa-interface/sap/ingress/qos YANG schema element.
type NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos struct {
	SapIngress *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos_SapIngress `path:"sap-ingress" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos) IsYANGGoStruct() {}

// GetOrCreateSapIngress retrieves the value of the SapIngress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos) GetOrCreateSapIngress() *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos_SapIngress {
	if t.SapIngress != nil {
		return t.SapIngress
	}
	t.SapIngress = &NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos_SapIngress{}
	return t.SapIngress
}

// GetSapIngress returns the value of the SapIngress struct pointer
// from NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos. If the receiver or the field SapIngress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos) GetSapIngress() *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos_SapIngress {
	if t != nil && t.SapIngress != nil {
		return t.SapIngress
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SapIngress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos.
func (*NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos_SapIngress represents the /nokia-conf/configure/service/vprn/aa-interface/sap/ingress/qos/sap-ingress YANG schema element.
type NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos_SapIngress struct {
	Overrides  *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                            `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos_SapIngress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos_SapIngress) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos_SapIngress) GetOrCreateOverrides() *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos_SapIngress. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos_SapIngress) GetOverrides() *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos_SapIngress) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos_SapIngress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos_SapIngress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos_SapIngress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos_SapIngress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos_SapIngress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos_SapIngress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos_SapIngress.
func (*NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos_SapIngress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides represents the /nokia-conf/configure/service/vprn/aa-interface/sap/ingress/qos/sap-ingress/overrides YANG schema element.
type NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides struct {
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides) IsYANGGoStruct() {
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides.
func (*NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Lag represents the /nokia-conf/configure/service/vprn/aa-interface/sap/lag YANG schema element.
type NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Lag struct {
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Lag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Lag) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Lag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Lag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Lag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Lag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Lag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Lag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Lag.
func (*NokiaConf_Configure_Service_Vprn_AaInterface_Sap_Lag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Aaa represents the /nokia-conf/configure/service/vprn/aaa YANG schema element.
type NokiaConf_Configure_Service_Vprn_Aaa struct {
	RemoteServers *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers `path:"remote-servers" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Aaa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Aaa) IsYANGGoStruct() {}

// GetOrCreateRemoteServers retrieves the value of the RemoteServers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Aaa) GetOrCreateRemoteServers() *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers {
	if t.RemoteServers != nil {
		return t.RemoteServers
	}
	t.RemoteServers = &NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers{}
	return t.RemoteServers
}

// GetRemoteServers returns the value of the RemoteServers struct pointer
// from NokiaConf_Configure_Service_Vprn_Aaa. If the receiver or the field RemoteServers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Aaa) GetRemoteServers() *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers {
	if t != nil && t.RemoteServers != nil {
		return t.RemoteServers
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Aaa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Aaa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RemoteServers.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Aaa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Aaa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Aaa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Aaa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Aaa.
func (*NokiaConf_Configure_Service_Vprn_Aaa) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers represents the /nokia-conf/configure/service/vprn/aaa/remote-servers YANG schema element.
type NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers struct {
	Radius  *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius  `path:"radius" module:"nokia-conf" yangPresence:"true"`
	Tacplus *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus `path:"tacplus" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers) IsYANGGoStruct() {}

// GetOrCreateRadius retrieves the value of the Radius field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers) GetOrCreateRadius() *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius {
	if t.Radius != nil {
		return t.Radius
	}
	t.Radius = &NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius{}
	return t.Radius
}

// GetOrCreateTacplus retrieves the value of the Tacplus field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers) GetOrCreateTacplus() *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus {
	if t.Tacplus != nil {
		return t.Tacplus
	}
	t.Tacplus = &NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus{}
	return t.Tacplus
}

// GetRadius returns the value of the Radius struct pointer
// from NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers. If the receiver or the field Radius is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers) GetRadius() *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius {
	if t != nil && t.Radius != nil {
		return t.Radius
	}
	return nil
}

// GetTacplus returns the value of the Tacplus struct pointer
// from NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers. If the receiver or the field Tacplus is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers) GetTacplus() *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus {
	if t != nil && t.Tacplus != nil {
		return t.Tacplus
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Radius.PopulateDefaults()
	t.Tacplus.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers.
func (*NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius represents the /nokia-conf/configure/service/vprn/aaa/remote-servers/radius YANG schema element.
type NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius struct {
	AccessAlgorithm           E_NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_AccessAlgorithm  `path:"access-algorithm" module:"nokia-conf"`
	Accounting                *bool                                                                        `path:"accounting" module:"nokia-conf"`
	AccountingPort            *uint32                                                                      `path:"accounting-port" module:"nokia-conf"`
	AdminState                E_NokiaTypesSros_AdminState                                                  `path:"admin-state" module:"nokia-conf"`
	ApplyGroups               []string                                                                     `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                                     `path:"apply-groups-exclude" module:"nokia-conf"`
	Authorization             *bool                                                                        `path:"authorization" module:"nokia-conf"`
	InteractiveAuthentication *bool                                                                        `path:"interactive-authentication" module:"nokia-conf"`
	Port                      *uint32                                                                      `path:"port" module:"nokia-conf"`
	Server                    map[uint32]*NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_Server `path:"server" module:"nokia-conf"`
	ServerRetry               *uint32                                                                      `path:"server-retry" module:"nokia-conf"`
	ServerTimeout             *uint32                                                                      `path:"server-timeout" module:"nokia-conf"`
	UseDefaultTemplate        *bool                                                                        `path:"use-default-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius) NewServer(Index uint32) (*NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_Server)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_Server{
		Index: &Index,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius) RenameServer(oldK, newK uint32) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Index = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius) GetOrCreateServer(Index uint32) *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_Server {

	key := Index

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius) GetServer(Index uint32) *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_Server {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius) DeleteServer(Index uint32) {
	key := Index

	delete(t.Server, key)
}

// AppendServer appends the supplied NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_Server struct to the
// list Server of NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_Server already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius) AppendServer(v *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_Server) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetAccessAlgorithm retrieves the value of the leaf AccessAlgorithm from the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessAlgorithm is set, it can
// safely use t.GetAccessAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius) GetAccessAlgorithm() E_NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_AccessAlgorithm {
	if t == nil || t.AccessAlgorithm == 0 {
		return NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_AccessAlgorithm_direct
	}
	return t.AccessAlgorithm
}

// GetAccounting retrieves the value of the leaf Accounting from the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Accounting is set, it can
// safely use t.GetAccounting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Accounting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius) GetAccounting() bool {
	if t == nil || t.Accounting == nil {
		return false
	}
	return *t.Accounting
}

// GetAccountingPort retrieves the value of the leaf AccountingPort from the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPort is set, it can
// safely use t.GetAccountingPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius) GetAccountingPort() uint32 {
	if t == nil || t.AccountingPort == nil {
		return 1813
	}
	return *t.AccountingPort
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAuthorization retrieves the value of the leaf Authorization from the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Authorization is set, it can
// safely use t.GetAuthorization() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Authorization == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius) GetAuthorization() bool {
	if t == nil || t.Authorization == nil {
		return false
	}
	return *t.Authorization
}

// GetInteractiveAuthentication retrieves the value of the leaf InteractiveAuthentication from the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InteractiveAuthentication is set, it can
// safely use t.GetInteractiveAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InteractiveAuthentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius) GetInteractiveAuthentication() bool {
	if t == nil || t.InteractiveAuthentication == nil {
		return false
	}
	return *t.InteractiveAuthentication
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius) GetPort() uint32 {
	if t == nil || t.Port == nil {
		return 1812
	}
	return *t.Port
}

// GetServerRetry retrieves the value of the leaf ServerRetry from the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServerRetry is set, it can
// safely use t.GetServerRetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServerRetry == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius) GetServerRetry() uint32 {
	if t == nil || t.ServerRetry == nil {
		return 3
	}
	return *t.ServerRetry
}

// GetServerTimeout retrieves the value of the leaf ServerTimeout from the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServerTimeout is set, it can
// safely use t.GetServerTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServerTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius) GetServerTimeout() uint32 {
	if t == nil || t.ServerTimeout == nil {
		return 3
	}
	return *t.ServerTimeout
}

// GetUseDefaultTemplate retrieves the value of the leaf UseDefaultTemplate from the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseDefaultTemplate is set, it can
// safely use t.GetUseDefaultTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseDefaultTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius) GetUseDefaultTemplate() bool {
	if t == nil || t.UseDefaultTemplate == nil {
		return false
	}
	return *t.UseDefaultTemplate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AccessAlgorithm == 0 {
		t.AccessAlgorithm = NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_AccessAlgorithm_direct
	}
	if t.Accounting == nil {
		var v bool = false
		t.Accounting = &v
	}
	if t.AccountingPort == nil {
		var v uint32 = 1813
		t.AccountingPort = &v
	}
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Authorization == nil {
		var v bool = false
		t.Authorization = &v
	}
	if t.InteractiveAuthentication == nil {
		var v bool = false
		t.InteractiveAuthentication = &v
	}
	if t.Port == nil {
		var v uint32 = 1812
		t.Port = &v
	}
	if t.ServerRetry == nil {
		var v uint32 = 3
		t.ServerRetry = &v
	}
	if t.ServerTimeout == nil {
		var v uint32 = 3
		t.ServerTimeout = &v
	}
	if t.UseDefaultTemplate == nil {
		var v bool = false
		t.UseDefaultTemplate = &v
	}
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius.
func (*NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_Server represents the /nokia-conf/configure/service/vprn/aaa/remote-servers/radius/server YANG schema element.
type NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_Server struct {
	Address            *string  `path:"address" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Index              *uint32  `path:"index" module:"nokia-conf"`
	Secret             *string  `path:"secret" module:"nokia-conf"`
	TlsClientProfile   *string  `path:"tls-client-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_Server) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_Server) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_Server) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_Server) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_Server) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetSecret retrieves the value of the leaf Secret from the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Secret is set, it can
// safely use t.GetSecret() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Secret == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_Server) GetSecret() string {
	if t == nil || t.Secret == nil {
		return ""
	}
	return *t.Secret
}

// GetTlsClientProfile retrieves the value of the leaf TlsClientProfile from the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlsClientProfile is set, it can
// safely use t.GetTlsClientProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlsClientProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_Server) GetTlsClientProfile() string {
	if t == nil || t.TlsClientProfile == nil {
		return ""
	}
	return *t.TlsClientProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_Server struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_Server.
func (*NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Radius_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus represents the /nokia-conf/configure/service/vprn/aaa/remote-servers/tacplus YANG schema element.
type NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus struct {
	Accounting                *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Accounting        `path:"accounting" module:"nokia-conf" yangPresence:"true"`
	AdminState                E_NokiaTypesSros_AdminState                                                   `path:"admin-state" module:"nokia-conf"`
	ApplyGroups               []string                                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Authorization             *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization     `path:"authorization" module:"nokia-conf" yangPresence:"true"`
	InteractiveAuthentication *bool                                                                         `path:"interactive-authentication" module:"nokia-conf"`
	PrivLvlMap                *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap        `path:"priv-lvl-map" module:"nokia-conf"`
	Server                    map[uint32]*NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Server `path:"server" module:"nokia-conf"`
	ServerTimeout             *uint32                                                                       `path:"server-timeout" module:"nokia-conf"`
	UseDefaultTemplate        *bool                                                                         `path:"use-default-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus) NewServer(Index uint32) (*NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Server)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Server{
		Index: &Index,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus) RenameServer(oldK, newK uint32) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Index = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus) GetOrCreateServer(Index uint32) *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Server {

	key := Index

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus) GetServer(Index uint32) *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Server {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus) DeleteServer(Index uint32) {
	key := Index

	delete(t.Server, key)
}

// AppendServer appends the supplied NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Server struct to the
// list Server of NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Server already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus) AppendServer(v *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Server) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetOrCreateAccounting retrieves the value of the Accounting field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus) GetOrCreateAccounting() *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Accounting {
	if t.Accounting != nil {
		return t.Accounting
	}
	t.Accounting = &NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Accounting{}
	return t.Accounting
}

// GetOrCreateAuthorization retrieves the value of the Authorization field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus) GetOrCreateAuthorization() *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization {
	if t.Authorization != nil {
		return t.Authorization
	}
	t.Authorization = &NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization{}
	return t.Authorization
}

// GetOrCreatePrivLvlMap retrieves the value of the PrivLvlMap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus) GetOrCreatePrivLvlMap() *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap {
	if t.PrivLvlMap != nil {
		return t.PrivLvlMap
	}
	t.PrivLvlMap = &NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap{}
	return t.PrivLvlMap
}

// GetAccounting returns the value of the Accounting struct pointer
// from NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus. If the receiver or the field Accounting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus) GetAccounting() *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Accounting {
	if t != nil && t.Accounting != nil {
		return t.Accounting
	}
	return nil
}

// GetAuthorization returns the value of the Authorization struct pointer
// from NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus. If the receiver or the field Authorization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus) GetAuthorization() *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization {
	if t != nil && t.Authorization != nil {
		return t.Authorization
	}
	return nil
}

// GetPrivLvlMap returns the value of the PrivLvlMap struct pointer
// from NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus. If the receiver or the field PrivLvlMap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus) GetPrivLvlMap() *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap {
	if t != nil && t.PrivLvlMap != nil {
		return t.PrivLvlMap
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetInteractiveAuthentication retrieves the value of the leaf InteractiveAuthentication from the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InteractiveAuthentication is set, it can
// safely use t.GetInteractiveAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InteractiveAuthentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus) GetInteractiveAuthentication() bool {
	if t == nil || t.InteractiveAuthentication == nil {
		return false
	}
	return *t.InteractiveAuthentication
}

// GetServerTimeout retrieves the value of the leaf ServerTimeout from the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServerTimeout is set, it can
// safely use t.GetServerTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServerTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus) GetServerTimeout() uint32 {
	if t == nil || t.ServerTimeout == nil {
		return 3
	}
	return *t.ServerTimeout
}

// GetUseDefaultTemplate retrieves the value of the leaf UseDefaultTemplate from the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseDefaultTemplate is set, it can
// safely use t.GetUseDefaultTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseDefaultTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus) GetUseDefaultTemplate() bool {
	if t == nil || t.UseDefaultTemplate == nil {
		return true
	}
	return *t.UseDefaultTemplate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.InteractiveAuthentication == nil {
		var v bool = false
		t.InteractiveAuthentication = &v
	}
	if t.ServerTimeout == nil {
		var v uint32 = 3
		t.ServerTimeout = &v
	}
	if t.UseDefaultTemplate == nil {
		var v bool = true
		t.UseDefaultTemplate = &v
	}
	t.Accounting.PopulateDefaults()
	t.Authorization.PopulateDefaults()
	t.PrivLvlMap.PopulateDefaults()
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus.
func (*NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Accounting represents the /nokia-conf/configure/service/vprn/aaa/remote-servers/tacplus/accounting YANG schema element.
type NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Accounting struct {
	RecordType E_NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Accounting_RecordType `path:"record-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Accounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Accounting) IsYANGGoStruct() {}

// GetRecordType retrieves the value of the leaf RecordType from the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Accounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RecordType is set, it can
// safely use t.GetRecordType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RecordType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Accounting) GetRecordType() E_NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Accounting_RecordType {
	if t == nil || t.RecordType == 0 {
		return NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Accounting_RecordType_stop_only
	}
	return t.RecordType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Accounting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Accounting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RecordType == 0 {
		t.RecordType = NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Accounting_RecordType_stop_only
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Accounting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Accounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Accounting) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Accounting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Accounting.
func (*NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Accounting) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization represents the /nokia-conf/configure/service/vprn/aaa/remote-servers/tacplus/authorization YANG schema element.
type NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization struct {
	RequestFormat *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat `path:"request-format" module:"nokia-conf"`
	UsePrivLvl    *bool                                                                                   `path:"use-priv-lvl" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization) IsYANGGoStruct() {}

// GetOrCreateRequestFormat retrieves the value of the RequestFormat field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization) GetOrCreateRequestFormat() *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat {
	if t.RequestFormat != nil {
		return t.RequestFormat
	}
	t.RequestFormat = &NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat{}
	return t.RequestFormat
}

// GetRequestFormat returns the value of the RequestFormat struct pointer
// from NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization. If the receiver or the field RequestFormat is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization) GetRequestFormat() *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat {
	if t != nil && t.RequestFormat != nil {
		return t.RequestFormat
	}
	return nil
}

// GetUsePrivLvl retrieves the value of the leaf UsePrivLvl from the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UsePrivLvl is set, it can
// safely use t.GetUsePrivLvl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UsePrivLvl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization) GetUsePrivLvl() bool {
	if t == nil || t.UsePrivLvl == nil {
		return false
	}
	return *t.UsePrivLvl
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UsePrivLvl == nil {
		var v bool = false
		t.UsePrivLvl = &v
	}
	t.RequestFormat.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization.
func (*NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat represents the /nokia-conf/configure/service/vprn/aaa/remote-servers/tacplus/authorization/request-format YANG schema element.
type NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat struct {
	AccessOperationCmd []E_NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat_AccessOperationCmd `path:"access-operation-cmd" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat) IsYANGGoStruct() {
}

// GetAccessOperationCmd retrieves the value of the leaf AccessOperationCmd from the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessOperationCmd is set, it can
// safely use t.GetAccessOperationCmd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessOperationCmd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat) GetAccessOperationCmd() []E_NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat_AccessOperationCmd {
	if t == nil || t.AccessOperationCmd == nil {
		return nil
	}
	return t.AccessOperationCmd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat.
func (*NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap represents the /nokia-conf/configure/service/vprn/aaa/remote-servers/tacplus/priv-lvl-map YANG schema element.
type NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap struct {
	PrivLvl map[uint32]*NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl `path:"priv-lvl" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap) IsYANGGoStruct() {}

// NewPrivLvl creates a new entry in the PrivLvl list of the
// NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap) NewPrivLvl(Level uint32) (*NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrivLvl == nil {
		t.PrivLvl = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl)
	}

	key := Level

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrivLvl[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrivLvl", key)
	}

	t.PrivLvl[key] = &NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl{
		Level: &Level,
	}

	return t.PrivLvl[key], nil
}

// RenamePrivLvl renames an entry in the list PrivLvl within
// the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap) RenamePrivLvl(oldK, newK uint32) error {
	if _, ok := t.PrivLvl[newK]; ok {
		return fmt.Errorf("key %v already exists in PrivLvl", newK)
	}

	e, ok := t.PrivLvl[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrivLvl", oldK)
	}
	e.Level = &newK

	t.PrivLvl[newK] = e
	delete(t.PrivLvl, oldK)
	return nil
}

// GetOrCreatePrivLvl retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap) GetOrCreatePrivLvl(Level uint32) *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl {

	key := Level

	if v, ok := t.PrivLvl[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrivLvl(Level)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrivLvl got unexpected error: %v", err))
	}
	return v
}

// GetPrivLvl retrieves the value with the specified key from
// the PrivLvl map field of NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap) GetPrivLvl(Level uint32) *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl {

	if t == nil {
		return nil
	}

	key := Level

	if lm, ok := t.PrivLvl[key]; ok {
		return lm
	}
	return nil
}

// DeletePrivLvl deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap) DeletePrivLvl(Level uint32) {
	key := Level

	delete(t.PrivLvl, key)
}

// AppendPrivLvl appends the supplied NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl struct to the
// list PrivLvl of NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap) AppendPrivLvl(v *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl) error {
	if v.Level == nil {
		return fmt.Errorf("invalid nil key received for Level")
	}

	key := *v.Level

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrivLvl == nil {
		t.PrivLvl = make(map[uint32]*NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl)
	}

	if _, ok := t.PrivLvl[key]; ok {
		return fmt.Errorf("duplicate key for list PrivLvl %v", key)
	}

	t.PrivLvl[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.PrivLvl {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap.
func (*NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl represents the /nokia-conf/configure/service/vprn/aaa/remote-servers/tacplus/priv-lvl-map/priv-lvl YANG schema element.
type NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Level              *uint32  `path:"level" module:"nokia-conf"`
	UserProfileName    *string  `path:"user-profile-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl) IsYANGGoStruct() {
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl) GetLevel() uint32 {
	if t == nil || t.Level == nil {
		return 0
	}
	return *t.Level
}

// GetUserProfileName retrieves the value of the leaf UserProfileName from the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserProfileName is set, it can
// safely use t.GetUserProfileName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserProfileName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl) GetUserProfileName() string {
	if t == nil || t.UserProfileName == nil {
		return ""
	}
	return *t.UserProfileName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Level == nil {
		return nil, fmt.Errorf("nil value for key Level")
	}

	return map[string]interface{}{
		"level": *t.Level,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl.
func (*NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Server represents the /nokia-conf/configure/service/vprn/aaa/remote-servers/tacplus/server YANG schema element.
type NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Server struct {
	Address            *string  `path:"address" module:"nokia-conf"`
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Index              *uint32  `path:"index" module:"nokia-conf"`
	Port               *int32   `path:"port" module:"nokia-conf"`
	Secret             *string  `path:"secret" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Server) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Server) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Server) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Server) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Server) GetIndex() uint32 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Server) GetPort() int32 {
	if t == nil || t.Port == nil {
		return 49
	}
	return *t.Port
}

// GetSecret retrieves the value of the leaf Secret from the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Secret is set, it can
// safely use t.GetSecret() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Secret == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Server) GetSecret() string {
	if t == nil || t.Secret == nil {
		return ""
	}
	return *t.Secret
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Port == nil {
		var v int32 = 49
		t.Port = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Server struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Server.
func (*NokiaConf_Configure_Service_Vprn_Aaa_RemoteServers_Tacplus_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_AarpInterface represents the /nokia-conf/configure/service/vprn/aarp-interface YANG schema element.
type NokiaConf_Configure_Service_Vprn_AarpInterface struct {
	AdminState         E_NokiaTypesSros_AdminState                                         `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                             `path:"description" module:"nokia-conf"`
	InterfaceName      *string                                                             `path:"interface-name" module:"nokia-conf"`
	IpMtu              *uint32                                                             `path:"ip-mtu" module:"nokia-conf"`
	SpokeSdp           map[string]*NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp `path:"spoke-sdp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_AarpInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_AarpInterface) IsYANGGoStruct() {}

// NewSpokeSdp creates a new entry in the SpokeSdp list of the
// NokiaConf_Configure_Service_Vprn_AarpInterface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface) NewSpokeSdp(SdpBindId string) (*NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp)
	}

	key := SdpBindId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SpokeSdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SpokeSdp", key)
	}

	t.SpokeSdp[key] = &NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp{
		SdpBindId: &SdpBindId,
	}

	return t.SpokeSdp[key], nil
}

// RenameSpokeSdp renames an entry in the list SpokeSdp within
// the NokiaConf_Configure_Service_Vprn_AarpInterface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface) RenameSpokeSdp(oldK, newK string) error {
	if _, ok := t.SpokeSdp[newK]; ok {
		return fmt.Errorf("key %v already exists in SpokeSdp", newK)
	}

	e, ok := t.SpokeSdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SpokeSdp", oldK)
	}
	e.SdpBindId = &newK

	t.SpokeSdp[newK] = e
	delete(t.SpokeSdp, oldK)
	return nil
}

// GetOrCreateSpokeSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_AarpInterface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface) GetOrCreateSpokeSdp(SdpBindId string) *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp {

	key := SdpBindId

	if v, ok := t.SpokeSdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSpokeSdp(SdpBindId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSpokeSdp got unexpected error: %v", err))
	}
	return v
}

// GetSpokeSdp retrieves the value with the specified key from
// the SpokeSdp map field of NokiaConf_Configure_Service_Vprn_AarpInterface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface) GetSpokeSdp(SdpBindId string) *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp {

	if t == nil {
		return nil
	}

	key := SdpBindId

	if lm, ok := t.SpokeSdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteSpokeSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_AarpInterface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface) DeleteSpokeSdp(SdpBindId string) {
	key := SdpBindId

	delete(t.SpokeSdp, key)
}

// AppendSpokeSdp appends the supplied NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp struct to the
// list SpokeSdp of NokiaConf_Configure_Service_Vprn_AarpInterface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface) AppendSpokeSdp(v *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp) error {
	if v.SdpBindId == nil {
		return fmt.Errorf("invalid nil key received for SdpBindId")
	}

	key := *v.SdpBindId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp)
	}

	if _, ok := t.SpokeSdp[key]; ok {
		return fmt.Errorf("duplicate key for list SpokeSdp %v", key)
	}

	t.SpokeSdp[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_AarpInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_AarpInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_AarpInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_AarpInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Service_Vprn_AarpInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetIpMtu retrieves the value of the leaf IpMtu from the NokiaConf_Configure_Service_Vprn_AarpInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpMtu is set, it can
// safely use t.GetIpMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface) GetIpMtu() uint32 {
	if t == nil || t.IpMtu == nil {
		return 0
	}
	return *t.IpMtu
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_AarpInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	for _, e := range t.SpokeSdp {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_AarpInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_AarpInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_AarpInterface.
func (*NokiaConf_Configure_Service_Vprn_AarpInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp represents the /nokia-conf/configure/service/vprn/aarp-interface/spoke-sdp YANG schema element.
type NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp struct {
	Aarp               *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Aarp    `path:"aarp" module:"nokia-conf" yangPresence:"true"`
	AdminState         E_NokiaTypesSros_AdminState                                      `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                         `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                         `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                          `path:"description" module:"nokia-conf"`
	Egress             *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress  `path:"egress" module:"nokia-conf"`
	Ingress            *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress `path:"ingress" module:"nokia-conf"`
	SdpBindId          *string                                                          `path:"sdp-bind-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp) IsYANGGoStruct() {}

// GetOrCreateAarp retrieves the value of the Aarp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp) GetOrCreateAarp() *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Aarp {
	if t.Aarp != nil {
		return t.Aarp
	}
	t.Aarp = &NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Aarp{}
	return t.Aarp
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp) GetOrCreateEgress() *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress{}
	return t.Egress
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp) GetOrCreateIngress() *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress{}
	return t.Ingress
}

// GetAarp returns the value of the Aarp struct pointer
// from NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp. If the receiver or the field Aarp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp) GetAarp() *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Aarp {
	if t != nil && t.Aarp != nil {
		return t.Aarp
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp) GetEgress() *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp) GetIngress() *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	t.Aarp.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SdpBindId == nil {
		return nil, fmt.Errorf("nil value for key SdpBindId")
	}

	return map[string]interface{}{
		"sdp-bind-id": *t.SdpBindId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp.
func (*NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Aarp represents the /nokia-conf/configure/service/vprn/aarp-interface/spoke-sdp/aarp YANG schema element.
type NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Aarp struct {
	Id   *uint32                                      `path:"id" module:"nokia-conf"`
	Type E_NokiaTypesServices_L3BsxAarpServiceRefType `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Aarp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Aarp) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Aarp) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Aarp) GetType() E_NokiaTypesServices_L3BsxAarpServiceRefType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Aarp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Aarp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Aarp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Aarp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Aarp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Aarp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Aarp.
func (*NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Aarp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress represents the /nokia-conf/configure/service/vprn/aarp-interface/spoke-sdp/egress YANG schema element.
type NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress struct {
	Filter  *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress_Filter `path:"filter" module:"nokia-conf"`
	VcLabel *uint32                                                                `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress) GetOrCreateFilter() *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress_Filter{}
	return t.Filter
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress) GetFilter() *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress.
func (*NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress_Filter represents the /nokia-conf/configure/service/vprn/aarp-interface/spoke-sdp/egress/filter YANG schema element.
type NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress_Filter struct {
	Ip *string `path:"ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress_Filter.
func (*NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Egress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress represents the /nokia-conf/configure/service/vprn/aarp-interface/spoke-sdp/ingress YANG schema element.
type NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress struct {
	Filter  *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress_Filter `path:"filter" module:"nokia-conf"`
	VcLabel *uint32                                                                 `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress_Filter{}
	return t.Filter
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress) GetFilter() *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress.
func (*NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress_Filter represents the /nokia-conf/configure/service/vprn/aarp-interface/spoke-sdp/ingress/filter YANG schema element.
type NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress_Filter struct {
	Ip *string `path:"ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress_Filter.
func (*NokiaConf_Configure_Service_Vprn_AarpInterface_SpokeSdp_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Aggregates represents the /nokia-conf/configure/service/vprn/aggregates YANG schema element.
type NokiaConf_Configure_Service_Vprn_Aggregates struct {
	Aggregate          map[string]*NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate `path:"aggregate" module:"nokia-conf"`
	ApplyGroups        []string                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Aggregates implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Aggregates) IsYANGGoStruct() {}

// NewAggregate creates a new entry in the Aggregate list of the
// NokiaConf_Configure_Service_Vprn_Aggregates struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates) NewAggregate(IpPrefix string) (*NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Aggregate == nil {
		t.Aggregate = make(map[string]*NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Aggregate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Aggregate", key)
	}

	t.Aggregate[key] = &NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate{
		IpPrefix: &IpPrefix,
	}

	return t.Aggregate[key], nil
}

// RenameAggregate renames an entry in the list Aggregate within
// the NokiaConf_Configure_Service_Vprn_Aggregates struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates) RenameAggregate(oldK, newK string) error {
	if _, ok := t.Aggregate[newK]; ok {
		return fmt.Errorf("key %v already exists in Aggregate", newK)
	}

	e, ok := t.Aggregate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Aggregate", oldK)
	}
	e.IpPrefix = &newK

	t.Aggregate[newK] = e
	delete(t.Aggregate, oldK)
	return nil
}

// GetOrCreateAggregate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Aggregates. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates) GetOrCreateAggregate(IpPrefix string) *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate {

	key := IpPrefix

	if v, ok := t.Aggregate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAggregate(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAggregate got unexpected error: %v", err))
	}
	return v
}

// GetAggregate retrieves the value with the specified key from
// the Aggregate map field of NokiaConf_Configure_Service_Vprn_Aggregates. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates) GetAggregate(IpPrefix string) *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.Aggregate[key]; ok {
		return lm
	}
	return nil
}

// DeleteAggregate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Aggregates. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates) DeleteAggregate(IpPrefix string) {
	key := IpPrefix

	delete(t.Aggregate, key)
}

// AppendAggregate appends the supplied NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate struct to the
// list Aggregate of NokiaConf_Configure_Service_Vprn_Aggregates. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates) AppendAggregate(v *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Aggregate == nil {
		t.Aggregate = make(map[string]*NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate)
	}

	if _, ok := t.Aggregate[key]; ok {
		return fmt.Errorf("duplicate key for list Aggregate %v", key)
	}

	t.Aggregate[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Aggregates
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Aggregates
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Aggregates
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Aggregate {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Aggregates"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Aggregates.
func (*NokiaConf_Configure_Service_Vprn_Aggregates) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate represents the /nokia-conf/configure/service/vprn/aggregates/aggregate YANG schema element.
type NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate struct {
	Aggregator                  *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Aggregator `path:"aggregator" module:"nokia-conf"`
	ApplyGroups                 []string                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude          []string                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	AsSet                       *bool                                                             `path:"as-set" module:"nokia-conf"`
	Blackhole                   *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Blackhole  `path:"blackhole" module:"nokia-conf" yangPresence:"true"`
	Community                   []string                                                          `path:"community" module:"nokia-conf"`
	Description                 *string                                                           `path:"description" module:"nokia-conf"`
	DiscardComponentCommunities *bool                                                             `path:"discard-component-communities" module:"nokia-conf"`
	Indirect                    *string                                                           `path:"indirect" module:"nokia-conf"`
	IpPrefix                    *string                                                           `path:"ip-prefix" module:"nokia-conf"`
	LocalPreference             *int64                                                            `path:"local-preference" module:"nokia-conf"`
	Policy                      *string                                                           `path:"policy" module:"nokia-conf"`
	SummaryOnly                 *bool                                                             `path:"summary-only" module:"nokia-conf"`
	TunnelGroup                 *uint32                                                           `path:"tunnel-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate) IsYANGGoStruct() {}

// GetOrCreateAggregator retrieves the value of the Aggregator field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate) GetOrCreateAggregator() *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Aggregator {
	if t.Aggregator != nil {
		return t.Aggregator
	}
	t.Aggregator = &NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Aggregator{}
	return t.Aggregator
}

// GetOrCreateBlackhole retrieves the value of the Blackhole field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate) GetOrCreateBlackhole() *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Blackhole {
	if t.Blackhole != nil {
		return t.Blackhole
	}
	t.Blackhole = &NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Blackhole{}
	return t.Blackhole
}

// GetAggregator returns the value of the Aggregator struct pointer
// from NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate. If the receiver or the field Aggregator is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate) GetAggregator() *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Aggregator {
	if t != nil && t.Aggregator != nil {
		return t.Aggregator
	}
	return nil
}

// GetBlackhole returns the value of the Blackhole struct pointer
// from NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate. If the receiver or the field Blackhole is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate) GetBlackhole() *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Blackhole {
	if t != nil && t.Blackhole != nil {
		return t.Blackhole
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAsSet retrieves the value of the leaf AsSet from the NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsSet is set, it can
// safely use t.GetAsSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate) GetAsSet() bool {
	if t == nil || t.AsSet == nil {
		return false
	}
	return *t.AsSet
}

// GetCommunity retrieves the value of the leaf Community from the NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Community is set, it can
// safely use t.GetCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Community == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate) GetCommunity() []string {
	if t == nil || t.Community == nil {
		return nil
	}
	return t.Community
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDiscardComponentCommunities retrieves the value of the leaf DiscardComponentCommunities from the NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiscardComponentCommunities is set, it can
// safely use t.GetDiscardComponentCommunities() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiscardComponentCommunities == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate) GetDiscardComponentCommunities() bool {
	if t == nil || t.DiscardComponentCommunities == nil {
		return false
	}
	return *t.DiscardComponentCommunities
}

// GetIndirect retrieves the value of the leaf Indirect from the NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Indirect is set, it can
// safely use t.GetIndirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Indirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate) GetIndirect() string {
	if t == nil || t.Indirect == nil {
		return ""
	}
	return *t.Indirect
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetLocalPreference retrieves the value of the leaf LocalPreference from the NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPreference is set, it can
// safely use t.GetLocalPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate) GetLocalPreference() int64 {
	if t == nil || t.LocalPreference == nil {
		return 0
	}
	return *t.LocalPreference
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// GetSummaryOnly retrieves the value of the leaf SummaryOnly from the NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SummaryOnly is set, it can
// safely use t.GetSummaryOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SummaryOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate) GetSummaryOnly() bool {
	if t == nil || t.SummaryOnly == nil {
		return false
	}
	return *t.SummaryOnly
}

// GetTunnelGroup retrieves the value of the leaf TunnelGroup from the NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelGroup is set, it can
// safely use t.GetTunnelGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate) GetTunnelGroup() uint32 {
	if t == nil || t.TunnelGroup == nil {
		return 0
	}
	return *t.TunnelGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AsSet == nil {
		var v bool = false
		t.AsSet = &v
	}
	if t.DiscardComponentCommunities == nil {
		var v bool = false
		t.DiscardComponentCommunities = &v
	}
	if t.SummaryOnly == nil {
		var v bool = false
		t.SummaryOnly = &v
	}
	t.Aggregator.PopulateDefaults()
	t.Blackhole.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate.
func (*NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Aggregator represents the /nokia-conf/configure/service/vprn/aggregates/aggregate/aggregator YANG schema element.
type NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Aggregator struct {
	Address  *string `path:"address" module:"nokia-conf"`
	AsNumber *uint32 `path:"as-number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Aggregator implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Aggregator) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Aggregator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Aggregator) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAsNumber retrieves the value of the leaf AsNumber from the NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Aggregator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsNumber is set, it can
// safely use t.GetAsNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Aggregator) GetAsNumber() uint32 {
	if t == nil || t.AsNumber == nil {
		return 0
	}
	return *t.AsNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Aggregator
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Aggregator) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Aggregator) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Aggregator"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Aggregator) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Aggregator) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Aggregator.
func (*NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Aggregator) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Blackhole represents the /nokia-conf/configure/service/vprn/aggregates/aggregate/blackhole YANG schema element.
type NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Blackhole struct {
	GenerateIcmp *bool `path:"generate-icmp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Blackhole implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Blackhole) IsYANGGoStruct() {}

// GetGenerateIcmp retrieves the value of the leaf GenerateIcmp from the NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Blackhole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GenerateIcmp is set, it can
// safely use t.GetGenerateIcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GenerateIcmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Blackhole) GetGenerateIcmp() bool {
	if t == nil || t.GenerateIcmp == nil {
		return false
	}
	return *t.GenerateIcmp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Blackhole
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Blackhole) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.GenerateIcmp == nil {
		var v bool = false
		t.GenerateIcmp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Blackhole) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Blackhole"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Blackhole) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Blackhole) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Blackhole.
func (*NokiaConf_Configure_Service_Vprn_Aggregates_Aggregate_Blackhole) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_AutoBindTunnel represents the /nokia-conf/configure/service/vprn/auto-bind-tunnel YANG schema element.
type NokiaConf_Configure_Service_Vprn_AutoBindTunnel struct {
	AllowFlexAlgoFallback      *bool                                                             `path:"allow-flex-algo-fallback" module:"nokia-conf"`
	ApplyGroups                []string                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude         []string                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	Ecmp                       *uint32                                                           `path:"ecmp" module:"nokia-conf"`
	EnforceStrictTunnelTagging *bool                                                             `path:"enforce-strict-tunnel-tagging" module:"nokia-conf"`
	Resolution                 E_NokiaTypesServices_ResolveStatus                                `path:"resolution" module:"nokia-conf"`
	ResolutionFilter           *NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter `path:"resolution-filter" module:"nokia-conf"`
	WeightedEcmp               *bool                                                             `path:"weighted-ecmp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_AutoBindTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_AutoBindTunnel) IsYANGGoStruct() {}

// GetOrCreateResolutionFilter retrieves the value of the ResolutionFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_AutoBindTunnel) GetOrCreateResolutionFilter() *NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter {
	if t.ResolutionFilter != nil {
		return t.ResolutionFilter
	}
	t.ResolutionFilter = &NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter{}
	return t.ResolutionFilter
}

// GetResolutionFilter returns the value of the ResolutionFilter struct pointer
// from NokiaConf_Configure_Service_Vprn_AutoBindTunnel. If the receiver or the field ResolutionFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_AutoBindTunnel) GetResolutionFilter() *NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter {
	if t != nil && t.ResolutionFilter != nil {
		return t.ResolutionFilter
	}
	return nil
}

// GetAllowFlexAlgoFallback retrieves the value of the leaf AllowFlexAlgoFallback from the NokiaConf_Configure_Service_Vprn_AutoBindTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowFlexAlgoFallback is set, it can
// safely use t.GetAllowFlexAlgoFallback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowFlexAlgoFallback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AutoBindTunnel) GetAllowFlexAlgoFallback() bool {
	if t == nil || t.AllowFlexAlgoFallback == nil {
		return false
	}
	return *t.AllowFlexAlgoFallback
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_AutoBindTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AutoBindTunnel) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_AutoBindTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AutoBindTunnel) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEcmp retrieves the value of the leaf Ecmp from the NokiaConf_Configure_Service_Vprn_AutoBindTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ecmp is set, it can
// safely use t.GetEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ecmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AutoBindTunnel) GetEcmp() uint32 {
	if t == nil || t.Ecmp == nil {
		return 1
	}
	return *t.Ecmp
}

// GetEnforceStrictTunnelTagging retrieves the value of the leaf EnforceStrictTunnelTagging from the NokiaConf_Configure_Service_Vprn_AutoBindTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnforceStrictTunnelTagging is set, it can
// safely use t.GetEnforceStrictTunnelTagging() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnforceStrictTunnelTagging == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AutoBindTunnel) GetEnforceStrictTunnelTagging() bool {
	if t == nil || t.EnforceStrictTunnelTagging == nil {
		return false
	}
	return *t.EnforceStrictTunnelTagging
}

// GetResolution retrieves the value of the leaf Resolution from the NokiaConf_Configure_Service_Vprn_AutoBindTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Resolution is set, it can
// safely use t.GetResolution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Resolution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AutoBindTunnel) GetResolution() E_NokiaTypesServices_ResolveStatus {
	if t == nil || t.Resolution == 0 {
		return NokiaTypesServices_ResolveStatus_none
	}
	return t.Resolution
}

// GetWeightedEcmp retrieves the value of the leaf WeightedEcmp from the NokiaConf_Configure_Service_Vprn_AutoBindTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WeightedEcmp is set, it can
// safely use t.GetWeightedEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WeightedEcmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AutoBindTunnel) GetWeightedEcmp() bool {
	if t == nil || t.WeightedEcmp == nil {
		return false
	}
	return *t.WeightedEcmp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_AutoBindTunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_AutoBindTunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowFlexAlgoFallback == nil {
		var v bool = false
		t.AllowFlexAlgoFallback = &v
	}
	if t.Ecmp == nil {
		var v uint32 = 1
		t.Ecmp = &v
	}
	if t.EnforceStrictTunnelTagging == nil {
		var v bool = false
		t.EnforceStrictTunnelTagging = &v
	}
	if t.Resolution == 0 {
		t.Resolution = NokiaTypesServices_ResolveStatus_none
	}
	if t.WeightedEcmp == nil {
		var v bool = false
		t.WeightedEcmp = &v
	}
	t.ResolutionFilter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AutoBindTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_AutoBindTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AutoBindTunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_AutoBindTunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_AutoBindTunnel.
func (*NokiaConf_Configure_Service_Vprn_AutoBindTunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter represents the /nokia-conf/configure/service/vprn/auto-bind-tunnel/resolution-filter YANG schema element.
type NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter struct {
	Bgp           *bool `path:"bgp" module:"nokia-conf"`
	Gre           *bool `path:"gre" module:"nokia-conf"`
	Ldp           *bool `path:"ldp" module:"nokia-conf"`
	MplsFwdPolicy *bool `path:"mpls-fwd-policy" module:"nokia-conf"`
	RibApi        *bool `path:"rib-api" module:"nokia-conf"`
	Rsvp          *bool `path:"rsvp" module:"nokia-conf"`
	SrIsis        *bool `path:"sr-isis" module:"nokia-conf"`
	SrOspf        *bool `path:"sr-ospf" module:"nokia-conf"`
	SrOspf3       *bool `path:"sr-ospf3" module:"nokia-conf"`
	SrPolicy      *bool `path:"sr-policy" module:"nokia-conf"`
	SrTe          *bool `path:"sr-te" module:"nokia-conf"`
	Udp           *bool `path:"udp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter) IsYANGGoStruct() {}

// GetBgp retrieves the value of the leaf Bgp from the NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bgp is set, it can
// safely use t.GetBgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter) GetBgp() bool {
	if t == nil || t.Bgp == nil {
		return true
	}
	return *t.Bgp
}

// GetGre retrieves the value of the leaf Gre from the NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gre is set, it can
// safely use t.GetGre() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gre == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter) GetGre() bool {
	if t == nil || t.Gre == nil {
		return false
	}
	return *t.Gre
}

// GetLdp retrieves the value of the leaf Ldp from the NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ldp is set, it can
// safely use t.GetLdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ldp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter) GetLdp() bool {
	if t == nil || t.Ldp == nil {
		return false
	}
	return *t.Ldp
}

// GetMplsFwdPolicy retrieves the value of the leaf MplsFwdPolicy from the NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsFwdPolicy is set, it can
// safely use t.GetMplsFwdPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsFwdPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter) GetMplsFwdPolicy() bool {
	if t == nil || t.MplsFwdPolicy == nil {
		return false
	}
	return *t.MplsFwdPolicy
}

// GetRibApi retrieves the value of the leaf RibApi from the NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RibApi is set, it can
// safely use t.GetRibApi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RibApi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter) GetRibApi() bool {
	if t == nil || t.RibApi == nil {
		return false
	}
	return *t.RibApi
}

// GetRsvp retrieves the value of the leaf Rsvp from the NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rsvp is set, it can
// safely use t.GetRsvp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rsvp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter) GetRsvp() bool {
	if t == nil || t.Rsvp == nil {
		return false
	}
	return *t.Rsvp
}

// GetSrIsis retrieves the value of the leaf SrIsis from the NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrIsis is set, it can
// safely use t.GetSrIsis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrIsis == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter) GetSrIsis() bool {
	if t == nil || t.SrIsis == nil {
		return false
	}
	return *t.SrIsis
}

// GetSrOspf retrieves the value of the leaf SrOspf from the NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrOspf is set, it can
// safely use t.GetSrOspf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrOspf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter) GetSrOspf() bool {
	if t == nil || t.SrOspf == nil {
		return false
	}
	return *t.SrOspf
}

// GetSrOspf3 retrieves the value of the leaf SrOspf3 from the NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrOspf3 is set, it can
// safely use t.GetSrOspf3() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrOspf3 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter) GetSrOspf3() bool {
	if t == nil || t.SrOspf3 == nil {
		return false
	}
	return *t.SrOspf3
}

// GetSrPolicy retrieves the value of the leaf SrPolicy from the NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrPolicy is set, it can
// safely use t.GetSrPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter) GetSrPolicy() bool {
	if t == nil || t.SrPolicy == nil {
		return false
	}
	return *t.SrPolicy
}

// GetSrTe retrieves the value of the leaf SrTe from the NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrTe is set, it can
// safely use t.GetSrTe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrTe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter) GetSrTe() bool {
	if t == nil || t.SrTe == nil {
		return false
	}
	return *t.SrTe
}

// GetUdp retrieves the value of the leaf Udp from the NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Udp is set, it can
// safely use t.GetUdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Udp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter) GetUdp() bool {
	if t == nil || t.Udp == nil {
		return false
	}
	return *t.Udp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Bgp == nil {
		var v bool = true
		t.Bgp = &v
	}
	if t.Gre == nil {
		var v bool = false
		t.Gre = &v
	}
	if t.Ldp == nil {
		var v bool = false
		t.Ldp = &v
	}
	if t.MplsFwdPolicy == nil {
		var v bool = false
		t.MplsFwdPolicy = &v
	}
	if t.RibApi == nil {
		var v bool = false
		t.RibApi = &v
	}
	if t.Rsvp == nil {
		var v bool = false
		t.Rsvp = &v
	}
	if t.SrIsis == nil {
		var v bool = false
		t.SrIsis = &v
	}
	if t.SrOspf == nil {
		var v bool = false
		t.SrOspf = &v
	}
	if t.SrOspf3 == nil {
		var v bool = false
		t.SrOspf3 = &v
	}
	if t.SrPolicy == nil {
		var v bool = false
		t.SrPolicy = &v
	}
	if t.SrTe == nil {
		var v bool = false
		t.SrTe = &v
	}
	if t.Udp == nil {
		var v bool = false
		t.Udp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter.
func (*NokiaConf_Configure_Service_Vprn_AutoBindTunnel_ResolutionFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_Bgp represents the /nokia-conf/configure/service/vprn/bgp YANG schema element.
type NokiaConf_Configure_Service_Vprn_Bgp struct {
	AdminState              E_NokiaTypesSros_AdminState                                   `path:"admin-state" module:"nokia-conf"`
	AdvertiseInactive       *bool                                                         `path:"advertise-inactive" module:"nokia-conf"`
	AdvertiseIpv6NextHops   *NokiaConf_Configure_Service_Vprn_Bgp_AdvertiseIpv6NextHops   `path:"advertise-ipv6-next-hops" module:"nokia-conf"`
	AggregatorIdZero        *bool                                                         `path:"aggregator-id-zero" module:"nokia-conf"`
	ApplyGroups             []string                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	Asn_4Byte               *bool                                                         `path:"asn-4-byte" module:"nokia-conf"`
	AuthenticationKey       *string                                                       `path:"authentication-key" module:"nokia-conf"`
	AuthenticationKeychain  *string                                                       `path:"authentication-keychain" module:"nokia-conf"`
	BackupPath              *NokiaConf_Configure_Service_Vprn_Bgp_BackupPath              `path:"backup-path" module:"nokia-conf"`
	BestPathSelection       *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection       `path:"best-path-selection" module:"nokia-conf"`
	BfdLiveness             *bool                                                         `path:"bfd-liveness" module:"nokia-conf"`
	ClientReflect           *bool                                                         `path:"client-reflect" module:"nokia-conf"`
	Cluster                 *NokiaConf_Configure_Service_Vprn_Bgp_Cluster                 `path:"cluster" module:"nokia-conf"`
	ConnectRetry            *int32                                                        `path:"connect-retry" module:"nokia-conf"`
	Convergence             *NokiaConf_Configure_Service_Vprn_Bgp_Convergence             `path:"convergence" module:"nokia-conf"`
	DampPeerOscillations    *NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations    `path:"damp-peer-oscillations" module:"nokia-conf" yangPresence:"true"`
	Damping                 *bool                                                         `path:"damping" module:"nokia-conf"`
	DefaultLabelPreference  *NokiaConf_Configure_Service_Vprn_Bgp_DefaultLabelPreference  `path:"default-label-preference" module:"nokia-conf"`
	DefaultPreference       *NokiaConf_Configure_Service_Vprn_Bgp_DefaultPreference       `path:"default-preference" module:"nokia-conf"`
	Description             *string                                                       `path:"description" module:"nokia-conf"`
	DomainId                *string                                                       `path:"domain-id" module:"nokia-conf"`
	DynamicNeighborLimit    *uint32                                                       `path:"dynamic-neighbor-limit" module:"nokia-conf"`
	EbgpDefaultRejectPolicy *NokiaConf_Configure_Service_Vprn_Bgp_EbgpDefaultRejectPolicy `path:"ebgp-default-reject-policy" module:"nokia-conf"`
	EibgpLoadbalance        *bool                                                         `path:"eibgp-loadbalance" module:"nokia-conf"`
	EnforceFirstAs          *bool                                                         `path:"enforce-first-as" module:"nokia-conf"`
	ErrorHandling           *NokiaConf_Configure_Service_Vprn_Bgp_ErrorHandling           `path:"error-handling" module:"nokia-conf"`
	Export                  *NokiaConf_Configure_Service_Vprn_Bgp_Export                  `path:"export" module:"nokia-conf" yangPresence:"true"`
	ExtendedNhEncoding      *NokiaConf_Configure_Service_Vprn_Bgp_ExtendedNhEncoding      `path:"extended-nh-encoding" module:"nokia-conf"`
	Family                  *NokiaConf_Configure_Service_Vprn_Bgp_Family                  `path:"family" module:"nokia-conf"`
	FastExternalFailover    *bool                                                         `path:"fast-external-failover" module:"nokia-conf"`
	Flowspec                *NokiaConf_Configure_Service_Vprn_Bgp_Flowspec                `path:"flowspec" module:"nokia-conf"`
	GracefulRestart         *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart         `path:"graceful-restart" module:"nokia-conf" yangPresence:"true"`
	Group                   map[string]*NokiaConf_Configure_Service_Vprn_Bgp_Group        `path:"group" module:"nokia-conf"`
	HoldTime                *NokiaConf_Configure_Service_Vprn_Bgp_HoldTime                `path:"hold-time" module:"nokia-conf"`
	IbgpMultipath           *bool                                                         `path:"ibgp-multipath" module:"nokia-conf"`
	Import                  *NokiaConf_Configure_Service_Vprn_Bgp_Import                  `path:"import" module:"nokia-conf" yangPresence:"true"`
	InitialSendDelayZero    *bool                                                         `path:"initial-send-delay-zero" module:"nokia-conf"`
	Keepalive               *int32                                                        `path:"keepalive" module:"nokia-conf"`
	LabelPreference         *uint32                                                       `path:"label-preference" module:"nokia-conf"`
	LocalAs                 *NokiaConf_Configure_Service_Vprn_Bgp_LocalAs                 `path:"local-as" module:"nokia-conf"`
	LocalPreference         *uint32                                                       `path:"local-preference" module:"nokia-conf"`
	LoopDetect              E_NokiaTypesBgp_LoopDetect                                    `path:"loop-detect" module:"nokia-conf"`
	LoopDetectThreshold     *uint32                                                       `path:"loop-detect-threshold" module:"nokia-conf"`
	MedOut                  NokiaConf_Configure_Service_Vprn_Bgp_MedOut_Union             `path:"med-out" module:"nokia-conf"`
	MinRouteAdvertisement   *int16                                                        `path:"min-route-advertisement" module:"nokia-conf"`
	Monitor                 *NokiaConf_Configure_Service_Vprn_Bgp_Monitor                 `path:"monitor" module:"nokia-conf" yangPresence:"true"`
	Multihop                *int32                                                        `path:"multihop" module:"nokia-conf"`
	Multipath               *NokiaConf_Configure_Service_Vprn_Bgp_Multipath               `path:"multipath" module:"nokia-conf"`
	Neighbor                map[string]*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor     `path:"neighbor" module:"nokia-conf"`
	NextHopResolution       *NokiaConf_Configure_Service_Vprn_Bgp_NextHopResolution       `path:"next-hop-resolution" module:"nokia-conf"`
	PathMtuDiscovery        *bool                                                         `path:"path-mtu-discovery" module:"nokia-conf"`
	PeerIpTracking          *bool                                                         `path:"peer-ip-tracking" module:"nokia-conf"`
	PeerTrackingPolicy      *string                                                       `path:"peer-tracking-policy" module:"nokia-conf"`
	Preference              *uint32                                                       `path:"preference" module:"nokia-conf"`
	RapidWithdrawal         *bool                                                         `path:"rapid-withdrawal" module:"nokia-conf"`
	RemovePrivate           *NokiaConf_Configure_Service_Vprn_Bgp_RemovePrivate           `path:"remove-private" module:"nokia-conf" yangPresence:"true"`
	RibManagement           *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement           `path:"rib-management" module:"nokia-conf"`
	RouterId                *string                                                       `path:"router-id" module:"nokia-conf"`
	SendCommunities         *NokiaConf_Configure_Service_Vprn_Bgp_SendCommunities         `path:"send-communities" module:"nokia-conf"`
	SendDefault             *NokiaConf_Configure_Service_Vprn_Bgp_SendDefault             `path:"send-default" module:"nokia-conf"`
	SplitHorizon            *bool                                                         `path:"split-horizon" module:"nokia-conf"`
	TcpMss                  *uint32                                                       `path:"tcp-mss" module:"nokia-conf"`
	ThirdPartyNexthop       *bool                                                         `path:"third-party-nexthop" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_Bgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_Bgp) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Service_Vprn_Bgp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) NewGroup(GroupName string) (*NokiaConf_Configure_Service_Vprn_Bgp_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Service_Vprn_Bgp_Group)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Service_Vprn_Bgp_Group{
		GroupName: &GroupName,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Service_Vprn_Bgp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupName = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Bgp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetOrCreateGroup(GroupName string) *NokiaConf_Configure_Service_Vprn_Bgp_Group {

	key := GroupName

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Service_Vprn_Bgp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetGroup(GroupName string) *NokiaConf_Configure_Service_Vprn_Bgp_Group {

	if t == nil {
		return nil
	}

	key := GroupName

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Bgp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) DeleteGroup(GroupName string) {
	key := GroupName

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Service_Vprn_Bgp_Group struct to the
// list Group of NokiaConf_Configure_Service_Vprn_Bgp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Bgp_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) AppendGroup(v *NokiaConf_Configure_Service_Vprn_Bgp_Group) error {
	if v.GroupName == nil {
		return fmt.Errorf("invalid nil key received for GroupName")
	}

	key := *v.GroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Service_Vprn_Bgp_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// NewNeighbor creates a new entry in the Neighbor list of the
// NokiaConf_Configure_Service_Vprn_Bgp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) NewNeighbor(IpAddress string) (*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &NokiaConf_Configure_Service_Vprn_Bgp_Neighbor{
		IpAddress: &IpAddress,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the NokiaConf_Configure_Service_Vprn_Bgp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.IpAddress = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Bgp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetOrCreateNeighbor(IpAddress string) *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor {

	key := IpAddress

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of NokiaConf_Configure_Service_Vprn_Bgp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetNeighbor(IpAddress string) *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_Bgp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) DeleteNeighbor(IpAddress string) {
	key := IpAddress

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied NokiaConf_Configure_Service_Vprn_Bgp_Neighbor struct to the
// list Neighbor of NokiaConf_Configure_Service_Vprn_Bgp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_Bgp_Neighbor already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) AppendNeighbor(v *NokiaConf_Configure_Service_Vprn_Bgp_Neighbor) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NokiaConf_Configure_Service_Vprn_Bgp_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateAdvertiseIpv6NextHops retrieves the value of the AdvertiseIpv6NextHops field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetOrCreateAdvertiseIpv6NextHops() *NokiaConf_Configure_Service_Vprn_Bgp_AdvertiseIpv6NextHops {
	if t.AdvertiseIpv6NextHops != nil {
		return t.AdvertiseIpv6NextHops
	}
	t.AdvertiseIpv6NextHops = &NokiaConf_Configure_Service_Vprn_Bgp_AdvertiseIpv6NextHops{}
	return t.AdvertiseIpv6NextHops
}

// GetOrCreateBackupPath retrieves the value of the BackupPath field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetOrCreateBackupPath() *NokiaConf_Configure_Service_Vprn_Bgp_BackupPath {
	if t.BackupPath != nil {
		return t.BackupPath
	}
	t.BackupPath = &NokiaConf_Configure_Service_Vprn_Bgp_BackupPath{}
	return t.BackupPath
}

// GetOrCreateBestPathSelection retrieves the value of the BestPathSelection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetOrCreateBestPathSelection() *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection {
	if t.BestPathSelection != nil {
		return t.BestPathSelection
	}
	t.BestPathSelection = &NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection{}
	return t.BestPathSelection
}

// GetOrCreateCluster retrieves the value of the Cluster field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetOrCreateCluster() *NokiaConf_Configure_Service_Vprn_Bgp_Cluster {
	if t.Cluster != nil {
		return t.Cluster
	}
	t.Cluster = &NokiaConf_Configure_Service_Vprn_Bgp_Cluster{}
	return t.Cluster
}

// GetOrCreateConvergence retrieves the value of the Convergence field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetOrCreateConvergence() *NokiaConf_Configure_Service_Vprn_Bgp_Convergence {
	if t.Convergence != nil {
		return t.Convergence
	}
	t.Convergence = &NokiaConf_Configure_Service_Vprn_Bgp_Convergence{}
	return t.Convergence
}

// GetOrCreateDampPeerOscillations retrieves the value of the DampPeerOscillations field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetOrCreateDampPeerOscillations() *NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations {
	if t.DampPeerOscillations != nil {
		return t.DampPeerOscillations
	}
	t.DampPeerOscillations = &NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations{}
	return t.DampPeerOscillations
}

// GetOrCreateDefaultLabelPreference retrieves the value of the DefaultLabelPreference field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetOrCreateDefaultLabelPreference() *NokiaConf_Configure_Service_Vprn_Bgp_DefaultLabelPreference {
	if t.DefaultLabelPreference != nil {
		return t.DefaultLabelPreference
	}
	t.DefaultLabelPreference = &NokiaConf_Configure_Service_Vprn_Bgp_DefaultLabelPreference{}
	return t.DefaultLabelPreference
}

// GetOrCreateDefaultPreference retrieves the value of the DefaultPreference field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetOrCreateDefaultPreference() *NokiaConf_Configure_Service_Vprn_Bgp_DefaultPreference {
	if t.DefaultPreference != nil {
		return t.DefaultPreference
	}
	t.DefaultPreference = &NokiaConf_Configure_Service_Vprn_Bgp_DefaultPreference{}
	return t.DefaultPreference
}

// GetOrCreateEbgpDefaultRejectPolicy retrieves the value of the EbgpDefaultRejectPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetOrCreateEbgpDefaultRejectPolicy() *NokiaConf_Configure_Service_Vprn_Bgp_EbgpDefaultRejectPolicy {
	if t.EbgpDefaultRejectPolicy != nil {
		return t.EbgpDefaultRejectPolicy
	}
	t.EbgpDefaultRejectPolicy = &NokiaConf_Configure_Service_Vprn_Bgp_EbgpDefaultRejectPolicy{}
	return t.EbgpDefaultRejectPolicy
}

// GetOrCreateErrorHandling retrieves the value of the ErrorHandling field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetOrCreateErrorHandling() *NokiaConf_Configure_Service_Vprn_Bgp_ErrorHandling {
	if t.ErrorHandling != nil {
		return t.ErrorHandling
	}
	t.ErrorHandling = &NokiaConf_Configure_Service_Vprn_Bgp_ErrorHandling{}
	return t.ErrorHandling
}

// GetOrCreateExport retrieves the value of the Export field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetOrCreateExport() *NokiaConf_Configure_Service_Vprn_Bgp_Export {
	if t.Export != nil {
		return t.Export
	}
	t.Export = &NokiaConf_Configure_Service_Vprn_Bgp_Export{}
	return t.Export
}

// GetOrCreateExtendedNhEncoding retrieves the value of the ExtendedNhEncoding field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetOrCreateExtendedNhEncoding() *NokiaConf_Configure_Service_Vprn_Bgp_ExtendedNhEncoding {
	if t.ExtendedNhEncoding != nil {
		return t.ExtendedNhEncoding
	}
	t.ExtendedNhEncoding = &NokiaConf_Configure_Service_Vprn_Bgp_ExtendedNhEncoding{}
	return t.ExtendedNhEncoding
}

// GetOrCreateFamily retrieves the value of the Family field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetOrCreateFamily() *NokiaConf_Configure_Service_Vprn_Bgp_Family {
	if t.Family != nil {
		return t.Family
	}
	t.Family = &NokiaConf_Configure_Service_Vprn_Bgp_Family{}
	return t.Family
}

// GetOrCreateFlowspec retrieves the value of the Flowspec field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetOrCreateFlowspec() *NokiaConf_Configure_Service_Vprn_Bgp_Flowspec {
	if t.Flowspec != nil {
		return t.Flowspec
	}
	t.Flowspec = &NokiaConf_Configure_Service_Vprn_Bgp_Flowspec{}
	return t.Flowspec
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetOrCreateGracefulRestart() *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetOrCreateHoldTime() *NokiaConf_Configure_Service_Vprn_Bgp_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &NokiaConf_Configure_Service_Vprn_Bgp_HoldTime{}
	return t.HoldTime
}

// GetOrCreateImport retrieves the value of the Import field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetOrCreateImport() *NokiaConf_Configure_Service_Vprn_Bgp_Import {
	if t.Import != nil {
		return t.Import
	}
	t.Import = &NokiaConf_Configure_Service_Vprn_Bgp_Import{}
	return t.Import
}

// GetOrCreateLocalAs retrieves the value of the LocalAs field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetOrCreateLocalAs() *NokiaConf_Configure_Service_Vprn_Bgp_LocalAs {
	if t.LocalAs != nil {
		return t.LocalAs
	}
	t.LocalAs = &NokiaConf_Configure_Service_Vprn_Bgp_LocalAs{}
	return t.LocalAs
}

// GetOrCreateMonitor retrieves the value of the Monitor field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetOrCreateMonitor() *NokiaConf_Configure_Service_Vprn_Bgp_Monitor {
	if t.Monitor != nil {
		return t.Monitor
	}
	t.Monitor = &NokiaConf_Configure_Service_Vprn_Bgp_Monitor{}
	return t.Monitor
}

// GetOrCreateMultipath retrieves the value of the Multipath field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetOrCreateMultipath() *NokiaConf_Configure_Service_Vprn_Bgp_Multipath {
	if t.Multipath != nil {
		return t.Multipath
	}
	t.Multipath = &NokiaConf_Configure_Service_Vprn_Bgp_Multipath{}
	return t.Multipath
}

// GetOrCreateNextHopResolution retrieves the value of the NextHopResolution field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetOrCreateNextHopResolution() *NokiaConf_Configure_Service_Vprn_Bgp_NextHopResolution {
	if t.NextHopResolution != nil {
		return t.NextHopResolution
	}
	t.NextHopResolution = &NokiaConf_Configure_Service_Vprn_Bgp_NextHopResolution{}
	return t.NextHopResolution
}

// GetOrCreateRemovePrivate retrieves the value of the RemovePrivate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetOrCreateRemovePrivate() *NokiaConf_Configure_Service_Vprn_Bgp_RemovePrivate {
	if t.RemovePrivate != nil {
		return t.RemovePrivate
	}
	t.RemovePrivate = &NokiaConf_Configure_Service_Vprn_Bgp_RemovePrivate{}
	return t.RemovePrivate
}

// GetOrCreateRibManagement retrieves the value of the RibManagement field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetOrCreateRibManagement() *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement {
	if t.RibManagement != nil {
		return t.RibManagement
	}
	t.RibManagement = &NokiaConf_Configure_Service_Vprn_Bgp_RibManagement{}
	return t.RibManagement
}

// GetOrCreateSendCommunities retrieves the value of the SendCommunities field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetOrCreateSendCommunities() *NokiaConf_Configure_Service_Vprn_Bgp_SendCommunities {
	if t.SendCommunities != nil {
		return t.SendCommunities
	}
	t.SendCommunities = &NokiaConf_Configure_Service_Vprn_Bgp_SendCommunities{}
	return t.SendCommunities
}

// GetOrCreateSendDefault retrieves the value of the SendDefault field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetOrCreateSendDefault() *NokiaConf_Configure_Service_Vprn_Bgp_SendDefault {
	if t.SendDefault != nil {
		return t.SendDefault
	}
	t.SendDefault = &NokiaConf_Configure_Service_Vprn_Bgp_SendDefault{}
	return t.SendDefault
}

// GetAdvertiseIpv6NextHops returns the value of the AdvertiseIpv6NextHops struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp. If the receiver or the field AdvertiseIpv6NextHops is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetAdvertiseIpv6NextHops() *NokiaConf_Configure_Service_Vprn_Bgp_AdvertiseIpv6NextHops {
	if t != nil && t.AdvertiseIpv6NextHops != nil {
		return t.AdvertiseIpv6NextHops
	}
	return nil
}

// GetBackupPath returns the value of the BackupPath struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp. If the receiver or the field BackupPath is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetBackupPath() *NokiaConf_Configure_Service_Vprn_Bgp_BackupPath {
	if t != nil && t.BackupPath != nil {
		return t.BackupPath
	}
	return nil
}

// GetBestPathSelection returns the value of the BestPathSelection struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp. If the receiver or the field BestPathSelection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetBestPathSelection() *NokiaConf_Configure_Service_Vprn_Bgp_BestPathSelection {
	if t != nil && t.BestPathSelection != nil {
		return t.BestPathSelection
	}
	return nil
}

// GetCluster returns the value of the Cluster struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp. If the receiver or the field Cluster is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetCluster() *NokiaConf_Configure_Service_Vprn_Bgp_Cluster {
	if t != nil && t.Cluster != nil {
		return t.Cluster
	}
	return nil
}

// GetConvergence returns the value of the Convergence struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp. If the receiver or the field Convergence is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetConvergence() *NokiaConf_Configure_Service_Vprn_Bgp_Convergence {
	if t != nil && t.Convergence != nil {
		return t.Convergence
	}
	return nil
}

// GetDampPeerOscillations returns the value of the DampPeerOscillations struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp. If the receiver or the field DampPeerOscillations is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetDampPeerOscillations() *NokiaConf_Configure_Service_Vprn_Bgp_DampPeerOscillations {
	if t != nil && t.DampPeerOscillations != nil {
		return t.DampPeerOscillations
	}
	return nil
}

// GetDefaultLabelPreference returns the value of the DefaultLabelPreference struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp. If the receiver or the field DefaultLabelPreference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetDefaultLabelPreference() *NokiaConf_Configure_Service_Vprn_Bgp_DefaultLabelPreference {
	if t != nil && t.DefaultLabelPreference != nil {
		return t.DefaultLabelPreference
	}
	return nil
}

// GetDefaultPreference returns the value of the DefaultPreference struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp. If the receiver or the field DefaultPreference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetDefaultPreference() *NokiaConf_Configure_Service_Vprn_Bgp_DefaultPreference {
	if t != nil && t.DefaultPreference != nil {
		return t.DefaultPreference
	}
	return nil
}

// GetEbgpDefaultRejectPolicy returns the value of the EbgpDefaultRejectPolicy struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp. If the receiver or the field EbgpDefaultRejectPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetEbgpDefaultRejectPolicy() *NokiaConf_Configure_Service_Vprn_Bgp_EbgpDefaultRejectPolicy {
	if t != nil && t.EbgpDefaultRejectPolicy != nil {
		return t.EbgpDefaultRejectPolicy
	}
	return nil
}

// GetErrorHandling returns the value of the ErrorHandling struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp. If the receiver or the field ErrorHandling is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetErrorHandling() *NokiaConf_Configure_Service_Vprn_Bgp_ErrorHandling {
	if t != nil && t.ErrorHandling != nil {
		return t.ErrorHandling
	}
	return nil
}

// GetExport returns the value of the Export struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp. If the receiver or the field Export is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetExport() *NokiaConf_Configure_Service_Vprn_Bgp_Export {
	if t != nil && t.Export != nil {
		return t.Export
	}
	return nil
}

// GetExtendedNhEncoding returns the value of the ExtendedNhEncoding struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp. If the receiver or the field ExtendedNhEncoding is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetExtendedNhEncoding() *NokiaConf_Configure_Service_Vprn_Bgp_ExtendedNhEncoding {
	if t != nil && t.ExtendedNhEncoding != nil {
		return t.ExtendedNhEncoding
	}
	return nil
}

// GetFamily returns the value of the Family struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp. If the receiver or the field Family is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetFamily() *NokiaConf_Configure_Service_Vprn_Bgp_Family {
	if t != nil && t.Family != nil {
		return t.Family
	}
	return nil
}

// GetFlowspec returns the value of the Flowspec struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp. If the receiver or the field Flowspec is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetFlowspec() *NokiaConf_Configure_Service_Vprn_Bgp_Flowspec {
	if t != nil && t.Flowspec != nil {
		return t.Flowspec
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetGracefulRestart() *NokiaConf_Configure_Service_Vprn_Bgp_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetHoldTime() *NokiaConf_Configure_Service_Vprn_Bgp_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetImport returns the value of the Import struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp. If the receiver or the field Import is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetImport() *NokiaConf_Configure_Service_Vprn_Bgp_Import {
	if t != nil && t.Import != nil {
		return t.Import
	}
	return nil
}

// GetLocalAs returns the value of the LocalAs struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp. If the receiver or the field LocalAs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetLocalAs() *NokiaConf_Configure_Service_Vprn_Bgp_LocalAs {
	if t != nil && t.LocalAs != nil {
		return t.LocalAs
	}
	return nil
}

// GetMonitor returns the value of the Monitor struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp. If the receiver or the field Monitor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetMonitor() *NokiaConf_Configure_Service_Vprn_Bgp_Monitor {
	if t != nil && t.Monitor != nil {
		return t.Monitor
	}
	return nil
}

// GetMultipath returns the value of the Multipath struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp. If the receiver or the field Multipath is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetMultipath() *NokiaConf_Configure_Service_Vprn_Bgp_Multipath {
	if t != nil && t.Multipath != nil {
		return t.Multipath
	}
	return nil
}

// GetNextHopResolution returns the value of the NextHopResolution struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp. If the receiver or the field NextHopResolution is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetNextHopResolution() *NokiaConf_Configure_Service_Vprn_Bgp_NextHopResolution {
	if t != nil && t.NextHopResolution != nil {
		return t.NextHopResolution
	}
	return nil
}

// GetRemovePrivate returns the value of the RemovePrivate struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp. If the receiver or the field RemovePrivate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetRemovePrivate() *NokiaConf_Configure_Service_Vprn_Bgp_RemovePrivate {
	if t != nil && t.RemovePrivate != nil {
		return t.RemovePrivate
	}
	return nil
}

// GetRibManagement returns the value of the RibManagement struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp. If the receiver or the field RibManagement is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetRibManagement() *NokiaConf_Configure_Service_Vprn_Bgp_RibManagement {
	if t != nil && t.RibManagement != nil {
		return t.RibManagement
	}
	return nil
}

// GetSendCommunities returns the value of the SendCommunities struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp. If the receiver or the field SendCommunities is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetSendCommunities() *NokiaConf_Configure_Service_Vprn_Bgp_SendCommunities {
	if t != nil && t.SendCommunities != nil {
		return t.SendCommunities
	}
	return nil
}

// GetSendDefault returns the value of the SendDefault struct pointer
// from NokiaConf_Configure_Service_Vprn_Bgp. If the receiver or the field SendDefault is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetSendDefault() *NokiaConf_Configure_Service_Vprn_Bgp_SendDefault {
	if t != nil && t.SendDefault != nil {
		return t.SendDefault
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAdvertiseInactive retrieves the value of the leaf AdvertiseInactive from the NokiaConf_Configure_Service_Vprn_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseInactive is set, it can
// safely use t.GetAdvertiseInactive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseInactive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetAdvertiseInactive() bool {
	if t == nil || t.AdvertiseInactive == nil {
		return false
	}
	return *t.AdvertiseInactive
}

// GetAggregatorIdZero retrieves the value of the leaf AggregatorIdZero from the NokiaConf_Configure_Service_Vprn_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AggregatorIdZero is set, it can
// safely use t.GetAggregatorIdZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AggregatorIdZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetAggregatorIdZero() bool {
	if t == nil || t.AggregatorIdZero == nil {
		return false
	}
	return *t.AggregatorIdZero
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetAsn_4Byte retrieves the value of the leaf Asn_4Byte from the NokiaConf_Configure_Service_Vprn_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Asn_4Byte is set, it can
// safely use t.GetAsn_4Byte() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Asn_4Byte == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetAsn_4Byte() bool {
	if t == nil || t.Asn_4Byte == nil {
		return true
	}
	return *t.Asn_4Byte
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Service_Vprn_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationKeychain retrieves the value of the leaf AuthenticationKeychain from the NokiaConf_Configure_Service_Vprn_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKeychain is set, it can
// safely use t.GetAuthenticationKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKeychain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetAuthenticationKeychain() string {
	if t == nil || t.AuthenticationKeychain == nil {
		return ""
	}
	return *t.AuthenticationKeychain
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Service_Vprn_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetClientReflect retrieves the value of the leaf ClientReflect from the NokiaConf_Configure_Service_Vprn_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientReflect is set, it can
// safely use t.GetClientReflect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientReflect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetClientReflect() bool {
	if t == nil || t.ClientReflect == nil {
		return true
	}
	return *t.ClientReflect
}

// GetConnectRetry retrieves the value of the leaf ConnectRetry from the NokiaConf_Configure_Service_Vprn_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectRetry is set, it can
// safely use t.GetConnectRetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectRetry == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetConnectRetry() int32 {
	if t == nil || t.ConnectRetry == nil {
		return 120
	}
	return *t.ConnectRetry
}

// GetDamping retrieves the value of the leaf Damping from the NokiaConf_Configure_Service_Vprn_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Damping is set, it can
// safely use t.GetDamping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Damping == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetDamping() bool {
	if t == nil || t.Damping == nil {
		return false
	}
	return *t.Damping
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Service_Vprn_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDomainId retrieves the value of the leaf DomainId from the NokiaConf_Configure_Service_Vprn_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainId is set, it can
// safely use t.GetDomainId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetDomainId() string {
	if t == nil || t.DomainId == nil {
		return ""
	}
	return *t.DomainId
}

// GetDynamicNeighborLimit retrieves the value of the leaf DynamicNeighborLimit from the NokiaConf_Configure_Service_Vprn_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicNeighborLimit is set, it can
// safely use t.GetDynamicNeighborLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicNeighborLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetDynamicNeighborLimit() uint32 {
	if t == nil || t.DynamicNeighborLimit == nil {
		return 0
	}
	return *t.DynamicNeighborLimit
}

// GetEibgpLoadbalance retrieves the value of the leaf EibgpLoadbalance from the NokiaConf_Configure_Service_Vprn_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EibgpLoadbalance is set, it can
// safely use t.GetEibgpLoadbalance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EibgpLoadbalance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetEibgpLoadbalance() bool {
	if t == nil || t.EibgpLoadbalance == nil {
		return false
	}
	return *t.EibgpLoadbalance
}

// GetEnforceFirstAs retrieves the value of the leaf EnforceFirstAs from the NokiaConf_Configure_Service_Vprn_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnforceFirstAs is set, it can
// safely use t.GetEnforceFirstAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnforceFirstAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetEnforceFirstAs() bool {
	if t == nil || t.EnforceFirstAs == nil {
		return false
	}
	return *t.EnforceFirstAs
}

// GetFastExternalFailover retrieves the value of the leaf FastExternalFailover from the NokiaConf_Configure_Service_Vprn_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastExternalFailover is set, it can
// safely use t.GetFastExternalFailover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastExternalFailover == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetFastExternalFailover() bool {
	if t == nil || t.FastExternalFailover == nil {
		return true
	}
	return *t.FastExternalFailover
}

// GetIbgpMultipath retrieves the value of the leaf IbgpMultipath from the NokiaConf_Configure_Service_Vprn_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IbgpMultipath is set, it can
// safely use t.GetIbgpMultipath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IbgpMultipath == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetIbgpMultipath() bool {
	if t == nil || t.IbgpMultipath == nil {
		return false
	}
	return *t.IbgpMultipath
}

// GetInitialSendDelayZero retrieves the value of the leaf InitialSendDelayZero from the NokiaConf_Configure_Service_Vprn_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialSendDelayZero is set, it can
// safely use t.GetInitialSendDelayZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialSendDelayZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetInitialSendDelayZero() bool {
	if t == nil || t.InitialSendDelayZero == nil {
		return false
	}
	return *t.InitialSendDelayZero
}

// GetKeepalive retrieves the value of the leaf Keepalive from the NokiaConf_Configure_Service_Vprn_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keepalive is set, it can
// safely use t.GetKeepalive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keepalive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetKeepalive() int32 {
	if t == nil || t.Keepalive == nil {
		return 30
	}
	return *t.Keepalive
}

// GetLabelPreference retrieves the value of the leaf LabelPreference from the NokiaConf_Configure_Service_Vprn_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelPreference is set, it can
// safely use t.GetLabelPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetLabelPreference() uint32 {
	if t == nil || t.LabelPreference == nil {
		return 170
	}
	return *t.LabelPreference
}

// GetLocalPreference retrieves the value of the leaf LocalPreference from the NokiaConf_Configure_Service_Vprn_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPreference is set, it can
// safely use t.GetLocalPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetLocalPreference() uint32 {
	if t == nil || t.LocalPreference == nil {
		return 100
	}
	return *t.LocalPreference
}

// GetLoopDetect retrieves the value of the leaf LoopDetect from the NokiaConf_Configure_Service_Vprn_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopDetect is set, it can
// safely use t.GetLoopDetect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopDetect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetLoopDetect() E_NokiaTypesBgp_LoopDetect {
	if t == nil || t.LoopDetect == 0 {
		return NokiaTypesBgp_LoopDetect_ignore_loop
	}
	return t.LoopDetect
}

// GetLoopDetectThreshold retrieves the value of the leaf LoopDetectThreshold from the NokiaConf_Configure_Service_Vprn_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopDetectThreshold is set, it can
// safely use t.GetLoopDetectThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopDetectThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetLoopDetectThreshold() uint32 {
	if t == nil || t.LoopDetectThreshold == nil {
		return 0
	}
	return *t.LoopDetectThreshold
}

// GetMedOut retrieves the value of the leaf MedOut from the NokiaConf_Configure_Service_Vprn_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MedOut is set, it can
// safely use t.GetMedOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MedOut == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetMedOut() NokiaConf_Configure_Service_Vprn_Bgp_MedOut_Union {
	if t == nil || t.MedOut == nil {
		return nil
	}
	return t.MedOut
}

// GetMinRouteAdvertisement retrieves the value of the leaf MinRouteAdvertisement from the NokiaConf_Configure_Service_Vprn_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinRouteAdvertisement is set, it can
// safely use t.GetMinRouteAdvertisement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinRouteAdvertisement == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetMinRouteAdvertisement() int16 {
	if t == nil || t.MinRouteAdvertisement == nil {
		return 30
	}
	return *t.MinRouteAdvertisement
}

// GetMultihop retrieves the value of the leaf Multihop from the NokiaConf_Configure_Service_Vprn_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multihop is set, it can
// safely use t.GetMultihop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multihop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetMultihop() int32 {
	if t == nil || t.Multihop == nil {
		return 0
	}
	return *t.Multihop
}

// GetPathMtuDiscovery retrieves the value of the leaf PathMtuDiscovery from the NokiaConf_Configure_Service_Vprn_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathMtuDiscovery is set, it can
// safely use t.GetPathMtuDiscovery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathMtuDiscovery == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetPathMtuDiscovery() bool {
	if t == nil || t.PathMtuDiscovery == nil {
		return false
	}
	return *t.PathMtuDiscovery
}

// GetPeerIpTracking retrieves the value of the leaf PeerIpTracking from the NokiaConf_Configure_Service_Vprn_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerIpTracking is set, it can
// safely use t.GetPeerIpTracking() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerIpTracking == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetPeerIpTracking() bool {
	if t == nil || t.PeerIpTracking == nil {
		return false
	}
	return *t.PeerIpTracking
}

// GetPeerTrackingPolicy retrieves the value of the leaf PeerTrackingPolicy from the NokiaConf_Configure_Service_Vprn_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerTrackingPolicy is set, it can
// safely use t.GetPeerTrackingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerTrackingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetPeerTrackingPolicy() string {
	if t == nil || t.PeerTrackingPolicy == nil {
		return ""
	}
	return *t.PeerTrackingPolicy
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Service_Vprn_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 170
	}
	return *t.Preference
}

// GetRapidWithdrawal retrieves the value of the leaf RapidWithdrawal from the NokiaConf_Configure_Service_Vprn_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RapidWithdrawal is set, it can
// safely use t.GetRapidWithdrawal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RapidWithdrawal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetRapidWithdrawal() bool {
	if t == nil || t.RapidWithdrawal == nil {
		return false
	}
	return *t.RapidWithdrawal
}

// GetRouterId retrieves the value of the leaf RouterId from the NokiaConf_Configure_Service_Vprn_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterId is set, it can
// safely use t.GetRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetRouterId() string {
	if t == nil || t.RouterId == nil {
		return ""
	}
	return *t.RouterId
}

// GetSplitHorizon retrieves the value of the leaf SplitHorizon from the NokiaConf_Configure_Service_Vprn_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SplitHorizon is set, it can
// safely use t.GetSplitHorizon() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SplitHorizon == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetSplitHorizon() bool {
	if t == nil || t.SplitHorizon == nil {
		return false
	}
	return *t.SplitHorizon
}

// GetTcpMss retrieves the value of the leaf TcpMss from the NokiaConf_Configure_Service_Vprn_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpMss is set, it can
// safely use t.GetTcpMss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpMss == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetTcpMss() uint32 {
	if t == nil || t.TcpMss == nil {
		return 0
	}
	return *t.TcpMss
}

// GetThirdPartyNexthop retrieves the value of the leaf ThirdPartyNexthop from the NokiaConf_Configure_Service_Vprn_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ThirdPartyNexthop is set, it can
// safely use t.GetThirdPartyNexthop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ThirdPartyNexthop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) GetThirdPartyNexthop() bool {
	if t == nil || t.ThirdPartyNexthop == nil {
		return false
	}
	return *t.ThirdPartyNexthop
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_Bgp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.AdvertiseInactive == nil {
		var v bool = false
		t.AdvertiseInactive = &v
	}
	if t.AggregatorIdZero == nil {
		var v bool = false
		t.AggregatorIdZero = &v
	}
	if t.Asn_4Byte == nil {
		var v bool = true
		t.Asn_4Byte = &v
	}
	if t.BfdLiveness == nil {
		var v bool = false
		t.BfdLiveness = &v
	}
	if t.ClientReflect == nil {
		var v bool = true
		t.ClientReflect = &v
	}
	if t.ConnectRetry == nil {
		var v int32 = 120
		t.ConnectRetry = &v
	}
	if t.Damping == nil {
		var v bool = false
		t.Damping = &v
	}
	if t.EibgpLoadbalance == nil {
		var v bool = false
		t.EibgpLoadbalance = &v
	}
	if t.EnforceFirstAs == nil {
		var v bool = false
		t.EnforceFirstAs = &v
	}
	if t.FastExternalFailover == nil {
		var v bool = true
		t.FastExternalFailover = &v
	}
	if t.IbgpMultipath == nil {
		var v bool = false
		t.IbgpMultipath = &v
	}
	if t.InitialSendDelayZero == nil {
		var v bool = false
		t.InitialSendDelayZero = &v
	}
	if t.Keepalive == nil {
		var v int32 = 30
		t.Keepalive = &v
	}
	if t.LabelPreference == nil {
		var v uint32 = 170
		t.LabelPreference = &v
	}
	if t.LocalPreference == nil {
		var v uint32 = 100
		t.LocalPreference = &v
	}
	if t.LoopDetect == 0 {
		t.LoopDetect = NokiaTypesBgp_LoopDetect_ignore_loop
	}
	if t.LoopDetectThreshold == nil {
		var v uint32 = 0
		t.LoopDetectThreshold = &v
	}
	if t.MinRouteAdvertisement == nil {
		var v int16 = 30
		t.MinRouteAdvertisement = &v
	}
	if t.PathMtuDiscovery == nil {
		var v bool = false
		t.PathMtuDiscovery = &v
	}
	if t.PeerIpTracking == nil {
		var v bool = false
		t.PeerIpTracking = &v
	}
	if t.Preference == nil {
		var v uint32 = 170
		t.Preference = &v
	}
	if t.RapidWithdrawal == nil {
		var v bool = false
		t.RapidWithdrawal = &v
	}
	if t.SplitHorizon == nil {
		var v bool = false
		t.SplitHorizon = &v
	}
	if t.ThirdPartyNexthop == nil {
		var v bool = false
		t.ThirdPartyNexthop = &v
	}
	t.AdvertiseIpv6NextHops.PopulateDefaults()
	t.BackupPath.PopulateDefaults()
	t.BestPathSelection.PopulateDefaults()
	t.Cluster.PopulateDefaults()
	t.Convergence.PopulateDefaults()
	t.DampPeerOscillations.PopulateDefaults()
	t.DefaultLabelPreference.PopulateDefaults()
	t.DefaultPreference.PopulateDefaults()
	t.EbgpDefaultRejectPolicy.PopulateDefaults()
	t.ErrorHandling.PopulateDefaults()
	t.Export.PopulateDefaults()
	t.ExtendedNhEncoding.PopulateDefaults()
	t.Family.PopulateDefaults()
	t.Flowspec.PopulateDefaults()
	t.GracefulRestart.PopulateDefaults()
	t.HoldTime.PopulateDefaults()
	t.Import.PopulateDefaults()
	t.LocalAs.PopulateDefaults()
	t.Monitor.PopulateDefaults()
	t.Multipath.PopulateDefaults()
	t.NextHopResolution.PopulateDefaults()
	t.RemovePrivate.PopulateDefaults()
	t.RibManagement.PopulateDefaults()
	t.SendCommunities.PopulateDefaults()
	t.SendDefault.PopulateDefaults()
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_Bgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_Bgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_Bgp.
func (*NokiaConf_Configure_Service_Vprn_Bgp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_BgpEvpn represents the /nokia-conf/configure/service/vprn/bgp-evpn YANG schema element.
type NokiaConf_Configure_Service_Vprn_BgpEvpn struct {
	Mpls map[int32]*NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls `path:"mpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_BgpEvpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_BgpEvpn) IsYANGGoStruct() {}

// NewMpls creates a new entry in the Mpls list of the
// NokiaConf_Configure_Service_Vprn_BgpEvpn struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn) NewMpls(BgpInstance int32) (*NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mpls == nil {
		t.Mpls = make(map[int32]*NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls)
	}

	key := BgpInstance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mpls[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mpls", key)
	}

	t.Mpls[key] = &NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls{
		BgpInstance: &BgpInstance,
	}

	return t.Mpls[key], nil
}

// RenameMpls renames an entry in the list Mpls within
// the NokiaConf_Configure_Service_Vprn_BgpEvpn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn) RenameMpls(oldK, newK int32) error {
	if _, ok := t.Mpls[newK]; ok {
		return fmt.Errorf("key %v already exists in Mpls", newK)
	}

	e, ok := t.Mpls[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mpls", oldK)
	}
	e.BgpInstance = &newK

	t.Mpls[newK] = e
	delete(t.Mpls, oldK)
	return nil
}

// GetOrCreateMpls retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_BgpEvpn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn) GetOrCreateMpls(BgpInstance int32) *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls {

	key := BgpInstance

	if v, ok := t.Mpls[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMpls(BgpInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMpls got unexpected error: %v", err))
	}
	return v
}

// GetMpls retrieves the value with the specified key from
// the Mpls map field of NokiaConf_Configure_Service_Vprn_BgpEvpn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn) GetMpls(BgpInstance int32) *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls {

	if t == nil {
		return nil
	}

	key := BgpInstance

	if lm, ok := t.Mpls[key]; ok {
		return lm
	}
	return nil
}

// DeleteMpls deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_BgpEvpn. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn) DeleteMpls(BgpInstance int32) {
	key := BgpInstance

	delete(t.Mpls, key)
}

// AppendMpls appends the supplied NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls struct to the
// list Mpls of NokiaConf_Configure_Service_Vprn_BgpEvpn. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn) AppendMpls(v *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls) error {
	if v.BgpInstance == nil {
		return fmt.Errorf("invalid nil key received for BgpInstance")
	}

	key := *v.BgpInstance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mpls == nil {
		t.Mpls = make(map[int32]*NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls)
	}

	if _, ok := t.Mpls[key]; ok {
		return fmt.Errorf("duplicate key for list Mpls %v", key)
	}

	t.Mpls[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_BgpEvpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Mpls {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_BgpEvpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_BgpEvpn.
func (*NokiaConf_Configure_Service_Vprn_BgpEvpn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls represents the /nokia-conf/configure/service/vprn/bgp-evpn/mpls YANG schema element.
type NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls struct {
	AdminState              E_NokiaTypesSros_AdminState                                            `path:"admin-state" module:"nokia-conf"`
	ApplyGroups             []string                                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude      []string                                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	AutoBindTunnel          *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel          `path:"auto-bind-tunnel" module:"nokia-conf"`
	BgpInstance             *int32                                                                 `path:"bgp-instance" module:"nokia-conf"`
	DefaultRouteTag         *string                                                                `path:"default-route-tag" module:"nokia-conf"`
	DomainId                *string                                                                `path:"domain-id" module:"nokia-conf"`
	DynamicEgressLabelLimit *bool                                                                  `path:"dynamic-egress-label-limit" module:"nokia-conf"`
	RouteDistinguisher      NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_RouteDistinguisher_Union `path:"route-distinguisher" module:"nokia-conf"`
	SendTunnelEncap         *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_SendTunnelEncap         `path:"send-tunnel-encap" module:"nokia-conf"`
	VrfExport               *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfExport               `path:"vrf-export" module:"nokia-conf" yangPresence:"true"`
	VrfImport               *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfImport               `path:"vrf-import" module:"nokia-conf" yangPresence:"true"`
	VrfTarget               *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfTarget               `path:"vrf-target" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls) IsYANGGoStruct() {}

// GetOrCreateAutoBindTunnel retrieves the value of the AutoBindTunnel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls) GetOrCreateAutoBindTunnel() *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel {
	if t.AutoBindTunnel != nil {
		return t.AutoBindTunnel
	}
	t.AutoBindTunnel = &NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel{}
	return t.AutoBindTunnel
}

// GetOrCreateSendTunnelEncap retrieves the value of the SendTunnelEncap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls) GetOrCreateSendTunnelEncap() *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_SendTunnelEncap {
	if t.SendTunnelEncap != nil {
		return t.SendTunnelEncap
	}
	t.SendTunnelEncap = &NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_SendTunnelEncap{}
	return t.SendTunnelEncap
}

// GetOrCreateVrfExport retrieves the value of the VrfExport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls) GetOrCreateVrfExport() *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfExport {
	if t.VrfExport != nil {
		return t.VrfExport
	}
	t.VrfExport = &NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfExport{}
	return t.VrfExport
}

// GetOrCreateVrfImport retrieves the value of the VrfImport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls) GetOrCreateVrfImport() *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfImport {
	if t.VrfImport != nil {
		return t.VrfImport
	}
	t.VrfImport = &NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfImport{}
	return t.VrfImport
}

// GetOrCreateVrfTarget retrieves the value of the VrfTarget field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls) GetOrCreateVrfTarget() *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfTarget {
	if t.VrfTarget != nil {
		return t.VrfTarget
	}
	t.VrfTarget = &NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfTarget{}
	return t.VrfTarget
}

// GetAutoBindTunnel returns the value of the AutoBindTunnel struct pointer
// from NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls. If the receiver or the field AutoBindTunnel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls) GetAutoBindTunnel() *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel {
	if t != nil && t.AutoBindTunnel != nil {
		return t.AutoBindTunnel
	}
	return nil
}

// GetSendTunnelEncap returns the value of the SendTunnelEncap struct pointer
// from NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls. If the receiver or the field SendTunnelEncap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls) GetSendTunnelEncap() *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_SendTunnelEncap {
	if t != nil && t.SendTunnelEncap != nil {
		return t.SendTunnelEncap
	}
	return nil
}

// GetVrfExport returns the value of the VrfExport struct pointer
// from NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls. If the receiver or the field VrfExport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls) GetVrfExport() *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfExport {
	if t != nil && t.VrfExport != nil {
		return t.VrfExport
	}
	return nil
}

// GetVrfImport returns the value of the VrfImport struct pointer
// from NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls. If the receiver or the field VrfImport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls) GetVrfImport() *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfImport {
	if t != nil && t.VrfImport != nil {
		return t.VrfImport
	}
	return nil
}

// GetVrfTarget returns the value of the VrfTarget struct pointer
// from NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls. If the receiver or the field VrfTarget is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls) GetVrfTarget() *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfTarget {
	if t != nil && t.VrfTarget != nil {
		return t.VrfTarget
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBgpInstance retrieves the value of the leaf BgpInstance from the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpInstance is set, it can
// safely use t.GetBgpInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls) GetBgpInstance() int32 {
	if t == nil || t.BgpInstance == nil {
		return 0
	}
	return *t.BgpInstance
}

// GetDefaultRouteTag retrieves the value of the leaf DefaultRouteTag from the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultRouteTag is set, it can
// safely use t.GetDefaultRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultRouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls) GetDefaultRouteTag() string {
	if t == nil || t.DefaultRouteTag == nil {
		return ""
	}
	return *t.DefaultRouteTag
}

// GetDomainId retrieves the value of the leaf DomainId from the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainId is set, it can
// safely use t.GetDomainId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls) GetDomainId() string {
	if t == nil || t.DomainId == nil {
		return ""
	}
	return *t.DomainId
}

// GetDynamicEgressLabelLimit retrieves the value of the leaf DynamicEgressLabelLimit from the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicEgressLabelLimit is set, it can
// safely use t.GetDynamicEgressLabelLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicEgressLabelLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls) GetDynamicEgressLabelLimit() bool {
	if t == nil || t.DynamicEgressLabelLimit == nil {
		return false
	}
	return *t.DynamicEgressLabelLimit
}

// GetRouteDistinguisher retrieves the value of the leaf RouteDistinguisher from the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteDistinguisher is set, it can
// safely use t.GetRouteDistinguisher() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteDistinguisher == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls) GetRouteDistinguisher() NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_RouteDistinguisher_Union {
	if t == nil || t.RouteDistinguisher == nil {
		return nil
	}
	return t.RouteDistinguisher
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.DynamicEgressLabelLimit == nil {
		var v bool = false
		t.DynamicEgressLabelLimit = &v
	}
	t.AutoBindTunnel.PopulateDefaults()
	t.SendTunnelEncap.PopulateDefaults()
	t.VrfExport.PopulateDefaults()
	t.VrfImport.PopulateDefaults()
	t.VrfTarget.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls) ΛListKeyMap() (map[string]interface{}, error) {
	if t.BgpInstance == nil {
		return nil, fmt.Errorf("nil value for key BgpInstance")
	}

	return map[string]interface{}{
		"bgp-instance": *t.BgpInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls.
func (*NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel represents the /nokia-conf/configure/service/vprn/bgp-evpn/mpls/auto-bind-tunnel YANG schema element.
type NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel struct {
	AllowFlexAlgoFallback      *bool                                                                          `path:"allow-flex-algo-fallback" module:"nokia-conf"`
	Ecmp                       *uint32                                                                        `path:"ecmp" module:"nokia-conf"`
	EnforceStrictTunnelTagging *bool                                                                          `path:"enforce-strict-tunnel-tagging" module:"nokia-conf"`
	Resolution                 E_NokiaTypesServices_ResolveStatus                                             `path:"resolution" module:"nokia-conf"`
	ResolutionFilter           *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter `path:"resolution-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel) IsYANGGoStruct() {}

// GetOrCreateResolutionFilter retrieves the value of the ResolutionFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel) GetOrCreateResolutionFilter() *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter {
	if t.ResolutionFilter != nil {
		return t.ResolutionFilter
	}
	t.ResolutionFilter = &NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter{}
	return t.ResolutionFilter
}

// GetResolutionFilter returns the value of the ResolutionFilter struct pointer
// from NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel. If the receiver or the field ResolutionFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel) GetResolutionFilter() *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter {
	if t != nil && t.ResolutionFilter != nil {
		return t.ResolutionFilter
	}
	return nil
}

// GetAllowFlexAlgoFallback retrieves the value of the leaf AllowFlexAlgoFallback from the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowFlexAlgoFallback is set, it can
// safely use t.GetAllowFlexAlgoFallback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowFlexAlgoFallback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel) GetAllowFlexAlgoFallback() bool {
	if t == nil || t.AllowFlexAlgoFallback == nil {
		return false
	}
	return *t.AllowFlexAlgoFallback
}

// GetEcmp retrieves the value of the leaf Ecmp from the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ecmp is set, it can
// safely use t.GetEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ecmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel) GetEcmp() uint32 {
	if t == nil || t.Ecmp == nil {
		return 1
	}
	return *t.Ecmp
}

// GetEnforceStrictTunnelTagging retrieves the value of the leaf EnforceStrictTunnelTagging from the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnforceStrictTunnelTagging is set, it can
// safely use t.GetEnforceStrictTunnelTagging() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnforceStrictTunnelTagging == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel) GetEnforceStrictTunnelTagging() bool {
	if t == nil || t.EnforceStrictTunnelTagging == nil {
		return false
	}
	return *t.EnforceStrictTunnelTagging
}

// GetResolution retrieves the value of the leaf Resolution from the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Resolution is set, it can
// safely use t.GetResolution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Resolution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel) GetResolution() E_NokiaTypesServices_ResolveStatus {
	if t == nil || t.Resolution == 0 {
		return NokiaTypesServices_ResolveStatus_none
	}
	return t.Resolution
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowFlexAlgoFallback == nil {
		var v bool = false
		t.AllowFlexAlgoFallback = &v
	}
	if t.Ecmp == nil {
		var v uint32 = 1
		t.Ecmp = &v
	}
	if t.EnforceStrictTunnelTagging == nil {
		var v bool = false
		t.EnforceStrictTunnelTagging = &v
	}
	if t.Resolution == 0 {
		t.Resolution = NokiaTypesServices_ResolveStatus_none
	}
	t.ResolutionFilter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel.
func (*NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter represents the /nokia-conf/configure/service/vprn/bgp-evpn/mpls/auto-bind-tunnel/resolution-filter YANG schema element.
type NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter struct {
	Bgp           *bool `path:"bgp" module:"nokia-conf"`
	Ldp           *bool `path:"ldp" module:"nokia-conf"`
	MplsFwdPolicy *bool `path:"mpls-fwd-policy" module:"nokia-conf"`
	RibApi        *bool `path:"rib-api" module:"nokia-conf"`
	Rsvp          *bool `path:"rsvp" module:"nokia-conf"`
	SrIsis        *bool `path:"sr-isis" module:"nokia-conf"`
	SrOspf        *bool `path:"sr-ospf" module:"nokia-conf"`
	SrOspf3       *bool `path:"sr-ospf3" module:"nokia-conf"`
	SrPolicy      *bool `path:"sr-policy" module:"nokia-conf"`
	SrTe          *bool `path:"sr-te" module:"nokia-conf"`
	Udp           *bool `path:"udp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) IsYANGGoStruct() {
}

// GetBgp retrieves the value of the leaf Bgp from the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bgp is set, it can
// safely use t.GetBgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetBgp() bool {
	if t == nil || t.Bgp == nil {
		return false
	}
	return *t.Bgp
}

// GetLdp retrieves the value of the leaf Ldp from the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ldp is set, it can
// safely use t.GetLdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ldp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetLdp() bool {
	if t == nil || t.Ldp == nil {
		return false
	}
	return *t.Ldp
}

// GetMplsFwdPolicy retrieves the value of the leaf MplsFwdPolicy from the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsFwdPolicy is set, it can
// safely use t.GetMplsFwdPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsFwdPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetMplsFwdPolicy() bool {
	if t == nil || t.MplsFwdPolicy == nil {
		return false
	}
	return *t.MplsFwdPolicy
}

// GetRibApi retrieves the value of the leaf RibApi from the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RibApi is set, it can
// safely use t.GetRibApi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RibApi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetRibApi() bool {
	if t == nil || t.RibApi == nil {
		return false
	}
	return *t.RibApi
}

// GetRsvp retrieves the value of the leaf Rsvp from the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rsvp is set, it can
// safely use t.GetRsvp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rsvp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetRsvp() bool {
	if t == nil || t.Rsvp == nil {
		return false
	}
	return *t.Rsvp
}

// GetSrIsis retrieves the value of the leaf SrIsis from the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrIsis is set, it can
// safely use t.GetSrIsis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrIsis == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetSrIsis() bool {
	if t == nil || t.SrIsis == nil {
		return false
	}
	return *t.SrIsis
}

// GetSrOspf retrieves the value of the leaf SrOspf from the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrOspf is set, it can
// safely use t.GetSrOspf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrOspf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetSrOspf() bool {
	if t == nil || t.SrOspf == nil {
		return false
	}
	return *t.SrOspf
}

// GetSrOspf3 retrieves the value of the leaf SrOspf3 from the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrOspf3 is set, it can
// safely use t.GetSrOspf3() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrOspf3 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetSrOspf3() bool {
	if t == nil || t.SrOspf3 == nil {
		return false
	}
	return *t.SrOspf3
}

// GetSrPolicy retrieves the value of the leaf SrPolicy from the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrPolicy is set, it can
// safely use t.GetSrPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetSrPolicy() bool {
	if t == nil || t.SrPolicy == nil {
		return false
	}
	return *t.SrPolicy
}

// GetSrTe retrieves the value of the leaf SrTe from the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrTe is set, it can
// safely use t.GetSrTe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrTe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetSrTe() bool {
	if t == nil || t.SrTe == nil {
		return false
	}
	return *t.SrTe
}

// GetUdp retrieves the value of the leaf Udp from the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Udp is set, it can
// safely use t.GetUdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Udp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetUdp() bool {
	if t == nil || t.Udp == nil {
		return false
	}
	return *t.Udp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Bgp == nil {
		var v bool = false
		t.Bgp = &v
	}
	if t.Ldp == nil {
		var v bool = false
		t.Ldp = &v
	}
	if t.MplsFwdPolicy == nil {
		var v bool = false
		t.MplsFwdPolicy = &v
	}
	if t.RibApi == nil {
		var v bool = false
		t.RibApi = &v
	}
	if t.Rsvp == nil {
		var v bool = false
		t.Rsvp = &v
	}
	if t.SrIsis == nil {
		var v bool = false
		t.SrIsis = &v
	}
	if t.SrOspf == nil {
		var v bool = false
		t.SrOspf = &v
	}
	if t.SrOspf3 == nil {
		var v bool = false
		t.SrOspf3 = &v
	}
	if t.SrPolicy == nil {
		var v bool = false
		t.SrPolicy = &v
	}
	if t.SrTe == nil {
		var v bool = false
		t.SrTe = &v
	}
	if t.Udp == nil {
		var v bool = false
		t.Udp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter.
func (*NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_SendTunnelEncap represents the /nokia-conf/configure/service/vprn/bgp-evpn/mpls/send-tunnel-encap YANG schema element.
type NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_SendTunnelEncap struct {
	Mpls        *bool `path:"mpls" module:"nokia-conf"`
	MplsOverUdp *bool `path:"mpls-over-udp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_SendTunnelEncap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_SendTunnelEncap) IsYANGGoStruct() {}

// GetMpls retrieves the value of the leaf Mpls from the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_SendTunnelEncap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mpls is set, it can
// safely use t.GetMpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_SendTunnelEncap) GetMpls() bool {
	if t == nil || t.Mpls == nil {
		return true
	}
	return *t.Mpls
}

// GetMplsOverUdp retrieves the value of the leaf MplsOverUdp from the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_SendTunnelEncap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsOverUdp is set, it can
// safely use t.GetMplsOverUdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsOverUdp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_SendTunnelEncap) GetMplsOverUdp() bool {
	if t == nil || t.MplsOverUdp == nil {
		return false
	}
	return *t.MplsOverUdp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_SendTunnelEncap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_SendTunnelEncap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mpls == nil {
		var v bool = true
		t.Mpls = &v
	}
	if t.MplsOverUdp == nil {
		var v bool = false
		t.MplsOverUdp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_SendTunnelEncap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_SendTunnelEncap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_SendTunnelEncap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_SendTunnelEncap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_SendTunnelEncap.
func (*NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_SendTunnelEncap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfExport represents the /nokia-conf/configure/service/vprn/bgp-evpn/mpls/vrf-export YANG schema element.
type NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfExport struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Policy             []string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfExport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfExport) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfExport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfExport) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfExport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfExport) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfExport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfExport) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfExport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfExport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfExport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfExport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfExport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfExport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfExport.
func (*NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfExport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfImport represents the /nokia-conf/configure/service/vprn/bgp-evpn/mpls/vrf-import YANG schema element.
type NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfImport struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Policy             []string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfImport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfImport) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfImport) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfImport) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfImport) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfImport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfImport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfImport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfImport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfImport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfImport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfImport.
func (*NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfImport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfTarget represents the /nokia-conf/configure/service/vprn/bgp-evpn/mpls/vrf-target YANG schema element.
type NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfTarget struct {
	Community       *string `path:"community" module:"nokia-conf"`
	ExportCommunity *string `path:"export-community" module:"nokia-conf"`
	ImportCommunity *string `path:"import-community" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfTarget implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfTarget) IsYANGGoStruct() {}

// GetCommunity retrieves the value of the leaf Community from the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Community is set, it can
// safely use t.GetCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Community == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfTarget) GetCommunity() string {
	if t == nil || t.Community == nil {
		return ""
	}
	return *t.Community
}

// GetExportCommunity retrieves the value of the leaf ExportCommunity from the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportCommunity is set, it can
// safely use t.GetExportCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportCommunity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfTarget) GetExportCommunity() string {
	if t == nil || t.ExportCommunity == nil {
		return ""
	}
	return *t.ExportCommunity
}

// GetImportCommunity retrieves the value of the leaf ImportCommunity from the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportCommunity is set, it can
// safely use t.GetImportCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportCommunity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfTarget) GetImportCommunity() string {
	if t == nil || t.ImportCommunity == nil {
		return ""
	}
	return *t.ImportCommunity
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfTarget
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfTarget) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfTarget) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfTarget"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfTarget) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfTarget) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfTarget.
func (*NokiaConf_Configure_Service_Vprn_BgpEvpn_Mpls_VrfTarget) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_BgpIpvpn represents the /nokia-conf/configure/service/vprn/bgp-ipvpn YANG schema element.
type NokiaConf_Configure_Service_Vprn_BgpIpvpn struct {
	Mpls             *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls                       `path:"mpls" module:"nokia-conf"`
	SegmentRoutingV6 map[int32]*NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6 `path:"segment-routing-v6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_BgpIpvpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_BgpIpvpn) IsYANGGoStruct() {}

// NewSegmentRoutingV6 creates a new entry in the SegmentRoutingV6 list of the
// NokiaConf_Configure_Service_Vprn_BgpIpvpn struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn) NewSegmentRoutingV6(BgpInstance int32) (*NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SegmentRoutingV6 == nil {
		t.SegmentRoutingV6 = make(map[int32]*NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6)
	}

	key := BgpInstance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SegmentRoutingV6[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SegmentRoutingV6", key)
	}

	t.SegmentRoutingV6[key] = &NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6{
		BgpInstance: &BgpInstance,
	}

	return t.SegmentRoutingV6[key], nil
}

// RenameSegmentRoutingV6 renames an entry in the list SegmentRoutingV6 within
// the NokiaConf_Configure_Service_Vprn_BgpIpvpn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn) RenameSegmentRoutingV6(oldK, newK int32) error {
	if _, ok := t.SegmentRoutingV6[newK]; ok {
		return fmt.Errorf("key %v already exists in SegmentRoutingV6", newK)
	}

	e, ok := t.SegmentRoutingV6[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SegmentRoutingV6", oldK)
	}
	e.BgpInstance = &newK

	t.SegmentRoutingV6[newK] = e
	delete(t.SegmentRoutingV6, oldK)
	return nil
}

// GetOrCreateSegmentRoutingV6 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_BgpIpvpn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn) GetOrCreateSegmentRoutingV6(BgpInstance int32) *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6 {

	key := BgpInstance

	if v, ok := t.SegmentRoutingV6[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSegmentRoutingV6(BgpInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSegmentRoutingV6 got unexpected error: %v", err))
	}
	return v
}

// GetSegmentRoutingV6 retrieves the value with the specified key from
// the SegmentRoutingV6 map field of NokiaConf_Configure_Service_Vprn_BgpIpvpn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn) GetSegmentRoutingV6(BgpInstance int32) *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6 {

	if t == nil {
		return nil
	}

	key := BgpInstance

	if lm, ok := t.SegmentRoutingV6[key]; ok {
		return lm
	}
	return nil
}

// DeleteSegmentRoutingV6 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Service_Vprn_BgpIpvpn. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn) DeleteSegmentRoutingV6(BgpInstance int32) {
	key := BgpInstance

	delete(t.SegmentRoutingV6, key)
}

// AppendSegmentRoutingV6 appends the supplied NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6 struct to the
// list SegmentRoutingV6 of NokiaConf_Configure_Service_Vprn_BgpIpvpn. If the key value(s) specified in
// the supplied NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn) AppendSegmentRoutingV6(v *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6) error {
	if v.BgpInstance == nil {
		return fmt.Errorf("invalid nil key received for BgpInstance")
	}

	key := *v.BgpInstance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SegmentRoutingV6 == nil {
		t.SegmentRoutingV6 = make(map[int32]*NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6)
	}

	if _, ok := t.SegmentRoutingV6[key]; ok {
		return fmt.Errorf("duplicate key for list SegmentRoutingV6 %v", key)
	}

	t.SegmentRoutingV6[key] = v
	return nil
}

// GetOrCreateMpls retrieves the value of the Mpls field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn) GetOrCreateMpls() *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls {
	if t.Mpls != nil {
		return t.Mpls
	}
	t.Mpls = &NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls{}
	return t.Mpls
}

// GetMpls returns the value of the Mpls struct pointer
// from NokiaConf_Configure_Service_Vprn_BgpIpvpn. If the receiver or the field Mpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn) GetMpls() *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls {
	if t != nil && t.Mpls != nil {
		return t.Mpls
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_BgpIpvpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Mpls.PopulateDefaults()
	for _, e := range t.SegmentRoutingV6 {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_BgpIpvpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_BgpIpvpn.
func (*NokiaConf_Configure_Service_Vprn_BgpIpvpn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls represents the /nokia-conf/configure/service/vprn/bgp-ipvpn/mpls YANG schema element.
type NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls struct {
	AdminState              E_NokiaTypesSros_AdminState                                             `path:"admin-state" module:"nokia-conf"`
	AutoBindTunnel          *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel          `path:"auto-bind-tunnel" module:"nokia-conf"`
	DomainId                *string                                                                 `path:"domain-id" module:"nokia-conf"`
	DynamicEgressLabelLimit *bool                                                                   `path:"dynamic-egress-label-limit" module:"nokia-conf"`
	RouteDistinguisher      NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_RouteDistinguisher_Union `path:"route-distinguisher" module:"nokia-conf"`
	VrfExport               *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfExport               `path:"vrf-export" module:"nokia-conf" yangPresence:"true"`
	VrfImport               *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfImport               `path:"vrf-import" module:"nokia-conf" yangPresence:"true"`
	VrfTarget               *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfTarget               `path:"vrf-target" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls) IsYANGGoStruct() {}

// GetOrCreateAutoBindTunnel retrieves the value of the AutoBindTunnel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls) GetOrCreateAutoBindTunnel() *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel {
	if t.AutoBindTunnel != nil {
		return t.AutoBindTunnel
	}
	t.AutoBindTunnel = &NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel{}
	return t.AutoBindTunnel
}

// GetOrCreateVrfExport retrieves the value of the VrfExport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls) GetOrCreateVrfExport() *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfExport {
	if t.VrfExport != nil {
		return t.VrfExport
	}
	t.VrfExport = &NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfExport{}
	return t.VrfExport
}

// GetOrCreateVrfImport retrieves the value of the VrfImport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls) GetOrCreateVrfImport() *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfImport {
	if t.VrfImport != nil {
		return t.VrfImport
	}
	t.VrfImport = &NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfImport{}
	return t.VrfImport
}

// GetOrCreateVrfTarget retrieves the value of the VrfTarget field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls) GetOrCreateVrfTarget() *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfTarget {
	if t.VrfTarget != nil {
		return t.VrfTarget
	}
	t.VrfTarget = &NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfTarget{}
	return t.VrfTarget
}

// GetAutoBindTunnel returns the value of the AutoBindTunnel struct pointer
// from NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls. If the receiver or the field AutoBindTunnel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls) GetAutoBindTunnel() *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel {
	if t != nil && t.AutoBindTunnel != nil {
		return t.AutoBindTunnel
	}
	return nil
}

// GetVrfExport returns the value of the VrfExport struct pointer
// from NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls. If the receiver or the field VrfExport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls) GetVrfExport() *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfExport {
	if t != nil && t.VrfExport != nil {
		return t.VrfExport
	}
	return nil
}

// GetVrfImport returns the value of the VrfImport struct pointer
// from NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls. If the receiver or the field VrfImport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls) GetVrfImport() *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfImport {
	if t != nil && t.VrfImport != nil {
		return t.VrfImport
	}
	return nil
}

// GetVrfTarget returns the value of the VrfTarget struct pointer
// from NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls. If the receiver or the field VrfTarget is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls) GetVrfTarget() *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfTarget {
	if t != nil && t.VrfTarget != nil {
		return t.VrfTarget
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDomainId retrieves the value of the leaf DomainId from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainId is set, it can
// safely use t.GetDomainId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls) GetDomainId() string {
	if t == nil || t.DomainId == nil {
		return ""
	}
	return *t.DomainId
}

// GetDynamicEgressLabelLimit retrieves the value of the leaf DynamicEgressLabelLimit from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicEgressLabelLimit is set, it can
// safely use t.GetDynamicEgressLabelLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicEgressLabelLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls) GetDynamicEgressLabelLimit() bool {
	if t == nil || t.DynamicEgressLabelLimit == nil {
		return false
	}
	return *t.DynamicEgressLabelLimit
}

// GetRouteDistinguisher retrieves the value of the leaf RouteDistinguisher from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteDistinguisher is set, it can
// safely use t.GetRouteDistinguisher() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteDistinguisher == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls) GetRouteDistinguisher() NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_RouteDistinguisher_Union {
	if t == nil || t.RouteDistinguisher == nil {
		return nil
	}
	return t.RouteDistinguisher
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.DynamicEgressLabelLimit == nil {
		var v bool = false
		t.DynamicEgressLabelLimit = &v
	}
	t.AutoBindTunnel.PopulateDefaults()
	t.VrfExport.PopulateDefaults()
	t.VrfImport.PopulateDefaults()
	t.VrfTarget.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls.
func (*NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel represents the /nokia-conf/configure/service/vprn/bgp-ipvpn/mpls/auto-bind-tunnel YANG schema element.
type NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel struct {
	AllowFlexAlgoFallback      *bool                                                                           `path:"allow-flex-algo-fallback" module:"nokia-conf"`
	ApplyGroups                []string                                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude         []string                                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	Ecmp                       *uint32                                                                         `path:"ecmp" module:"nokia-conf"`
	EnforceStrictTunnelTagging *bool                                                                           `path:"enforce-strict-tunnel-tagging" module:"nokia-conf"`
	Resolution                 E_NokiaTypesServices_ResolveStatus                                              `path:"resolution" module:"nokia-conf"`
	ResolutionFilter           *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter `path:"resolution-filter" module:"nokia-conf"`
	WeightedEcmp               *bool                                                                           `path:"weighted-ecmp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel) IsYANGGoStruct() {}

// GetOrCreateResolutionFilter retrieves the value of the ResolutionFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel) GetOrCreateResolutionFilter() *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter {
	if t.ResolutionFilter != nil {
		return t.ResolutionFilter
	}
	t.ResolutionFilter = &NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter{}
	return t.ResolutionFilter
}

// GetResolutionFilter returns the value of the ResolutionFilter struct pointer
// from NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel. If the receiver or the field ResolutionFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel) GetResolutionFilter() *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter {
	if t != nil && t.ResolutionFilter != nil {
		return t.ResolutionFilter
	}
	return nil
}

// GetAllowFlexAlgoFallback retrieves the value of the leaf AllowFlexAlgoFallback from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowFlexAlgoFallback is set, it can
// safely use t.GetAllowFlexAlgoFallback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowFlexAlgoFallback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel) GetAllowFlexAlgoFallback() bool {
	if t == nil || t.AllowFlexAlgoFallback == nil {
		return false
	}
	return *t.AllowFlexAlgoFallback
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEcmp retrieves the value of the leaf Ecmp from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ecmp is set, it can
// safely use t.GetEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ecmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel) GetEcmp() uint32 {
	if t == nil || t.Ecmp == nil {
		return 1
	}
	return *t.Ecmp
}

// GetEnforceStrictTunnelTagging retrieves the value of the leaf EnforceStrictTunnelTagging from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnforceStrictTunnelTagging is set, it can
// safely use t.GetEnforceStrictTunnelTagging() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnforceStrictTunnelTagging == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel) GetEnforceStrictTunnelTagging() bool {
	if t == nil || t.EnforceStrictTunnelTagging == nil {
		return false
	}
	return *t.EnforceStrictTunnelTagging
}

// GetResolution retrieves the value of the leaf Resolution from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Resolution is set, it can
// safely use t.GetResolution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Resolution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel) GetResolution() E_NokiaTypesServices_ResolveStatus {
	if t == nil || t.Resolution == 0 {
		return NokiaTypesServices_ResolveStatus_none
	}
	return t.Resolution
}

// GetWeightedEcmp retrieves the value of the leaf WeightedEcmp from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WeightedEcmp is set, it can
// safely use t.GetWeightedEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WeightedEcmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel) GetWeightedEcmp() bool {
	if t == nil || t.WeightedEcmp == nil {
		return false
	}
	return *t.WeightedEcmp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowFlexAlgoFallback == nil {
		var v bool = false
		t.AllowFlexAlgoFallback = &v
	}
	if t.Ecmp == nil {
		var v uint32 = 1
		t.Ecmp = &v
	}
	if t.EnforceStrictTunnelTagging == nil {
		var v bool = false
		t.EnforceStrictTunnelTagging = &v
	}
	if t.Resolution == 0 {
		t.Resolution = NokiaTypesServices_ResolveStatus_none
	}
	if t.WeightedEcmp == nil {
		var v bool = false
		t.WeightedEcmp = &v
	}
	t.ResolutionFilter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel.
func (*NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter represents the /nokia-conf/configure/service/vprn/bgp-ipvpn/mpls/auto-bind-tunnel/resolution-filter YANG schema element.
type NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter struct {
	Bgp           *bool `path:"bgp" module:"nokia-conf"`
	Gre           *bool `path:"gre" module:"nokia-conf"`
	Ldp           *bool `path:"ldp" module:"nokia-conf"`
	MplsFwdPolicy *bool `path:"mpls-fwd-policy" module:"nokia-conf"`
	RibApi        *bool `path:"rib-api" module:"nokia-conf"`
	Rsvp          *bool `path:"rsvp" module:"nokia-conf"`
	SrIsis        *bool `path:"sr-isis" module:"nokia-conf"`
	SrOspf        *bool `path:"sr-ospf" module:"nokia-conf"`
	SrOspf3       *bool `path:"sr-ospf3" module:"nokia-conf"`
	SrPolicy      *bool `path:"sr-policy" module:"nokia-conf"`
	SrTe          *bool `path:"sr-te" module:"nokia-conf"`
	Udp           *bool `path:"udp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter) IsYANGGoStruct() {
}

// GetBgp retrieves the value of the leaf Bgp from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bgp is set, it can
// safely use t.GetBgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetBgp() bool {
	if t == nil || t.Bgp == nil {
		return true
	}
	return *t.Bgp
}

// GetGre retrieves the value of the leaf Gre from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gre is set, it can
// safely use t.GetGre() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gre == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetGre() bool {
	if t == nil || t.Gre == nil {
		return false
	}
	return *t.Gre
}

// GetLdp retrieves the value of the leaf Ldp from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ldp is set, it can
// safely use t.GetLdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ldp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetLdp() bool {
	if t == nil || t.Ldp == nil {
		return false
	}
	return *t.Ldp
}

// GetMplsFwdPolicy retrieves the value of the leaf MplsFwdPolicy from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsFwdPolicy is set, it can
// safely use t.GetMplsFwdPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsFwdPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetMplsFwdPolicy() bool {
	if t == nil || t.MplsFwdPolicy == nil {
		return false
	}
	return *t.MplsFwdPolicy
}

// GetRibApi retrieves the value of the leaf RibApi from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RibApi is set, it can
// safely use t.GetRibApi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RibApi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetRibApi() bool {
	if t == nil || t.RibApi == nil {
		return false
	}
	return *t.RibApi
}

// GetRsvp retrieves the value of the leaf Rsvp from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rsvp is set, it can
// safely use t.GetRsvp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rsvp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetRsvp() bool {
	if t == nil || t.Rsvp == nil {
		return false
	}
	return *t.Rsvp
}

// GetSrIsis retrieves the value of the leaf SrIsis from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrIsis is set, it can
// safely use t.GetSrIsis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrIsis == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetSrIsis() bool {
	if t == nil || t.SrIsis == nil {
		return false
	}
	return *t.SrIsis
}

// GetSrOspf retrieves the value of the leaf SrOspf from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrOspf is set, it can
// safely use t.GetSrOspf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrOspf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetSrOspf() bool {
	if t == nil || t.SrOspf == nil {
		return false
	}
	return *t.SrOspf
}

// GetSrOspf3 retrieves the value of the leaf SrOspf3 from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrOspf3 is set, it can
// safely use t.GetSrOspf3() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrOspf3 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetSrOspf3() bool {
	if t == nil || t.SrOspf3 == nil {
		return false
	}
	return *t.SrOspf3
}

// GetSrPolicy retrieves the value of the leaf SrPolicy from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrPolicy is set, it can
// safely use t.GetSrPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetSrPolicy() bool {
	if t == nil || t.SrPolicy == nil {
		return false
	}
	return *t.SrPolicy
}

// GetSrTe retrieves the value of the leaf SrTe from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrTe is set, it can
// safely use t.GetSrTe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrTe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetSrTe() bool {
	if t == nil || t.SrTe == nil {
		return false
	}
	return *t.SrTe
}

// GetUdp retrieves the value of the leaf Udp from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Udp is set, it can
// safely use t.GetUdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Udp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetUdp() bool {
	if t == nil || t.Udp == nil {
		return false
	}
	return *t.Udp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Bgp == nil {
		var v bool = true
		t.Bgp = &v
	}
	if t.Gre == nil {
		var v bool = false
		t.Gre = &v
	}
	if t.Ldp == nil {
		var v bool = false
		t.Ldp = &v
	}
	if t.MplsFwdPolicy == nil {
		var v bool = false
		t.MplsFwdPolicy = &v
	}
	if t.RibApi == nil {
		var v bool = false
		t.RibApi = &v
	}
	if t.Rsvp == nil {
		var v bool = false
		t.Rsvp = &v
	}
	if t.SrIsis == nil {
		var v bool = false
		t.SrIsis = &v
	}
	if t.SrOspf == nil {
		var v bool = false
		t.SrOspf = &v
	}
	if t.SrOspf3 == nil {
		var v bool = false
		t.SrOspf3 = &v
	}
	if t.SrPolicy == nil {
		var v bool = false
		t.SrPolicy = &v
	}
	if t.SrTe == nil {
		var v bool = false
		t.SrTe = &v
	}
	if t.Udp == nil {
		var v bool = false
		t.Udp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter.
func (*NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_AutoBindTunnel_ResolutionFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfExport represents the /nokia-conf/configure/service/vprn/bgp-ipvpn/mpls/vrf-export YANG schema element.
type NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfExport struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Policy             []string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfExport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfExport) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfExport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfExport) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfExport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfExport) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfExport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfExport) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfExport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfExport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfExport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfExport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfExport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfExport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfExport.
func (*NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfExport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfImport represents the /nokia-conf/configure/service/vprn/bgp-ipvpn/mpls/vrf-import YANG schema element.
type NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfImport struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Policy             []string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfImport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfImport) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfImport) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfImport) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfImport) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfImport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfImport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfImport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfImport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfImport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfImport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfImport.
func (*NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfImport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfTarget represents the /nokia-conf/configure/service/vprn/bgp-ipvpn/mpls/vrf-target YANG schema element.
type NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfTarget struct {
	Community       *string `path:"community" module:"nokia-conf"`
	ExportCommunity *string `path:"export-community" module:"nokia-conf"`
	ImportCommunity *string `path:"import-community" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfTarget implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfTarget) IsYANGGoStruct() {}

// GetCommunity retrieves the value of the leaf Community from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Community is set, it can
// safely use t.GetCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Community == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfTarget) GetCommunity() string {
	if t == nil || t.Community == nil {
		return ""
	}
	return *t.Community
}

// GetExportCommunity retrieves the value of the leaf ExportCommunity from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportCommunity is set, it can
// safely use t.GetExportCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportCommunity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfTarget) GetExportCommunity() string {
	if t == nil || t.ExportCommunity == nil {
		return ""
	}
	return *t.ExportCommunity
}

// GetImportCommunity retrieves the value of the leaf ImportCommunity from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportCommunity is set, it can
// safely use t.GetImportCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportCommunity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfTarget) GetImportCommunity() string {
	if t == nil || t.ImportCommunity == nil {
		return ""
	}
	return *t.ImportCommunity
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfTarget
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfTarget) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfTarget) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfTarget"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfTarget) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfTarget) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfTarget.
func (*NokiaConf_Configure_Service_Vprn_BgpIpvpn_Mpls_VrfTarget) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6 represents the /nokia-conf/configure/service/vprn/bgp-ipvpn/segment-routing-v6 YANG schema element.
type NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6 struct {
	AdminState         E_NokiaTypesSros_AdminState                                                         `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                            `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                            `path:"apply-groups-exclude" module:"nokia-conf"`
	BgpInstance        *int32                                                                              `path:"bgp-instance" module:"nokia-conf"`
	DefaultRouteTag    *string                                                                             `path:"default-route-tag" module:"nokia-conf"`
	DomainId           *string                                                                             `path:"domain-id" module:"nokia-conf"`
	RouteDistinguisher NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_RouteDistinguisher_Union `path:"route-distinguisher" module:"nokia-conf"`
	SourceAddress      *string                                                                             `path:"source-address" module:"nokia-conf"`
	Srv6               *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_Srv6                    `path:"srv6" module:"nokia-conf"`
	VrfExport          *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfExport               `path:"vrf-export" module:"nokia-conf" yangPresence:"true"`
	VrfImport          *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfImport               `path:"vrf-import" module:"nokia-conf" yangPresence:"true"`
	VrfTarget          *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfTarget               `path:"vrf-target" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6) IsYANGGoStruct() {}

// GetOrCreateSrv6 retrieves the value of the Srv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6) GetOrCreateSrv6() *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_Srv6 {
	if t.Srv6 != nil {
		return t.Srv6
	}
	t.Srv6 = &NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_Srv6{}
	return t.Srv6
}

// GetOrCreateVrfExport retrieves the value of the VrfExport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6) GetOrCreateVrfExport() *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfExport {
	if t.VrfExport != nil {
		return t.VrfExport
	}
	t.VrfExport = &NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfExport{}
	return t.VrfExport
}

// GetOrCreateVrfImport retrieves the value of the VrfImport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6) GetOrCreateVrfImport() *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfImport {
	if t.VrfImport != nil {
		return t.VrfImport
	}
	t.VrfImport = &NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfImport{}
	return t.VrfImport
}

// GetOrCreateVrfTarget retrieves the value of the VrfTarget field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6) GetOrCreateVrfTarget() *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfTarget {
	if t.VrfTarget != nil {
		return t.VrfTarget
	}
	t.VrfTarget = &NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfTarget{}
	return t.VrfTarget
}

// GetSrv6 returns the value of the Srv6 struct pointer
// from NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6. If the receiver or the field Srv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6) GetSrv6() *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_Srv6 {
	if t != nil && t.Srv6 != nil {
		return t.Srv6
	}
	return nil
}

// GetVrfExport returns the value of the VrfExport struct pointer
// from NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6. If the receiver or the field VrfExport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6) GetVrfExport() *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfExport {
	if t != nil && t.VrfExport != nil {
		return t.VrfExport
	}
	return nil
}

// GetVrfImport returns the value of the VrfImport struct pointer
// from NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6. If the receiver or the field VrfImport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6) GetVrfImport() *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfImport {
	if t != nil && t.VrfImport != nil {
		return t.VrfImport
	}
	return nil
}

// GetVrfTarget returns the value of the VrfTarget struct pointer
// from NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6. If the receiver or the field VrfTarget is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6) GetVrfTarget() *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfTarget {
	if t != nil && t.VrfTarget != nil {
		return t.VrfTarget
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBgpInstance retrieves the value of the leaf BgpInstance from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpInstance is set, it can
// safely use t.GetBgpInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6) GetBgpInstance() int32 {
	if t == nil || t.BgpInstance == nil {
		return 0
	}
	return *t.BgpInstance
}

// GetDefaultRouteTag retrieves the value of the leaf DefaultRouteTag from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultRouteTag is set, it can
// safely use t.GetDefaultRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultRouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6) GetDefaultRouteTag() string {
	if t == nil || t.DefaultRouteTag == nil {
		return ""
	}
	return *t.DefaultRouteTag
}

// GetDomainId retrieves the value of the leaf DomainId from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainId is set, it can
// safely use t.GetDomainId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6) GetDomainId() string {
	if t == nil || t.DomainId == nil {
		return ""
	}
	return *t.DomainId
}

// GetRouteDistinguisher retrieves the value of the leaf RouteDistinguisher from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteDistinguisher is set, it can
// safely use t.GetRouteDistinguisher() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteDistinguisher == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6) GetRouteDistinguisher() NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_RouteDistinguisher_Union {
	if t == nil || t.RouteDistinguisher == nil {
		return nil
	}
	return t.RouteDistinguisher
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Srv6.PopulateDefaults()
	t.VrfExport.PopulateDefaults()
	t.VrfImport.PopulateDefaults()
	t.VrfTarget.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6) ΛListKeyMap() (map[string]interface{}, error) {
	if t.BgpInstance == nil {
		return nil, fmt.Errorf("nil value for key BgpInstance")
	}

	return map[string]interface{}{
		"bgp-instance": *t.BgpInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6.
func (*NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_Srv6 represents the /nokia-conf/configure/service/vprn/bgp-ipvpn/segment-routing-v6/srv6 YANG schema element.
type NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_Srv6 struct {
	DefaultLocator *string `path:"default-locator" module:"nokia-conf"`
	Instance       *int32  `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_Srv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_Srv6) IsYANGGoStruct() {}

// GetDefaultLocator retrieves the value of the leaf DefaultLocator from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_Srv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultLocator is set, it can
// safely use t.GetDefaultLocator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultLocator == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_Srv6) GetDefaultLocator() string {
	if t == nil || t.DefaultLocator == nil {
		return ""
	}
	return *t.DefaultLocator
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_Srv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_Srv6) GetInstance() int32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_Srv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_Srv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_Srv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_Srv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_Srv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_Srv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_Srv6.
func (*NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_Srv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfExport represents the /nokia-conf/configure/service/vprn/bgp-ipvpn/segment-routing-v6/vrf-export YANG schema element.
type NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfExport struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Policy             []string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfExport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfExport) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfExport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfExport) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfExport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfExport) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfExport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfExport) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfExport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfExport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfExport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfExport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfExport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfExport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfExport.
func (*NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfExport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfImport represents the /nokia-conf/configure/service/vprn/bgp-ipvpn/segment-routing-v6/vrf-import YANG schema element.
type NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfImport struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Policy             []string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfImport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfImport) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfImport) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfImport) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfImport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfImport) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfImport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfImport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfImport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfImport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfImport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfImport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfImport.
func (*NokiaConf_Configure_Service_Vprn_BgpIpvpn_SegmentRoutingV6_VrfImport) ΛBelongingModule() string {
	return "nokia-conf"
}
